%csmethodmodifiers getLibSBMLVersion "
/**
 * Returns the version number of this copy of libSBML as an integer.
 *
 * @return the libSBML version as an integer; version 1.2.3 becomes 10203.
 */ public
";


%csmethodmodifiers getLibSBMLDottedVersion "
/**
 * Returns the version number of this copy of libSBML as a string.
 *
 * @return the libSBML version as a string; version 1.2.3 becomes
 * \'1.2.3\'.
 *
 * @see getLibSBMLVersionString()
 */ public
";


%csmethodmodifiers getLibSBMLVersionString "
/**
 * Returns the version number of this copy of libSBML as a string without
 * periods.
 *
 * @return the libSBML version as a string: version 1.2.3 becomes \'10203\'.
 *
 * @see getLibSBMLDottedVersion()
 */ public
";


%csmethodmodifiers OperationReturnValue_toString(int returnValue) "
/**
 * This method takes an SBML operation return value and returns a string representing
 * the code.
 *
 * @return a human readable name for the given
 * @if clike #OperationReturnValues_t value@else operation return value @endif.
 *
 * @note The caller does not own the returned string and is therefore not
 * allowed to modify it.
 */ public
";


%csmethodmodifiers IdList::append(const std::string id) "
/**
   * Appends id to the list of ids.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers IdList::contains(const std::string id) const "
/**
   * Returns true if id is already in this IdList, false otherwise.
   *
   * @return true if id is already in this IdList, false otherwise.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers IdList::removeIdsBefore(const std::string id) "
/**
   * Removes all ids in this IdList before the given @p id.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers IdList::size() const "
/**
   * Returns the number of ids in this IdList.
   *
   * @return the number of ids in this IdList.
   */ /* libsbml-internal */ public
";


%typemap(csimports) SBMLReader "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Methods for reading SBML from files and text strings.
 *
 * @htmlinclude not-sbml-warning.html
 *
 * The SBMLReader class provides the main interface for reading SBML
 * content from files and strings.  The methods for reading SBML all return
 * an SBMLDocument object representing the results.
 *
 * In the case of failures (such as if the SBML contains errors or a file
 * cannot be read), the errors will be recorded with the SBMLErrorLog
 * object kept in the SBMLDocument returned by SBMLReader.  Consequently,
 * immediately after calling a method on SBMLReader, callers should always
 * check for errors and warnings using the methods for this purpose
 * provided by SBMLDocument.
 *
 * For convenience as well as easy access from other languages besides C++,
 * this file also defines two global functions,
 * libsbml::readSBML(@if java String filename@endif)
 * and libsbml::readSBMLFromString(@if java String xml@endif).
 * They are equivalent to creating an SBMLReader
 * object and then calling the
 * SBMLReader::readSBML(@if java String filename@endif) or
 * SBMLReader::readSBMLFromString(@if java String xml@endif)
 * methods, respectively.
 *
 * @section compression Support for reading compressed files
 *
 * LibSBML provides support for reading (as well as writing) compressed
 * SBML files.  The process is transparent to the calling
 * application&mdash;the application does not need to do anything
 * deliberate to invoke the functionality.  If a given SBML filename ends
 * with an extension for the @em gzip, @em zip or @em bzip2 compression
 * formats (respectively, @c .gz, @c .zip, or @c .bz2), then the methods
 * SBMLReader::readSBML(@if java String filename@endif) and
 * SBMLWriter::writeSBML(@if java SBMLDocument d, String filename@endif)
 * will automatically decompress and compress the file while writing and
 * reading it.  If the filename has no such extension, it
 * will be read and written uncompressed as normal.
 *
 * The compression feature requires that the @em zlib (for @em gzip and @em
 * zip formats) and/or @em bzip2 (for @em bzip2 format) be available on the
 * system running libSBML, and that libSBML was configured with their
 * support compiled-in.  Please see the libSBML @if clike <a href=\'libsbml-installation.html\'>installation instructions</a> @endif@if python <a href=\'libsbml-installation.html\'>installation instructions</a> @endif@if java  <a href=\'../../../libsbml-installation.html\'>installation instructions</a> @endif for more information about this.  The methods
 * @if java SBMLReader::hasZlib()@else hasZlib()@endif and
 * @if java SBMLReader::hasBzip2()@else hasBzip2()@endif
 * can be used by an application to query at run-time whether support
 * for the compression libraries is available in the present copy of
 * libSBML.
 *
 * Support for compression is not mandated by the SBML standard, but
 * applications may find it helpful, particularly when large SBML models
 * are being communicated across data links of limited bandwidth.
 */
"


%csmethodmodifiers SBMLReader::SBMLReader "
/**
   * Creates a new SBMLReader and returns it. 
   *
   * The libSBML SBMLReader objects offer methods for reading SBML in
   * XML form from files and text strings.
   */ public
";


%csmethodmodifiers SBMLReader::readSBML(const std::string& filename) "
/**
   * Reads an SBML document from a file.
   *
   * This method is identical to SBMLReader::readSBMLFromFile(@if java String filename@endif).
   *
   * If the file named @p filename does not exist or its content is not
   * valid SBML, one or more errors will be logged with the SBMLDocument
   * object returned by this method.  Callers can use the methods on
   * SBMLDocument such as SBMLDocument::getNumErrors() and
   * SBMLDocument::getError(@if java long n@endif) to get the errors.  The object returned by
   * SBMLDocument::getError(@if java long n@endif) is an SBMLError object, and it has methods to
   * get the error code, category, and severity level of the problem, as
   * well as a textual description of the problem.  The possible severity
   * levels range from informational messages to fatal errors; see the
   * documentation for SBMLError for more information.
   *
   * If the file @p filename could not be read, the file-reading error will
   * appear first.  The error code @if clike (a value drawn from the enumeration
   * #XMLErrorCode_t) @endif can provide a clue about what happened.  For example,
   * a file might be unreadable (either because it does not actually exist
   * or because the user does not have the necessary access priviledges to
   * read it) or some sort of file operation error may have been reported
   * by the underlying operating system.  Callers can check for these
   * situations using a program fragment such as the following:
   * @if clike
 @verbatim
 SBMLReader reader;
 SBMLDocument doc  = reader.readSBMLFromFile(filename);
 
 if (doc->getNumErrors() > 0)
 {
   if (doc->getError(0)->getErrorId() == XMLError::XMLFileUnreadable)
   {
     // Handle case of unreadable file here.
   } 
   else if (doc->getError(0)->getErrorId() == XMLError::XMLFileOperationError)
   {
     // Handle case of other file operation error here.
   }
   else
   {
     // Handle other cases -- see error codes defined in XMLErrorCode_t
     // for other possible cases to check.
   }
 }
 @endverbatim
 @endif@if java
 @verbatim
 SBMLReader reader = new SBMLReader();
 SBMLDocument doc  = reader.readSBMLFromFile(filename);
 
 if (doc.getNumErrors() > 0)
 {
     if (doc.getError(0).getErrorId() == libsbmlcs.libsbml.XMLFileUnreadable)
     {
         // Handle case of unreadable file here.
     } 
     else if (doc.getError(0).getErrorId() == libsbmlcs.libsbml.XMLFileOperationError)
     {
         // Handle case of other file operation error here.
     }
     else
     {
         // Handle other error cases.
     }
 }
 @endverbatim
 @endif@if python
 @verbatim
 reader = SBMLReader()
 doc    = reader.readSBMLFromFile(filename)
 
 if doc.getNumErrors() > 0:
   if doc.getError(0).getErrorId() == libsbml.XMLFileUnreadable:
     # Handle case of unreadable file here.
   elif doc.getError(0).getErrorId() == libsbml.XMLFileOperationError:
     # Handle case of other file error here.
   else:
     # Handle other error cases here.
   
 @endverbatim
 @endif@if csharp
 @verbatim
 SBMLReader reader = new SBMLReader();
 SBMLDocument doc = reader.readSBMLFromFile(filename);

 if (doc.getNumErrors() > 0)
 {
     if (doc.getError(0).getErrorId() == libsbmlcs.libsbml.XMLFileUnreadable)
     {
          // Handle case of unreadable file here.
     }
     else if (doc.getError(0).getErrorId() == libsbmlcs.libsbml.XMLFileOperationError)
     {
          // Handle case of other file operation error here.
     }
     else
     {
          // Handle other cases -- see error codes defined in XMLErrorCode_t
          // for other possible cases to check.
     }
  }
 @endverbatim
 @endif
   *
   * *
 * 
 * If the given filename ends with the suffix @c \'.gz\' (for example, @c
 * \'myfile.xml.gz\'), the file is assumed to be compressed in @em gzip
 * format and will be automatically decompressed upon reading.
 * Similarly, if the given filename ends with @c \'.zip\' or @c \'.bz2\', the
 * file is assumed to be compressed in @em zip or @em bzip2 format
 * (respectively).  Files whose names lack these suffixes will be read
 * uncompressed.  Note that if the file is in @em zip format but the
 * archive contains more than one file, only the first file in the
 * archive will be read and the rest ignored.
 *
   *
   * *
 * 
 * To read a gzip/zip file, libSBML needs to be configured and linked with the
 * <a target=\'_blank\' href=\'http://www.zlib.net/\'>zlib</a> library at compile
 * time.  It also needs to be linked with the <a target=\'_blank\'
 * href=\'\'>bzip2</a> library to read files in <em>bzip2</em> format.  (Both of
 * these are the default configurations for libSBML.)  Errors about unreadable
 * files will be logged if a compressed filename is given and libSBML was
 * <em>not</em> linked with the corresponding required library.
 *
 *
   *
   * @param filename the name or full pathname of the file to be read.
   *
   * @return a pointer to the SBMLDocument created from the SBML content.
   *
   * * 
 * @note LibSBML versions 2.x and later versions behave differently in
 * error handling in several respects.  One difference is how early some
 * errors are caught and whether libSBML continues processing a file in
 * the face of some early errors.  In general, libSBML versions after 2.x
 * stop parsing SBML inputs sooner than libSBML version 2.x in the face
 * of XML errors, because the errors may invalidate any further SBML
 * content.  For example, a missing XML declaration at the beginning of
 * the file was ignored by libSBML 2.x but in version 3.x and later, it
 * will cause libSBML to stop parsing the rest of the input altogether.
 * While this behavior may seem more severe and intolerant, it was
 * necessary in order to provide uniform behavior regardless of which
 * underlying XML parser (Expat, Xerces, libxml2) is being used by
 * libSBML.  The XML parsers themselves behave differently in their error
 * reporting, and sometimes libSBML has to resort to the lowest common
 * denominator.
   *
   * @see SBMLError
   * @see SBMLDocument
   */ public
";


%csmethodmodifiers SBMLReader::readSBMLFromFile(const std::string& filename) "
/**
   * Reads an SBML document from a file.
   *
   * This method is identical to SBMLReader::readSBML(@if java String filename@endif).
   *
   * If the file named @p filename does not exist or its content is not
   * valid SBML, one or more errors will be logged with the SBMLDocument
   * object returned by this method.  Callers can use the methods on
   * SBMLDocument such as SBMLDocument::getNumErrors() and
   * SBMLDocument::getError(@if java long n@endif) to get the errors.  The object returned by
   * SBMLDocument::getError(@if java long n@endif) is an SBMLError object, and it has methods to
   * get the error code, category, and severity level of the problem, as
   * well as a textual description of the problem.  The possible severity
   * levels range from informational messages to fatal errors; see the
   * documentation for SBMLError for more information.
   *
   * If the file @p filename could not be read, the file-reading error will
   * appear first.  The error code @if clike (a value drawn from the enumeration
   * #XMLErrorCode_t)@endif can provide a clue about what happened.  For example,
   * a file might be unreadable (either because it does not actually exist
   * or because the user does not have the necessary access priviledges to
   * read it) or some sort of file operation error may have been reported
   * by the underlying operating system.  Callers can check for these
   * situations using a program fragment such as the following:
   * @if clike
 @verbatim
 SBMLReader reader = new SBMLReader();
 SBMLDocument doc  = reader.readSBML(filename);
 
 if (doc->getNumErrors() > 0)
 {
   if (doc->getError(0)->getErrorId() == XMLError::FileUnreadable)
   {
     // Handle case of unreadable file here.
   } 
   else if (doc->getError(0)->getErrorId() == XMLError::FileOperationError)
   {
     // Handle case of other file operation error here.
   }
   else
   {
     // Handle other cases -- see error codes defined in XMLErrorCode_t
     // for other possible cases to check.
   }
 }
 @endverbatim
 @endif@if java
 @verbatim
 SBMLReader reader = new SBMLReader();
 SBMLDocument doc  = reader.readSBMLFromFile(filename);
 
 if (doc.getNumErrors() > 0)
 {
     if (doc.getError(0).getErrorId() == libsbmlcs.libsbml.XMLFileUnreadable)
     {
         // Handle case of unreadable file here.
     } 
     else if (doc.getError(0).getErrorId() == libsbmlcs.libsbml.XMLFileOperationError)
     {
         // Handle case of other file operation error here.
     }
     else
     {
         // Handle other error cases.
     }
 }
 @endverbatim
 @endif@if python
 @verbatim
 reader = SBMLReader()
 doc    = reader.readSBMLFromFile(filename)
 
 if doc.getNumErrors() > 0:
   if doc.getError(0).getErrorId() == libsbml.XMLFileUnreadable:
     # Handle case of unreadable file here.
   elif doc.getError(0).getErrorId() == libsbml.XMLFileOperationError:
     # Handle case of other file error here.
   else:
     # Handle other error cases here.
   
 @endverbatim
 @endif
   *
   * *
 * 
 * If the given filename ends with the suffix @c \'.gz\' (for example, @c
 * \'myfile.xml.gz\'), the file is assumed to be compressed in @em gzip
 * format and will be automatically decompressed upon reading.
 * Similarly, if the given filename ends with @c \'.zip\' or @c \'.bz2\', the
 * file is assumed to be compressed in @em zip or @em bzip2 format
 * (respectively).  Files whose names lack these suffixes will be read
 * uncompressed.  Note that if the file is in @em zip format but the
 * archive contains more than one file, only the first file in the
 * archive will be read and the rest ignored.
 *
   *
   * *
 * 
 * To read a gzip/zip file, libSBML needs to be configured and linked with the
 * <a target=\'_blank\' href=\'http://www.zlib.net/\'>zlib</a> library at compile
 * time.  It also needs to be linked with the <a target=\'_blank\'
 * href=\'\'>bzip2</a> library to read files in <em>bzip2</em> format.  (Both of
 * these are the default configurations for libSBML.)  Errors about unreadable
 * files will be logged if a compressed filename is given and libSBML was
 * <em>not</em> linked with the corresponding required library.
 *
 *
   *
   * @param filename the name or full pathname of the file to be read.
   *
   * @return a pointer to the SBMLDocument created from the SBML content.
   *
   * * 
 * @note LibSBML versions 2.x and later versions behave differently in
 * error handling in several respects.  One difference is how early some
 * errors are caught and whether libSBML continues processing a file in
 * the face of some early errors.  In general, libSBML versions after 2.x
 * stop parsing SBML inputs sooner than libSBML version 2.x in the face
 * of XML errors, because the errors may invalidate any further SBML
 * content.  For example, a missing XML declaration at the beginning of
 * the file was ignored by libSBML 2.x but in version 3.x and later, it
 * will cause libSBML to stop parsing the rest of the input altogether.
 * While this behavior may seem more severe and intolerant, it was
 * necessary in order to provide uniform behavior regardless of which
 * underlying XML parser (Expat, Xerces, libxml2) is being used by
 * libSBML.  The XML parsers themselves behave differently in their error
 * reporting, and sometimes libSBML has to resort to the lowest common
 * denominator.
   *
   * @see SBMLError
   * @see SBMLDocument
   */ public
";


%csmethodmodifiers SBMLReader::readSBMLFromString(const std::string& xml) "
/**
   * Reads an SBML document from the given XML string.
   *
   * This method is flexible with respect to the presence of an XML
   * declaration at the beginning of the string.  In particular, if the
   * string in @p xml does not begin with the XML declaration
   * <code>&lt;?xml version=\'1.0\' encoding=\'UTF-8\'?&gt;</code>, then this
   * method will automatically prepend the declaration to @p xml.
   *
   * This method will log a fatal error if the content given in the
   * parameter @p xml is not SBML.  See the method documentation for
   * SBMLReader::readSBML(@if java String filename@endif)
   * for an example of code for testing the returned error code.
   *
   * @param xml a string containing a full SBML model
   *
   * @return a pointer to the SBMLDocument created from the SBML content.
   *
   * @see SBMLReader::readSBML(@if java String filename@endif)
   */ public
";


%csmethodmodifiers SBMLReader::hasZlib "
/**
   * Static method; returns @c true if this copy of libSBML supports
   * <i>gzip</I> and <i>zip</i> format compression.
   *
   * @return @c true if libSBML has been linked with the <i>zlib</i>
   * library, @c false otherwise.
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., SBMLReader), and the other
   * will be a standalone top-level function with the name
   * SBMLReader_hasZlib(). They are functionally identical. @endif
   *
   * @see @if clike hasBzip2() @else SBMLReader::hasBzip2() @endif
   */ public
";


%csmethodmodifiers SBMLReader::hasBzip2 "
/**
   * Static method; returns @c true if this copy of libSBML supports
   * <i>bzip2</i> format compression.
   *
   * @return @c true if libSBML is linked with the <i>bzip2</i>
   * libraries, @c false otherwise.
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., SBMLReader), and the other
   * will be a standalone top-level function with the name
   * SBMLReader_hasBzip2(). They are functionally identical. @endif
   *
   * @see @if clike hasZlib() @else SBMLReader::hasZlib() @endif
   */ public
";


%csmethodmodifiers SBMLReader::readInternal(const char* content, bool isFile = true) "
/**
   * Used by readSBML() and readSBMLFromString().
   *
   * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
   */ /* libsbml-internal */ public
";


%csmethodmodifiers readSBML(const char *filename) "
/**
 * Reads an SBML document from the given file @p filename.
 *
 * If @p filename does not exist, or it is not an SBML file, an error will
 * be logged in the error log of the SBMLDocument object returned by this
 * method.  Calling programs can inspect this error log to determine
 * the nature of the problem.  Please refer to the definition of
 * SBMLDocument for more information about the error reporting mechanism.
 *
 * @return a pointer to the SBMLDocument read.
 */ public
";


%csmethodmodifiers readSBMLFromFile(const char *filename) "
/** */ public
";


%csmethodmodifiers readSBMLFromString(const char *xml) "
/**
 * Reads an SBML document from a string assumed to be in XML format.
 *
 * If the string does not begin with XML declaration,
 *@verbatim
<?xml version=\'1.0\' encoding=\'UTF-8\'?>
@endverbatim
 *
 * an XML declaration string will be prepended.
 *
 * This method will report an error if the given string @p xml is not SBML.
 * The error will be logged in the error log of the SBMLDocument object
 * returned by this method.  Calling programs can inspect this error log to
 * determine the nature of the problem.  Please refer to the definition of
 * SBMLDocument for more information about the error reporting mechanism.
 *
 * @return a pointer to the SBMLDocument read.
 */ public
";


%typemap(csimports) SBMLWriter "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Methods for writing SBML to files and text strings.
 *
 * @htmlinclude not-sbml-warning.html
 *
 * The SBMLWriter class is the converse of SBMLReader, and provides the
 * main interface for serializing SBML models into XML and writing the
 * result to an output stream or to files and text strings.  The methods 
 * for writing SBML all take an SBMLDocument object and a destination.  
 * They return a bool or integer value to indicate success or failure.
 *
 * @section compression Support for writing compressed files
 *
 * LibSBML provides support for writing (as well as reading) compressed
 * SBML files.  The process is transparent to the calling
 * application&mdash;the application does not need to do anything
 * deliberate to invoke the functionality.  If a given SBML filename ends
 * with an extension for the @em gzip, @em zip or @em bzip2 compression
 * formats (respectively, <code>&quot;.gz&quot;</code>,
 * <code>&quot;.zip&quot;</code>, or <code>&quot;.bz2&quot;</code>),
 * then the methods
 * SBMLWriter::writeSBML(@if java SBMLDocument d, String filename@endif)
 * and SBMLReader::readSBML(@if java String filename@endif)
 * will automatically compress and decompress the file while writing and
 * reading it.  If the filename has no such extension, it
 * will be written and read uncompressed as normal.
 *
 * The compression feature requires that the @em zlib (for @em gzip and @em
 * zip formats) and/or @em bzip2 (for @em bzip2 format) be available on the
 * system running libSBML, and that libSBML was configured with their
 * support compiled-in.  Please see the libSBML @if clike <a href=\'libsbml-installation.html\'>installation instructions</a>@endif@if python <a href=\'libsbml-installation.html\'>installation instructions</a>@endif@if java  <a href=\'../../../libsbml-installation.html\'>installation instructions</a>@endif for 
 * more information about this.  The methods
 * SBMLWriter::hasZlib() and
 * SBMLWriter::hasBzip2()
 * can be used by an application to query at run-time whether support
 * for the compression libraries is available in the present copy of
 * libSBML.
 *
 * Support for compression is not mandated by the SBML standard, but
 * applications may find it helpful, particularly when large SBML models
 * are being communicated across data links of limited bandwidth.
 */
"


%csmethodmodifiers SBMLWriter::SBMLWriter "
/**
   * Creates a new SBMLWriter.
   *
   * The libSBML SBMLWriter objects offer methods for writing SBML in
   * XML form to files and text strings.
   */ public
";


%csmethodmodifiers SBMLWriter::setProgramName(const std::string& name) "
/**
   * Sets the name of this program, i.e., the program that is about to
   * write out the SBMLDocument.
   *
   * If the program name and version are set (see
   * SBMLWriter::setProgramVersion(@if java String version@endif)), the
   * following XML comment, intended for human consumption, will be written
   * at the beginning of the XML document:
   * @verbatim
 <!-- Created by <program name> version <program version>
 on yyyy-MM-dd HH:mm with libSBML version <libsbml version>. -->
 @endverbatim
   *
   * If the program name and version are not set at some point before
   * calling the writeSBML() methods, no such comment is written out.
   *
   * @param name the name of this program (where \'this program\' refers to
   * program in which libSBML is embedded, not libSBML itself!)
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * 
   * @see setProgramVersion(string version)
   */ public
";


%csmethodmodifiers SBMLWriter::setProgramVersion(const std::string& version) "
/**
   * Sets the version of this program, i.e., the program that is about to
   * write out the SBMLDocument.
   *
   * If the program version and name are set (see
   * SBMLWriter::setProgramName(@if java String name@endif)), the
   * following XML comment, intended for human consumption, will be written
   * at the beginning of the document:
   * @verbatim
 <!-- Created by <program name> version <program version>
 on yyyy-MM-dd HH:mm with libSBML version <libsbml version>. -->
 @endverbatim
   *
   * If the program version and name are not set at some point before
   * calling the writeSBML() methods, no such comment is written out.
   *
   * @param version the version of this program (where \'this program\'
   * refers to program in which libSBML is embedded, not libSBML itself!)
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   *
   * @see setProgramName(string name)
   */ public
";


%csmethodmodifiers SBMLWriter::writeSBML(const SBMLDocument* d, const std::string& filename) "
/**
   * Writes the given SBML document to filename.
   *
   * @htmlinclude assuming-compressed-file.html
   *
   * @param d the SBML document to be written
   *
   * @param filename the name or full pathname of the file where the SBML
   * is to be written. 
   *
   * @return @c true on success and @c false if the filename could not be
   * opened for writing.
   *
   * @note @htmlinclude note-writing-zipped-files.html
   * 
   * @see setProgramVersion(string version)
   * @see setProgramName(string name)
   */ public
";


%csmethodmodifiers SBMLWriter::writeSBML(const SBMLDocument* d, std::ostream& stream) "
/**
   * Writes the given SBML document to the output stream.
   *
   * @param d the SBML document to be written
   *
   * @param stream the stream object where the SBML is to be written.
   *
   * @return @c true on success and @c false if one of the underlying
   * parser components fail (rare).
   * 
   * @see setProgramVersion(string version)
   * @see setProgramName(string name)
   */ public
";


%csmethodmodifiers SBMLWriter::writeToString(const SBMLDocument* d) "
/**
   * Writes the given SBML document to an in-memory string and returns a
   * pointer to it.
   *
   * The string is owned by the caller and should be freed (with @c free())
   * when no longer needed.
   *
   * @param d the SBML document to be written
   *
   * @return the string on success and @c 0 if one of the underlying parser
   * components fail.
   * 
   * @see setProgramVersion(string version)
   * @see setProgramName(string name)
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBMLWriter::writeSBMLToFile(const SBMLDocument* d, const std::string& filename) "
/**
   * Writes the given SBML document to filename.
   *
   * @htmlinclude assuming-compressed-file.html
   *
   * @param d the SBML document to be written
   *
   * @param filename the name or full pathname of the file where the SBML
   * is to be written. 
   *
   * @return @c true on success and @c false if the filename could not be
   * opened for writing.
   *
   * @note @htmlinclude note-writing-zipped-files.html
   * 
   * @see setProgramVersion(string version)
   * @see setProgramName(string name)
   */ public
";


%csmethodmodifiers SBMLWriter::writeSBMLToString(const SBMLDocument* d) "
/**
   * Writes the given SBML document to an in-memory string and returns a
   * pointer to it.
   *
   * The string is owned by the caller and should be freed (with @c free())
   * when no longer needed.
   *
   * @param d the SBML document to be written
   *
   * @return the string on success and @c 0 if one of the underlying parser
   * components fail.
   * 
   * @see setProgramVersion(string version)
   * @see setProgramName(string name)
   */ public
";


%csmethodmodifiers SBMLWriter::hasZlib "
/**
   * Predicate returning @c true if this copy of libSBML has been linked
   * with the <em>zlib</em> library.
   *
   * LibSBML supports reading and writing files compressed with either
   * bzip2 or zip/gzip compression.  The facility depends on libSBML having
   * been compiled with the necessary support libraries.  This method
   * allows a calling program to inquire whether that is the case for the
   * copy of libSBML it is using.
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., SBMLWriter), and the other
   * will be a standalone top-level function with the name
   * SBMLWriter_hasZlib(). They are functionally identical. @endif
   *
   * @return @c true if libSBML is linked with zlib, @c false otherwise.
   *
   * @see @if clike hasBzip2() @else SBMLWriter::hasBzip2() @endif
   */ public
";


%csmethodmodifiers SBMLWriter::hasBzip2 "
/**
   * Predicate returning @c true if this copy of libSBML has been linked
   * with the <em>bzip2</em> library.
   *
   * LibSBML supports reading and writing files compressed with either
   * bzip2 or zip/gzip compression.  The facility depends on libSBML having
   * been compiled with the necessary support libraries.  This method
   * allows a calling program to inquire whether that is the case for the
   * copy of libSBML it is using.
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., SBMLWriter), and the other
   * will be a standalone top-level function with the name
   * SBMLWriter_hasZlib(). They are functionally identical. @endif
   *
   * @return @c true if libSBML is linked with bzip2, @c false otherwise.
   *
   * @see @if clike hasZlib() @else SBMLWriter::hasZlib() @endif
   */ public
";


%csmethodmodifiers writeSBML(const SBMLDocument_t *d, const char *filename) "
/**
 * Writes the given SBML document @p d to the file named by @p filename.
 *
 * This function is identical to @if clike SBMLWriter::writeSBMLToFile (SBMLDocument_t *d, string filename)@endif@if java <a href=\'#writeSBMLToFile(org.sbml.libsbml.SBMLDocument, java.lang.String)\'><code>writeSBMLToFile(SBMLDocument d, String filename)</code></a>@endif.
 * 
 * @htmlinclude assuming-compressed-file.html
 *
 * @param d the SBMLDocument object to be written out in XML format
 * 
 * @param filename a string giving the path to a file where the XML
 * content is to be written.
 *
 * @return @c 1 on success and @c 0 (zero) if @p filename could not be
 * written.  Some possible reasons for failure include (a) being unable to
 * open the file, and (b) using a filename that indicates a compressed SBML
 * file (i.e., a filename ending in <code>&quot;.zip&quot;</code> or
 * similar) when the compression functionality has not been enabled in
 * the underlying copy of libSBML.
 *
 * @if clike @warning Note that the string is owned by the caller and
 * should be freed (with the normal string <code>free()</code> C++
 * function) after it is no longer needed.@endif
 *
 * @see SBMLWriter::hasZlib()
 * @see SBMLWriter::hasBzip2()
 */ public
";


%csmethodmodifiers writeSBMLToString(const SBMLDocument_t *d) "
/**
 * Writes the given SBML document @p d to an in-memory string and
 * returns the string.
 *
 * This is a convenience function that uses the
 * SBMLWriter::writeSBMLToString(SBMLDocument d) method internally,
 * yet does not require the caller to create an SBMLWriter object first.
 *
 * @param d an SBMLDocument object to be written out in XML format
 *
 * @return the string on success and @c null if one of the underlying parser
 * components fail.
 *
 * @if clike @warning Note that the string is owned by the caller and
 * should be freed (with the normal string <code>free()</code> C++
 * function) after it is no longer needed.@endif
 */ public
";


%csmethodmodifiers writeSBMLToFile(const SBMLDocument_t *d, const char *filename) "
/**
 * Writes the given SBML document @p d to the file @p filename.
 *
 * This is a convenience function that uses the
 * SBMLWriter::writeSBMLToFile(SBMLDocument d, string
 * filename) method internally, yet does not require the caller to create
 * an SBMLWriter object first.
 *
 * @htmlinclude assuming-compressed-file.html
 * 
 * @param d an SBMLDocument object to be written out in XML format
 *
 * @param filename a string giving the path to a file where the XML
 * content is to be written.
 *
 * @return @c 1 on success and @c 0 (zero) if @p filename could not be
 * written.  Some possible reasons for failure include (a) being unable to
 * open the file, and (b) using a filename that indicates a compressed SBML
 * file (i.e., a filename ending in <code>&quot;.zip&quot;</code> or
 * similar) when the compression functionality has not been enabled in
 * the underlying copy of libSBML.
 *
 * @if clike @warning Note that the string is owned by the caller and
 * should be freed (with the normal string <code>free()</code> C++
 * function) after it is no longer needed.@endif
 *
 * @see SBMLWriter::hasZlib()
 * @see SBMLWriter::hasBzip2()
 */ public
";


%csmethodmodifiers SBMLTypeCode_toString(int tc, const char* pkgName) "
/**
 * This method takes an SBML type code and returns a string representing
 * the code.
 *
 * @if clike LibSBML attaches an identifying code to every kind of SBML
 * object.  These are known as <em>SBML type codes</em>.  The set of
 * possible type codes is defined in the enumeration #SBMLTypeCode_t.
 * The names of the type codes all begin with the characters @c
 * SBML_. @endif@if java LibSBML attaches an identifying code to every
 * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
 * other languages, the set of type codes is stored in an enumeration; in
 * the Java language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class {@link
 * libsbmlConstants}.  The names of the type codes all begin with the
 * characters @c SBML_. @endif@if python LibSBML attaches an identifying
 * code to every kind of SBML object.  These are known as <em>SBML type
 * codes</em>.  In the Python language interface for libSBML, the type
 * codes are defined as static integer constants in the interface class
 * @link libsbml@endlink.  The names of the type codes all begin with the
 * characters @c SBML_. @endif@if csharp LibSBML attaches an identifying
 * code to every kind of SBML object.  These are known as <em>SBML type
 * codes</em>.  In the C# language interface for libSBML, the type codes
 * are defined as static integer constants in the interface class @link
 * libsbml@endlink.  The names of the type codes all begin with
 * the characters @c SBML_. @endif
 *
 * @return a human readable name for the given
 * @if clike #SBMLTypeCode_t value@else SBML type code@endif.
 *
 * @note The caller does not own the returned string and is therefore not
 * allowed to modify it.
 */ public
";


%typemap(csimports) SBase "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Implementation of %SBase, the base class of most SBML
 * objects.
 *
 * Most components in SBML are derived from a single abstract base type,
 * SBase.  In addition to serving as the parent class for most other
 * classes of objects in SBML, this base type is designed to allow a
 * modeler or a software package to attach arbitrary information to each
 * major element or list in an SBML model.
 *
 * SBase has an optional subelement called \'notes\'.  It is intended to
 * serve as a place for storing optional information intended to be seen by
 * humans.  An example use of the \'notes\' element would be to contain
 * formatted user comments about the model element in which the \'notes\'
 * element is enclosed.  There are certain conditions on the XHTML content
 * permitted inside the \'notes\' element; please consult the <a
 * target=\'_blank\' href=\'http://sbml.org/Documents/Specifications\'>SBML
 * specification document</a> corresponding to the SBML Level and Version
 * of your model for more information about the requirements for \'notes\'
 * content.
 *
 * SBase has another optional subelement called \'annotation\'.  Whereas the
 * \'notes\' element described above is a container for content to be shown
 * directly to humans, the \'annotation\' element is a container for optional
 * software-generated content @em not meant to be shown to humans.  The
 * element\'s content type is <a target=\'_blank\'
 * href=\'http://www.w3.org/TR/2004/REC-xml-20040204/#elemdecls\'>XML type
 * \'any\'</a>, allowing essentially arbitrary data content.  SBML places
 * only a few restrictions on the organization of the content; these are
 * intended to help software tools read and write the data as well as help
 * reduce conflicts between annotations added by different tools.  As is
 * the case with \'notes\', it is important to refer to the <a
 * target=\'_blank\' href=\'http://sbml.org/Documents/Specifications\'>SBML
 * specification document</a> corresponding to the SBML Level and Version
 * of your model for more information about the requirements for
 * \'annotation\' content.
 * 
 * It is worth pointing out that the \'annotation\' element in the definition
 * of SBase exists in order that software developers may attach optional
 * application-specific data to the elements in an SBML model.  However, it
 * is important that this facility not be misused.  In particular, it is
 * <em>critical</em> that data essential to a model definition or that can
 * be encoded in existing SBML elements is <em>not</em> stored in
 * \'annotation\'. Parameter values, functional dependencies between model
 * elements, etc., should not be recorded as annotations.  It is crucial to
 * keep in mind the fact that data placed in annotations can be freely
 * ignored by software applications.  If such data affects the
 * interpretation of a model, then software interoperability is greatly
 * impeded.
 *
 * SBML Level 2 introduced an optional SBase attribute named \'metaid\' for
 * supporting metadata annotations using RDF (<a target=\'_blank\'
 * href=\'http://www.w3.org/RDF/\'>Resource Description Format</a>). The
 * attribute value has the data type <a
 * href=\'http://www.w3.org/TR/REC-xml/#id\'>XML ID</a>, the XML identifier
 * type, which means each \'metaid\' value must be globally unique within an
 * SBML file.  (Importantly, this uniqueness criterion applies across any
 * attribute with type <a href=\'http://www.w3.org/TR/REC-xml/#id\'>XML
 * ID</a>, not just the \'metaid\' attribute used by SBML&mdash;something to
 * be aware of if your application-specific XML content inside the
 * \'annotation\' subelement happens to use <a
 * href=\'http://www.w3.org/TR/REC-xml/#id\'>XML ID</a>.)  The \'metaid\' value
 * serves to identify a model component for purposes such as referencing
 * that component from metadata placed within \'annotation\' subelements.
 *
 * Beginning with SBML Level 2 Version 3, SBase also has an optional
 * attribute named \'sboTerm\' for supporting the use of the Systems Biology
 * Ontology.  In SBML proper, the data type of the attribute is a string of
 * the form \'SBO:NNNNNNN\', where \'NNNNNNN\' is a seven digit integer number;
 * libSBML simplifies the representation by only storing the \'NNNNNNN\'
 * integer portion.  Thus, in libSBML, the \'sboTerm\' attribute on SBase has
 * data type @c int, and SBO identifiers are stored simply as integers.
 * (For convenience, SBase offers methods for returning both the integer
 * form and a text-string form of the SBO identifier.)  SBO terms are a
 * type of optional annotation, and each different class of SBML object
 * derived from SBase imposes its own requirements about the values
 * permitted for \'sboTerm\'.  Please consult the SBML Level&nbsp;2
 * Version&nbsp;4 specification for more information about the use of SBO
 * and the \'sboTerm\' attribute.
 *
 * Finally, note that, in the list of methods on SBase, there is no public
 * constructor because SBase is an abstract class.  The constructors reside
 * in the subclasses derived from SBase.
 *
 *
 * @section sbase-miriam Standard format for annotations linking data resources
 *
 * SBML Level 2 Versions 2, 3 and 4, and Level&nbsp;3, define a proposed
 * regular format for encoding two particular categories of annotations:
 * (a) references to controlled vocabulary terms and database identifiers
 * which define and describe biological and biochemical entities in a
 * model; and (b) descriptions of the provenance of a model, including its
 * author(s) and modification history.
 */
"


%csmethodmodifiers SBase::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor for this SBase object.
   *
   * @param v the SBMLVisitor instance to be used
   *
   * @return the result of calling <code>v.visit()</code>.
   */ public
";


%csmethodmodifiers SBase::clone() const "
/**
   * Creates and returns a deep copy of this SBase object.
   * 
   * @return a (deep) copy of this SBase object.
   */ public
";


%csmethodmodifiers SBase::getElementBySId(const std::string& id) "
/**
   * Returns the first child element found that has the given @p id in the
   * model-wide @c SId namespace, or @c null if no such object is found.
   *
   * @param id string representing the \'id\' attribute value of the object
   * to find.
   *
   * @return pointer to the first element found with the given identifier.
   */ public
";


%csmethodmodifiers SBase::getElementByMetaId(const std::string& metaid) "
/**
   * Returns the first child element it can find with a specific \'metaid\'
   * attribute value, or @c null if no such object is found.
   *
   * *
 * 
 * The optional attribute named \'metaid\', present on every major SBML
 * component type, is for supporting metadata annotations using RDF (<a
 * href=\'http://www.w3.org/RDF/\'>Resource Description Format</a>).  The
 * attribute value has the data type <a
 * href=\'http://www.w3.org/TR/REC-xml/#id\'>XML <code>ID</code></a>, the XML
 * identifier type, which means each \'metaid\' value must be globally unique
 * within an SBML file.  The latter point is important, because the
 * uniqueness criterion applies across <em>any</em> attribute with type
 * <code>ID</code> anywhere in the file, not just the \'metaid\' attribute used
 * by SBML&mdash;something to be aware of if your application-specific XML
 * content inside the \'annotation\' subelement happens to use the XML
 * <code>ID</code> type.  Although SBML itself specifies the use of <a
 * href=\'http://www.w3.org/TR/REC-xml/#id\'>XML <code>ID</code></a> only for
 * the \'metaid\' attribute, SBML-compatible applications should be careful if
 * they use XML <code>ID</code>\'s in XML portions of a model that are not
 * defined by SBML, such as in the application-specific content of the
 * \'annotation\' subelement.  Finally, note that LibSBML does not provide an
 * explicit XML <code>ID</code> data type; it uses ordinary character
 * strings, which is easier for applications to support.
 * 
 *
   *
   * @param metaid string representing the \'metaid\' attribute value of the
   * object to find.
   *
   * @return pointer to the first element found with the given meta-identifier.
   */ public
";


%csmethodmodifiers SBase::getAllElements(ElementFilter* filter=NULL) "
/**
   * Returns a List of all child SBase objects, including those nested to
   * an arbitrary depth.
   *
   * @return a pointer to a List of pointers to all children objects.
   */ public
";


%csmethodmodifiers SBase::renameSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames all the @c SIdRef attributes on this element, including any
   * found in MathML content (if such exists).
   *
   * *
 * 

 * In SBML, object identifiers are of a data type called <code>SId</code>.
 * In SBML Level&nbsp;3, an explicit data type called <code>SIdRef</code> was
 * introduced for attribute values that refer to <code>SId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to an identifier\', but the effective
 * data type was the same as <code>SIdRef</code>in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>SIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 *
 * 
   *
   * This method works by looking at all attributes and (if appropriate)
   * mathematical formulas, comparing the identifiers to the value of @p
   * oldid.  If any matches are found, the matching identifiers are replaced
   * with @p newid.  The method does @em not descend into child elements.
   *
   * @param oldid the old identifier
   * @param newid the new identifier
   */ public
";


%csmethodmodifiers SBase::renameMetaIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames all the meta-identifier attributes on this element.
   *
   * *
 * 
 * In SBML, object \'meta\' identifiers are of the XML data type <code>ID</code>;
 * the SBML object attribute itself is typically named <code>metaid</code>.  All
 * attributes that hold values <em>referring</em> to values of type
 * <code>ID</code> are of the XML data type <code>IDREF</code>.  They are also
 * sometimes informally referred to as \'metaid refs\', in analogy to the
 * SBML-defined type <code>SIdRef</code>.
 * 
 *
   *
   * This method works by looking at all meta-identifier attribute values,
   * comparing the identifiers to the value of @p oldid.  If any matches are
   * found, the matching identifiers are replaced with @p newid.  The method
   * does @em not descend into child elements.
   *
   * @param oldid the old identifier
   * @param newid the new identifier
   */ public
";


%csmethodmodifiers SBase::renameUnitSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames all the @c UnitSIdRef attributes on this element.
   *
   * *
 * 
 * In SBML, unit definitions have identifiers of type <code>UnitSId</code>.  In
 * SBML Level&nbsp;3, an explicit data type called <code>UnitSIdRef</code> was
 * introduced for attribute values that refer to <code>UnitSId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to a unit identifier\', but the effective
 * data type was the same as <code>UnitSIdRef</code> in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>UnitSIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 * 
 * 
   *
   * This method works by looking at all unit identifier attribute values
   * (including, if appropriate, inside mathematical formulas), comparing the
   * unit identifiers to the value of @p oldid.  If any matches are found,
   * the matching identifiers are replaced with @p newid.  The method does
   * @em not descend into child elements.
   *
   * @param oldid the old identifier
   * @param newid the new identifier
   */ public
";


%csmethodmodifiers SBase::replaceSIDWithFunction(const std::string& id, const ASTNode* function) "
/**
   * If this object has a child \'math\' object (or anything with ASTNodes in
   * general), replace all nodes with the name \'id\' with the provided
   * function.
   *
   * @note This function does nothing itself&mdash;subclasses with ASTNode
   * subelements must override this function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::divideAssignmentsToSIdByFunction(const std::string& id, const ASTNode* function) "
/**
   * If the function of this object is to assign a value has a child \'math\'
   * object (or anything with ASTNodes in general), replace the \'math\'
   * object with the function (existing/function).
   *
   * @note This function does nothing itself&mdash;subclasses with ASTNode
   * subelements must override this function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::multiplyAssignmentsToSIdByFunction(const std::string& id, const ASTNode* function) "
/**
   * If this assignment assigns a value to the \'id\' element, replace the \'math\' object with the function (existing*function). 
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::getElementFromPluginsBySId(std::string id) "
/**
   * Returns the first child element found that has the given @p id in the
   * model-wide SId namespace from all plug-ins associated with this
   * element, or @c null if no such object is found.
   *
   * @param id string representing the id of objects to find
   *
   * @return pointer to the first element found with the given @p id.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::getElementFromPluginsByMetaId(std::string metaid) "
/**
   * Returns the first child element it can find with the given @p metaid from
   * all plug-ins associated with this element, or @c null if no such object
   * is found.
   *
   * @param metaid string representing the metaid of objects to find
   *
   * @return pointer to the first element found with the given @p metaid.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::hasNonstandardIdentifierBeginningWith(const std::string& prefix) "
/**
   * Check to see if the given prefix is used by any of the IDs defined by
   * extension elements *excluding* \'id\' and \'metaid\' attributes (as, for
   * example, the spatial id attributes \'spid\').
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::prependStringToAllIdentifiers(const std::string& prefix) "
/**
   * Add the given string to all identifiers in the object.  If the string
   * is added to anything other than an id or a metaid, this code is
   * responsible for tracking down and renaming all *idRefs in the package
   * extention that identifier comes from.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::transformIdentifiers(IdentifierTransformer* idTransformer) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::getAllElementsFromPlugins(ElementFilter* filter=NULL) "
/**
   * Returns a List of all child SBase objects contained in SBML package
   * plug-ins.
   *
   * *
 * 
 * SBML Level&nbsp;3 consists of a <em>Core</em> definition that can be extended
 * via optional SBML Level&nbsp;3 <em>packages</em>.  A given model may indicate
 * that it uses one or more SBML packages, and likewise, a software tool may be
 * able to support one or more packages.  LibSBML does not come preconfigured
 * with all possible packages included and enabled, in part because not all
 * package specifications have been finalized.  To support the ability for
 * software systems to enable support for the Level&nbsp;3 packages they choose,
 * libSBML features a <em>plug-in</em> mechanism.  Each SBML Level&nbsp;3
 * package is implemented in a separate code plug-in that can be enabled by the
 * application to support working with that SBML package.  A given SBML model
 * may thus contain not only objects defined by SBML Level&nbsp;3 Core, but also
 * objects created by libSBML plug-ins supporting additional Level&nbsp;3
 * packages.
 *
 *
   *
   * This method walks down the list of all SBML Level&nbsp;3 packages used
   * by this object and returns all child objects defined by those packages.
   *
   * @return a pointer to a List of pointers to all children objects from
   * plug-ins.
   */ public
";


%csmethodmodifiers SBase::getMetaId() const "
/**
   * Returns the value of the \'metaid\' attribute of this object.
   *
   * *
 * 
 * The optional attribute named \'metaid\', present on every major SBML
 * component type, is for supporting metadata annotations using RDF (<a
 * href=\'http://www.w3.org/RDF/\'>Resource Description Format</a>).  The
 * attribute value has the data type <a
 * href=\'http://www.w3.org/TR/REC-xml/#id\'>XML <code>ID</code></a>, the XML
 * identifier type, which means each \'metaid\' value must be globally unique
 * within an SBML file.  The latter point is important, because the
 * uniqueness criterion applies across <em>any</em> attribute with type
 * <code>ID</code> anywhere in the file, not just the \'metaid\' attribute used
 * by SBML&mdash;something to be aware of if your application-specific XML
 * content inside the \'annotation\' subelement happens to use the XML
 * <code>ID</code> type.  Although SBML itself specifies the use of <a
 * href=\'http://www.w3.org/TR/REC-xml/#id\'>XML <code>ID</code></a> only for
 * the \'metaid\' attribute, SBML-compatible applications should be careful if
 * they use XML <code>ID</code>\'s in XML portions of a model that are not
 * defined by SBML, such as in the application-specific content of the
 * \'annotation\' subelement.  Finally, note that LibSBML does not provide an
 * explicit XML <code>ID</code> data type; it uses ordinary character
 * strings, which is easier for applications to support.
 * 
 *
   *  
   * @return the meta-identifier of this SBML object.
   *
   * @see isSetMetaId()
   * @see setMetaId(string metaid)
   */ public
";


%csmethodmodifiers SBase::getMetaId "
/**
   * Returns the value of the \'metaid\' attribute of this object.
   *
   * *
 * 
 * The optional attribute named \'metaid\', present on every major SBML
 * component type, is for supporting metadata annotations using RDF (<a
 * href=\'http://www.w3.org/RDF/\'>Resource Description Format</a>).  The
 * attribute value has the data type <a
 * href=\'http://www.w3.org/TR/REC-xml/#id\'>XML <code>ID</code></a>, the XML
 * identifier type, which means each \'metaid\' value must be globally unique
 * within an SBML file.  The latter point is important, because the
 * uniqueness criterion applies across <em>any</em> attribute with type
 * <code>ID</code> anywhere in the file, not just the \'metaid\' attribute used
 * by SBML&mdash;something to be aware of if your application-specific XML
 * content inside the \'annotation\' subelement happens to use the XML
 * <code>ID</code> type.  Although SBML itself specifies the use of <a
 * href=\'http://www.w3.org/TR/REC-xml/#id\'>XML <code>ID</code></a> only for
 * the \'metaid\' attribute, SBML-compatible applications should be careful if
 * they use XML <code>ID</code>\'s in XML portions of a model that are not
 * defined by SBML, such as in the application-specific content of the
 * \'annotation\' subelement.  Finally, note that LibSBML does not provide an
 * explicit XML <code>ID</code> data type; it uses ordinary character
 * strings, which is easier for applications to support.
 * 
 *
   *  
   * @return the meta-identifier of this SBML object, as a string.
   *
   * @see isSetMetaId()
   * @see setMetaId(string metaid)
   */ public
";


%csmethodmodifiers SBase::getId() const "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::getName() const "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::getNotes "
/**
   * Returns the content of the \'notes\' subelement of this object as
   * a tree of XMLNode objects.
   *
   * *
 * 
 * The optional SBML element named \'notes\', present on every major SBML
 * component type (and in SBML Level&nbsp;3, the \'message\' subelement of
 * Constraint), is intended as a place for storing optional information
 * intended to be seen by humans.  An example use of the \'notes\' element
 * would be to contain formatted user comments about the model element in
 * which the \'notes\' element is enclosed.  Every object derived directly or
 * indirectly from type SBase can have a separate value for \'notes\', allowing
 * users considerable freedom when adding comments to their models.
 *
 * The format of \'notes\' elements conform to the definition of <a
 * target=\'_blank\' href=\'http://www.w3.org/TR/xhtml1/\'>XHTML&nbsp;1.0</a>.
 * However, the content cannot be @em entirely free-form; it must satisfy
 * certain requirements defined in the <a target=\'_blank\'
 * href=\'http://sbml.org/Documents/Specifications\'>SBML specifications</a>
 * for specific SBML Levels.  To help verify the formatting of \'notes\'
 * content, libSBML provides the static utility method
 * SyntaxChecker::hasExpectedXHTMLSyntax(@if java XMLNode xhtml@endif); The
 * method implements a verification process that lets callers check whether
 * the content of a given XMLNode object conforms to the SBML requirements
 * for \'notes\' and \'message\' structure.  Developers are urged to consult the
 * appropriate <a target=\'_blank\'
 * href=\'http://sbml.org/Documents/Specifications\'>SBML specification
 * document</a> for the Level and Version of their model for more in-depth
 * explanations of using \'notes\' in SBML.  The SBML Level&nbsp;2 and &nbsp;3
 * specifications have considerable detail about how \'notes\' element content
 * must be structured.
 *
 * 
   *
   * The \'notes\' element content returned by this method will be in XML
   * form, but libSBML does not provide an object model specifically for
   * the content of notes.  Callers will need to traverse the XML tree
   * structure using the facilities available on XMLNode and related
   * objects.  For an alternative method of accessing the notes, see
   * getNotesString().
   *
   * @return the content of the \'notes\' subelement of this SBML object as a
   * tree structure composed of XMLNode objects.
   *
   * @see getNotesString()
   * @see isSetNotes()
   * @see setNotes(XMLNode notes)
   * @see setNotes(string notes, bool addXHTMLMarkup)
   * @see appendNotes(XMLNode notes)
   * @see appendNotes(string notes)
   * @see unsetNotes()
   * @see SyntaxChecker::hasExpectedXHTMLSyntax(@if java XMLNode xhtml@endif)
   */ public
";


%csmethodmodifiers SBase::getNotes() const "
/**
   * Returns the content of the \'notes\' subelement of this object as
   * a tree of XMLNode objects.
   *
   * *
 * 
 * The optional SBML element named \'notes\', present on every major SBML
 * component type (and in SBML Level&nbsp;3, the \'message\' subelement of
 * Constraint), is intended as a place for storing optional information
 * intended to be seen by humans.  An example use of the \'notes\' element
 * would be to contain formatted user comments about the model element in
 * which the \'notes\' element is enclosed.  Every object derived directly or
 * indirectly from type SBase can have a separate value for \'notes\', allowing
 * users considerable freedom when adding comments to their models.
 *
 * The format of \'notes\' elements conform to the definition of <a
 * target=\'_blank\' href=\'http://www.w3.org/TR/xhtml1/\'>XHTML&nbsp;1.0</a>.
 * However, the content cannot be @em entirely free-form; it must satisfy
 * certain requirements defined in the <a target=\'_blank\'
 * href=\'http://sbml.org/Documents/Specifications\'>SBML specifications</a>
 * for specific SBML Levels.  To help verify the formatting of \'notes\'
 * content, libSBML provides the static utility method
 * SyntaxChecker::hasExpectedXHTMLSyntax(@if java XMLNode xhtml@endif); The
 * method implements a verification process that lets callers check whether
 * the content of a given XMLNode object conforms to the SBML requirements
 * for \'notes\' and \'message\' structure.  Developers are urged to consult the
 * appropriate <a target=\'_blank\'
 * href=\'http://sbml.org/Documents/Specifications\'>SBML specification
 * document</a> for the Level and Version of their model for more in-depth
 * explanations of using \'notes\' in SBML.  The SBML Level&nbsp;2 and &nbsp;3
 * specifications have considerable detail about how \'notes\' element content
 * must be structured.
 *
 * 
   *
   * The \'notes\' element content returned by this method will be in XML
   * form, but libSBML does not provide an object model specifically for
   * the content of notes.  Callers will need to traverse the XML tree
   * structure using the facilities available on XMLNode and related
   * objects.  For an alternative method of accessing the notes, see
   * getNotesString().
   *
   * @return the content of the \'notes\' subelement of this SBML object as a
   * tree structure composed of XMLNode objects.
   *
   * @see getNotesString()
   * @see isSetNotes()
   * @see setNotes(XMLNode notes)
   * @see setNotes(string notes, bool addXHTMLMarkup)
   * @see appendNotes(XMLNode notes)
   * @see appendNotes(string notes)
   * @see unsetNotes()
   * @see SyntaxChecker::hasExpectedXHTMLSyntax(@if java XMLNode xhtml@endif)
   */ public
";


%csmethodmodifiers SBase::getNotesString "
/**
   * Returns the content of the \'notes\' subelement of this object as a
   * string.
   *
   * *
 * 
 * The optional SBML element named \'notes\', present on every major SBML
 * component type (and in SBML Level&nbsp;3, the \'message\' subelement of
 * Constraint), is intended as a place for storing optional information
 * intended to be seen by humans.  An example use of the \'notes\' element
 * would be to contain formatted user comments about the model element in
 * which the \'notes\' element is enclosed.  Every object derived directly or
 * indirectly from type SBase can have a separate value for \'notes\', allowing
 * users considerable freedom when adding comments to their models.
 *
 * The format of \'notes\' elements conform to the definition of <a
 * target=\'_blank\' href=\'http://www.w3.org/TR/xhtml1/\'>XHTML&nbsp;1.0</a>.
 * However, the content cannot be @em entirely free-form; it must satisfy
 * certain requirements defined in the <a target=\'_blank\'
 * href=\'http://sbml.org/Documents/Specifications\'>SBML specifications</a>
 * for specific SBML Levels.  To help verify the formatting of \'notes\'
 * content, libSBML provides the static utility method
 * SyntaxChecker::hasExpectedXHTMLSyntax(@if java XMLNode xhtml@endif); The
 * method implements a verification process that lets callers check whether
 * the content of a given XMLNode object conforms to the SBML requirements
 * for \'notes\' and \'message\' structure.  Developers are urged to consult the
 * appropriate <a target=\'_blank\'
 * href=\'http://sbml.org/Documents/Specifications\'>SBML specification
 * document</a> for the Level and Version of their model for more in-depth
 * explanations of using \'notes\' in SBML.  The SBML Level&nbsp;2 and &nbsp;3
 * specifications have considerable detail about how \'notes\' element content
 * must be structured.
 *
 * 
   *
   * For an alternative method of accessing the notes, see getNotes(),
   * which returns the content as an XMLNode tree structure.  Depending on
   * an application\'s needs, one or the other method may be more
   * convenient.
   *
   * @return the content of the \'notes\' subelement of this SBML object as a
   * string.
   *
   * @see getNotes()
   * @see isSetNotes()
   * @see setNotes(XMLNode notes)
   * @see setNotes(string notes, bool addXHTMLMarkup)
   * @see appendNotes(XMLNode notes)
   * @see appendNotes(string notes)
   * @see unsetNotes()
   * @see SyntaxChecker::hasExpectedXHTMLSyntax(@if java XMLNode xhtml@endif)
   */ public
";


%csmethodmodifiers SBase::getNotesString() const "
/**
   * Returns the content of the \'notes\' subelement of this object as a
   * string.
   *
   * *
 * 
 * The optional SBML element named \'notes\', present on every major SBML
 * component type (and in SBML Level&nbsp;3, the \'message\' subelement of
 * Constraint), is intended as a place for storing optional information
 * intended to be seen by humans.  An example use of the \'notes\' element
 * would be to contain formatted user comments about the model element in
 * which the \'notes\' element is enclosed.  Every object derived directly or
 * indirectly from type SBase can have a separate value for \'notes\', allowing
 * users considerable freedom when adding comments to their models.
 *
 * The format of \'notes\' elements conform to the definition of <a
 * target=\'_blank\' href=\'http://www.w3.org/TR/xhtml1/\'>XHTML&nbsp;1.0</a>.
 * However, the content cannot be @em entirely free-form; it must satisfy
 * certain requirements defined in the <a target=\'_blank\'
 * href=\'http://sbml.org/Documents/Specifications\'>SBML specifications</a>
 * for specific SBML Levels.  To help verify the formatting of \'notes\'
 * content, libSBML provides the static utility method
 * SyntaxChecker::hasExpectedXHTMLSyntax(@if java XMLNode xhtml@endif); The
 * method implements a verification process that lets callers check whether
 * the content of a given XMLNode object conforms to the SBML requirements
 * for \'notes\' and \'message\' structure.  Developers are urged to consult the
 * appropriate <a target=\'_blank\'
 * href=\'http://sbml.org/Documents/Specifications\'>SBML specification
 * document</a> for the Level and Version of their model for more in-depth
 * explanations of using \'notes\' in SBML.  The SBML Level&nbsp;2 and &nbsp;3
 * specifications have considerable detail about how \'notes\' element content
 * must be structured.
 *
 * 
   *
   * For an alternative method of accessing the notes, see getNotes(),
   * which returns the content as an XMLNode tree structure.  Depending on
   * an application\'s needs, one or the other method may be more
   * convenient.
   *
   * @return the content of the \'notes\' subelement of this SBML object as a
   * string.
   *
   * @see getNotes()
   * @see isSetNotes()
   * @see setNotes(XMLNode notes)
   * @see setNotes(string notes, bool addXHTMLMarkup)
   * @see appendNotes(XMLNode notes)
   * @see appendNotes(string notes)
   * @see unsetNotes()
   * @see SyntaxChecker::hasExpectedXHTMLSyntax(@if java XMLNode xhtml@endif)
   */ public
";


%csmethodmodifiers SBase::getAnnotation "
/**
   * Returns the content of the \'annotation\' subelement of this object as
   * a tree of XMLNode objects.
   *
   * *
 * 
 * Whereas the SBML \'notes\' subelement is a container for content to be
 * shown directly to humans, the \'annotation\' element is a container for
 * optional software-generated content @em not meant to be shown to
 * humans.  Every object derived from SBase can have its own value for
 * \'annotation\'.  The element\'s content type is <a target=\'_blank\'
 * href=\'http://www.w3.org/TR/2004/REC-xml-20040204/#elemdecls\'>XML type
 * \'any\'</a>, allowing essentially arbitrary well-formed XML data
 * content.
 *
 * SBML places a few restrictions on the organization of the content of
 * annotations; these are intended to help software tools read and write
 * the data as well as help reduce conflicts between annotations added by
 * different tools.  Please see the SBML specifications for more details.
 *
 * 
   *
   * The annotations returned by this method will be in XML form.  LibSBML
   * provides an object model and related interfaces for certain specific
   * kinds of annotations, namely model history information and RDF
   * content.  See the ModelHistory, CVTerm and RDFAnnotationParser classes
   * for more information about the facilities available.
   *
   * @return the annotation of this SBML object as a tree of XMLNode objects.
   *
   * @see getAnnotationString()
   * @see isSetAnnotation()
   * @see setAnnotation(XMLNode annotation)
   * @see setAnnotation(string annotation)
   * @see appendAnnotation(XMLNode annotation)
   * @see appendAnnotation(string annotation)
   * @see unsetAnnotation()
   */ public
";


%csmethodmodifiers SBase::getAnnotation() const "
/**
   * Returns the content of the \'annotation\' subelement of this object as
   * a tree of XMLNode objects.
   *
   * *
 * 
 * Whereas the SBML \'notes\' subelement is a container for content to be
 * shown directly to humans, the \'annotation\' element is a container for
 * optional software-generated content @em not meant to be shown to
 * humans.  Every object derived from SBase can have its own value for
 * \'annotation\'.  The element\'s content type is <a target=\'_blank\'
 * href=\'http://www.w3.org/TR/2004/REC-xml-20040204/#elemdecls\'>XML type
 * \'any\'</a>, allowing essentially arbitrary well-formed XML data
 * content.
 *
 * SBML places a few restrictions on the organization of the content of
 * annotations; these are intended to help software tools read and write
 * the data as well as help reduce conflicts between annotations added by
 * different tools.  Please see the SBML specifications for more details.
 *
 * 
   *
   * The annotations returned by this method will be in XML form.  LibSBML
   * provides an object model and related interfaces for certain specific
   * kinds of annotations, namely model history information and RDF
   * content.  See the ModelHistory, CVTerm and RDFAnnotationParser classes
   * for more information about the facilities available.
   *
   * @return the annotation of this SBML object as a tree of XMLNode objects.
   *
   * @see getAnnotationString()
   * @see isSetAnnotation()
   * @see setAnnotation(XMLNode annotation)
   * @see setAnnotation(string annotation)
   * @see appendAnnotation(XMLNode annotation)
   * @see appendAnnotation(string annotation)
   * @see unsetAnnotation()
   */ public
";


%csmethodmodifiers SBase::getAnnotationString "
/**
   * Returns the content of the \'annotation\' subelement of this object as a
   * character string.
   *
   * *
 * 
 * Whereas the SBML \'notes\' subelement is a container for content to be
 * shown directly to humans, the \'annotation\' element is a container for
 * optional software-generated content @em not meant to be shown to
 * humans.  Every object derived from SBase can have its own value for
 * \'annotation\'.  The element\'s content type is <a target=\'_blank\'
 * href=\'http://www.w3.org/TR/2004/REC-xml-20040204/#elemdecls\'>XML type
 * \'any\'</a>, allowing essentially arbitrary well-formed XML data
 * content.
 *
 * SBML places a few restrictions on the organization of the content of
 * annotations; these are intended to help software tools read and write
 * the data as well as help reduce conflicts between annotations added by
 * different tools.  Please see the SBML specifications for more details.
 *
 * 
   *
   * The annotations returned by this method will be in string form.  See the
   * method getAnnotation() for a version that returns annotations in XML form.
   *
   * @return the annotation of this SBML object as a character string.
   *
   * @see getAnnotation()
   * @see isSetAnnotation()
   * @see setAnnotation(XMLNode annotation)
   * @see setAnnotation(string annotation)
   * @see appendAnnotation(XMLNode annotation)
   * @see appendAnnotation(string annotation)
   * @see unsetAnnotation()
   */ public
";


%csmethodmodifiers SBase::getAnnotationString() const "
/**
   * Returns the content of the \'annotation\' subelement of this object as a
   * character string.
   *
   * *
 * 
 * Whereas the SBML \'notes\' subelement is a container for content to be
 * shown directly to humans, the \'annotation\' element is a container for
 * optional software-generated content @em not meant to be shown to
 * humans.  Every object derived from SBase can have its own value for
 * \'annotation\'.  The element\'s content type is <a target=\'_blank\'
 * href=\'http://www.w3.org/TR/2004/REC-xml-20040204/#elemdecls\'>XML type
 * \'any\'</a>, allowing essentially arbitrary well-formed XML data
 * content.
 *
 * SBML places a few restrictions on the organization of the content of
 * annotations; these are intended to help software tools read and write
 * the data as well as help reduce conflicts between annotations added by
 * different tools.  Please see the SBML specifications for more details.
 *
 * 
   *
   * The annotations returned by this method will be in string form.  See the
   * method getAnnotation() for a version that returns annotations in XML form.
   *
   * @return the annotation of this SBML object as a character string.
   *
   * @see getAnnotation()
   * @see isSetAnnotation()
   * @see setAnnotation(XMLNode annotation)
   * @see setAnnotation(string annotation)
   * @see appendAnnotation(XMLNode annotation)
   * @see appendAnnotation(string annotation)
   * @see unsetAnnotation()
   */ public
";


%csmethodmodifiers SBase::getNamespaces() const "
/**
   * Returns a list of the XML Namespaces declared on this SBML document.
   * 
   * The SBMLNamespaces object encapsulates SBML Level/Version/namespaces
   * information.  It is used to communicate the SBML Level, Version, and (in
   * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.
   * 
   * @return the XML Namespaces associated with this SBML object
   *
   * @see getLevel()
   * @see getVersion()
   */ public
";


%csmethodmodifiers SBase::getSBMLDocument() const "
/**
   * Returns the SBMLDocument object containing @em this object instance.
   *
   * *
 * 
 * LibSBML uses the class SBMLDocument as a top-level container for
 * storing SBML content and data associated with it (such as warnings and
 * error messages).  An SBML model in libSBML is contained inside an
 * SBMLDocument object.  SBMLDocument corresponds roughly to the class
 * <i>SBML</i> defined in the SBML Level&nbsp;3 and Level&nbsp;2
 * specifications, but it does not have a direct correspondence in SBML
 * Level&nbsp;1.  (But, it is created by libSBML no matter whether the
 * model is Level&nbsp;1, Level&nbsp;2 or Level&nbsp;3.)
 *
 *
   *
   * This method allows the caller to obtain the SBMLDocument for the
   * current object.
   * 
   * @return the parent SBMLDocument object of this SBML object.
   *
   * @see getParentSBMLObject()
   * @see getModel()
   */ public
";


%csmethodmodifiers SBase::getSBMLDocument "
/**
   * Returns the SBMLDocument object containing @em this object instance.
   *
   * *
 * 
 * LibSBML uses the class SBMLDocument as a top-level container for
 * storing SBML content and data associated with it (such as warnings and
 * error messages).  An SBML model in libSBML is contained inside an
 * SBMLDocument object.  SBMLDocument corresponds roughly to the class
 * <i>SBML</i> defined in the SBML Level&nbsp;3 and Level&nbsp;2
 * specifications, but it does not have a direct correspondence in SBML
 * Level&nbsp;1.  (But, it is created by libSBML no matter whether the
 * model is Level&nbsp;1, Level&nbsp;2 or Level&nbsp;3.)
 *
 *
   *
   * This method allows the caller to obtain the SBMLDocument for the
   * current object.
   * 
   * @return the parent SBMLDocument object of this SBML object.
   *
   * @see getParentSBMLObject()
   * @see getModel()
   */ public
";


%csmethodmodifiers SBase::getParentSBMLObject "
/**
   * Returns the parent SBML object containing this object.
   *
   * This returns the immediately-containing object.  This method is
   * convenient when holding an object nested inside other objects in an
   * SBML model.  
   * 
   * @return the parent SBML object of this SBML object.
   *
   * @see getSBMLDocument()
   * @see getModel()
   */ public
";


%csmethodmodifiers SBase::getParentSBMLObject() const "
/**
   * Returns the parent SBML object containing this object.
   *
   * This returns the immediately-containing object.  This method is
   * convenient when holding an object nested inside other objects in an
   * SBML model.  
   * 
   * @return the parent SBML object of this SBML object.
   *
   * @see getSBMLDocument()
   * @see getModel()
   */ public
";


%csmethodmodifiers SBase::getAncestorOfType(int type, const std::string pkgName = "core") "
/**
   * Returns the first ancestor object that has the given SBML type code from the given package.
   *
   * @if clike LibSBML attaches an identifying code to every kind of SBML
   * object.  These are known as <em>SBML type codes</em>.  The set of
   * possible type codes is defined in the enumeration #SBMLTypeCode_t.
   * The names of the type codes all begin with the characters @c
   * SBML_. @endif@if java LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters @c SBML_. @endif@if python LibSBML attaches an identifying
   * code to every kind of SBML object.  These are known as <em>SBML type
   * codes</em>.  In the Python language interface for libSBML, the type
   * codes are defined as static integer constants in the interface class
   * @link libsbml@endlink.  The names of the type codes all begin with the
   * characters @c SBML_. @endif@if csharp LibSBML attaches an identifying
   * code to every kind of SBML object.  These are known as <em>SBML type
   * codes</em>.  In the C# language interface for libSBML, the type codes
   * are defined as static integer constants in the interface class @link
   * libsbmlcs.libsbml libsbml@endlink.  The names of the type codes all begin with
   * the characters @c SBML_. @endif
   *
   * This method searches the tree of objects that are parents of this
   * object, and returns the first one that has the given SBML type code from 
   * the given @p pkgName.
   *
   * @param type the SBML type code of the object sought
   *
   * @param pkgName (optional) the short name of an SBML Level&nbsp;3
   * package to which the sought-after object must belong
   * 
   * @return the ancestor SBML object of this SBML object that corresponds
   * to the given @if clike #SBMLTypeCode_t value@else SBML object type
   * code@endif, or @c null if no ancestor exists.
   *
   * @warning The optional argument @p pkgName must be used for all type codes
   * from SBML Level&nbsp;3 packages.  Otherwise, the function will search the 
   * \'core\' namespace alone, not find any corresponding elements, and return 
   * null.
   *
   * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
   */ public
";


%csmethodmodifiers SBase::getAncestorOfType(int type, const std::string pkgName = "core") const "
/**
   * Returns the first ancestor object that has the given SBML type code from the given package.
   *
   * @if clike LibSBML attaches an identifying code to every kind of SBML
   * object.  These are known as <em>SBML type codes</em>.  The set of
   * possible type codes is defined in the enumeration #SBMLTypeCode_t.
   * The names of the type codes all begin with the characters @c
   * SBML_. @endif@if java LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters @c SBML_. @endif@if python LibSBML attaches an identifying
   * code to every kind of SBML object.  These are known as <em>SBML type
   * codes</em>.  In the Python language interface for libSBML, the type
   * codes are defined as static integer constants in the interface class
   * @link libsbml@endlink.  The names of the type codes all begin with the
   * characters @c SBML_. @endif@if csharp LibSBML attaches an identifying
   * code to every kind of SBML object.  These are known as <em>SBML type
   * codes</em>.  In the C# language interface for libSBML, the type codes
   * are defined as static integer constants in the interface class @link
   * libsbmlcs.libsbml libsbml@endlink.  The names of the type codes all begin with
   * the characters @c SBML_. @endif
   *
   * This method searches the tree of objects that are parents of this
   * object, and returns the first one that has the given SBML type code from 
   * the given @p pkgName.
   *
   * @param type the SBML type code of the object sought
   *
   * @param pkgName (optional) the short name of an SBML Level&nbsp;3
   * package to which the sought-after object must belong
   * 
   * @return the ancestor SBML object of this SBML object that corresponds
   * to the given @if clike #SBMLTypeCode_t value@else SBML object type
   * code@endif, or @c null if no ancestor exists.
   *
   * @warning The optional argument @p pkgName must be used for all type codes
   * from SBML Level&nbsp;3 packages.  Otherwise, the function will search the 
   * \'core\' namespace alone, not find any corresponding elements, and return 
   * null.
   *
   * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
   */ public
";


%csmethodmodifiers SBase::getSBOTerm() const "
/**
   * Returns the integer portion of the value of the \'sboTerm\' attribute of
   * this object.
   *
   * Beginning with SBML Level 2 Version 3, objects derived from SBase have
   * an optional attribute named \'sboTerm\' for supporting the use of the
   * Systems Biology Ontology.  In SBML proper, the data type of the
   * attribute is a string of the form \'SBO:NNNNNNN\', where \'NNNNNNN\' is a
   * seven digit integer number; libSBML simplifies the representation by
   * only storing the \'NNNNNNN\' integer portion.  Thus, in libSBML, the
   * \'sboTerm\' attribute on SBase has data type @c int, and SBO identifiers
   * are stored simply as integers.  (For convenience, libSBML offers
   * methods for returning both the integer form and a text-string form of
   * the SBO identifier.)
   *
   * SBO terms are a type of optional annotation, and each different class
   * of SBML object derived from SBase imposes its own requirements about
   * the values permitted for \'sboTerm\'.  Please consult the SBML
   * Level&nbsp;2 Version&nbsp;4 specification for more information about
   * the use of SBO and the \'sboTerm\' attribute.
   *
   * @return the value of the \'sboTerm\' attribute as an integer, or @c -1
   * if the value is not set.
   */ public
";


%csmethodmodifiers SBase::getSBOTermID() const "
/**
   * Returns the string representation of the \'sboTerm\' attribute of
   * this object.
   *
   * Beginning with SBML Level 2 Version 3, objects derived from SBase have
   * an optional attribute named \'sboTerm\' for supporting the use of the
   * Systems Biology Ontology.  In SBML proper, the data type of the
   * attribute is a string of the form \'SBO:NNNNNNN\', where \'NNNNNNN\' is a
   * seven digit integer number; libSBML simplifies the representation by
   * only storing the \'NNNNNNN\' integer portion.  Thus, in libSBML, the
   * \'sboTerm\' attribute on SBase has data type @c int, and SBO identifiers
   * are stored simply as integers.  This method returns the entire SBO
   * identifier as a text string in the form \'SBO:NNNNNNN\'.
   *
   * SBO terms are a type of optional annotation, and each different class
   * of SBML object derived from SBase imposes its own requirements about
   * the values permitted for \'sboTerm\'.  Please consult the SBML
   * Level&nbsp;2 Version&nbsp;4 specification for more information about
   * the use of SBO and the \'sboTerm\' attribute.
   *
   * @return the value of the \'sboTerm\' attribute as a string (its value
   * will be of the form \'SBO:NNNNNNN\'), or an empty string if
   * the value is not set.
   */ public
";


%csmethodmodifiers SBase::getSBOTermAsURL() const "
/**
   * Returns the identifiers.org URL representation of the \'sboTerm\' attribute of
   * this object.
   *
   * This method returns the entire SBO
   * identifier as a text string in the form 
   * \'http://identifiers.org/biomodels.sbo/SBO:NNNNNNN\'.
   *
   * SBO terms are a type of optional annotation, and each different class
   * of SBML object derived from SBase imposes its own requirements about
   * the values permitted for \'sboTerm\'.  Please consult the SBML
   * Level&nbsp;2 Version&nbsp;4 specification for more information about
   * the use of SBO and the \'sboTerm\' attribute.
   *
   * @return the value of the \'sboTerm\' attribute as an identifiers.org URL
   * (its value will be of the form 
   * \'http://identifiers.org/biomodels.sbo/SBO:NNNNNNN\'), or an empty string if
   * the value is not set.
   */ public
";


%csmethodmodifiers SBase::getLine() const "
/**
   * Returns the line number on which this object first appears in the XML
   * representation of the SBML document.
   * 
   * @return the line number of this SBML object.
   *
   * @note The line number for each construct in an SBML model is set upon
   * reading the model.  The accuracy of the line number depends on the
   * correctness of the XML representation of the model, and on the
   * particular XML parser library being used.  The former limitation
   * relates to the following problem: if the model is actually invalid
   * XML, then the parser may not be able to interpret the data correctly
   * and consequently may not be able to establish the real line number.
   * The latter limitation is simply that different parsers seem to have
   * their own accuracy limitations, and out of all the parsers supported
   * by libSBML, none have been 100% accurate in all situations. (At this
   * time, libSBML supports the use of <a target=\'_blank\'
   * href=\'http://xmlsoft.org\'>libxml2</a>, <a target=\'_blank\'
   * href=\'http://expat.sourceforge.net/\'>Expat</a> and <a target=\'_blank\'
   * href=\'http://xerces.apache.org/xerces-c/\'>Xerces</a>.)
   *
   * @see getColumn()
   */ public
";


%csmethodmodifiers SBase::getColumn() const "
/**
   * Returns the column number on which this object first appears in the XML
   * representation of the SBML document.
   * 
   * @return the column number of this SBML object.
   * 
   * @note The column number for each construct in an SBML model is set
   * upon reading the model.  The accuracy of the column number depends on
   * the correctness of the XML representation of the model, and on the
   * particular XML parser library being used.  The former limitation
   * relates to the following problem: if the model is actually invalid
   * XML, then the parser may not be able to interpret the data correctly
   * and consequently may not be able to establish the real column number.
   * The latter limitation is simply that different parsers seem to have
   * their own accuracy limitations, and out of all the parsers supported
   * by libSBML, none have been 100% accurate in all situations. (At this
   * time, libSBML supports the use of <a target=\'_blank\'
   * href=\'http://xmlsoft.org\'>libxml2</a>, <a target=\'_blank\'
   * href=\'http://expat.sourceforge.net/\'>Expat</a> and <a target=\'_blank\'
   * href=\'http://xerces.apache.org/xerces-c/\'>Xerces</a>.)
   * 
   * @see getLine()
   */ public
";


%csmethodmodifiers SBase::getModelHistory() const "
/**
   * Returns the ModelHistory object, if any, attached to this object.
   *
   * @return the ModelHistory object attached to this object, or @c null if
   * none exist.
   * 
   * @note In SBML Level&nbsp;2, model history annotations were only
   * permitted on the Model element.  In SBML Level&nbsp;3, they are
   * permitted on all SBML components derived from SBase.
   */ public
";


%csmethodmodifiers SBase::getModelHistory "
/**
   * Returns the ModelHistory object, if any, attached to this object.
   * 
   * @return the ModelHistory object attached to this object, or @c null if
   * none exist.
   * 
   * @note In SBML Level&nbsp;2, model history annotations were only
   * permitted on the Model element.  In SBML Level&nbsp;3, they are
   * permitted on all SBML components derived from SBase.
   */ public
";


%csmethodmodifiers SBase::isSetMetaId() const "
/**
   * Predicate returning @c true if this object\'s \'metaid\' attribute is set.
   *
   * *
 * 
 * The optional attribute named \'metaid\', present on every major SBML
 * component type, is for supporting metadata annotations using RDF (<a
 * href=\'http://www.w3.org/RDF/\'>Resource Description Format</a>).  The
 * attribute value has the data type <a
 * href=\'http://www.w3.org/TR/REC-xml/#id\'>XML <code>ID</code></a>, the XML
 * identifier type, which means each \'metaid\' value must be globally unique
 * within an SBML file.  The latter point is important, because the
 * uniqueness criterion applies across <em>any</em> attribute with type
 * <code>ID</code> anywhere in the file, not just the \'metaid\' attribute used
 * by SBML&mdash;something to be aware of if your application-specific XML
 * content inside the \'annotation\' subelement happens to use the XML
 * <code>ID</code> type.  Although SBML itself specifies the use of <a
 * href=\'http://www.w3.org/TR/REC-xml/#id\'>XML <code>ID</code></a> only for
 * the \'metaid\' attribute, SBML-compatible applications should be careful if
 * they use XML <code>ID</code>\'s in XML portions of a model that are not
 * defined by SBML, such as in the application-specific content of the
 * \'annotation\' subelement.  Finally, note that LibSBML does not provide an
 * explicit XML <code>ID</code> data type; it uses ordinary character
 * strings, which is easier for applications to support.
 * 
 * 
   *
   * @return @c true if the \'metaid\' attribute of this SBML object is
   * set, @c false otherwise.
   *
   * @see getMetaId()
   * @see setMetaId(string metaid)
   */ public
";


%csmethodmodifiers SBase::isSetId() const "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::isSetName() const "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::isSetNotes() const "
/**
   * Predicate returning @c true if this
   * object\'s \'notes\' subelement exists and has content.
   *
   * The optional SBML element named \'notes\', present on every major SBML
   * component type, is intended as a place for storing optional
   * information intended to be seen by humans.  An example use of the
   * \'notes\' element would be to contain formatted user comments about the
   * model element in which the \'notes\' element is enclosed.  Every object
   * derived directly or indirectly from type SBase can have a separate
   * value for \'notes\', allowing users considerable freedom when adding
   * comments to their models.
   *
   * The format of \'notes\' elements must be <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/xhtml1/\'>XHTML&nbsp;1.0</a>.  To help
   * verify the formatting of \'notes\' content, libSBML provides the static
   * utility method SyntaxChecker::hasExpectedXHTMLSyntax(@if java XMLNode xhtml@endif); however,
   * readers are urged to consult the appropriate <a target=\'_blank\'
   * href=\'http://sbml.org/Documents/Specifications\'>SBML specification
   * document</a> for the Level and Version of their model for more
   * in-depth explanations.  The SBML Level&nbsp;2 and &nbsp;3
   * specifications have considerable detail about how \'notes\' element
   * content must be structured.
   *
   * @return @c true if a \'notes\' subelement exists, @c false otherwise.
   * 
   * @see getNotes()
   * @see getNotesString()
   * @see setNotes(XMLNode notes)
   * @see setNotes(string notes, bool addXHTMLMarkup)
   * @see appendNotes(XMLNode notes)
   * @see appendNotes(string notes)
   * @see unsetNotes()
   * @see SyntaxChecker::hasExpectedXHTMLSyntax(@if java XMLNode xhtml@endif)
   */ public
";


%csmethodmodifiers SBase::isSetAnnotation() const "
/**
   * Predicate returning @c true if this
   * object\'s \'annotation\' subelement exists and has content.
   *
   * Whereas the SBase \'notes\' subelement is a container for content to be
   * shown directly to humans, the \'annotation\' element is a container for
   * optional software-generated content @em not meant to be shown to
   * humans.  Every object derived from SBase can have its own value for
   * \'annotation\'.  The element\'s content type is <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/2004/REC-xml-20040204/#elemdecls\'>XML type
   * \'any\'</a>, allowing essentially arbitrary well-formed XML data
   * content.
   *
   * SBML places a few restrictions on the organization of the content of
   * annotations; these are intended to help software tools read and write
   * the data as well as help reduce conflicts between annotations added by
   * different tools.  Please see the SBML specifications for more details.
   *
   * @return @c true if a \'annotation\' subelement exists, @c false
   * otherwise.
   * 
   * @see getAnnotation()
   * @see getAnnotationString()
   * @see setAnnotation(XMLNode annotation)
   * @see setAnnotation(string annotation)
   * @see appendAnnotation(XMLNode annotation)
   * @see appendAnnotation(string annotation)
   * @see unsetAnnotation()
   */ public
";


%csmethodmodifiers SBase::isSetSBOTerm() const "
/**
   * Predicate returning @c true if this
   * object\'s \'sboTerm\' attribute is set.
   *
   * @return @c true if the \'sboTerm\' attribute of this SBML object is
   * set, @c false otherwise.
   */ public
";


%csmethodmodifiers SBase::setMetaId(const std::string& metaid) "
/**
   * Sets the value of the meta-identifier attribute of this object.
   *
   * *
 * 
 * The optional attribute named \'metaid\', present on every major SBML
 * component type, is for supporting metadata annotations using RDF (<a
 * href=\'http://www.w3.org/RDF/\'>Resource Description Format</a>).  The
 * attribute value has the data type <a
 * href=\'http://www.w3.org/TR/REC-xml/#id\'>XML <code>ID</code></a>, the XML
 * identifier type, which means each \'metaid\' value must be globally unique
 * within an SBML file.  The latter point is important, because the
 * uniqueness criterion applies across <em>any</em> attribute with type
 * <code>ID</code> anywhere in the file, not just the \'metaid\' attribute used
 * by SBML&mdash;something to be aware of if your application-specific XML
 * content inside the \'annotation\' subelement happens to use the XML
 * <code>ID</code> type.  Although SBML itself specifies the use of <a
 * href=\'http://www.w3.org/TR/REC-xml/#id\'>XML <code>ID</code></a> only for
 * the \'metaid\' attribute, SBML-compatible applications should be careful if
 * they use XML <code>ID</code>\'s in XML portions of a model that are not
 * defined by SBML, such as in the application-specific content of the
 * \'annotation\' subelement.  Finally, note that LibSBML does not provide an
 * explicit XML <code>ID</code> data type; it uses ordinary character
 * strings, which is easier for applications to support.
 * 
 * 
   *
   * The string @p metaid is copied.  
   *
   * @param metaid the identifier string to use as the value of the
   * \'metaid\' attribute
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   * 
   * @see getMetaId()
   * @see isSetMetaId()
   */ public
";


%csmethodmodifiers SBase::isSetModelHistory "
/**
   * Predicate returning @c true if this
   * object has a ModelHistory object attached to it.
   *
   * @return @c true if the ModelHistory of this object is set, @c
   * false otherwise.
   * 
   * @note In SBML Level&nbsp;2, model history annotations were only
   * permitted on the Model element.  In SBML Level&nbsp;3, they are
   * permitted on all SBML components derived from SBase.
   */ public
";


%csmethodmodifiers SBase::setId(const std::string& sid) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::setName(const std::string& name) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::setAnnotation(const XMLNode* annotation) "
/**
   * Sets the value of the \'annotation\' subelement of this SBML object.
   *
   * The content of @p annotation is copied, and any previous content of
   * this object\'s \'annotation\' subelement is deleted.
   * 
   * Whereas the SBase \'notes\' subelement is a container for content to be
   * shown directly to humans, the \'annotation\' element is a container for
   * optional software-generated content @em not meant to be shown to
   * humans.  Every object derived from SBase can have its own value for
   * \'annotation\'.  The element\'s content type is <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/2004/REC-xml-20040204/#elemdecls\'>XML type
   * \'any\'</a>, allowing essentially arbitrary well-formed XML data
   * content.
   *
   * SBML places a few restrictions on the organization of the content of
   * annotations; these are intended to help software tools read and write
   * the data as well as help reduce conflicts between annotations added by
   * different tools.  Please see the SBML specifications for more details.
   *
   * Call this method will result in any existing content of the
   * \'annotation\' subelement to be discarded.  Unless you have taken steps
   * to first copy and reconstitute any existing annotations into the @p
   * annotation that is about to be assigned, it is likely that performing
   * such wholesale replacement is unfriendly towards other software
   * applications whose annotations are discarded.  An alternative may be
   * to use SBase::appendAnnotation(XMLNode annotation) or
   * SBase::appendAnnotation(string annotation).
   *
   * @param annotation an XML structure that is to be used as the new content
   * of the \'annotation\' subelement of this object
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   *
   * @see getAnnotationString()
   * @see isSetAnnotation()
   * @see setAnnotation(string annotation)
   * @see appendAnnotation(XMLNode annotation)
   * @see appendAnnotation(string annotation)
   * @see unsetAnnotation()
   */ public
";


%csmethodmodifiers SBase::setAnnotation(const std::string& annotation) "
/**
   * Sets the value of the \'annotation\' subelement of this SBML object.
   *
   * The content of @p annotation is copied, and any previous content of
   * this object\'s \'annotation\' subelement is deleted.
   * 
   * Whereas the SBase \'notes\' subelement is a container for content to be
   * shown directly to humans, the \'annotation\' element is a container for
   * optional software-generated content @em not meant to be shown to
   * humans.  Every object derived from SBase can have its own value for
   * \'annotation\'.  The element\'s content type is <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/2004/REC-xml-20040204/#elemdecls\'>XML type
   * \'any\'</a>, allowing essentially arbitrary well-formed XML data
   * content.
   *
   * SBML places a few restrictions on the organization of the content of
   * annotations; these are intended to help software tools read and write
   * the data as well as help reduce conflicts between annotations added by
   * different tools.  Please see the SBML specifications for more details.
   *
   * Call this method will result in any existing content of the
   * \'annotation\' subelement to be discarded.  Unless you have taken steps
   * to first copy and reconstitute any existing annotations into the @p
   * annotation that is about to be assigned, it is likely that performing
   * such wholesale replacement is unfriendly towards other software
   * applications whose annotations are discarded.  An alternative may be
   * to use SBase::appendAnnotation(XMLNode annotation) or
   * SBase::appendAnnotation(string annotation).
   *
   * @param annotation an XML string that is to be used as the content
   * of the \'annotation\' subelement of this object
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   *
   * @see getAnnotationString()
   * @see isSetAnnotation()
   * @see setAnnotation(XMLNode annotation)
   * @see appendAnnotation(XMLNode annotation)
   * @see appendAnnotation(string annotation)
   * @see unsetAnnotation()
   */ public
";


%csmethodmodifiers SBase::appendAnnotation(const XMLNode* annotation) "
/**
   * Appends the given @p annotation to the \'annotation\' subelement of this
   * object.
   * 
   * Whereas the SBase \'notes\' subelement is a container for content to be
   * shown directly to humans, the \'annotation\' element is a container for
   * optional software-generated content @em not meant to be shown to
   * humans.  Every object derived from SBase can have its own value for
   * \'annotation\'.  The element\'s content type is <a
   * target=\'_blank\'
   * href=\'http://www.w3.org/TR/2004/REC-xml-20040204/#elemdecls\'>XML type \'any\'</a>,
   * allowing essentially arbitrary well-formed XML data content.
   *
   * SBML places a few restrictions on the organization of the content of
   * annotations; these are intended to help software tools read and write
   * the data as well as help reduce conflicts between annotations added by
   * different tools.  Please see the SBML specifications for more details.
   *
   * Unlike SBase::setAnnotation(XMLNode annotation) or
   * SBase::setAnnotation(string annotation), this method
   * allows other annotations to be preserved when an application adds its
   * own data.
   *
   * @param annotation an XML structure that is to be copied and appended
   * to the content of the \'annotation\' subelement of this object
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   *
   * @see getAnnotationString()
   * @see isSetAnnotation()
   * @see setAnnotation(XMLNode annotation)
   * @see setAnnotation(string annotation)
   * @see appendAnnotation(string annotation)
   * @see unsetAnnotation()
   */ public
";


%csmethodmodifiers SBase::appendAnnotation(const std::string& annotation) "
/**
   * Appends the given @p annotation to the \'annotation\' subelement of this
   * object.
   *
   * Whereas the SBase \'notes\' subelement is a container for content to be
   * shown directly to humans, the \'annotation\' element is a container for
   * optional software-generated content @em not meant to be shown to
   * humans.  Every object derived from SBase can have its own value for
   * \'annotation\'.  The element\'s content type is <a
   * target=\'_blank\'
   * href=\'http://www.w3.org/TR/2004/REC-xml-20040204/#elemdecls\'>XML type \'any\'</a>,
   * allowing essentially arbitrary well-formed XML data content.
   *
   * SBML places a few restrictions on the organization of the content of
   * annotations; these are intended to help software tools read and write
   * the data as well as help reduce conflicts between annotations added by
   * different tools.  Please see the SBML specifications for more details.
   *
   * Unlike SBase::setAnnotation(XMLNode annotation) or
   * SBase::setAnnotation(string annotation), this method
   * allows other annotations to be preserved when an application adds its
   * own data.
   *
   * @param annotation an XML string that is to be copied and appended
   * to the content of the \'annotation\' subelement of this object
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   *
   * @see getAnnotationString()
   * @see isSetAnnotation()
   * @see setAnnotation(XMLNode annotation)
   * @see setAnnotation(string annotation)
   * @see appendAnnotation(XMLNode annotation)
   * @see unsetAnnotation()
   */ public
";


%csmethodmodifiers SBase::removeTopLevelAnnotationElement(const std::string elementName, const std::string elementURI = "", bool removeEmpty = true) "
/**
   * Removes the top-level element within the \'annotation\' subelement of this
   * SBML object with the given name and optional URI.
   *
   * SBML places a few restrictions on the organization of the content of
   * annotations; these are intended to help software tools read and write
   * the data as well as help reduce conflicts between annotations added by
   * different tools.  Please see the SBML specifications for more details.
   *
   * Calling this method allows a particular annotation element to be removed
   * whilst the remaining annotations remain intact.
   *
   * @param elementName a string representing the name of the top level
   * annotation element that is to be removed
   * @param elementURI an optional string that is used to check both the name
   * and URI of the top level element to be removed
   * @param removeEmpty if after removing of the element, the annotation is 
   * empty, and the removeEmpty argument is true, the annotation node will be 
   * deleted (default). 
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_ANNOTATION_NAME_NOT_FOUND LIBSBML_ANNOTATION_NAME_NOT_FOUND @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_ANNOTATION_NS_NOT_FOUND LIBSBML_ANNOTATION_NS_NOT_FOUND @endlink
   *
   * @see replaceTopLevelAnnotationElement(XMLNode )
   * @see replaceTopLevelAnnotationElement(string)
   */ public
";


%csmethodmodifiers SBase::replaceTopLevelAnnotationElement(const XMLNode* annotation) "
/**
   * Replaces the given top-level element within the \'annotation\' 
   * subelement of this SBML object and with the annotation element supplied.
   *
   * SBML places a few restrictions on the organization of the content of
   * annotations; these are intended to help software tools read and write
   * the data as well as help reduce conflicts between annotations added by
   * different tools.  Please see the SBML specifications for more details.
   *
   * This method determines the name of the element to be replaced from the
   * annotation argument. Functionally it is equivalent to calling <code>
   * removeTopLevelAnnotationElement(name)</code> followed by calling
   * <code>appendAnnotation(annotation_with_name)</code>, with the exception
   * that the placement of the annotation element remains the same.
   *
   * @param annotation XMLNode representing the replacement top level annotation 
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   *
   * @see removeTopLevelAnnotationElement(string elementName, string elementURI)
   * @see replaceTopLevelAnnotationElement(string)
   */ public
";


%csmethodmodifiers SBase::replaceTopLevelAnnotationElement(const std::string& annotation) "
/**
   * Replaces the given top-level element within the \'annotation\' 
   * subelement of this SBML object and with the annotation element supplied.
   *
   * SBML places a few restrictions on the organization of the content of
   * annotations; these are intended to help software tools read and write
   * the data as well as help reduce conflicts between annotations added by
   * different tools.  Please see the SBML specifications for more details.
   *
   * This method determines the name of the element to be replaced from the
   * annotation argument. Functionally it is equivalent to calling <code>
   * removeTopLevelAnnotationElement(name)</code> followed by calling
   * <code>appendAnnotation(annotation_with_name)</code>, with the exception
   * that the placement of the annotation element remains the same.
   *
   * @param annotation string representing the replacement top level annotation 
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   *
   * @see removeTopLevelAnnotationElement(string elementName, string elementURI)
   * @see replaceTopLevelAnnotationElement(XMLNode)
   */ public
";


%csmethodmodifiers SBase::setNotes(const XMLNode* notes) "
/**
   * Sets the value of the \'notes\' subelement of this SBML object.
   *
   * The content of @p notes is copied, and any existing content of this
   * object\'s \'notes\' subelement is deleted.
   *
   * The optional SBML element named \'notes\', present on every major SBML
   * component type, is intended as a place for storing optional
   * information intended to be seen by humans.  An example use of the
   * \'notes\' element would be to contain formatted user comments about the
   * model element in which the \'notes\' element is enclosed.  Every object
   * derived directly or indirectly from type SBase can have a separate
   * value for \'notes\', allowing users considerable freedom when adding
   * comments to their models.
   *
   * The format of \'notes\' elements must be <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/xhtml1/\'>XHTML&nbsp;1.0</a>.  To help
   * verify the formatting of \'notes\' content, libSBML provides the static
   * utility method SyntaxChecker::hasExpectedXHTMLSyntax(@if java XMLNode xhtml@endif); however,
   * readers are urged to consult the appropriate <a target=\'_blank\'
   * href=\'http://sbml.org/Documents/Specifications\'>SBML specification
   * document</a> for the Level and Version of their model for more
   * in-depth explanations.  The SBML Level&nbsp;2 and &nbsp;3
   * specifications have considerable detail about how \'notes\' element
   * content must be structured.
   *
   * @param notes an XML structure that is to be used as the content of the
   * \'notes\' subelement of this object
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   *
   * @see getNotesString()
   * @see isSetNotes()
   * @see setNotes(string notes, bool addXHTMLMarkup)
   * @see appendNotes(XMLNode notes)
   * @see appendNotes(string notes)
   * @see unsetNotes()
   * @see SyntaxChecker::hasExpectedXHTMLSyntax(@if java XMLNode xhtml@endif)
   */ public
";


%csmethodmodifiers SBase::setNotes(const std::string& notes, bool addXHTMLMarkup = false) "
/**
   * Sets the value of the \'notes\' subelement of this SBML object to a copy
   * of the string @p notes.
   *
   * The content of @p notes is copied, and any existing content of this
   * object\'s \'notes\' subelement is deleted.
   *
   * The optional SBML element named \'notes\', present on every major SBML
   * component type, is intended as a place for storing optional
   * information intended to be seen by humans.  An example use of the
   * \'notes\' element would be to contain formatted user comments about the
   * model element in which the \'notes\' element is enclosed.  Every object
   * derived directly or indirectly from type SBase can have a separate
   * value for \'notes\', allowing users considerable freedom when adding
   * comments to their models.
   *
   * The format of \'notes\' elements must be <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/xhtml1/\'>XHTML&nbsp;1.0</a>.  To help
   * verify the formatting of \'notes\' content, libSBML provides the static
   * utility method SyntaxChecker::hasExpectedXHTMLSyntax(@if java XMLNode xhtml@endif); however,
   * readers are urged to consult the appropriate <a target=\'_blank\'
   * href=\'http://sbml.org/Documents/Specifications\'>SBML specification
   * document</a> for the Level and Version of their model for more
   * in-depth explanations.  The SBML Level&nbsp;2 and &nbsp;3
   * specifications have considerable detail about how \'notes\' element
   * content must be structured.
   *
   * The following code illustrates a very simple way of setting the notes
   * using this method.  Here, the object being annotated is the whole SBML
   * document, but that is for illustration purposes only; you could of
   * course use this same approach to annotate any other SBML component.
   * @if clike
@verbatim
SBMLDocument s = new SBMLDocument(3, 1);
s->setNotes(\'<body xmlns=\'http://www.w3.org/1999/xhtml\'><p>here is my note</p></body>\');
@endverbatim
   * @endif@if java
@verbatim
SBMLDocument s = new SBMLDocument(3, 1);
s.setNotes(\'<body xmlns=\'http://www.w3.org/1999/xhtml\'><p>here is my note</p></body>\');
@endverbatim
   * @endif@if csharp
@verbatim
SBMLDocument s = new SBMLDocument(3, 1);
s.setNotes(\'<body xmlns=\'http://www.w3.org/1999/xhtml\'><p>here is my note</p></body>\');
@endverbatim
   * @endif
   *
   * @param notes an XML string that is to be used as the content of the
   * \'notes\' subelement of this object
   *
   * @param addXHTMLMarkup a bool indicating whether to wrap the contents
   * of the @p notes argument with XHTML paragraph (<code>&lt;p&gt;</code>)
   * tags.  This is appropriate when the string in @p notes does not already
   * containg the appropriate XHTML markup.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   *
   * @see getNotesString()
   * @see isSetNotes()
   * @see setNotes(XMLNode notes)
   * @see appendNotes(XMLNode notes)
   * @see appendNotes(string notes)
   * @see unsetNotes()
   * @see SyntaxChecker::hasExpectedXHTMLSyntax(@if java XMLNode xhtml@endif)
   */ public
";


%csmethodmodifiers SBase::appendNotes(const XMLNode* notes) "
/**
   * Appends the given @p notes to the \'notes\' subelement of this object.
   *
   * The content of @p notes is copied.
   *
   * The optional SBML element named \'notes\', present on every major SBML
   * component type, is intended as a place for storing optional
   * information intended to be seen by humans.  An example use of the
   * \'notes\' element would be to contain formatted user comments about the
   * model element in which the \'notes\' element is enclosed.  Every object
   * derived directly or indirectly from type SBase can have a separate
   * value for \'notes\', allowing users considerable freedom when adding
   * comments to their models.
   *
   * The format of \'notes\' elements must be <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/xhtml1/\'>XHTML&nbsp;1.0</a>.  To help
   * verify the formatting of \'notes\' content, libSBML provides the static
   * utility method SyntaxChecker::hasExpectedXHTMLSyntax(@if java XMLNode xhtml@endif); however,
   * readers are urged to consult the appropriate <a target=\'_blank\'
   * href=\'http://sbml.org/Documents/Specifications\'>SBML specification
   * document</a> for the Level and Version of their model for more
   * in-depth explanations.  The SBML Level&nbsp;2 and &nbsp;3
   * specifications have considerable detail about how \'notes\' element
   * content must be structured.
   * 
   * @param notes an XML node structure that is to appended to the content
   * of the \'notes\' subelement of this object
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   *
   * @see getNotesString()
   * @see isSetNotes()
   * @see setNotes(XMLNode notes)
   * @see setNotes(string notes, bool addXHTMLMarkup)
   * @see appendNotes(string notes)
   * @see unsetNotes()
   * @see SyntaxChecker::hasExpectedXHTMLSyntax(@if java XMLNode xhtml@endif)
   */ public
";


%csmethodmodifiers SBase::appendNotes(const std::string& notes) "
/**
   * Appends the given @p notes to the \'notes\' subelement of this object.
   *
   * The content of the parameter @p notes is copied.
   *
   * The optional SBML element named \'notes\', present on every major SBML
   * component type, is intended as a place for storing optional
   * information intended to be seen by humans.  An example use of the
   * \'notes\' element would be to contain formatted user comments about the
   * model element in which the \'notes\' element is enclosed.  Every object
   * derived directly or indirectly from type SBase can have a separate
   * value for \'notes\', allowing users considerable freedom when adding
   * comments to their models.
   *
   * The format of \'notes\' elements must be <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/xhtml1/\'>XHTML&nbsp;1.0</a>.  To help
   * verify the formatting of \'notes\' content, libSBML provides the static
   * utility method SyntaxChecker::hasExpectedXHTMLSyntax(@if java XMLNode xhtml@endif); however,
   * readers are urged to consult the appropriate <a target=\'_blank\'
   * href=\'http://sbml.org/Documents/Specifications\'>SBML specification
   * document</a> for the Level and Version of their model for more
   * in-depth explanations.  The SBML Level&nbsp;2 and &nbsp;3
   * specifications have considerable detail about how \'notes\' element
   * content must be structured.
   *
   * @param notes an XML string that is to appended to the content of
   * the \'notes\' subelement of this object
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   *
   * @see getNotesString()
   * @see isSetNotes()
   * @see setNotes(XMLNode notes)
   * @see setNotes(string notes, bool addXHTMLMarkup)
   * @see appendNotes(XMLNode notes)
   * @see unsetNotes()
   * @see SyntaxChecker::hasExpectedXHTMLSyntax(@if java XMLNode xhtml@endif)
   */ public
";


%csmethodmodifiers SBase::setModelHistory(ModelHistory * history) "
/**
   * Sets the ModelHistory of this object.
   *
   * The content of @p history is copied, and this object\'s existing model
   * history content is deleted.
   *
   * @param history ModelHistory of this object.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   * 
   * @note In SBML Level&nbsp;2, model history annotations were only
   * permitted on the Model element.  In SBML Level&nbsp;3, they are
   * permitted on all SBML components derived from SBase.
   */ public
";


%csmethodmodifiers SBase::setSBMLDocument(SBMLDocument* d) "
/**
   * Sets the parent SBMLDocument of this SBML object.
   *
   * *
 * 
 * LibSBML uses the class SBMLDocument as a top-level container for
 * storing SBML content and data associated with it (such as warnings and
 * error messages).  An SBML model in libSBML is contained inside an
 * SBMLDocument object.  SBMLDocument corresponds roughly to the class
 * <i>SBML</i> defined in the SBML Level&nbsp;3 and Level&nbsp;2
 * specifications, but it does not have a direct correspondence in SBML
 * Level&nbsp;1.  (But, it is created by libSBML no matter whether the
 * model is Level&nbsp;1, Level&nbsp;2 or Level&nbsp;3.)
 *
 *
   * 
   * @param d the SBMLDocument object to use
   *
   * @see connectToChild()
   * @if clike
   * @see enablePackageInternal()
   * @endif
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::connectToParent(SBase* parent) "
/**
   * Sets the parent SBML object of this SBML object.
   * (Creates a child-parent relationship by the child)
   * This function is called when a child element is
   * set/added/created by its parent element (e.g. by setXXX,
   * addXXX, createXXX, and connectToChild functions of the
   * parent element).
   *
   * @param parent the SBML object to use
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::connectToChild "
/**
   * Sets this SBML object to child SBML objects (if any).
   * (Creates a child-parent relationship by the parent)
   *
   * Subclasses must override this function if they define
   * one ore more child elements.
   * Basically, this function needs to be called in
   * constructor, copy constructor, assignment operator.
   *
   * @if clike
   * @see setSBMLDocument()
   * @see enablePackageInternal()
   * @endif
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::setSBOTerm(int value) "
/**
   * Sets the value of the \'sboTerm\' attribute.
   *
   * Beginning with SBML Level 2 Version 3, objects derived from SBase have
   * an optional attribute named \'sboTerm\' for supporting the use of the
   * Systems Biology Ontology.  In SBML proper, the data type of the
   * attribute is a string of the form \'SBO:NNNNNNN\', where \'NNNNNNN\' is a
   * seven digit integer number; libSBML simplifies the representation by
   * only storing the \'NNNNNNN\' integer portion.  Thus, in libSBML, the
   * \'sboTerm\' attribute on SBase has data type @c int, and SBO identifiers
   * are stored simply as integers. 
   *
   * SBO terms are a type of optional annotation, and each different class
   * of SBML object derived from SBase imposes its own requirements about
   * the values permitted for \'sboTerm\'.  Please consult the SBML
   * Level&nbsp;2 Version&nbsp;4 specification for more information about
   * the use of SBO and the \'sboTerm\' attribute.
   *
   * @param value the NNNNNNN integer portion of the SBO identifier
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   *
   * @see setSBOTerm(@if java String sbo_id@else string sboid@endif)
   */ public
";


%csmethodmodifiers SBase::setSBOTerm(const std::string &sboid) "
/**
   * Sets the value of the \'sboTerm\' attribute by string.
   *
   * Beginning with SBML Level 2 Version 3, objects derived from SBase have
   * an optional attribute named \'sboTerm\' for supporting the use of the
   * Systems Biology Ontology.  In SBML proper, the data type of the
   * attribute is a string of the form \'SBO:NNNNNNN\', where \'NNNNNNN\' is a
   * seven digit integer number; libSBML simplifies the representation by
   * only storing the \'NNNNNNN\' integer portion.  Thus, in libSBML, the
   * \'sboTerm\' attribute on SBase has data type @c int, and SBO identifiers
   * are stored simply as integers.  This method lets you set the value of
   * \'sboTerm\' as a complete string of the form \'SBO:NNNNNNN\', whereas
   * setSBOTerm(int value) allows you to set it using the integer form.
   *
   * SBO terms are a type of optional annotation, and each different class
   * of SBML object derived from SBase imposes its own requirements about
   * the values permitted for \'sboTerm\'.  Please consult the SBML
   * Level&nbsp;2 Version&nbsp;4 specification for more information about
   * the use of SBO and the \'sboTerm\' attribute.
   *
   * @param sboid the SBO identifier string of the form \'SBO:NNNNNNN\'
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   *
   * @see setSBOTerm(int value)
   */ public
";


%csmethodmodifiers SBase::setNamespaces(XMLNamespaces* xmlns) "
/**
   * Sets the namespaces relevant of this SBML object.
   *
   * The content of @p xmlns is copied, and this object\'s existing
   * namespace content is deleted.
   *
   * The SBMLNamespaces object encapsulates SBML Level/Version/namespaces
   * information.  It is used to communicate the SBML Level, Version, and
   * (in Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.
   * 
   * @param xmlns the namespaces to set
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   */ public
";


%csmethodmodifiers SBase::unsetMetaId "
/**
   * Unsets the value of the \'metaid\' attribute of this SBML object.
   *
   * *
 * 
 * The optional attribute named \'metaid\', present on every major SBML
 * component type, is for supporting metadata annotations using RDF (<a
 * href=\'http://www.w3.org/RDF/\'>Resource Description Format</a>).  The
 * attribute value has the data type <a
 * href=\'http://www.w3.org/TR/REC-xml/#id\'>XML <code>ID</code></a>, the XML
 * identifier type, which means each \'metaid\' value must be globally unique
 * within an SBML file.  The latter point is important, because the
 * uniqueness criterion applies across <em>any</em> attribute with type
 * <code>ID</code> anywhere in the file, not just the \'metaid\' attribute used
 * by SBML&mdash;something to be aware of if your application-specific XML
 * content inside the \'annotation\' subelement happens to use the XML
 * <code>ID</code> type.  Although SBML itself specifies the use of <a
 * href=\'http://www.w3.org/TR/REC-xml/#id\'>XML <code>ID</code></a> only for
 * the \'metaid\' attribute, SBML-compatible applications should be careful if
 * they use XML <code>ID</code>\'s in XML portions of a model that are not
 * defined by SBML, such as in the application-specific content of the
 * \'annotation\' subelement.  Finally, note that LibSBML does not provide an
 * explicit XML <code>ID</code> data type; it uses ordinary character
 * strings, which is easier for applications to support.
 * 
 * 
   *  
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers SBase::unsetId "
/**
   * Unsets the value of the \'id\' attribute of this SBML object.
   *
   * Most (but not all) objects in SBML include two common attributes: \'id\'
   * and \'name\'.  The identifier given by an object\'s \'id\' attribute value
   * is used to identify the object within the SBML model definition.
   * Other objects can refer to the component using this identifier.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers SBase::unsetName "
/**
   * Unsets the value of the \'name\' attribute of this SBML object.
   * 
   * Most (but not all) objects in SBML include two common attributes: \'id\'
   * and \'name\'.  In contrast to the \'id\' attribute, the \'name\' attribute is
   * optional and is not intended to be used for cross-referencing purposes
   * within a model.  Its purpose instead is to provide a human-readable
   * label for the component.  The data type of \'name\' is the type
   * <code>string</code> defined in XML Schema.  SBML imposes no
   * restrictions as to the content of \'name\' attributes beyond those
   * restrictions defined by the <code>string</code> type in XML Schema.
   *
   * The recommended practice for handling \'name\' is as follows.  If a
   * software tool has the capability for displaying the content of \'name\'
   * attributes, it should display this content to the user as a
   * component\'s label instead of the component\'s \'id\'.  If the user
   * interface does not have this capability (e.g., because it cannot
   * display or use special characters in symbol names), or if the \'name\'
   * attribute is missing on a given component, then the user interface
   * should display the value of the \'id\' attribute instead.  (Script
   * language interpreters are especially likely to display \'id\' instead of
   * \'name\'.)
   * 
   * As a consequence of the above, authors of systems that automatically
   * generate the values of \'id\' attributes should be aware some systems
   * may display the \'id\'\'s to the user.  Authors therefore may wish to
   * take some care to have their software create \'id\' values that are: (a)
   * reasonably easy for humans to type and read; and (b) likely to be
   * meaningful, for example by making the \'id\' attribute be an abbreviated
   * form of the name attribute value.
   * 
   * An additional point worth mentioning is although there are
   * restrictions on the uniqueness of \'id\' values, there are no
   * restrictions on the uniqueness of \'name\' values in a model.  This
   * allows software applications leeway in assigning component identifiers.
   * 
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers SBase::unsetNotes "
/**
   * Unsets the value of the \'notes\' subelement of this SBML object.
   *
   * The optional SBML element named \'notes\', present on every major SBML
   * component type, is intended as a place for storing optional
   * information intended to be seen by humans.  An example use of the
   * \'notes\' element would be to contain formatted user comments about the
   * model element in which the \'notes\' element is enclosed.  Every object
   * derived directly or indirectly from type SBase can have a separate
   * value for \'notes\', allowing users considerable freedom when adding
   * comments to their models.
   *
   * The format of \'notes\' elements must be <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/xhtml1/\'>XHTML&nbsp;1.0</a>.  To help
   * verify the formatting of \'notes\' content, libSBML provides the static
   * utility method SyntaxChecker::hasExpectedXHTMLSyntax(@if java XMLNode xhtml@endif); however,
   * readers are urged to consult the appropriate <a target=\'_blank\'
   * href=\'http://sbml.org/Documents/Specifications\'>SBML specification
   * document</a> for the Level and Version of their model for more
   * in-depth explanations.  The SBML Level&nbsp;2 and &nbsp;3
   * specifications have considerable detail about how \'notes\' element
   * content must be structured.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   *
   * @see getNotesString()
   * @see isSetNotes()
   * @see setNotes(XMLNode notes)
   * @see setNotes(string notes, bool addXHTMLMarkup)
   * @see appendNotes(XMLNode notes)
   * @see appendNotes(string notes)
   * @see SyntaxChecker::hasExpectedXHTMLSyntax(@if java XMLNode xhtml@endif)
   */ public
";


%csmethodmodifiers SBase::unsetAnnotation "
/**
   * Unsets the value of the \'annotation\' subelement of this SBML object.
   *
   * Whereas the SBase \'notes\' subelement is a container for content to be
   * shown directly to humans, the \'annotation\' element is a container for
   * optional software-generated content @em not meant to be shown to
   * humans.  Every object derived from SBase can have its own value for
   * \'annotation\'.  The element\'s content type is <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/2004/REC-xml-20040204/#elemdecls\'>XML type
   * \'any\'</a>, allowing essentially arbitrary well-formed XML data
   * content.
   *
   * SBML places a few restrictions on the organization of the content of
   * annotations; these are intended to help software tools read and write
   * the data as well as help reduce conflicts between annotations added by
   * different tools.  Please see the SBML specifications for more details.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   *
   * @see getAnnotation()
   * @see getAnnotationString()
   * @see isSetAnnotation()
   * @see setAnnotation(XMLNode annotation)
   * @see setAnnotation(string annotation)
   * @see appendAnnotation(XMLNode annotation)
   * @see appendAnnotation(string annotation)
   */ public
";


%csmethodmodifiers SBase::unsetSBOTerm "
/**
   * Unsets the value of the \'sboTerm\' attribute of this SBML object.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   */ public
";


%csmethodmodifiers SBase::addCVTerm(CVTerm * term, bool newBag = false) "
/**
   * Adds a copy of the given CVTerm object to this SBML object.
   *
   * @param term the CVTerm to assign.
   *
   * @param newBag if @c true, creates a new RDF bag with the same identifier
   * as a previous bag, and if @c false, adds the term to an existing
   * RDF bag with the same type of qualifier as the term being added.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink, if
   * this object lacks a \'metaid\' attribute
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   *
   * @note Since the CV Term uses the \'metaid\' attribute of the object as a
   * reference, if the object has no \'metaid\' attribute value set, then the
   * CVTerm will not be added.
   *
   * * 
 * @note This method should be used with some caution.  The fact that this
 * method @em copies the object passed to it means that the caller will be
 * left holding a physically different object instance than the one contained
 * inside this object.  Changes made to the original object instance (such as
 * resetting attribute values) will <em>not affect the instance in this
 * object</em>.  In addition, the caller should make sure to free the
 * original object if it is no longer being used, or else a memory leak will
 * result.  Please see other methods on this class (particularly a
 * corresponding method whose name begins with the word <code>create</code>)
 * for alternatives that do not lead to these issues.
 *
 *
   * 
   * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
   */ public
";


%csmethodmodifiers SBase::getCVTerms "
/**
   * Returns a list of CVTerm objects in the annotations of this SBML
   * object.
   * 
   * @return the list of CVTerms for this SBML object.
   */ public
";


%csmethodmodifiers SBase::getCVTerms() const "
/**
   * Returns a list of CVTerm objects in the annotations of this SBML
   * object.
   * 
   * @return the list of CVTerms for this SBML object.
   */ public
";


%csmethodmodifiers SBase::getNumCVTerms "
/**
   * Returns the number of CVTerm objects in the annotations of this SBML
   * object.
   * 
   * @return the number of CVTerms for this SBML object.
   */ public
";


%csmethodmodifiers SBase::getCVTerm(unsigned int n) "
/**
   * Returns the nth CVTerm in the list of CVTerms of this SBML
   * object.
   * 
   * @param n long the index of the CVTerm to retrieve
   *
   * @return the nth CVTerm in the list of CVTerms for this SBML object.
   */ public
";


%csmethodmodifiers SBase::unsetCVTerms "
/**
   * Clears the list of CVTerm objects attached to this SBML object.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers SBase::unsetModelHistory "
/**
   * Unsets the ModelHistory object attached to this object.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   * 
   * @note In SBML Level&nbsp;2, model history annotations were only
   * permitted on the Model element.  In SBML Level&nbsp;3, they are
   * permitted on all SBML components derived from SBase.
   */ public
";


%csmethodmodifiers SBase::getResourceBiologicalQualifier(std::string resource) "
/**
   * Returns the MIRIAM <em>biological qualifier</em> associated with the
   * given resource.
   *
   * In <a target=\'_blank\' href=\'http://biomodels.net/miriam\'>MIRIAM</a>,
   * qualifiers are an optional means of indicating the relationship
   * between a model component and its annotations.  There are two broad
   * kinds of annotations: <em>model</em> and <em>biological</em>.  The
   * latter kind is used to qualify the relationship between a model
   * component and a biological entity which it represents.  Examples of
   * relationships include \'is\' and \'has part\', but many others are
   * possible.  MIRIAM defines <a target=\'_blank\'
   * href=\'http://www.ebi.ac.uk/miriam/main/qualifiers/\'>numerous
   * relationship qualifiers</a> to enable different software tools to
   * qualify biological annotations in the same standardized way.  In
   * libSBML, the MIRIAM controlled-vocabulary annotations on an SBML model
   * element are represented using lists of CVTerm objects, and the
   * the MIRIAM biological qualifiers are represented using
   * values @if clike from the enumeration
   * type #BiolQualifierType_t.@endif@if python whose
   * names begin with <code>BQB_</code> in the interface class
   * @link libsbml libsbml@endlink.@endif@if java whose
   * names begin with <code>BQB_</code> in the interface class
   * {@link libsbmlConstants}.@endif@if csharp whose
   * names begin with <code>BQB_</code> in the interface class
   * @link libsbmlcs.libsbml libsbml@endlink.@endif
   *
   * This method searches the controlled-vocabulary annotations
   * (i.e., the list of CVTerm objects) on the present object, then out of
   * those that have biological qualifiers, looks for an annotation to the
   * given @p resource.  If such an annotation is found, it returns the
   * type of biological qualifier associated with that resource as a 
   * value @if clike from the enumeration type
   * #BiolQualifierType_t.@endif@if python whose name begins with
   * <code>BQB_</code> from the interface
   * class @link libsbml libsbml@endlink.@endif@if java whose name
   * begins with <code>BQB_</code> from the interface
   * class {@link libsbmlConstants}.@endif@if csharp whose
   * names begin with <code>BQB_</code> in the interface class
   * @link libsbmlcs.libsbml libsbml@endlink.@endif
   *
   * @param resource string representing the resource; e.g.,
   * <code>\'http://www.geneontology.org/#GO:0005892\'</code>.
   *
   * @return the qualifier associated with the resource,
   * or @link libsbmlcs.libsbml.BQB_UNKNOWN BQB_UNKNOWN@endlink if the
   * resource does not exist.
   *
   * @if clike
   * @note The set of MIRIAM biological qualifiers grows over
   * time, although relatively slowly.  The values in the enumeration
   * #BiolQualifierType_t are up to date with MIRIAM at the time of a given
   * libSBML release.  The set of values may be expanded in later libSBML
   * releases, to match the values defined by MIRIAM at that later time.
   * @endif@if python
   * @note The set of MIRIAM biological qualifiers grows over
   * time, although relatively slowly.  The values are up to date with
   * MIRIAM at the time of a given libSBML release.  The set of values in
   * list of <code>BQB_</code> constants defined in @link libsbml
   * libsbml@endlink may be expanded in later libSBML releases, to match
   * the values defined by MIRIAM at that later time.
   * @endif@if java
   * @note The set of MIRIAM biological qualifiers grows over
   * time, although relatively slowly.  The values are up to date with
   * MIRIAM at the time of a given libSBML release.  The set of values in
   * list of <code>BQB_</code> constants defined in {@link libsbmlConstants}
   * may be expanded in later libSBML releases, to match
   * the values defined by MIRIAM at that later time.
   * @endif@if csharp
   * @note The set of MIRIAM biological qualifiers grows over
   * time, although relatively slowly.  The values are up to date with
   * MIRIAM at the time of a given libSBML release.  The set of values in
   * list of <code>BQB_</code> constants defined in @link libsbmlcs.libsbml libsbml@endlink
   * may be expanded in later libSBML releases, to match
   * the values defined by MIRIAM at that later time.
   * @endif
   */ public
";


%csmethodmodifiers SBase::getResourceModelQualifier(std::string resource) "
/**
   * Returns the MIRIAM <em>model qualifier</em> associated with the
   * given resource.
   *
   * In <a target=\'_blank\' href=\'http://biomodels.net/miriam\'>MIRIAM</a>,
   * qualifiers are an optional means of indicating the relationship
   * between a model component and its annotations.  There are two broad
   * kinds of annotations: <em>model</em> and <em>biological</em>.  The
   * former kind is used to qualify the relationship between a model
   * component and another modeling object.  An example qualifier is
   * \'isDerivedFrom\', to indicate that a given component of the model is
   * derived from the modeling object represented by the referenced
   * resource.  MIRIAM defines <a target=\'_blank\'
   * href=\'http://www.ebi.ac.uk/miriam/main/qualifiers/\'>numerous
   * relationship qualifiers</a> to enable different software tools to
   * qualify model annotations in the same standardized way.  In libSBML,
   * the MIRIAM controlled-vocabulary annotations on an SBML model element
   * are represented using lists of CVTerm objects, and the 
   * the MIRIAM model qualifiers are represented using
   * values @if clike from the enumeration
   * type #ModelQualifierType_t.@endif@if python whose
   * names begin with <code>BQM_</code> in the interface class
   * @link libsbml libsbml@endlink.@endif@if java whose
   * names begin with <code>BQM_</code> in the interface class
   * {@link libsbmlConstants}.@endif@if csharp whose
   * names begin with <code>BQB_</code> in the interface class
   * @link libsbmlcs.libsbml libsbml@endlink.@endif
   *
   * This method method searches the controlled-vocabulary annotations
   * (i.e., the list of CVTerm objects) on the present object, then out of
   * those that have model qualifiers, looks for an annotation to the given
   * @p resource.  If such an annotation is found, it returns the type of
   * type of model qualifier associated with that resource as a 
   * value @if clike from the enumeration type
   * #ModelQualifierType_t.@endif@if python whose name begins with
   * <code>BQM_</code> from the interface
   * class @link libsbml libsbml@endlink.@endif@if java whose name
   * begins with <code>BQM_</code> from the interface
   * class {@link libsbmlConstants}.@endif@if csharp whose
   * names begin with <code>BQB_</code> in the interface class
   * @link libsbmlcs.libsbml libsbml@endlink.@endif
   *
   * @param resource string representing the resource; e.g.,
   * <code>\'http://www.geneontology.org/#GO:0005892\'</code>.
   *
   * @return the @if clike #ModelQualifierType_t value@else model qualifier
   * type@endif associated with the resource, or @link
   * libsbmlcs.libsbml.BQM_UNKNOWN BQM_UNKNOWN@endlink if the resource
   * does not exist.
   *
   * @if clike
   * @note The set of MIRIAM biological qualifiers grows over
   * time, although relatively slowly.  The values in the enumeration
   * #ModelQualifierType_t are up to date with MIRIAM at the time of a given
   * libSBML release.  The set of values may be expanded in later libSBML
   * releases, to match the values defined by MIRIAM at that later time.
   * @endif@if python
   * @note The set of MIRIAM model qualifiers grows over
   * time, although relatively slowly.  The values are up to date with
   * MIRIAM at the time of a given libSBML release.  The set of values in
   * list of <code>BQM_</code> constants defined in @link libsbml
   * libsbml@endlink may be expanded in later libSBML releases, to match
   * the values defined by MIRIAM at that later time.
   * @endif@if java
   * @note The set of MIRIAM model qualifiers grows over
   * time, although relatively slowly.  The values are up to date with
   * MIRIAM at the time of a given libSBML release.  The set of values in
   * list of <code>BQM_</code> constants defined in {@link libsbmlConstants}
   * may be expanded in later libSBML releases, to match
   * the values defined by MIRIAM at that later time.
   * @endif@if csharp
   * @note The set of MIRIAM model qualifiers grows over
   * time, although relatively slowly.  The values are up to date with
   * MIRIAM at the time of a given libSBML release.  The set of values in
   * list of <code>BQM_</code> constants defined in @link libsbmlcs.libsbml libsbml@endlink
   * may be expanded in later libSBML releases, to match
   * the values defined by MIRIAM at that later time.
   * @endif
   */ public
";


%csmethodmodifiers SBase::getModel() const "
/**
   * Returns the Model object for the SBML Document in which the current object is located.
   * 
   * @return the Model object for the SBML Document of this SBML object.
   *
   * @see getParentSBMLObject()
   * @see getSBMLDocument()
   */ public
";


%csmethodmodifiers SBase::getLevel() const "
/**
   * Returns the SBML Level of the SBMLDocument object containing this
   * object.
   * 
   * *
 * 
 * LibSBML uses the class SBMLDocument as a top-level container for
 * storing SBML content and data associated with it (such as warnings and
 * error messages).  An SBML model in libSBML is contained inside an
 * SBMLDocument object.  SBMLDocument corresponds roughly to the class
 * <i>SBML</i> defined in the SBML Level&nbsp;3 and Level&nbsp;2
 * specifications, but it does not have a direct correspondence in SBML
 * Level&nbsp;1.  (But, it is created by libSBML no matter whether the
 * model is Level&nbsp;1, Level&nbsp;2 or Level&nbsp;3.)
 *
 *
   * 
   * @return the SBML level of this SBML object.
   * 
   * @see getVersion()
   * @see getNamespaces()
   * @see getPackageVersion()
   */ public
";


%csmethodmodifiers SBase::getVersion() const "
/**
   * Returns the Version within the SBML Level of the SBMLDocument object
   * containing this object.
   * 
   * *
 * 
 * LibSBML uses the class SBMLDocument as a top-level container for
 * storing SBML content and data associated with it (such as warnings and
 * error messages).  An SBML model in libSBML is contained inside an
 * SBMLDocument object.  SBMLDocument corresponds roughly to the class
 * <i>SBML</i> defined in the SBML Level&nbsp;3 and Level&nbsp;2
 * specifications, but it does not have a direct correspondence in SBML
 * Level&nbsp;1.  (But, it is created by libSBML no matter whether the
 * model is Level&nbsp;1, Level&nbsp;2 or Level&nbsp;3.)
 *
 *
   * 
   * @return the SBML version of this SBML object.
   *
   * @see getLevel()
   * @see getNamespaces()
   */ public
";


%csmethodmodifiers SBase::getPackageVersion() const "
/**
   * Returns the Version of the SBML Level&nbsp;3 package to which this
   * element belongs to.
   *
   * @return the version of the SBML Level&nbsp;3 package to which this
   * element belongs. The value @c 0 will be returned if this element
   * belongs to the SBML Level&nbsp;3 Core package.
   *
   * @see getLevel()
   * @see getVersion()
   */ public
";


%csmethodmodifiers SBase::getPackageName() const "
/**
   * Returns the name of the SBML Level&nbsp;3 package in which this
   * element is defined.
   *
   * @return the name of the SBML package in which this element is defined.
   * The string <code>&quot;core&quot;</code> will be returned if this
   * element is defined in SBML Level&nbsp;3 Core. The string
   * <code>&quot;unknown&quot;</code> will be returned if this element is
   * not defined in any SBML package.
   */ public
";


%csmethodmodifiers SBase::getTypeCode() const "
/**
   * Returns the libSBML type code for this object.
   * 
   * This method may return the type code of this SBML object, or it may
   * return @link libsbmlcs.libsbml.SBML_UNKNOWN SBML_UNKNOWN@endlink.  This
   * is because subclasses of SBase are not required to implement this
   * method to return a type code.  This method is meant primarily for the
   * LibSBML C interface, in which class and subclass information is not
   * readily available.
   *
   * @return the @if clike #SBMLTypeCode_t value@else SBML object type code@endif
   * of this SBML object or
   * @link libsbmlcs.libsbml.SBML_UNKNOWN SBML_UNKNOWN@endlink (the default).
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers SBase::hasValidLevelVersionNamespaceCombination "
/**
   * Predicate returning @c true if this
   * object\'s level/version and namespace values correspond to a valid
   * SBML specification.
   *
   * The valid combinations of SBML Level, Version and Namespace as of this
   * release of libSBML are the following:
   * <ul>
   * <li> Level&nbsp;1 Version&nbsp;2: <code>\'http://www.sbml.org/sbml/level1\'</code>
   * <li> Level&nbsp;2 Version&nbsp;1: <code>\'http://www.sbml.org/sbml/level2\'</code>
   * <li> Level&nbsp;2 Version&nbsp;2: <code>\'http://www.sbml.org/sbml/level2/version2\'</code>
   * <li> Level&nbsp;2 Version&nbsp;3: <code>\'http://www.sbml.org/sbml/level2/version3\'</code>
   * <li> Level&nbsp;2 Version&nbsp;4: <code>\'http://www.sbml.org/sbml/level2/version4\'</code>
   * <li> Level&nbsp;3 Version&nbsp;1 Core: <code>\'http://www.sbml.org/sbml/level3/version1/core\'</code>
   * </ul>
   *
   * @return @c true if the level, version and namespace values of this 
   * SBML object correspond to a valid set of values, @c false otherwise.
   */ public
";


%csmethodmodifiers SBase::getElementName() const "
/**
   * Returns the XML element name of this object.
   *
   * This is overridden by subclasses to return a string appropriate to the
   * SBML component.  For example, Model defines it as returning @c
   * \'model\', CompartmentType defines it as returning @c \'compartmentType\',
   * and so on.
   */ public
";


%csmethodmodifiers SBase::toSBML "
/**
   * Returns a string consisting of a partial SBML corresponding to just
   * this object.
   * 
   * @return the partial SBML that describes this SBML object.
   *
   * @warning <span class=\'warning\'>This is primarily provided for testing
   * and debugging purposes.  It may be removed in a future version of
   * libSBML.</span>
   */ public
";


%csmethodmodifiers SBase::toXMLNode "
/**
   * Returns this element as an XMLNode.
   * 
   * @return this element as an XMLNode.
   * 
   * @warning <span class=\'warning\'>This operation is computationally
   * expensive, because the element has to be fully serialized to a string
   * and then parsed into the XMLNode structure.  Attempting to convert a
   * large tree structure (e.g., a large Model) may consume significant
   * computer memory and time.</span>
   */ public
";


%csmethodmodifiers SBase::read(XMLNode& node, XMLErrorSeverityOverride_t flag = LIBSBML_OVERRIDE_DISABLED) "
/**
   * Reads (initializes) this SBML object by reading from the given XMLNode.
   * 
   * @param node The XMLNode to read from.
   *
   * @param flag An optional flag that determines how how errors are logged
   * during the reading process.
   *
   * @warning <span class=\'warning\'>This method is computationally expensive,
   * because the given node has to be serialized to a string first.
   * Attempting to serialize a large tree structure (e.g., a large Model) may
   * consume significant computer memory and time.</span>
   */ public
";


%csmethodmodifiers SBase::getPlugin(const std::string& package) "
/**
   * Returns a plug-in object (extension interface) for an SBML Level&nbsp;3
   * package extension with the given package name or URI.
   *
   * *
 * 
 * SBML Level&nbsp;3 consists of a <em>Core</em> definition that can be extended
 * via optional SBML Level&nbsp;3 <em>packages</em>.  A given model may indicate
 * that it uses one or more SBML packages, and likewise, a software tool may be
 * able to support one or more packages.  LibSBML does not come preconfigured
 * with all possible packages included and enabled, in part because not all
 * package specifications have been finalized.  To support the ability for
 * software systems to enable support for the Level&nbsp;3 packages they choose,
 * libSBML features a <em>plug-in</em> mechanism.  Each SBML Level&nbsp;3
 * package is implemented in a separate code plug-in that can be enabled by the
 * application to support working with that SBML package.  A given SBML model
 * may thus contain not only objects defined by SBML Level&nbsp;3 Core, but also
 * objects created by libSBML plug-ins supporting additional Level&nbsp;3
 * packages.
 *
 *
   *
   * @param package the name or URI of the package
   *
   * @return the plug-in object (the libSBML extension interface) of
   * a package extension with the given package name or URI.
   */ public
";


%csmethodmodifiers SBase::getPlugin(const std::string& package) const "
/**
   * Returns a plug-in object (extension interface) for an SBML Level&nbsp;3
   * package extension with the given package name or URI.
   *
   * *
 * 
 * SBML Level&nbsp;3 consists of a <em>Core</em> definition that can be extended
 * via optional SBML Level&nbsp;3 <em>packages</em>.  A given model may indicate
 * that it uses one or more SBML packages, and likewise, a software tool may be
 * able to support one or more packages.  LibSBML does not come preconfigured
 * with all possible packages included and enabled, in part because not all
 * package specifications have been finalized.  To support the ability for
 * software systems to enable support for the Level&nbsp;3 packages they choose,
 * libSBML features a <em>plug-in</em> mechanism.  Each SBML Level&nbsp;3
 * package is implemented in a separate code plug-in that can be enabled by the
 * application to support working with that SBML package.  A given SBML model
 * may thus contain not only objects defined by SBML Level&nbsp;3 Core, but also
 * objects created by libSBML plug-ins supporting additional Level&nbsp;3
 * packages.
 *
 *
   *
   * @param package the name or URI of the package
   *
   * @return the plug-in object (the libSBML extension interface) of a
   * package extension with the given package name or URI.
   */ public
";


%csmethodmodifiers SBase::getPlugin(unsigned int n) "
/**
   * Returns the nth plug-in object (extension interface) for an SBML Level&nbsp;3
   * package extension.
   *
   * *
 * 
 * SBML Level&nbsp;3 consists of a <em>Core</em> definition that can be extended
 * via optional SBML Level&nbsp;3 <em>packages</em>.  A given model may indicate
 * that it uses one or more SBML packages, and likewise, a software tool may be
 * able to support one or more packages.  LibSBML does not come preconfigured
 * with all possible packages included and enabled, in part because not all
 * package specifications have been finalized.  To support the ability for
 * software systems to enable support for the Level&nbsp;3 packages they choose,
 * libSBML features a <em>plug-in</em> mechanism.  Each SBML Level&nbsp;3
 * package is implemented in a separate code plug-in that can be enabled by the
 * application to support working with that SBML package.  A given SBML model
 * may thus contain not only objects defined by SBML Level&nbsp;3 Core, but also
 * objects created by libSBML plug-ins supporting additional Level&nbsp;3
 * packages.
 *
 *
   *
   * @param n the index of the plug-in to return
   *
   * @return the plug-in object (the libSBML extension interface) of
   * a package extension with the given package name or URI.
   */ public
";


%csmethodmodifiers SBase::getPlugin "
/**
   * Returns the nth plug-in object (extension interface) for an SBML Level&nbsp;3
   * package extension.
   *
   * *
 * 
 * SBML Level&nbsp;3 consists of a <em>Core</em> definition that can be extended
 * via optional SBML Level&nbsp;3 <em>packages</em>.  A given model may indicate
 * that it uses one or more SBML packages, and likewise, a software tool may be
 * able to support one or more packages.  LibSBML does not come preconfigured
 * with all possible packages included and enabled, in part because not all
 * package specifications have been finalized.  To support the ability for
 * software systems to enable support for the Level&nbsp;3 packages they choose,
 * libSBML features a <em>plug-in</em> mechanism.  Each SBML Level&nbsp;3
 * package is implemented in a separate code plug-in that can be enabled by the
 * application to support working with that SBML package.  A given SBML model
 * may thus contain not only objects defined by SBML Level&nbsp;3 Core, but also
 * objects created by libSBML plug-ins supporting additional Level&nbsp;3
 * packages.
 *
 *
   *
   * @param n the index of the plug-in to return
   *
   * @return the plug-in object (the libSBML extension interface) of a
   * package extension with the given package name or URI.
   */ public
";


%csmethodmodifiers SBase::getNumPlugins() const "
/**
   * Returns the number of plug-in objects (extenstion interfaces) for SBML
   * Level&nbsp;3 package extensions known.
   *
   * *
 * 
 * SBML Level&nbsp;3 consists of a <em>Core</em> definition that can be extended
 * via optional SBML Level&nbsp;3 <em>packages</em>.  A given model may indicate
 * that it uses one or more SBML packages, and likewise, a software tool may be
 * able to support one or more packages.  LibSBML does not come preconfigured
 * with all possible packages included and enabled, in part because not all
 * package specifications have been finalized.  To support the ability for
 * software systems to enable support for the Level&nbsp;3 packages they choose,
 * libSBML features a <em>plug-in</em> mechanism.  Each SBML Level&nbsp;3
 * package is implemented in a separate code plug-in that can be enabled by the
 * application to support working with that SBML package.  A given SBML model
 * may thus contain not only objects defined by SBML Level&nbsp;3 Core, but also
 * objects created by libSBML plug-ins supporting additional Level&nbsp;3
 * packages.
 *
 *
   *
   * @return the number of plug-in objects (extension interfaces) of
   * package extensions known by this instance of libSBML.
   */ public
";


%csmethodmodifiers SBase::enablePackage(const std::string& pkgURI, const std::string& pkgPrefix, bool flag) "
/**
   * Enables or disables the given SBML Level&nbsp;3 package on this object.
   *
   * This method enables the specified package on this object and other
   * objects connected by child-parent links in the same SBMLDocument object.
   * This method is the converse of
   * SBase::disablePackage(string pkgURI, string pkgPrefix).
   *
   * @param pkgURI the URI of the package.
   * 
   * @param pkgPrefix the XML prefix of the package
   * 
   * @param flag whether to enable (@c true) or disable (@c false) the package
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_PKG_UNKNOWN LIBSBML_PKG_UNKNOWN @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_PKG_VERSION_MISMATCH LIBSBML_PKG_VERSION_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_PKG_CONFLICTED_VERSION LIBSBML_PKG_CONFLICTED_VERSION @endlink
   *
   * @see disablePackage(string pkgURI, string pkgPrefix)
   */ public
";


%csmethodmodifiers SBase::disablePackage(const std::string& pkgURI, const std::string& pkgPrefix) "
/**
   * Disables the given SBML Level&nbsp;3 package on this object.
   *
   * This method disables the specified package on this object
   * and other objects connected by child-parent links in the same
   * SBMLDocument object.
   * 
   * An example of when this may be useful is during construction of model
   * components when mixing existing and new models.  Suppose your
   * application read an SBML document containing a model that used the SBML
   * Hierarchical Model Composition (&ldquo;comp&rdquo;) package, and
   * extracted parts of that model in order to construct a new model in
   * memory.  The new, in-memory model will not accept a component drawn from
   * an other SBMLDocument with different package namespace declarations.
   * You could reconstruct the same namespaces in the in-memory model first,
   * but as a shortcut, you could also disable the package namespace on the
   * object being added.  Here is a code example to help clarify this:
   * @if clike @verbatim
// We read in an SBML L3V1 model that uses the \'comp\' package namespace
doc = readSBML(\'sbml-file-with-comp-elements.xml\');

// We extract one of the species from the model we just read in.
Species s1 = doc->getModel()->getSpecies(0);

// We construct a new model.  This model does not use the \'comp\' package.
Model  newModel = new Model(3,1);

// The following will fail with an error, because addSpecies() will
// first check that the parent of the given object has namespaces
// declared, and will discover that s1 does but newModel does not.

// newModel->addSpecies(s1);

// However, if we disable the \'comp\' package on s1, then the call
// to addSpecies will work.

s1->disablePackage(\'http://www.sbml.org/sbml/level3/version1/comp/version1\',
                   \'comp\');
newModel->addSpecies(s1);
@endverbatim
@endif@if python
@verbatim
import sys
import os.path
from libsbml import *

# We read in an SBML L3V1 model that uses the \'comp\' package namespace
doc = readSBML(\'sbml-file-with-comp-elements.xml\');

# We extract one of the species from the model we just read in.
s1 = doc.getModel().getSpecies(0);

# We construct a new model.  This model does not use the \'comp\' package.
newDoc = SBMLDocument(3, 1);
newModel = newDoc.createModel();

# The following would fail with an error, because addSpecies() would
# first check that the parent of the given object has namespaces
# declared, and will discover that s1 does but newModel does not.

# newModel.addSpecies(s1);

# However, if we disable the \'comp\' package on s1, then the call
# to addSpecies will work.

s1.disablePackage(\'http://www.sbml.org/sbml/level3/version1/comp/version1\',
                  \'comp\');
newModel.addSpecies(s1);
@endverbatim
@endif@if java
@verbatim
// We read in an SBML L3V1 model that uses the \'comp\' package namespace
SBMLReader reader = new SBMLReader();
SBMLDocument doc = reader.readSBML(\'sbml-file-with-comp-elements.xml\');

// We extract one of the species from the model we just read in.
Species s1 = doc.getModel().getSpecies(0);

// We construct a new model.  This model does not use the \'comp\' package.
Model newModel = new Model(3,1);

// The following will fail with an error, because addSpecies() will
// first check that the parent of the given object has namespaces
// declared, and will discover that s1 does but newModel does not.

// newModel->addSpecies(s1);

// However, if we disable the \'comp\' package on s1, then the call
// to addSpecies will work.

s1->disablePackage(\'http://www.sbml.org/sbml/level3/version1/comp/version1\',
                   \'comp\');
newModel.addSpecies(s1);
@endverbatim
@endif
   *
   * @param pkgURI the URI of the package
   * 
   * @param pkgPrefix the XML prefix of the package
   * 
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_PKG_UNKNOWN LIBSBML_PKG_UNKNOWN @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_PKG_VERSION_MISMATCH LIBSBML_PKG_VERSION_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_PKG_CONFLICTED_VERSION LIBSBML_PKG_CONFLICTED_VERSION @endlink
   *
   * @see enablePackage(string pkgURI, string pkgPrefix, bool flag)
   */ public
";


%csmethodmodifiers SBase::enablePackageInternal(const std::string& pkgURI, const std::string& pkgPrefix, bool flag) "
/**
   * Enables/Disables the given package with this element and child
   * elements (if any).
   * (This is an internal implementation for enablePackage function)
   *
   * @note Subclasses in which one or more child elements are defined 
   * must override this function.
   *
   * @if clike
   * @see setSBMLDocument()
   * @endif
   * @see connectToChild()
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::isPackageURIEnabled(const std::string& pkgURI) const "
/**
   * Predicate returning @c true if an SBML Level&nbsp;3 package with the
   * given URI is enabled with this object.
   *
   * @param pkgURI the URI of the package
   *
   * @return @c true if the given package is enabled within this object, @c 
   * false otherwise.
   *
   * @see isPackageEnabled(@if java String pkgName@endif)
   */ public
";


%csmethodmodifiers SBase::isPackageEnabled(const std::string& pkgName) const "
/**
   * Predicate returning @c true if the given SBML Level&nbsp;3 package is
   * enabled with this object.
   *
   * The search ignores the package version.
   *
   * @param pkgName the name of the package
   *
   * @return @c true if the given package is enabled within this object, @c
   * false otherwise.
   *
   * @see isPackageURIEnabled(@if java String pkgURI@endif)
   */ public
";


%csmethodmodifiers SBase::isPkgURIEnabled(const std::string& pkgURI) const "
/**
   * Predicate returning @c true if an SBML Level&nbsp;3 package with the
   * given URI is enabled with this object.
   *
   * @param pkgURI the URI of the package
   *
   * @return @c true if the given package is enabled within this object, @c 
   * false otherwise.
   *
   * @see isPkgEnabled(@if java String pkgName@endif)
   *
   * @deprecated Replaced in libSBML 5.2.0 by
   * isPackageURIEnabled(@if java String pkgURI@endif)
   */ public
";


%csmethodmodifiers SBase::isPkgEnabled(const std::string& pkgName) const "
/**
   * Predicate returning @c true if the given SBML Level&nbsp;3 package is
   * enabled with this object.
   *
   * The search ignores the package version.
   *
   * @param pkgName the name of the package
   *
   * @return @c true if the given package is enabled within this object, @c
   * false otherwise.
   *
   * @see isPkgURIEnabled(@if java String pkgURI@endif)
   *
   * @deprecated Replaced in libSBML 5.2.0 by
   * isPackageEnabled(@if java String pkgName@endif)
   */ public
";


%csmethodmodifiers SBase::writeExtensionElements(XMLOutputStream& stream) const "
/**
   * Writes out contained SBML objects of package extensions (if any)
   * as XML elements.
   *
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::read(XMLInputStream& stream) "
/**
   * Reads (initializes) this SBML object by reading from XMLInputStream.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::write(XMLOutputStream& stream) const "
/**
   * Writes (serializes) this SBML object by writing it to XMLOutputStream.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.  For example:@if clike
   * <pre>
   *   SBase::writeElements();
   *   mReactants.write(stream);
   *   mProducts.write(stream);
   *   ...
   * </pre>@endif
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::hasRequiredAttributes() const "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::hasRequiredElements() const "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::checkCompatibility(const SBase * object) const "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::setSBMLNamespaces(SBMLNamespaces * sbmlns) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::setSBMLNamespacesAndOwn(SBMLNamespaces * sbmlns) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::getSBMLNamespaces() const "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::removeDuplicateAnnotations "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::checkMathMLNamespace(const XMLToken elem) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::getDerivedUnitDefinition "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::containsUndeclaredUnits "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::removeFromParentAndDelete "
/**
   * Removes this object from its parent.
   *
   * If the parent was storing this object as a pointer, it is deleted.  If
   * not, it is simply cleared (as in ListOf objects).  This is a pure
   * virtual method, as every SBase element has different parents, and
   * therefore different methods of removing itself.  Will fail (and not
   * delete itself) if it has no parent object.  This function is designed to
   * be overridden, but for all objects whose parent is of the class ListOf,
   * the default implementation will work.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers SBase::matchesSBMLNamespaces(const SBase * sb) "
/**
   * Returns @c true if this object\'s set of XML namespaces are the same
   * as the given object\'s XML namespaces.
   *
   * *
 *  
 * The SBMLNamespaces object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML\'s SBMLNamespaces facilities is to create an
 * SBMLNamespaces object somewhere in a program once, then hand that object
 * as needed to object constructors that accept SBMLNamespaces as arguments.
 *
 *
   *
   * @param sb an object to compare with respect to namespaces
   *
   * @return bool, @c true if this object\'s collection of namespaces is
   * the same as @p sb\'s, @c false otherwise.
   */ public
";


%csmethodmodifiers SBase::matchesSBMLNamespaces(const SBase * sb) const "
/**
   * Returns @c true if this object\'s set of XML namespaces are the same
   * as the given object\'s XML namespaces.
   *
   * *
 *  
 * The SBMLNamespaces object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML\'s SBMLNamespaces facilities is to create an
 * SBMLNamespaces object somewhere in a program once, then hand that object
 * as needed to object constructors that accept SBMLNamespaces as arguments.
 *
 *
   *
   * @param sb an object to compare with respect to namespaces
   *
   * @return bool, @c true if this object\'s collection of namespaces is
   * the same as @p sb\'s, @c false otherwise.
   */ public
";


%csmethodmodifiers SBase::matchesRequiredSBMLNamespacesForAddition(const SBase * sb) "
/**
   * Returns @c true if this object\'s set of XML namespaces are a subset
   * of the given object\'s XML namespaces.
   *
   * *
 *  
 * The SBMLNamespaces object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML\'s SBMLNamespaces facilities is to create an
 * SBMLNamespaces object somewhere in a program once, then hand that object
 * as needed to object constructors that accept SBMLNamespaces as arguments.
 *
 *
   *
   * @param sb an object to compare with respect to namespaces
   *
   * @return bool, @c true if this object\'s collection of namespaces is
   * a subset of @p sb\'s, @c false otherwise.
   */ public
";


%csmethodmodifiers SBase::matchesRequiredSBMLNamespacesForAddition(const SBase * sb) const "
/**
   * Returns @c true if this object\'s set of XML namespaces are a subset
   * of the given object\'s XML namespaces.
   *
   * *
 *  
 * The SBMLNamespaces object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML\'s SBMLNamespaces facilities is to create an
 * SBMLNamespaces object somewhere in a program once, then hand that object
 * as needed to object constructors that accept SBMLNamespaces as arguments.
 *
 *
   *
   * @param sb an object to compare with respect to namespaces
   *
   * @return bool, @c true if this object\'s collection of namespaces is
   * a subset of @p sb\'s, @c false otherwise.
   */ public
";


%csmethodmodifiers SBase::setUserData(void *userData) "
/**
   * Sets the user data of this element.
   *
   * *
 * 
 * The user data associated with an SBML object can be used by an application
 * developer to attach custom information to that object in the model.  In case
 * of a deep copy, this attribute will passed as it is.  The attribute will be
 * never interpreted by libSBML.
 * 
   * 
   * @param userData specifies the new user data. 
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers SBase::*getUserData() const "
/**
   * Returns the user data that has been previously set via setUserData().
   *
   * *
 * 
 * The user data associated with an SBML object can be used by an application
 * developer to attach custom information to that object in the model.  In case
 * of a deep copy, this attribute will passed as it is.  The attribute will be
 * never interpreted by libSBML.
 * 
   *
   * @return the user data of this node, or @c null if no user data has been set.
   * 
   * @if clike
   * @see ASTNode::setUserData(void *userData)
   * @endif
   */ public
";


%csmethodmodifiers SBase::getURI() const "
/**
   * Gets the namespace URI to which this element belongs to.
   *
   * For example, all elements that belong to SBML Level 3 Version 1 Core
   * must would have the URI \'http://www.sbml.org/sbml/level3/version1/core\';
   * all elements that belong to Layout Extension Version 1 for SBML Level 3
   * Version 1 Core must would have the URI
   * \'http://www.sbml.org/sbml/level3/version1/layout/version1/\'
   *
   * This function first returns the URI for this element by looking into the
   * SBMLNamespaces object of the document with the its package name.  If not
   * found, it will @if clike return the result of getElementNamespace()@else
   * return the XML namespace to which this element belongs@endif.
   *
   * @return the URI of this element
   *
   * @see getSBMLDocument()
   * @see getPackageName()
   * @if clike @see getElementNamespace() @endif
   */ public
";


%csmethodmodifiers SBase::getPrefix() const "
/**
   * Returns the namespace prefix of this element.
   */ public
";


%csmethodmodifiers SBase::setElementText(const std::string &text) "
/** 
   * When overridden allows SBase elements to use the text included in between
   * the elements tags. The default implementation does nothing.
   * 
   * @param text the text string found between the element tags.
   */ public
";


%csmethodmodifiers SBase::matchesCoreSBMLNamespace(const SBase * sb) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::matchesCoreSBMLNamespace(const SBase * sb) const "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::SBase(unsigned int level, unsigned int version) "
/**
   * Creates a new SBase object with the given SBML level, version.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::SBase(SBMLNamespaces* sbmlns) "
/**
   * Creates a new SBase object with the given SBMLNamespaces.
   * Only subclasses may create SBase objects.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::SBase(const SBase& orig) "
/**
  * Copy constructor. Creates a copy of this SBase object.
   *
   * @param orig the object to copy.
   * 
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the argument @p orig is @c null.
  */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::createObject(XMLInputStream& stream) "
/**
   * Subclasses should override this method to create, store, and then
   * return an SBML object corresponding to the next XMLToken in the
   * XMLInputStream.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or @c null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::hasValidLevelVersionNamespaceCombination(int typecode, XMLNamespaces *xmlns) "
/**
   * Predicate returning @c true if this
   * object\'s level/version and namespace values correspond to a valid
   * SBML specification.
   *
   * The valid combinations of SBML Level, Version and Namespace as of this
   * release of libSBML are the following:
   * <ul>
   * <li> Level&nbsp;1 Version&nbsp;2: <code>\'http://www.sbml.org/sbml/level1\'</code>
   * <li> Level&nbsp;2 Version&nbsp;1: <code>\'http://www.sbml.org/sbml/level2\'</code>
   * <li> Level&nbsp;2 Version&nbsp;2: <code>\'http://www.sbml.org/sbml/level2/version2\'</code>
   * <li> Level&nbsp;2 Version&nbsp;3: <code>\'http://www.sbml.org/sbml/level2/version3\'</code>
   * <li> Level&nbsp;2 Version&nbsp;4: <code>\'http://www.sbml.org/sbml/level2/version4\'</code>
   * <li> Level&nbsp;3 Version&nbsp;1 Core: <code>\'http://www.sbml.org/sbml/level3/version1/core\'</code>
   * </ul>
   *
   * @param typecode the typecode for this element
   * @param xmlns the namespaces used by this element.
   *
   * @note  This function is provided as convenience method to be called from constructors. This 
   *        allows to use it in scenarios where the namespaces or typecode have not yet been initialized. 
   * 
   * @return @c true if the level, version and namespace values of this 
   * SBML object correspond to a valid set of values, @c false otherwise.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::readOtherXML(XMLInputStream& stream) "
/**
   * Subclasses should override this method to read (and store) XHTML,
   * MathML, etc. directly from the XMLInputStream.
   *
   * @return true if the subclass read from the stream, false otherwise.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::getElementPosition() const "
/**
   * The SBML XML Schema is written such that the order of child elements
   * is significant.  LibSBML can read elements out of order.  If you
   * override this method to indicate the ordinal position of element with
   * respect to its siblings, libSBML will log an error if the element is
   * read out of order.
   *
   * @return the ordinal position of the element with respect to its
   * siblings or @c -1 (the default) to indicate the position is not
   * significant.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::getErrorLog "
/**
   * Returns the SBMLErrorLog used to log errors while reading and
   * validating SBML.
   *
   * @return the SBMLErrorLog used to log errors while reading and
   * validating SBML.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::logError(  unsigned int       id , const unsigned int level   = 2 , const unsigned int version = 3 , const std::string& details = "" ) "
/**
   * Convenience method for easily logging problems from within method
   * implementations.
   *
   * This is essentially a short form of getErrorLog()->logError(...)
   *
   * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::logUnknownAttribute( const std::string& attribute, const unsigned int level, const unsigned int version, const std::string& element, const std::string& prefix="") "
/**
   * Helper to log a common type of error.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::logUnknownElement( const std::string& element, const unsigned int level, const unsigned int version ) "
/**
   * Helper to log a common type of error.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::logEmptyString( const std::string& attribute, const unsigned int level, const unsigned int version, const std::string& element) "
/**
   * Helper to log a common type of error.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Subclasses should override this method to add the list of
   * expected attributes. Be sure to call your parents implementation 
   * of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Subclasses should override this method to read values from the given
   * XMLAttributes set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::writeAttributes(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.  For example:
   *
   *   SBase::writeAttributes(stream);
   *   stream.writeAttribute( \'id\'  , mId   );
   *   stream.writeAttribute( \'name\', mName );
   *   ...
   *
   * (NOTICE) this function doesn\'t write xmlns attributes.
   * Be sure to implement wirteXMLNS() function to write xmlns attributes.
   *
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::writeXMLNS(XMLOutputStream& stream) const "
/**
   *
   * Subclasses should override this method to write their xmlns attriubutes
   * (if any) to the XMLOutputStream. 
   *
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::syncAnnotation "
/**
   * Synchronizes the annotation of this SBML object.
   *
   * Annotation element (XMLNode mAnnotation) is synchronized with the 
   * current CVTerm objects (List* mCVTerm).
   * Currently, this method is called in getAnnotation, isSetAnnotation,
   * and writeElements methods.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::reconstructRDFAnnotation "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::checkOrderAndLogError(SBase* object, int expected) "
/**
   * Checks that the SBML element appears in the expected order.
   *
   * If @p object is not in the expected position, an error is logged.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::checkListOfPopulated(SBase* object) "
/**
   * Checks that an SBML ListOf element is populated.  
   * If a listOf element has been declared with no elements, 
   * an error is logged.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::checkUnitSyntax(unsigned int flag = 0) "
/**
   * Checks the syntax of the unit attribute.
   * The syntax of an unit is of type UnitSId which is defined as:
   *
   *  - letter ::= \'a\'..\'z\',\'A\'..\'Z\'
   *  - digit  ::= \'0\'..\'9\'
   *  - idChar ::= letter | digit | \'_\'
   *  - UnitSId    ::= ( letter | \'_\' ) idChar*
   *
   * If the syntax of the unit attribute of this object is incorrect, 
   * an error is logged
   *
   * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::checkDefaultNamespace(const XMLNamespaces* xmlns, const std::string& elementName, const std::string& prefix = "") "
/**
   * Checks that the given default namespace in the given element is valid.
   * If the given default namespace is not valid, an error is logged.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::checkAnnotation "
/**
   * Checks the annotation does not declare an sbml namespace.
   * If the annotation declares an sbml namespace an error is logged.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::checkXHTML(const XMLNode *) "
/**
   * Checks that the XHTML is valid.
   * If the xhtml does not conform to the specification of valid xhtml within
   * an sbml document, an error is logged.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::loadPlugins(SBMLNamespaces *sbmlns) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::createExtensionObject(XMLInputStream& stream) "
/**
   * Create, store, and then return an SBML object of package extensions
   * corresponding to the next XMLToken in the XMLInputStream.
   *
   * @return the SBML object of package extensions corresponding to next 
   * XMLToken in the XMLInputStream or @c null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::setElementNamespace(const std::string &uri) "
/**
   * Sets the XML namespace to which this element belongs to.
   * For example, all elements that belong to SBML Level 3 Version 1 Core
   * must set the namespace to \'http://www.sbml.org/sbml/level3/version1/core\'; 
   * all elements that belong to Layout Extension Version 1 for SBML Level 3
   * Version 1 Core must set the namespace to 
   * \'http://www.sbml.org/sbml/level3/version1/layout/version1/\'
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::getElementNamespace() const "
/**
   * Gets the XML namespace (URI) to which this element belongs to.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::readExtensionAttributes(const XMLAttributes& attributes, const ExpectedAttributes* expectedAttributes = NULL) "
/**
   * Read attributes of package extensions from the given XMLAttributes 
   * set into their specific fields. 
   * 
   * Be sure to call your parents implementation of this function as well.  
   * For example:
   * @if clike
@verbatim
SBase::readExtensionAttributes(attributes, expectedAttributes);
@endverbatim
   * @endif@if java
@verbatim
SBase.readExtensionAttributes(attributes, expectedAttributes);
@endverbatim
   * @endif@if java
@verbatim
SBase.readExtensionAttributes(attributes, expectedAttributes);
@endverbatim
   * @endif@if python
@verbatim
SBase.readExtensionAttributes(attributes, expectedAttributes);
@endverbatim
   * @endif
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::writeExtensionAttributes(XMLOutputStream& stream) const "
/**
   * Write attributes of package extensions to the XMLOutputStream.  
   *
   * Be sure to call your parents implementation of this function as well.  
   * For example:
   *
   *   SBase::writeExtensionAttributes(stream);
   *
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::storeUnknownExtAttribute(const std::string& element, const XMLAttributes& xattr, unsigned int index) "
/**
   * Stores the given attribute to the list of ignored attributes if
   * the given attribute belongs to some unknown package extension.
   * Unknown attribute error will be logged if the \'required\' attribute
   * of the package is \'true\' in SBMLDocument element.
   *
   * The stored attributes will be written out as-is when writing the 
   * SBMLDocument to a string or a file (i.e. Attributes and elements of 
   * unknown package extensions will not be lost when reading/writing 
   * a file/sting containing them.)
   *
   * @param element the string of element which contains the given attribute
   * @param xattr the XMLAttributes object which is contained in the given 
   * element
   * @param index the index of the target attribute in the given XMLAttributes
   * object.
   *
   * @return true will be returned if the given attribute belongs
   * to some unknown package extension, otherwise false will be returned.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::storeUnknownExtElement(XMLInputStream &stream) "
/**
   * Stores the element of next token if the element belongs to some 
   * unknown package extension. Unknown element error will be logged if
   * the \'required\' attribute of the package is \'true\' in SBMLDocument 
   * element.
   *
   * The stored elements will be written out as-is when writing the 
   * SBMLDocument to a string or a file (i.e. Attributes and elements of 
   * unknown package extensions will not be lost when reading/writing 
   * a file/sting containing them.)
   *
   * @return true will be returned if the element of next token belongs
   * to some unknown package extension, otherwise false will be returned.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::getSBMLPrefix() const "
/**
   * Return the SBML prefix of this element. This will be the same as getPrefix()
   * unless the element in question is an element of an SBML extension class.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::getRootElement "
/**
   * Returns the root element of the node tree to which this element is connected.
   *
   * @note The root element may not be an SBMLDocument element. For example,
   * this element is the root element if this element doesn\'t have a parent
   * SBML object (i.e. mParentSBMLObject is null)
   *
   * @see enablePackageInternal
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::getHasBeenDeleted() const "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::setSBaseFields(const XMLToken& element) "
/**
   * Stores the location (line and column) and any XML namespaces (for
   * roundtripping) declared on this SBML (XML) element.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::readAnnotation(XMLInputStream& stream) "
/**
   * Reads an annotation from the stream and returns true if successful.
   *
   * @return true if read an <annotation> element from the stream
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::removeDuplicatedResources(CVTerm *term, QualifierType_t type) "
/**
   * removes resources from the term object that alread exist on this object 
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::addTermToExistingBag(CVTerm *term, QualifierType_t type) "
/**
  * adds the given term to an existing bag. Returns 1 if added, 0 otherwise. 
  */ /* libsbml-internal */ public
";


%csmethodmodifiers SBase::readNotes(XMLInputStream& stream) "
/**
   * Reads the notes from the stream and returns true if successful.
   *
   * @return true if read a <notes> element from the stream
   */ /* libsbml-internal */ public
";


%typemap(csimports) ListOf "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Parent class for the various SBML \'ListOfXYZ\' classes.
 *
 * @htmlinclude not-sbml-warning.html
 *
 * The ListOf class in libSBML is a utility class that serves as the parent
 * class for implementing the ListOf__ classes.  It provides methods for
 * working generically with the various SBML lists of objects in a program.
 * LibSBML uses this separate list class rather than ordinary
 * @if clike C&#43;&#43; @endif@if java Java@endif@if python Python@endif lists,
 * so that it can provide the methods and features associated with SBase.
 *
 * *
 * 
 * The various ListOf___ classes in SBML are merely containers used for
 * organizing the main components of an SBML model.  All are derived from
 * the abstract class SBase, and inherit the various attributes and
 * subelements of SBase, such as \'metaid\' as and \'annotation\'.  The
 * ListOf___ classes do not add any attributes of their own.
 *
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 *
 * @htmlinclude listof-illustration.html
 *
 * Readers may wonder about the motivations for using the ListOf___
 * containers.  A simpler approach in XML might be to place the components
 * all directly at the top level of the model definition.  The choice made
 * in SBML is to group them within XML elements named after
 * ListOf<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from SBase means that software tools can add information @em about
 * the lists themselves into each list container\'s \'annotation\'.
 * 
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 *
 * 
 */
"


%csmethodmodifiers ListOf::ListOf(unsigned int level   = SBML_DEFAULT_LEVEL, unsigned int version = SBML_DEFAULT_VERSION) "
/**
   * Creates a new ListOf object.
   *
   * @param level the SBML Level; if not assigned, defaults to the
   * value of SBML_DEFAULT_LEVEL.
   * 
   * @param version the Version within the SBML Level; if not assigned,
   * defaults to the value of SBML_DEFAULT_VERSION.
   * 
   * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
   */ public
";


%csmethodmodifiers ListOf::ListOf(SBMLNamespaces* sbmlns) "
/**
   * Creates a new ListOf with SBMLNamespaces object.
   *
   * @param sbmlns the set of namespaces that this ListOf should contain.
   */ public
";


%csmethodmodifiers ListOf::ListOf(const ListOf& orig) "
/**
   * Copy constructor;  creates a copy of this ListOf.
   *
   * @param orig the ListOf instance to copy.
   */ public
";


%csmethodmodifiers ListOf::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor.
   *
   * @param v the SBMLVisitor instance to be used.
   * 
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether the Visitor would like to visit the next item in the
   * list.
   */ public
";


%csmethodmodifiers ListOf::clone() const "
/**
   * Creates and returns a deep copy of this ListOf.
   * 
   * @return a (deep) copy of this ListOf.
   */ public new
";


%csmethodmodifiers ListOf::append(const SBase* item) "
/**
   * Adds item to the end of this ListOf.
   *
   * This variant of the method makes a clone of the @p item handed to it.
   * This means that when the ListOf is destroyed, the original items will
   * not be destroyed.
   *
   * @param item the item to be added to the list.
   *
   * @see appendAndOwn(SBase item)
   */ public
";


%csmethodmodifiers ListOf::appendAndOwn(SBase* item) "
/**
   * Adds item to the end of this ListOf.
   *
   * This variant of the method does not clone the @p item handed to it;
   * instead, it assumes ownership of it.  This means that when the ListOf
   * is destroyed, the item will be destroyed along with it.
   *
   * @param item the item to be added to the list.
   *
   * @see append(SBase item)
   */ public
";


%csmethodmodifiers ListOf::appendFrom(const ListOf* list) "
/**
   * Adds a clone of all items in the provided ListOf to this object.
   *
   * This means that when this ListOf is destroyed, the original items will
   * not be destroyed.
   *
   * @param list A list of items to be added.
   *
   * @see append(SBase item)
   */ public
";


%csmethodmodifiers ListOf::insert(int location, const SBase* item) "
/** 
   * Inserts the item at the given position of this ListOf
   * 
   * This variant of the method makes a clone of the @p item handet to it. 
   * This means that when the ListOf is destroyed, the original items will
   * not be destroyed. 
   * 
   * @param location the location where to insert the item
   * @param item the item to be inserted to the list
   * 
   * @see insertAndOwn(int location, SBase item)
   */ public
";


%csmethodmodifiers ListOf::insertAndOwn(int location, SBase* item) "
/** 
   * Inserts the item at the given position of this ListOf
   * 
   * This variant of the method makes a clone of the @p item handet to it. 
   * This means that when the ListOf is destroyed, the original items will
   * not be destroyed. 
   * 
   * @param location the location where to insert the item
   * @param item the item to be inserted to the list
   * 
   * @see insert(int location, SBase item)
   */ public
";


%csmethodmodifiers ListOf::get "
/**
   * Get an item from the list.
   *
   * @param n the index number of the item to get.
   * 
   * @return the nth item in this ListOf items.
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOf::get(unsigned int n) "
/**
   * Get an item from the list.
   *
   * @param n the index number of the item to get.
   * 
   * @return the nth item in this ListOf items.
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOf::getElementBySId(const std::string& id) "
/**
   * Returns the first child element found that has the given @p id in the
   * model-wide SId namespace, or @c null if no such object is found.
   *
   * @param id string representing the id of objects to find
   *
   * @return pointer to the first element found with the given @p id.
   */ public
";


%csmethodmodifiers ListOf::getElementByMetaId(const std::string& metaid) "
/**
   * Returns the first child element it can find with the given @p metaid, or
   * @c null if no such object is found.
   *
   * @param metaid string representing the metaid of objects to find
   *
   * @return pointer to the first element found with the given @p metaid.
   */ public
";


%csmethodmodifiers ListOf::getAllElements(ElementFilter* filter=NULL) "
/**
   * Returns a List of all child SBase objects, including those nested to an
   * arbitrary depth
   *
   * @return a List of pointers to all children objects.
   */ public
";


%csmethodmodifiers ListOf::get(const std::string& sid) const "
/**
   * Get an item from the list based on its identifier.
   *
   * @param sid a string representing the the identifier of the item to get.
   * 
   * @return item in this ListOf items with the given @p sid or @c null if no such
   * item exists.
   *
   * @see get(long n)
   * @see size()
   */ public
";


%csmethodmodifiers ListOf::get(const std::string& sid) "
/**
   * Get an item from the list based on its identifier.
   *
   * @param sid a string representing the the identifier of the item to get.
   * 
   * @return item in this ListOf items with the given @p sid or @c null if no such
   * item exists.
   *
   * @see get(long n)
   * @see size()
   */ public
";


%csmethodmodifiers ListOf::clear(bool doDelete = true) "
/**
   * Removes all items in this ListOf object.
   *
   * If parameter @p doDelete is @c true (default), all items in this ListOf
   * object are deleted and cleared, and thus the caller doesn\'t have to
   * delete those items.  Otherwise, all items are just cleared from this
   * ListOf object and the caller is responsible for deleting all items.  (In
   * that case, pointers to all items should be stored elsewhere before
   * calling this function.)
   *
   * @param doDelete if @c true (default), all items are deleted and cleared.
   * Otherwise, all items are just cleared and not deleted.
   * 
   * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
   */ public
";


%csmethodmodifiers ListOf::removeFromParentAndDelete "
/**
   * Because ListOf objects typically live as object children of their parent
   * object and not as pointer children, this function clears itself, but
   * does not attempt to do anything else.
   *
   * If a particular ListOf subclass does indeed exist as a pointer only,
   * this function will need to be overridden.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers ListOf::remove(unsigned int n) "
/**
   * Removes the <em>n</em>th item from this ListOf items and returns a
   * pointer to it.
   *
   * The caller owns the returned item and is responsible for deleting it.
   *
   * @param n the index of the item to remove
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOf::remove(const std::string& sid) "
/**
   * Removes item in this ListOf items with the given identifier.
   *
   * The caller owns the returned item and is responsible for deleting it.
   * If none of the items in this list have the identifier @p sid, then @c
   * null is returned.
   *
   * @param sid the identifier of the item to remove
   *
   * @return the item removed.  As mentioned above, the caller owns the
   * returned item.
   */ public
";


%csmethodmodifiers ListOf::size() const "
/**
   * Get the size of this ListOf.
   * 
   * @return the number of items in this ListOf items.
   */ public
";


%csmethodmodifiers ListOf::setSBMLDocument(SBMLDocument* d) "
/**
   * Sets the parent SBMLDocument of this SBML object.
   *
   * @param d the SBMLDocument that should become the parent of this
   * ListOf.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOf::connectToChild "
/**
   * Sets this SBML object to child SBML objects (if any).
   * (Creates a child-parent relationship by the parent)
   *
   * Subclasses must override this function if they define
   * one ore more child elements.
   * Basically, this function needs to be called in
   * constructor, copy constructor and assignment operator.
   *
   * @if cpp 
   * @see setSBMLDocument()
   * @see enablePackageInternal()
   * @endif
   */ /* libsbml-internal */ public new
";


%csmethodmodifiers ListOf::getTypeCode() const "
/**
   * Returns the libSBML type code for this object, namely,
   * @link libsbmlcs.libsbml.SBML_LIST_OF SBML_LIST_OF@endlink.
   * 
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object:
   * @link libsbmlcs.libsbml.SBML_LIST_OF SBML_LIST_OF@endlink (default).
   *
   * @note The various ListOf classes mostly differ from each other in what they
   * contain.  Hence, one must call getItemTypeCode() to fully determine the
   * class of this SBML object.
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see getItemTypeCode()
   * @see getElementName()
   * @see getPackageName()
   */ public new
";


%csmethodmodifiers ListOf::getItemTypeCode() const "
/**
   * Get the type code of the objects contained in this ListOf.
   * 
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * Classes that inherit from the ListOf class should 
   * override this function to return the SBML type code for 
   * the objects contained in this ListOf.  If they do not, 
   * @link libsbmlcs.libsbml.SBML_UNKNOWN SBML_UNKNOWN@endlink is returned.
   * 
   * @return The ListOf class itself contains no SBML objects, and 
   * therefore returns @link libsbmlcs.libsbml.SBML_UNKNOWN SBML_UNKNOWN@endlink.
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers ListOf::getElementName() const "
/**
   * Returns the XML element name of this object, which for ListOf, is
   * always @c \'listOf\'.
   * 
   * @return the XML name of this element.
   */ public new
";


%csmethodmodifiers ListOf::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOf::enablePackageInternal(const std::string& pkgURI, const std::string& pkgPrefix, bool flag) "
/**
   * Enables/Disables the given package with this element and child
   * elements (if any).
   * (This is an internal implementation for enablePackage function)
   *
   * @note Subclasses of the SBML Core package in which one or more child
   * elements are defined must override this function.
   */ /* libsbml-internal */ public new
";


%csmethodmodifiers ListOf::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOf::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Subclasses should override this method to read values from the given
   * XMLAttributes set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOf::writeAttributes(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.  For example:
   *
   *   SBase::writeAttributes(stream);
   *   stream.writeAttribute( \'id\'  , mId   );
   *   stream.writeAttribute( \'name\', mName );
   *   ...
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOf::isValidTypeForList(SBase * item) "
/** */ /* libsbml-internal */ public
";


%typemap(csimports) Model "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Implementation of %SBML\'s %Model construct.
 *
 * In an SBML model definition, a single object of class Model serves as
 * the overall container for the lists of the various model components.
 * All of the lists are optional, but if a given list container is present
 * within the model, the list must not be empty; that is, it must have
 * length one or more.  The following are the components and lists
 * permitted in different Levels and Versions of SBML in
 * version @htmlinclude libsbml-version.html
 * of libSBML:
 * <ul>
 * <li> In SBML Level 1, the components are: UnitDefinition, Compartment,
 * Species, Parameter, Rule, and Reaction.  Instances of the classes are
 * placed inside instances of classes ListOfUnitDefinitions,
 * ListOfCompartments, ListOfSpecies, ListOfParameters, ListOfRules, and
 * ListOfReactions.
 *
 * <li> In SBML Level 2 Version 1, the components are: FunctionDefinition,
 * UnitDefinition, Compartment, Species, Parameter, Rule, Reaction and
 * Event.  Instances of the classes are placed inside instances of classes
 * ListOfFunctionDefinitions, ListOfUnitDefinitions, ListOfCompartments,
 * ListOfSpecies, ListOfParameters, ListOfRules, ListOfReactions, and
 * ListOfEvents.
 *
 * <li> In SBML Level 2 Versions 2, 3 and 4, the components are:
 * FunctionDefinition, UnitDefinition, CompartmentType, SpeciesType,
 * Compartment, Species, Parameter, InitialAssignment, Rule, Constraint,
 * Reaction and Event.  Instances of the classes are placed inside
 * instances of classes ListOfFunctionDefinitions, ListOfUnitDefinitions,
 * ListOfCompartmentTypes, ListOfSpeciesTypes, ListOfCompartments,
 * ListOfSpecies, ListOfParameters, ListOfInitialAssignments, ListOfRules,
 * ListOfConstraints, ListOfReactions, and ListOfEvents.
 *
 * <li> In SBML Level 3 Version 1, the components are: FunctionDefinition,
 * UnitDefinition, Compartment, Species, Parameter, InitialAssignment,
 * Rule, Constraint, Reaction and Event.  Instances of the classes are
 * placed inside instances of classes ListOfFunctionDefinitions,
 * ListOfUnitDefinitions, ListOfCompartments, ListOfSpecies,
 * ListOfParameters, ListOfInitialAssignments, ListOfRules,
 * ListOfConstraints, ListOfReactions, and ListOfEvents.  
 * </ul>
 *
 * Although all the lists are optional, there are dependencies between SBML
 * components such that defining some components requires defining others.
 * An example is that defining a species requires defining a compartment,
 * and defining a reaction requires defining a species.  The dependencies
 * are explained in more detail in the SBML specifications.
 *
 * In addition to the above lists and attributes, the Model class in both
 * SBML Level&nbsp;2 and Level&nbsp;3 has the usual two attributes of \'id\'
 * and \'name\', and both are optional.  As is the case for other SBML
 * components with \'id\' and \'name\' attributes, they must be used according
 * to the guidelines described in the SBML specifications.  (Within the
 * frameworks of SBML Level&nbsp;2 and Level&nbsp;3 Version&nbsp;1 Core, a
 * Model object identifier has no assigned meaning, but extension packages
 * planned for SBML Level&nbsp;3 are likely to make use of this
 * identifier.)
 *
 * Finally, SBML Level&nbsp;3 has introduced a number of additional Model
 * attributes.  They are discussed in a separate section below.
 *
 *
 * @section approaches Approaches to creating objects using the libSBML API
 *
 * LibSBML provides two main mechanisms for creating objects: class
 * constructors
 * (e.g., @if java <a href=\'org/sbml/libsbml/Species.html\'>Species()</a> @else Species::Species() @endif), 
 * and <code>create<span class=\'placeholder\'><em>Object</em></span>()</code>
 * methods (such as Model::createSpecies()) provided by certain <span
 * class=\'placeholder\'><em>Object</em></span> classes such as Model.  These
 * multiple mechanisms are provided by libSBML for flexibility and to
 * support different use-cases, but they also have different implications
 * for the overall model structure.
 * 
 * In general, the recommended approach is to use the <code>create<span
 * class=\'placeholder\'><em>Object</em></span>()</code> methods.  These
 * methods both create an object @em and link it to the parent in one step.
 * Here is an example:@if clike
 * @verbatim
// Create an SBMLDocument object in Level 3 Version 1 format:

SBMLDocument sbmlDoc = new SBMLDocument(3, 1);

// Create a Model object inside the SBMLDocument object and set
// its identifier.  The call returns a pointer to the Model object
// created, and methods called on that object affect the attributes
// of the object attached to the model (as expected).

Model model = sbmlDoc->createModel();
model->setId(\'BestModelEver\');

// Create a Species object inside the Model and set its identifier.
// Similar to the lines above, this call returns a pointer to the Species
// object created, and methods called on that object affect the attributes
// of the object attached to the model (as expected).

Species sp = model->createSpecies();
sp->setId(\'MySpecies\');
@endverbatim
 * @endif@if java
@verbatim
// Create an SBMLDocument object in Level 3 Version 1 format:

SBMLDocument sbmlDoc = new SBMLDocument(3, 1);

// Create a Model object inside the SBMLDocument object and set
// its identifier.  The call returns a pointer to the Model object
// created, and methods called on that object affect the attributes
// of the object attached to the model (as expected).  Note that
// the call to setId() returns a status code, and a real program
// should check this status code to make sure everything went okay.

Model model = sbmlDoc.createModel();
model.setId(&#34;BestModelEver&#34;);

// Create a Species object inside the Model and set its identifier.
// Similar to the lines above, this call returns a pointer to the Species
// object created, and methods called on that object affect the attributes
// of the object attached to the model (as expected).  Note that, like
// with Model, the call to setId() returns a status code, and a real program
// should check this status code to make sure everything went okay.

Species sp = model.createSpecies();
sp.setId(&#34;BestSpeciesEver&#34;);
@endverbatim
 * @endif@if python
@verbatim
# Create an SBMLDocument object in Level 3 Version 1 format:

sbmlDoc = SBMLDocument(3, 1)

# Create a Model object inside the SBMLDocument object and set
# its identifier.  The call to setId() returns a status code
# to indicate whether the assignment was successful.  Code 0
# means success; see the documentation for Model\'s setId() for 
# more information.

model = sbmlDoc.createModel()
model.setId(&#34;BestModelEver&#34;)

# Create a Species object inside the Model and set its identifier.
# Again, the setId() returns a status code to indicate whether the
# assignment was successful.  Code 0 means success; see the
# documentation for Specie\'s setId() for more information.

sp = model.createSpecies()
sp.setId(&#34;BestSpeciesEver&#34;)
@endverbatim
 * @endif@if csharp
@verbatim
// Create an SBMLDocument object in Level 3 Version 1 format:

SBMLDocument sbmlDoc = new SBMLDocument(3, 1);

// Create a Model object inside the SBMLDocument object and set
// its identifier.  The call returns a pointer to the Model object
// created, and methods called on that object affect the attributes
// of the object attached to the model (as expected).

Model model = sbmlDoc.createModel();
model.setId(\'BestModelEver\');

// Create a Species object inside the Model and set its identifier.
// Similar to the lines above, this call returns a pointer to the Species
// object created, and methods called on that object affect the attributes
// of the object attached to the model (as expected).

Species sp = model.createSpecies();
sp.setId(\'MySpecies\');
@endverbatim
 * @endif
 * 
 * The <code>create<span
 * class=\'placeholder\'><em>Object</em></span>()</code> methods return a
 * pointer to the object created, but they also add the object to the
 * relevant list of object instances contained in the parent.  (These lists
 * become the <code>&lt;listOf<span
 * class=\'placeholder\'><em>Object</em></span>s&gt;</code> elements in the
 * finished XML rendition of SBML.)  In the example above,
 * Model::createSpecies() adds the created species directly to the
 * <code>&lt;listOfSpeciesgt;</code> list in the model.  Subsequently,
 * methods called on the species change the species in the model (which is
 * what is expected in most situations).
 *
 * @section checking Consistency and adherence to SBML specifications
 *
 * To make it easier for applications to do whatever they need,
 * libSBML version @htmlinclude libsbml-version.html
 * is relatively lax when it comes to enforcing correctness and
 * completeness of models @em during model construction and editing.
 * Essentially, libSBML @em will @em not in most cases check automatically
 * that a model\'s components have valid attribute values, or that the
 * overall model is consistent and free of errors&mdash;even obvious errors
 * such as duplication of identifiers.  This allows applications great
 * leeway in how they build their models, but it means that software
 * authors must take deliberate steps to ensure that the model will be, in
 * the end, valid SBML.  These steps include such things as keeping track
 * of the identifiers used in a model, manually performing updates in
 * certain situations where an entity is referenced in more than one place
 * (e.g., a species that is referenced by multiple SpeciesReference
 * objects), and so on.
 *
 * That said, libSBML does provide powerful features for deliberately
 * performing validation of SBML when an application decides it is time to
 * do so.  The interfaces to these facilities are on the SBMLDocument
 * class, in the form of SBMLDocument::checkInternalConsistency() and
 * SBMLDocument::checkConsistency().  Please refer to the documentation for
 * SBMLDocument for more information about this.
 *
 * While applications may play fast and loose and live like free spirits
 * during the construction and editing of SBML models, they should always
 * make sure to call SBMLDocument::checkInternalConsistency() and/or
 * SBMLDocument::checkConsistency() before writing out the final version of
 * an SBML model.
 *
 * 
 * @section model-l3-attrib Model attributes introduced in SBML Level&nbsp;3
 *
 * As mentioned above, the Model class has a number of optional attributes
 * in SBML Level&nbsp;3 Version&nbsp;1 Core.  These are \'substanceUnits\',
 * \'timeUnits\', \'volumeUnits\', \'areaUnits\', \'lengthUnits\', \'extentUnits\',
 * and \'conversionFactor.  The following provide more information about
 * them.
 *
 * @subsection model-l3-substanceunits The \'substanceUnits\' attribute
 *
 * The \'substanceUnits\' attribute is used to specify the unit of
 * measurement associated with substance quantities of Species objects that
 * do not specify units explicitly.  If a given Species object definition
 * does not specify its unit of substance quantity via the \'substanceUnits\'
 * attribute on the Species object instance, then that species inherits the
 * value of the Model \'substanceUnits\' attribute.  If the Model does not
 * define a value for this attribute, then there is no unit to inherit, and
 * all species that do not specify individual \'substanceUnits\' attribute
 * values then have <em>no</em> declared units for their quantities.  The
 * SBML Level&nbsp;3 Version&nbsp;1 Core specification provides more
 * details.
 * 
 * Note that when the identifier of a species appears in a model\'s
 * mathematical expressions, the unit of measurement associated with that
 * identifier is <em>not solely determined</em> by setting \'substanceUnits\'
 * on Model or Species.  Please see the discussion about units given in
 * the documentation for the Species class.
 * 
 * 
 * @subsection model-l3-timeunits The \'timeUnits\' attribute
 *
 * The \'timeUnits\' attribute on SBML Level&nbsp;3\'s Model object is used to
 * specify the unit in which time is measured in the model.  This attribute
 * on Model is the <em>only</em> way to specify a unit for time in a model.
 * It is a global attribute; time is measured in the model everywhere in
 * the same way.  This is particularly relevant to Reaction and RateRule
 * objects in a model: all Reaction and RateRule objects in SBML define
 * per-time values, and the unit of time is given by the \'timeUnits\'
 * attribute on the Model object instance.  If the Model \'timeUnits\'
 * attribute has no value, it means that the unit of time is not defined
 * for the model\'s reactions and rate rules.  Leaving it unspecified in an
 * SBML model does not result in an invalid model in SBML Level&nbsp;3;
 * however, as a matter of best practice, we strongly recommend that all
 * models specify units of measurement for time.
 *
 * 
 * @subsection model-l3-voletc The \'volumeUnits\', \'areaUnits\', and \'lengthUnits\' attributes
 *
 * The attributes \'volumeUnits\', \'areaUnits\' and \'lengthUnits\' together are
 * used to set the units of measurements for the sizes of Compartment
 * objects in an SBML Level&nbsp;3 model when those objects do not
 * otherwise specify units.  The three attributes correspond to the most
 * common cases of compartment dimensions: \'volumeUnits\' for compartments
 * having a \'spatialDimensions\' attribute value of @c \'3\', \'areaUnits\' for
 * compartments having a \'spatialDimensions\' attribute value of @c \'2\', and
 * \'lengthUnits\' for compartments having a \'spatialDimensions\' attribute
 * value of @c \'1\'.  The attributes are not applicable to compartments
 * whose \'spatialDimensions\' attribute values are @em not one of @c \'1\', @c
 * \'2\' or @c \'3\'.
 * 
 * If a given Compartment object instance does not provide a value for its
 * \'units\' attribute, then the unit of measurement of that compartment\'s
 * size is inherited from the value specified by the Model \'volumeUnits\',
 * \'areaUnits\' or \'lengthUnits\' attribute, as appropriate based on the
 * Compartment object\'s \'spatialDimensions\' attribute value.  If the Model
 * object does not define the relevant attribute, then there are no units
 * to inherit, and all Compartment objects that do not set a value for
 * their \'units\' attribute then have <em>no</em> units associated with
 * their compartment sizes.
 * 
 * The use of three separate attributes is a carry-over from SBML
 * Level&nbsp;2.  Note that it is entirely possible for a model to define a
 * value for two or more of the attributes \'volumeUnits\', \'areaUnits\' and
 * \'lengthUnits\' simultaneously, because SBML models may contain
 * compartments with different numbers of dimensions.
 *
 * 
 * @subsection model-l3-extentunits The \'extentUnits\' attribute
 *
 * Reactions are processes that occur over time.  These processes involve
 * events of some sort, where a single ``reaction event\'\' is one in which
 * some set of entities (known as reactants, products and modifiers in
 * SBML) interact, once.  The <em>extent</em> of a reaction is a measure of
 * how many times the reaction has occurred, while the time derivative of
 * the extent gives the instantaneous rate at which the reaction is
 * occurring.  Thus, what is colloquially referred to as the \'rate of the
 * reaction\' is in fact equal to the rate of change of reaction extent.
 * 
 * In SBML Level&nbsp;3, the combination of \'extentUnits\' and \'timeUnits\'
 * defines the units of kinetic laws in SBML and establishes how the
 * numerical value of each KineticLaw object\'s mathematical formula is
 * meant to be interpreted in a model.  The units of the kinetic laws are
 * taken to be \'extentUnits\' divided by \'timeUnits\'.
 * 
 * Note that this embodies an important principle in SBML Level&nbsp;3
 * models: <em>all reactions in an SBML model must have the same units</em>
 * for the rate of change of extent.  In other words, the units of all
 * reaction rates in the model <em>must be the same</em>.  There is only
 * one global value for \'extentUnits\' and one global value for \'timeUnits\'.
 *
 * 
 * @subsection model-l3-convfactor The \'conversionFactor\' attribute
 *
 * The attribute \'conversionFactor\' in SBML Level&nbsp;3\'s Model object
 * defines a global value inherited by all Species object instances that do
 * not define separate values for their \'conversionFactor\' attributes.  The
 * value of this attribute must refer to a Parameter object instance
 * defined in the model.  The Parameter object in question must be a
 * constant; ie it must have its \'constant\' attribute value set to @c
 * \'true\'.
 * 
 * If a given Species object definition does not specify a conversion
 * factor via the \'conversionFactor\' attribute on Species, then the species
 * inherits the conversion factor specified by the Model \'conversionFactor\'
 * attribute.  If the Model does not define a value for this attribute,
 * then there is no conversion factor to inherit.  More information about
 * conversion factors is provided in the SBML Level&nbsp;3 Version&nbsp;1
 * specification.
 */
"


%csmethodmodifiers Model::Model(unsigned int level, unsigned int version) "
/**
   * Creates a new Model using the given SBML @p level and @p version
   * values.
   *
   * @param level a long integer, the SBML Level to assign to this Model
   *
   * @param version a long integer, the SBML Version to assign to this
   * Model
   *
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the given @p level and @p version combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent SBMLDocument object.
   *
   * * 
 * @note Upon the addition of a Model object to an SBMLDocument
 * (e.g., using SBMLDocument::setModel(@if java Model m@endif)), the SBML Level, SBML Version
 * and XML namespace of the document @em override the values used
 * when creating the Model object via this constructor.  This is
 * necessary to ensure that an SBML document is a consistent structure.
 * Nevertheless, the ability to supply the values at the time of creation
 * of a Model is an important aid to producing valid SBML.  Knowledge
 * of the intented SBML Level and Version determine whether it is valid
 * to assign a particular value to an attribute, or whether it is valid
 * to add an object to an existing SBMLDocument.
 *
   */ public
";


%csmethodmodifiers Model::Model(SBMLNamespaces* sbmlns) "
/**
   * Creates a new Model using the given SBMLNamespaces object
   * @p sbmlns.
   *
   * *
 *  
 * The SBMLNamespaces object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML\'s SBMLNamespaces facilities is to create an
 * SBMLNamespaces object somewhere in a program once, then hand that object
 * as needed to object constructors that accept SBMLNamespaces as arguments.
 *
 * 
   *
   * @param sbmlns an SBMLNamespaces object.
   *
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the given @p level and @p version combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent SBMLDocument object.
   *
   * * 
 * @note Upon the addition of a Model object to an SBMLDocument
 * (e.g., using SBMLDocument::setModel(@if java Model m@endif)), the SBML Level, SBML Version
 * and XML namespace of the document @em override the values used
 * when creating the Model object via this constructor.  This is
 * necessary to ensure that an SBML document is a consistent structure.
 * Nevertheless, the ability to supply the values at the time of creation
 * of a Model is an important aid to producing valid SBML.  Knowledge
 * of the intented SBML Level and Version determine whether it is valid
 * to assign a particular value to an attribute, or whether it is valid
 * to add an object to an existing SBMLDocument.
 *
   */ public
";


%csmethodmodifiers Model::Model(const Model& orig) "
/**
   * Copy constructor; creates a (deep) copy of the given Model object.
   *
   * @param orig the object to copy.
   * 
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the argument @p orig is @c null.
   */ public
";


%csmethodmodifiers Model::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor for this instance of Constraint.
   *
   * @param v the SBMLVisitor instance to be used.
   *
   * @return the result of calling <code>v.visit()</code>.
   */ public
";


%csmethodmodifiers Model::clone() const "
/**
   * Creates and returns a deep copy of this Model object.
   * 
   * @return a (deep) copy of this Model.
   */ public new
";


%csmethodmodifiers Model::getElementBySId(const std::string& id) "
/**
   * Returns the first child element found that has the given @p id in the
   * model-wide SId namespace, or @c null if no such object is found.
   *
   * @param id string representing the id of objects to find.
   *
   * @return pointer to the first element found with the given @p id.
   */ public
";


%csmethodmodifiers Model::getElementByMetaId(const std::string& metaid) "
/**
   * Returns the first child element it can find with the given @p metaid, or
   * null if no such object is found.
   *
   * @param metaid string representing the metaid of objects to find
   *
   * @return pointer to the first element found with the given @p metaid.
   */ public
";


%csmethodmodifiers Model::getAllElements(ElementFilter* filter=NULL) "
/**
   * Returns a List of all child SBase objects, including those nested to an
   * arbitrary depth
   *
   * @return a List* of pointers to all children objects.
   */ public
";


%csmethodmodifiers Model::getId() const "
/**
   * Returns the value of the \'id\' attribute of this Model.
   * 
   * @return the id of this Model.
   */ public new
";


%csmethodmodifiers Model::getName() const "
/**
   * Returns the value of the \'name\' attribute of this Model.
   * 
   * @return the name of this Model.
   */ public new
";


%csmethodmodifiers Model::getSubstanceUnits() const "
/**
   * Returns the value of the \'substanceUnits\' attribute of this Model.
   * 
   * @return the substanceUnits of this Model.
   *
   * @note The \'substanceUnits\' attribute is available in
   * SBML Level&nbsp;3 but is not present on Model in lower Levels of SBML.
   */ public
";


%csmethodmodifiers Model::getTimeUnits() const "
/**
   * Returns the value of the \'timeUnits\' attribute of this Model.
   * 
   * @return the timeUnits of this Model.
   *
   * @note The \'timeUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on Model in lower Levels of SBML.
   */ public
";


%csmethodmodifiers Model::getVolumeUnits() const "
/**
   * Returns the value of the \'volumeUnits\' attribute of this Model.
   * 
   * @return the volumeUnits of this Model.
   *
   * @note The \'volumeUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on Model in lower Levels of SBML.
   */ public
";


%csmethodmodifiers Model::getAreaUnits() const "
/**
   * Returns the value of the \'areaUnits\' attribute of this Model.
   * 
   * @return the areaUnits of this Model.
   *
   * @note The \'areaUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on Model in lower Levels of SBML.
   */ public
";


%csmethodmodifiers Model::getLengthUnits() const "
/**
   * Returns the value of the \'lengthUnits\' attribute of this Model.
   * 
   * @return the lengthUnits of this Model.
   *
   * @note The \'lengthUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on Model in lower Levels of SBML.
   */ public
";


%csmethodmodifiers Model::getExtentUnits() const "
/**
   * Returns the value of the \'extentUnits\' attribute of this Model.
   * 
   * @return the extentUnits of this Model.
   *
   * @note The \'extentUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on Model in lower Levels of SBML.
   */ public
";


%csmethodmodifiers Model::getConversionFactor() const "
/**
   * Returns the value of the \'conversionFactor\' attribute of this Model.
   * 
   * @return the conversionFactor of this Model.
   *
   * @note The \'conversionFactor\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on Model in lower Levels of SBML.
   */ public
";


%csmethodmodifiers Model::isSetId() const "
/**
   * Predicate returning @c true if this
   * Model\'s \'id\' attribute is set.
   *
   * @return @c true if the \'id\' attribute of this Model is
   * set, @c false otherwise.
   */ public new
";


%csmethodmodifiers Model::isSetName() const "
/**
   * Predicate returning @c true if this
   * Model\'s \'name\' attribute is set.
   *
   * @return @c true if the \'name\' attribute of this Model is
   * set, @c false otherwise.
   */ public new
";


%csmethodmodifiers Model::isSetSubstanceUnits() const "
/**
   * Predicate returning @c true if this
   * Model\'s \'substanceUnits\' attribute is set.
   *
   * @return @c true if the \'substanceUnits\' attribute of this Model is
   * set, @c false otherwise.
   *
   * @note The \'substanceUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on Model in lower Levels of SBML.
   */ public
";


%csmethodmodifiers Model::isSetTimeUnits() const "
/**
   * Predicate returning @c true if this
   * Model\'s \'timeUnits\' attribute is set.
   *
   * @return @c true if the \'timeUnits\' attribute of this Model is
   * set, @c false otherwise.
   *
   * @note The \'substanceUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on Model in lower Levels of SBML.
   */ public
";


%csmethodmodifiers Model::isSetVolumeUnits() const "
/**
   * Predicate returning @c true if this
   * Model\'s \'volumeUnits\' attribute is set.
   *
   * @return @c true if the \'volumeUnits\' attribute of this Model is
   * set, @c false otherwise.
   *
   * @note The \'volumeUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on Model in lower Levels of SBML.
   */ public
";


%csmethodmodifiers Model::isSetAreaUnits() const "
/**
   * Predicate returning @c true if this
   * Model\'s \'areaUnits\' attribute is set.
   *
   * @return @c true if the \'areaUnits\' attribute of this Model is
   * set, @c false otherwise.
   *
   * @note The \'areaUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on Model in lower Levels of SBML.
   */ public
";


%csmethodmodifiers Model::isSetLengthUnits() const "
/**
   * Predicate returning @c true if this
   * Model\'s \'lengthUnits\' attribute is set.
   *
   * @return @c true if the \'lengthUnits\' attribute of this Model is
   * set, @c false otherwise.
   *
   * @note The \'lengthUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on Model in lower Levels of SBML.
   */ public
";


%csmethodmodifiers Model::isSetExtentUnits() const "
/**
   * Predicate returning @c true if this
   * Model\'s \'extentUnits\' attribute is set.
   *
   * @return @c true if the \'extentUnits\' attribute of this Model is
   * set, @c false otherwise.
   *
   * @note The \'extentUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on Model in lower Levels of SBML.
   */ public
";


%csmethodmodifiers Model::isSetConversionFactor() const "
/**
   * Predicate returning @c true if this
   * Model\'s \'conversionFactor\' attribute is set.
   *
   * @return @c true if the \'conversionFactor\' attribute of this Model is
   * set, @c false otherwise.
   *
   * @note The \'conversionFactor\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on Model in lower Levels of SBML.
   */ public
";


%csmethodmodifiers Model::setId(const std::string& sid) "
/**
   * Sets the value of the \'id\' attribute of this Model.
   *
   * The string @p sid is copied.
   *
   * *
 * 
 * SBML has strict requirements for the syntax of identifiers, that is, the
 * values of the \'id\' attribute present on most types of SBML objects.
 * The following is a summary of the definition of the SBML identifier type 
 * <code>SId</code>, which defines the permitted syntax of identifiers.  We
 * express the syntax using an extended form of BNF notation: 
 * <pre style=\'margin-left: 2em; border: none; font-weight: bold; font-size: 13px; color: black\'>
 * letter ::= \'a\'..\'z\',\'A\'..\'Z\'
 * digit  ::= \'0\'..\'9\'
 * idChar ::= letter | digit | \'_\'
 * SId    ::= ( letter | \'_\' ) idChar*
 * </pre>
 * The characters <code>(</code> and <code>)</code> are used for grouping, the
 * character <code>*</code> \'zero or more times\', and the character
 * <code>|</code> indicates logical \'or\'.  The equality of SBML identifiers is
 * determined by an exact character sequence match; i.e., comparisons must be
 * performed in a case-sensitive manner.  In addition, there are a few
 * conditions for the uniqueness of identifiers in an SBML model.  Please
 * consult the SBML specifications for the exact details of the uniqueness
 * requirements.
 * 
 *
   *
   * @param sid the string to use as the identifier of this Model
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public new
";


%csmethodmodifiers Model::setName(const std::string& name) "
/**
   * Sets the value of the \'name\' attribute of this Model.
   *
   * The string in @p name is copied.
   *
   * @param name the new name for the Model
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public new
";


%csmethodmodifiers Model::setSubstanceUnits(const std::string& units) "
/**
   * Sets the value of the \'substanceUnits\' attribute of this Model.
   *
   * The string in @p units is copied.
   *
   * @param units the new substanceUnits for the Model
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   * 
   * @note The \'substanceUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on Model in lower Levels of SBML.
   */ public
";


%csmethodmodifiers Model::setTimeUnits(const std::string& units) "
/**
   * Sets the value of the \'timeUnits\' attribute of this Model.
   *
   * The string in @p units is copied.
   *
   * @param units the new timeUnits for the Model
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   * 
   * @note The \'timeUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on Model in lower Levels of SBML.
   */ public
";


%csmethodmodifiers Model::setVolumeUnits(const std::string& units) "
/**
   * Sets the value of the \'volumeUnits\' attribute of this Model.
   *
   * The string in @p units is copied.
   *
   * @param units the new volumeUnits for the Model
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   * 
   * @note The \'volumeUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on Model in lower Levels of SBML.
   */ public
";


%csmethodmodifiers Model::setAreaUnits(const std::string& units) "
/**
   * Sets the value of the \'areaUnits\' attribute of this Model.
   *
   * The string in @p units is copied.
   *
   * @param units the new areaUnits for the Model
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   * 
   * @note The \'areaUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on Model in lower Levels of SBML.
   */ public
";


%csmethodmodifiers Model::setLengthUnits(const std::string& units) "
/**
   * Sets the value of the \'lengthUnits\' attribute of this Model.
   *
   * The string in @p units is copied.
   *
   * @param units the new lengthUnits for the Model
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   * 
   * @note The \'lengthUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on Model in lower Levels of SBML.
   */ public
";


%csmethodmodifiers Model::setExtentUnits(const std::string& units) "
/**
   * Sets the value of the \'extentUnits\' attribute of this Model.
   *
   * The string in @p units is copied.
   *
   * @param units the new extentUnits for the Model
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   * 
   * @note The \'extentUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on Model in lower Levels of SBML.
   */ public
";


%csmethodmodifiers Model::setConversionFactor(const std::string& units) "
/**
   * Sets the value of the \'conversionFactor\' attribute of this Model.
   *
   * The string in @p units is copied.
   *
   * @param units the new conversionFactor for the Model
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   * 
   * @note The \'conversionFactor\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on Model in lower Levels of SBML.
   */ public
";


%csmethodmodifiers Model::unsetId "
/**
   * Unsets the value of the \'id\' attribute of this Model.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public new
";


%csmethodmodifiers Model::unsetName "
/**
   * Unsets the value of the \'name\' attribute of this Model.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public new
";


%csmethodmodifiers Model::unsetSubstanceUnits "
/**
   * Unsets the value of the \'substanceUnits\' attribute of this Model.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   * 
   * @note The \'substanceUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on Model in lower Levels of SBML.
   */ public
";


%csmethodmodifiers Model::unsetTimeUnits "
/**
   * Unsets the value of the \'timeUnits\' attribute of this Model.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   * 
   * @note The \'timeUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on Model in lower Levels of SBML.
   */ public
";


%csmethodmodifiers Model::unsetVolumeUnits "
/**
   * Unsets the value of the \'volumeUnits\' attribute of this Model.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   * 
   * @note The \'volumeUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on Model in lower Levels of SBML.
   */ public
";


%csmethodmodifiers Model::unsetAreaUnits "
/**
   * Unsets the value of the \'areaUnits\' attribute of this Model.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   * 
   * @note The \'areaUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on Model in lower Levels of SBML.
   */ public
";


%csmethodmodifiers Model::unsetLengthUnits "
/**
   * Unsets the value of the \'lengthUnits\' attribute of this Model.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   * 
   * @note The \'lengthUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on Model in lower Levels of SBML.
   */ public
";


%csmethodmodifiers Model::unsetExtentUnits "
/**
   * Unsets the value of the \'extentUnits\' attribute of this Model.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   * 
   * @note The \'extentUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on Model in lower Levels of SBML.
   */ public
";


%csmethodmodifiers Model::unsetConversionFactor "
/**
   * Unsets the value of the \'conversionFactor\' attribute of this Model.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   * 
   * @note The \'conversionFactor\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on Model in lower Levels of SBML.
   */ public
";


%csmethodmodifiers Model::addFunctionDefinition(const FunctionDefinition* fd) "
/**
   * Adds a copy of the given FunctionDefinition object to this Model.
   *
   * @param fd the FunctionDefinition to add
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_DUPLICATE_OBJECT_ID LIBSBML_DUPLICATE_OBJECT_ID @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   * 
   * * 
 * @note This method should be used with some caution.  The fact that this
 * method @em copies the object passed to it means that the caller will be
 * left holding a physically different object instance than the one contained
 * inside this object.  Changes made to the original object instance (such as
 * resetting attribute values) will <em>not affect the instance in this
 * object</em>.  In addition, the caller should make sure to free the
 * original object if it is no longer being used, or else a memory leak will
 * result.  Please see other methods on this class (particularly a
 * corresponding method whose name begins with the word <code>create</code>)
 * for alternatives that do not lead to these issues.
 *
 * 
   *
   * @see createFunctionDefinition()
   */ public
";


%csmethodmodifiers Model::addUnitDefinition(const UnitDefinition* ud) "
/**
   * Adds a copy of the given UnitDefinition object to this Model.
   *
   * @param ud the UnitDefinition object to add
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_DUPLICATE_OBJECT_ID LIBSBML_DUPLICATE_OBJECT_ID @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   * 
   * * 
 * @note This method should be used with some caution.  The fact that this
 * method @em copies the object passed to it means that the caller will be
 * left holding a physically different object instance than the one contained
 * inside this object.  Changes made to the original object instance (such as
 * resetting attribute values) will <em>not affect the instance in this
 * object</em>.  In addition, the caller should make sure to free the
 * original object if it is no longer being used, or else a memory leak will
 * result.  Please see other methods on this class (particularly a
 * corresponding method whose name begins with the word <code>create</code>)
 * for alternatives that do not lead to these issues.
 *
 * 
   *
   * @see createUnitDefinition()
   */ public
";


%csmethodmodifiers Model::addCompartmentType(const CompartmentType* ct) "
/**
   * Adds a copy of the given CompartmentType object to this Model.
   *
   * @param ct the CompartmentType object to add
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_DUPLICATE_OBJECT_ID LIBSBML_DUPLICATE_OBJECT_ID @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   * 
   * * 
 * @note This method should be used with some caution.  The fact that this
 * method @em copies the object passed to it means that the caller will be
 * left holding a physically different object instance than the one contained
 * inside this object.  Changes made to the original object instance (such as
 * resetting attribute values) will <em>not affect the instance in this
 * object</em>.  In addition, the caller should make sure to free the
 * original object if it is no longer being used, or else a memory leak will
 * result.  Please see other methods on this class (particularly a
 * corresponding method whose name begins with the word <code>create</code>)
 * for alternatives that do not lead to these issues.
 *
 * 
   *
   * @note The CompartmentType object class is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.  It is not available in
   * Level&nbsp;1 nor Level&nbsp;3.
   *
   * @see createCompartmentType()
   */ public
";


%csmethodmodifiers Model::addSpeciesType(const SpeciesType* st) "
/**
   * Adds a copy of the given SpeciesType object to this Model.
   *
   * @param st the SpeciesType object to add
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_DUPLICATE_OBJECT_ID LIBSBML_DUPLICATE_OBJECT_ID @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   * 
   * * 
 * @note This method should be used with some caution.  The fact that this
 * method @em copies the object passed to it means that the caller will be
 * left holding a physically different object instance than the one contained
 * inside this object.  Changes made to the original object instance (such as
 * resetting attribute values) will <em>not affect the instance in this
 * object</em>.  In addition, the caller should make sure to free the
 * original object if it is no longer being used, or else a memory leak will
 * result.  Please see other methods on this class (particularly a
 * corresponding method whose name begins with the word <code>create</code>)
 * for alternatives that do not lead to these issues.
 *
 * 
   *
   * @note The SpeciesType object class is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.  It is not available in
   * Level&nbsp;1 nor Level&nbsp;3.
   *
   * @see createSpeciesType()
   */ public
";


%csmethodmodifiers Model::addCompartment(const Compartment* c) "
/**
   * Adds a copy of the given Compartment object to this Model.
   *
   * @param c the Compartment object to add
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_DUPLICATE_OBJECT_ID LIBSBML_DUPLICATE_OBJECT_ID @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   *
   * * 
 * @note This method should be used with some caution.  The fact that this
 * method @em copies the object passed to it means that the caller will be
 * left holding a physically different object instance than the one contained
 * inside this object.  Changes made to the original object instance (such as
 * resetting attribute values) will <em>not affect the instance in this
 * object</em>.  In addition, the caller should make sure to free the
 * original object if it is no longer being used, or else a memory leak will
 * result.  Please see other methods on this class (particularly a
 * corresponding method whose name begins with the word <code>create</code>)
 * for alternatives that do not lead to these issues.
 *
 * 
   *
   * @see createCompartment()
   */ public
";


%csmethodmodifiers Model::addSpecies(const Species* s) "
/**
   * Adds a copy of the given Species object to this Model.
   *
   * @param s the Species object to add
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_DUPLICATE_OBJECT_ID LIBSBML_DUPLICATE_OBJECT_ID @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   * 
   * * 
 * @note This method should be used with some caution.  The fact that this
 * method @em copies the object passed to it means that the caller will be
 * left holding a physically different object instance than the one contained
 * inside this object.  Changes made to the original object instance (such as
 * resetting attribute values) will <em>not affect the instance in this
 * object</em>.  In addition, the caller should make sure to free the
 * original object if it is no longer being used, or else a memory leak will
 * result.  Please see other methods on this class (particularly a
 * corresponding method whose name begins with the word <code>create</code>)
 * for alternatives that do not lead to these issues.
 *
 * 
   *
   * @see createSpecies()
   */ public
";


%csmethodmodifiers Model::addParameter(const Parameter* p) "
/**
   * Adds a copy of the given Parameter object to this Model.
   *
   * @param p the Parameter object to add
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_DUPLICATE_OBJECT_ID LIBSBML_DUPLICATE_OBJECT_ID @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   * 
   * * 
 * @note This method should be used with some caution.  The fact that this
 * method @em copies the object passed to it means that the caller will be
 * left holding a physically different object instance than the one contained
 * inside this object.  Changes made to the original object instance (such as
 * resetting attribute values) will <em>not affect the instance in this
 * object</em>.  In addition, the caller should make sure to free the
 * original object if it is no longer being used, or else a memory leak will
 * result.  Please see other methods on this class (particularly a
 * corresponding method whose name begins with the word <code>create</code>)
 * for alternatives that do not lead to these issues.
 *
 * 
   *
   * @see createParameter()
   */ public
";


%csmethodmodifiers Model::addInitialAssignment(const InitialAssignment* ia) "
/**
   * Adds a copy of the given InitialAssignment object to this Model.
   *
   * @param ia the InitialAssignment object to add
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_DUPLICATE_OBJECT_ID LIBSBML_DUPLICATE_OBJECT_ID @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   * 
   * * 
 * @note This method should be used with some caution.  The fact that this
 * method @em copies the object passed to it means that the caller will be
 * left holding a physically different object instance than the one contained
 * inside this object.  Changes made to the original object instance (such as
 * resetting attribute values) will <em>not affect the instance in this
 * object</em>.  In addition, the caller should make sure to free the
 * original object if it is no longer being used, or else a memory leak will
 * result.  Please see other methods on this class (particularly a
 * corresponding method whose name begins with the word <code>create</code>)
 * for alternatives that do not lead to these issues.
 *
 * 
   *
   * @see createInitialAssignment()
   */ public
";


%csmethodmodifiers Model::addRule(const Rule* r) "
/**
   * Adds a copy of the given Rule object to this Model.
   *
   * @param r the Rule object to add
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_DUPLICATE_OBJECT_ID LIBSBML_DUPLICATE_OBJECT_ID @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   * 
   * * 
 * @note This method should be used with some caution.  The fact that this
 * method @em copies the object passed to it means that the caller will be
 * left holding a physically different object instance than the one contained
 * inside this object.  Changes made to the original object instance (such as
 * resetting attribute values) will <em>not affect the instance in this
 * object</em>.  In addition, the caller should make sure to free the
 * original object if it is no longer being used, or else a memory leak will
 * result.  Please see other methods on this class (particularly a
 * corresponding method whose name begins with the word <code>create</code>)
 * for alternatives that do not lead to these issues.
 *
 * 
   *
   * @see createAlgebraicRule()
   * @see createAssignmentRule()
   * @see createRateRule()
   */ public
";


%csmethodmodifiers Model::addConstraint(const Constraint* c) "
/**
   * Adds a copy of the given Constraint object to this Model.
   *
   * @param c the Constraint object to add
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   * 
   * * 
 * @note This method should be used with some caution.  The fact that this
 * method @em copies the object passed to it means that the caller will be
 * left holding a physically different object instance than the one contained
 * inside this object.  Changes made to the original object instance (such as
 * resetting attribute values) will <em>not affect the instance in this
 * object</em>.  In addition, the caller should make sure to free the
 * original object if it is no longer being used, or else a memory leak will
 * result.  Please see other methods on this class (particularly a
 * corresponding method whose name begins with the word <code>create</code>)
 * for alternatives that do not lead to these issues.
 *
 * 
   *
   * @see createConstraint()
   */ public
";


%csmethodmodifiers Model::addReaction(const Reaction* r) "
/**
   * Adds a copy of the given Reaction object to this Model.
   *
   * @param r the Reaction object to add
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_DUPLICATE_OBJECT_ID LIBSBML_DUPLICATE_OBJECT_ID @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   * 
   * * 
 * @note This method should be used with some caution.  The fact that this
 * method @em copies the object passed to it means that the caller will be
 * left holding a physically different object instance than the one contained
 * inside this object.  Changes made to the original object instance (such as
 * resetting attribute values) will <em>not affect the instance in this
 * object</em>.  In addition, the caller should make sure to free the
 * original object if it is no longer being used, or else a memory leak will
 * result.  Please see other methods on this class (particularly a
 * corresponding method whose name begins with the word <code>create</code>)
 * for alternatives that do not lead to these issues.
 *
 * 
   *
   * @see createReaction()
   */ public
";


%csmethodmodifiers Model::addEvent(const Event* e) "
/**
   * Adds a copy of the given Event object to this Model.
   *
   * @param e the Event object to add
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_DUPLICATE_OBJECT_ID LIBSBML_DUPLICATE_OBJECT_ID @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   * 
   * * 
 * @note This method should be used with some caution.  The fact that this
 * method @em copies the object passed to it means that the caller will be
 * left holding a physically different object instance than the one contained
 * inside this object.  Changes made to the original object instance (such as
 * resetting attribute values) will <em>not affect the instance in this
 * object</em>.  In addition, the caller should make sure to free the
 * original object if it is no longer being used, or else a memory leak will
 * result.  Please see other methods on this class (particularly a
 * corresponding method whose name begins with the word <code>create</code>)
 * for alternatives that do not lead to these issues.
 *
 * 
   *
   * @see createEvent()
   */ public
";


%csmethodmodifiers Model::createFunctionDefinition "
/**
   * Creates a new FunctionDefinition inside this Model and returns it.
   *
   * The SBML Level and Version of the enclosing Model object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   *
   * @return the FunctionDefinition object created
   *
   * @see addFunctionDefinition(FunctionDefinition fd)
   */ public
";


%csmethodmodifiers Model::createUnitDefinition "
/**
   * Creates a new UnitDefinition inside this Model and returns it.
   *
   * The SBML Level and Version of the enclosing Model object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   *
   * @return the UnitDefinition object created
   *
   * @see addUnitDefinition(UnitDefinition ud)
   */ public
";


%csmethodmodifiers Model::createUnit "
/**
   * Creates a new Unit object within the last UnitDefinition object
   * created in this model and returns a pointer to it.
   *
   * The SBML Level and Version of the enclosing Model object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   *
   * The mechanism by which the UnitDefinition was created is not
   * significant.  If a UnitDefinition object does not exist in this model,
   * a new Unit is @em not created and @c null is returned instead.
   *
   * @return the Unit object created
   *
   * @see addUnitDefinition(UnitDefinition ud)
   */ public
";


%csmethodmodifiers Model::createCompartmentType "
/**
   * Creates a new CompartmentType inside this Model and returns it.
   *
   * The SBML Level and Version of the enclosing Model object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   *
   * @return the CompartmentType object created
   *
   * @note The CompartmentType object class is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.  It is not available in
   * Level&nbsp;1 nor Level&nbsp;3.
   *
   * @see addCompartmentType(CompartmentType ct)
   */ public
";


%csmethodmodifiers Model::createSpeciesType "
/**
   * Creates a new SpeciesType inside this Model and returns it.
   *
   * The SBML Level and Version of the enclosing Model object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   *
   * @return the SpeciesType object created
   *
   * @note The SpeciesType object class is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.  It is not available in
   * Level&nbsp;1 nor Level&nbsp;3.
   *
   * @see addSpeciesType(SpeciesType st)
   */ public
";


%csmethodmodifiers Model::createCompartment "
/**
   * Creates a new Compartment inside this Model and returns it.
   *
   * The SBML Level and Version of the enclosing Model object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   *
   * @return the Compartment object created
   *
   * @see addCompartment(Compartment c)
   */ public
";


%csmethodmodifiers Model::createSpecies "
/**
   * Creates a new Species inside this Model and returns it.
   *
   * The SBML Level and Version of the enclosing Model object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   *
   * @return the Species object created
   *
   * @see addSpecies(Species s)
   */ public
";


%csmethodmodifiers Model::createParameter "
/**
   * Creates a new Parameter inside this Model and returns it.
   *
   * The SBML Level and Version of the enclosing Model object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   *
   * @return the Parameter object created
   *
   * @see addParameter(Parameter p)
   */ public
";


%csmethodmodifiers Model::createInitialAssignment "
/**
   * Creates a new InitialAssignment inside this Model and returns it.
   *
   * The SBML Level and Version of the enclosing Model object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   *
   * @return the InitialAssignment object created
   *
   * @see addInitialAssignment(InitialAssignment ia)
   */ public
";


%csmethodmodifiers Model::createAlgebraicRule "
/**
   * Creates a new AlgebraicRule inside this Model and returns it.
   *
   * The SBML Level and Version of the enclosing Model object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   *
   * @return the AlgebraicRule object created
   *
   * @see addRule(Rule r)
   */ public
";


%csmethodmodifiers Model::createAssignmentRule "
/**
   * Creates a new AssignmentRule inside this Model and returns it.
   *
   * The SBML Level and Version of the enclosing Model object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   *
   * @return the AssignmentRule object created
   *
   * @see addRule(Rule r)
   */ public
";


%csmethodmodifiers Model::createRateRule "
/**
   * Creates a new RateRule inside this Model and returns it.
   *
   * The SBML Level and Version of the enclosing Model object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   *
   * @return the RateRule object created
   *
   * @see addRule(Rule r)
   */ public
";


%csmethodmodifiers Model::createConstraint "
/**
   * Creates a new Constraint inside this Model and returns it.
   *
   * The SBML Level and Version of the enclosing Model object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   *
   * @return the Constraint object created
   *
   * @see addConstraint(Constraint c)
   */ public
";


%csmethodmodifiers Model::createReaction "
/**
   * Creates a new Reaction inside this Model and returns it.
   *
   * The SBML Level and Version of the enclosing Model object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   *
   * @return the Reaction object created
   *
   * @see addReaction(Reaction r)
   */ public
";


%csmethodmodifiers Model::createReactant "
/**
   * Creates a new SpeciesReference object for a reactant inside the last
   * Reaction object in this Model, and returns a pointer to it.
   *
   * The SBML Level and Version of the enclosing Model object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   *
   * The mechanism by which the last Reaction object was created and added
   * to this Model is not significant.  It could have been created in a
   * variety of ways, for example using createReaction().  If a Reaction
   * does not exist for this model, a new SpeciesReference is @em not
   * created and @c null is returned instead.
   *
   * @return the SpeciesReference object created
   */ public
";


%csmethodmodifiers Model::createProduct "
/**
   * Creates a new SpeciesReference object for a product inside the last
   * Reaction object in this Model, and returns a pointer to it.
   *
   * The SBML Level and Version of the enclosing Model object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   *
   * The mechanism by which the last Reaction object was created and added
   * to this Model is not significant.  It could have been created in a
   * variety of ways, for example using createReaction().  If a Reaction
   * does not exist for this model, a new SpeciesReference is @em not
   * created and @c null is returned instead.
   *
   * @return the SpeciesReference object created
   */ public
";


%csmethodmodifiers Model::createModifier "
/**
   * Creates a new ModifierSpeciesReference object for a modifier species
   * inside the last Reaction object in this Model, and returns a pointer
   * to it.
   *
   * The SBML Level and Version of the enclosing Model object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   *
   * The mechanism by which the last Reaction object was created and added
   * to this Model is not significant.  It could have been created in a
   * variety of ways, for example using createReaction().  If a Reaction
   * does not exist for this model, a new ModifierSpeciesReference is @em
   * not created and @c null is returned instead.
   *
   * @return the SpeciesReference object created
   */ public
";


%csmethodmodifiers Model::createKineticLaw "
/**
   * Creates a new KineticLaw inside the last Reaction object created in
   * this Model, and returns a pointer to it.
   *
   * The SBML Level and Version of the enclosing Model object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   *
   * The mechanism by which the last Reaction object was created and added
   * to this Model is not significant.  It could have been created in a
   * variety of ways, for example using createReaction().  If a Reaction
   * does not exist for this model, or a Reaction exists but already has a
   * KineticLaw, a new KineticLaw is @em not created and @c null is returned
   * instead.
   *
   * @return the KineticLaw object created
   */ public
";


%csmethodmodifiers Model::createKineticLawParameter "
/**
   * Creates a new local Parameter inside the KineticLaw object of the last
   * Reaction created inside this Model, and returns a pointer to it.
   *
   * The SBML Level and Version of the enclosing Model object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   *
   * The last KineticLaw object in this Model could have been created in a
   * variety of ways.  For example, it could have been added using
   * createKineticLaw(), or it could be the result of using
   * Reaction::createKineticLaw() on the Reaction object created by a
   * createReaction().  If a Reaction does not exist for this model, or the
   * last Reaction does not contain a KineticLaw object, a new Parameter is
   * @em not created and @c null is returned instead.
   *
   * @return the Parameter object created
   */ public
";


%csmethodmodifiers Model::createKineticLawLocalParameter "
/**
   * Creates a new LocalParameter inside the KineticLaw object of the last
   * Reaction created inside this Model, and returns a pointer to it.
   *
   * The SBML Level and Version of the enclosing Model object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   *
   * The last KineticLaw object in this Model could have been created in a
   * variety of ways.  For example, it could have been added using
   * createKineticLaw(), or it could be the result of using
   * Reaction::createKineticLaw() on the Reaction object created by a
   * createReaction().  If a Reaction does not exist for this model, or the
   * last Reaction does not contain a KineticLaw object, a new Parameter is
   * @em not created and @c null is returned instead.
   *
   * @return the Parameter object created
   */ public
";


%csmethodmodifiers Model::createEvent "
/**
   * Creates a new Event inside this Model and returns it.
   *
   * The SBML Level and Version of the enclosing Model object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   *
   * @return the Event object created
   */ public
";


%csmethodmodifiers Model::createEventAssignment "
/**
   * Creates a new EventAssignment inside the last Event object created in
   * this Model, and returns a pointer to it.
   *
   * The SBML Level and Version of the enclosing Model object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   *
   * The mechanism by which the last Event object in this model was created
   * is not significant.  It could have been created in a variety of ways,
   * for example by using createEvent().  If no Event object exists in this
   * Model object, a new EventAssignment is @em not created and @c null is
   * returned instead.
   *
   * @return the EventAssignment object created
   */ public
";


%csmethodmodifiers Model::createTrigger "
/**
   * Creates a new Trigger inside the last Event object created in
   * this Model, and returns a pointer to it.
   *
   * The SBML Level and Version of the enclosing Model object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   *
   * The mechanism by which the last Event object in this model was created
   * is not significant.  It could have been created in a variety of ways,
   * for example by using createEvent().  If no Event object exists in this
   * Model object, a new Trigger is @em not created and @c null is
   * returned instead.
   *
   * @return the Trigger object created
   */ public
";


%csmethodmodifiers Model::createDelay "
/**
   * Creates a new Delay inside the last Event object created in
   * this Model, and returns a pointer to it.
   *
   * The SBML Level and Version of the enclosing Model object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   *
   * The mechanism by which the last Event object in this model was created
   * is not significant.  It could have been created in a variety of ways,
   * for example by using createEvent().  If no Event object exists in this
   * Model object, a new Delay is @em not created and @c null is
   * returned instead.
   *
   * @return the Delay object created
   */ public
";


%csmethodmodifiers Model::setAnnotation(const XMLNode* annotation) "
/**
   * Sets the value of the \'annotation\' subelement of this SBML object to a
   * copy of @p annotation.
   *
   * Any existing content of the \'annotation\' subelement is discarded.
   * Unless you have taken steps to first copy and reconstitute any
   * existing annotations into the @p annotation that is about to be
   * assigned, it is likely that performing such wholesale replacement is
   * unfriendly towards other software applications whose annotations are
   * discarded.  An alternative may be to use appendAnnotation().
   *
   * @param annotation an XML structure that is to be used as the content
   * of the \'annotation\' subelement of this object
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   *
   * @see appendAnnotation(XMLNode annotation)
   */ public new
";


%csmethodmodifiers Model::setAnnotation(const std::string& annotation) "
/**
   * Sets the value of the \'annotation\' subelement of this SBML object to a
   * copy of @p annotation.
   *
   * Any existing content of the \'annotation\' subelement is discarded.
   * Unless you have taken steps to first copy and reconstitute any
   * existing annotations into the @p annotation that is about to be
   * assigned, it is likely that performing such wholesale replacement is
   * unfriendly towards other software applications whose annotations are
   * discarded.  An alternative may be to use appendAnnotation().
   *
   * @param annotation an XML string that is to be used as the content
   * of the \'annotation\' subelement of this object
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   *
   * @see appendAnnotation(string annotation)
   */ public new
";


%csmethodmodifiers Model::appendAnnotation(const XMLNode* annotation) "
/**
   * Appends annotation content to any existing content in the \'annotation\'
   * subelement of this object.
   *
   * The content in @p annotation is copied.  Unlike setAnnotation(), this
   * method allows other annotations to be preserved when an application
   * adds its own data.
   *
   * @param annotation an XML structure that is to be copied and appended
   * to the content of the \'annotation\' subelement of this object
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   *
   * @see setAnnotation(XMLNode annotation)
   */ public new
";


%csmethodmodifiers Model::appendAnnotation(const std::string& annotation) "
/**
   * Appends annotation content to any existing content in the \'annotation\'
   * subelement of this object.
   *
   * The content in @p annotation is copied.  Unlike setAnnotation(), this 
   * method allows other annotations to be preserved when an application
   * adds its own data.
   *
   * @param annotation an XML string that is to be copied and appended
   * to the content of the \'annotation\' subelement of this object
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   *
   * @see setAnnotation(string annotation)
   */ public new
";


%csmethodmodifiers Model::getListOfFunctionDefinitions() const "
/**
   * Get the ListOfFunctionDefinitions object in this Model.
   * 
   * @return the list of FunctionDefinitions for this Model.
   */ public
";


%csmethodmodifiers Model::getListOfFunctionDefinitions "
/**
   * Get the ListOfFunctionDefinitions object in this Model.
   * 
   * @return the list of FunctionDefinitions for this Model.
   */ public
";


%csmethodmodifiers Model::getListOfUnitDefinitions() const "
/**
   * Get the ListOfUnitDefinitions object in this Model.
   * 
   * @return the list of UnitDefinitions for this Model.
   */ public
";


%csmethodmodifiers Model::getListOfUnitDefinitions "
/**
   * Get the ListOfUnitDefinitions object in this Model.
   * 
   * @return the list of UnitDefinitions for this Model.
   */ public
";


%csmethodmodifiers Model::getListOfCompartmentTypes() const "
/**
   * Get the ListOfCompartmentTypes object in this Model.
   * 
   * @return the list of CompartmentTypes for this Model.
   *
   * @note The CompartmentType object class is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.  It is not available in
   * Level&nbsp;1 nor Level&nbsp;3.
   */ public
";


%csmethodmodifiers Model::getListOfCompartmentTypes "
/**
   * Get the ListOfCompartmentTypes object in this Model.
   * 
   * @return the list of CompartmentTypes for this Model.
   *
   * @note The CompartmentType object class is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.  It is not available in
   * Level&nbsp;1 nor Level&nbsp;3.
   */ public
";


%csmethodmodifiers Model::getListOfSpeciesTypes() const "
/**
   * Get the ListOfSpeciesTypes object in this Model.
   * 
   * @return the list of SpeciesTypes for this Model.
   *
   * @note The SpeciesType object class is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.  It is not available in
   * Level&nbsp;1 nor Level&nbsp;3.
   */ public
";


%csmethodmodifiers Model::getListOfSpeciesTypes "
/**
   * Get the ListOfSpeciesTypes object in this Model.
   * 
   * @return the list of SpeciesTypes for this Model.
   *
   * @note The SpeciesType object class is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.  It is not available in
   * Level&nbsp;1 nor Level&nbsp;3.
   */ public
";


%csmethodmodifiers Model::getListOfCompartments() const "
/**
   * Get the ListOfCompartments object in this Model.
   * 
   * @return the list of Compartments for this Model.
   */ public
";


%csmethodmodifiers Model::getListOfCompartments "
/**
   * Get the ListOfCompartments object in this Model.
   * 
   * @return the list of Compartments for this Model.
   */ public
";


%csmethodmodifiers Model::getListOfSpecies() const "
/**
   * Get the ListOfSpecies object in this Model.
   * 
   * @return the list of Species for this Model.
   */ public
";


%csmethodmodifiers Model::getListOfSpecies "
/**
   * Get the ListOfSpecies object in this Model.
   * 
   * @return the list of Species for this Model.
   */ public
";


%csmethodmodifiers Model::getListOfParameters() const "
/**
   * Get the ListOfParameters object in this Model.
   * 
   * @return the list of Parameters for this Model.
   */ public
";


%csmethodmodifiers Model::getListOfParameters "
/**
   * Get the ListOfParameters object in this Model.
   * 
   * @return the list of Parameters for this Model.
   */ public
";


%csmethodmodifiers Model::getListOfInitialAssignments() const "
/**
   * Get the ListOfInitialAssignments object in this Model.
   * 
   * @return the list of InitialAssignments for this Model.
   */ public
";


%csmethodmodifiers Model::getListOfInitialAssignments "
/**
   * Get the ListOfInitialAssignments object in this Model.
   * 
   * @return the list of InitialAssignment for this Model.
   */ public
";


%csmethodmodifiers Model::getListOfRules() const "
/**
   * Get the ListOfRules object in this Model.
   * 
   * @return the list of Rules for this Model.
   */ public
";


%csmethodmodifiers Model::getListOfRules "
/**
   * Get the ListOfRules object in this Model.
   * 
   * @return the list of Rules for this Model.
   */ public
";


%csmethodmodifiers Model::getListOfConstraints() const "
/**
   * Get the ListOfConstraints object in this Model.
   * 
   * @return the list of Constraints for this Model.
   */ public
";


%csmethodmodifiers Model::getListOfConstraints "
/**
   * Get the ListOfConstraints object in this Model.
   * 
   * @return the list of Constraints for this Model.
   */ public
";


%csmethodmodifiers Model::getListOfReactions() const "
/**
   * Get the ListOfReactions object in this Model.
   * 
   * @return the list of Reactions for this Model.
   */ public
";


%csmethodmodifiers Model::getListOfReactions "
/**
   * Get the ListOfReactions object in this Model.
   * 
   * @return the list of Reactions for this Model.
   */ public
";


%csmethodmodifiers Model::getListOfEvents() const "
/**
   * Get the ListOfEvents object in this Model.
   * 
   * @return the list of Events for this Model.
   */ public
";


%csmethodmodifiers Model::getListOfEvents "
/**
   * Get the ListOfEvents object in this Model.
   * 
   * @return the list of Events for this Model.
   */ public
";


%csmethodmodifiers Model::getFunctionDefinition "
/**
   * Get the nth FunctionDefinitions object in this Model.
   * 
   * @return the nth FunctionDefinition of this Model.
   */ public
";


%csmethodmodifiers Model::getFunctionDefinition(unsigned int n) "
/**
   * Get the nth FunctionDefinitions object in this Model.
   * 
   * @return the nth FunctionDefinition of this Model.
   */ public
";


%csmethodmodifiers Model::getFunctionDefinition(const std::string& sid) const "
/**
   * Get a FunctionDefinition object based on its identifier.
   * 
   * @return the FunctionDefinition in this Model with the identifier
   * @p sid or @c null if no such FunctionDefinition exists.
   */ public
";


%csmethodmodifiers Model::getFunctionDefinition(const std::string& sid) "
/**
   * Get a FunctionDefinition object based on its identifier.
   * 
   * @return the FunctionDefinition in this Model with the identifier
   * @p sid or @c null if no such FunctionDefinition exists.
   */ public
";


%csmethodmodifiers Model::getUnitDefinition "
/**
   * Get the nth UnitDefinition object in this Model.
   * 
   * @return the nth UnitDefinition of this Model.
   */ public
";


%csmethodmodifiers Model::getUnitDefinition(unsigned int n) "
/**
   * Get the nth UnitDefinition object in this Model.
   * 
   * @return the nth UnitDefinition of this Model.
   */ public
";


%csmethodmodifiers Model::getUnitDefinition(const std::string& sid) const "
/**
   * Get a UnitDefinition based on its identifier.
   * 
   * @return the UnitDefinition in this Model with the identifier @p sid or
   * @c null if no such UnitDefinition exists.
   */ public
";


%csmethodmodifiers Model::getUnitDefinition(const std::string& sid) "
/**
   * Get a UnitDefinition based on its identifier.
   * 
   * @return the UnitDefinition in this Model with the identifier @p sid or
   * @c null if no such UnitDefinition exists.
   */ public
";


%csmethodmodifiers Model::getCompartmentType "
/**
   * Get the nth CompartmentType object in this Model.
   * 
   * @return the nth CompartmentType of this Model.
   *
   * @note The CompartmentType object class is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.  It is not available in
   * Level&nbsp;1 nor Level&nbsp;3.
   */ public
";


%csmethodmodifiers Model::getCompartmentType(unsigned int n) "
/**
   * Get the nth CompartmentType object in this Model.
   * 
   * @return the nth CompartmentType of this Model.
   *
   * @note The CompartmentType object class is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.  It is not available in
   * Level&nbsp;1 nor Level&nbsp;3.
   */ public
";


%csmethodmodifiers Model::getCompartmentType(const std::string& sid) const "
/**
   * Get a CompartmentType object based on its identifier.
   * 
   * @return the CompartmentType in this Model with the identifier @p sid
   * or @c null if no such CompartmentType exists.
   *
   * @note The CompartmentType object class is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.  It is not available in
   * Level&nbsp;1 nor Level&nbsp;3.
   */ public
";


%csmethodmodifiers Model::getCompartmentType(const std::string& sid) "
/**
   * Get a CompartmentType object based on its identifier.
   * 
   * @return the CompartmentType in this Model with the identifier @p sid
   * or @c null if no such CompartmentType exists.
   *
   * @note The CompartmentType object class is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.  It is not available in
   * Level&nbsp;1 nor Level&nbsp;3.
   */ public
";


%csmethodmodifiers Model::getSpeciesType "
/**
   * Get the nth SpeciesType object in this Model.
   * 
   * @return the nth SpeciesType of this Model.
   *
   * @note The SpeciesType object class is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.  It is not available in
   * Level&nbsp;1 nor Level&nbsp;3.
   */ public
";


%csmethodmodifiers Model::getSpeciesType(unsigned int n) "
/**
   * Get the nth SpeciesType object in this Model.
   * 
   * @return the nth SpeciesType of this Model.
   *
   * @note The SpeciesType object class is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.  It is not available in
   * Level&nbsp;1 nor Level&nbsp;3.
   */ public
";


%csmethodmodifiers Model::getSpeciesType(const std::string& sid) const "
/**
   * Get a SpeciesType object based on its identifier.
   * 
   * @return the SpeciesType in this Model with the identifier @p sid or
   * @c null if no such SpeciesType exists.
   *
   * @note The SpeciesType object class is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.  It is not available in
   * Level&nbsp;1 nor Level&nbsp;3.
   */ public
";


%csmethodmodifiers Model::getSpeciesType(const std::string& sid) "
/**
   * Get a SpeciesType object based on its identifier.
   * 
   * @return the SpeciesType in this Model with the identifier @p sid or
   * @c null if no such SpeciesType exists.
   *
   * @note The SpeciesType object class is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.  It is not available in
   * Level&nbsp;1 nor Level&nbsp;3.
   */ public
";


%csmethodmodifiers Model::getCompartment "
/**
   * Get the nth Compartment object in this Model.
   * 
   * @return the nth Compartment of this Model.
   */ public
";


%csmethodmodifiers Model::getCompartment(unsigned int n) "
/**
   * Get the nth Compartment object in this Model.
   * 
   * @return the nth Compartment of this Model.
   */ public
";


%csmethodmodifiers Model::getCompartment(const std::string& sid) const "
/**
   * Get a Compartment object based on its identifier.
   * 
   * @return the Compartment in this Model with the identifier @p sid or
   * @c null if no such Compartment exists.
   */ public
";


%csmethodmodifiers Model::getCompartment(const std::string& sid) "
/**
   * Get a Compartment object based on its identifier.
   * 
   * @return the Compartment in this Model with the identifier @p sid or
   * @c null if no such Compartment exists.
   */ public
";


%csmethodmodifiers Model::getSpecies "
/**
   * Get the nth Species object in this Model.
   * 
   * @return the nth Species of this Model.
   */ public
";


%csmethodmodifiers Model::getSpecies(unsigned int n) "
/**
   * Get the nth Species object in this Model.
   * 
   * @return the nth Species of this Model.
   */ public
";


%csmethodmodifiers Model::getSpecies(const std::string& sid) const "
/**
   * Get a Species object based on its identifier.
   * 
   * @return the Species in this Model with the identifier @p sid or @c null
   * if no such Species exists.
   */ public
";


%csmethodmodifiers Model::getSpecies(const std::string& sid) "
/**
   * Get a Species object based on its identifier.
   * 
   * @return the Species in this Model with the identifier @p sid or @c null
   * if no such Species exists.
   */ public
";


%csmethodmodifiers Model::getParameter "
/**
   * Get the nth Parameter object in this Model.
   * 
   * @return the nth Parameter of this Model.
   */ public
";


%csmethodmodifiers Model::getParameter(unsigned int n) "
/**
   * Get the nth Parameter object in this Model.
   * 
   * @return the nth Parameter of this Model.
   */ public
";


%csmethodmodifiers Model::getParameter(const std::string& sid) const "
/**
   * Get a Parameter object based on its identifier.
   * 
   * @return the Parameter in this Model with the identifier @p sid or @c null
   * if no such Parameter exists.
   */ public
";


%csmethodmodifiers Model::getParameter(const std::string& sid) "
/**
   * Get a Parameter object based on its identifier.
   * 
   * @return the Parameter in this Model with the identifier @p sid or @c null
   * if no such Parameter exists.
   */ public
";


%csmethodmodifiers Model::getInitialAssignment "
/**
   * Get the nth InitialAssignment object in this Model.
   * 
   * @return the nth InitialAssignment of this Model.
   */ public
";


%csmethodmodifiers Model::getInitialAssignment(unsigned int n) "
/**
   * Get the nth InitialAssignment object in this Model.
   * 
   * @return the nth InitialAssignment of this Model.
   */ public
";


%csmethodmodifiers Model::getInitialAssignment(const std::string& symbol) const "
/**
   * Get an InitialAssignment object based on the symbol to which it
   * assigns a value.
   * 
   * @return the InitialAssignment in this Model with the given \'symbol\'
   * attribute value or @c null if no such InitialAssignment exists.
   */ public
";


%csmethodmodifiers Model::getInitialAssignment(const std::string& symbol) "
/**
   * Get an InitialAssignment object based on the symbol to which it
   * assigns a value.
   * 
   * @return the InitialAssignment in this Model with the given \'symbol\'
   * attribute value or @c null if no such InitialAssignment exists.
   */ public
";


%csmethodmodifiers Model::getRule "
/**
   * Get the nth Rule object in this Model.
   * 
   * @return the nth Rule of this Model.
   */ public
";


%csmethodmodifiers Model::getRule(unsigned int n) "
/**
   * Get the nth Rule object in this Model.
   * 
   * @return the nth Rule of this Model.
   */ public
";


%csmethodmodifiers Model::getRule(const std::string& variable) const "
/**
   * Get a Rule object based on the variable to which it assigns a value.
   * 
   * @return the Rule in this Model with the given \'variable\' attribute
   * value or @c null if no such Rule exists.
   */ public
";


%csmethodmodifiers Model::getRule(const std::string& variable) "
/**
   * Get a Rule object based on the variable to which it assigns a value.
   * 
   * @return the Rule in this Model with the given \'variable\' attribute
   * value or @c null if no such Rule exists.
   */ public
";


%csmethodmodifiers Model::getAssignmentRule(const std::string& variable) const "
/**
   * Get a Rule object based on the variable to which it assigns a value.
   * 
   * @return the Rule in this Model with the given \'variable\' attribute
   * value or @c null if no such Rule exists.
   */ public
";


%csmethodmodifiers Model::getAssignmentRule(const std::string& variable) "
/**
   * Get a Rule object based on the variable to which it assigns a value.
   * 
   * @return the Rule in this Model with the given \'variable\' attribute
   * value or @c null if no such Rule exists.
   */ public
";


%csmethodmodifiers Model::getRateRule(const std::string& variable) const "
/**
   * Get a Rule object based on the variable to which it assigns a value.
   * 
   * @return the Rule in this Model with the given \'variable\' attribute
   * value or @c null if no such Rule exists.
   */ public
";


%csmethodmodifiers Model::getRateRule(const std::string& variable) "
/**
   * Get a Rule object based on the variable to which it assigns a value.
   * 
   * @return the Rule in this Model with the given \'variable\' attribute
   * value or @c null if no such Rule exists.
   */ public
";


%csmethodmodifiers Model::getConstraint "
/**
   * Get the nth Constraint object in this Model.
   * 
   * @return the nth Constraint of this Model.
   */ public
";


%csmethodmodifiers Model::getConstraint(unsigned int n) "
/**
   * Get the nth Constraint object in this Model.
   * 
   * @return the nth Constraint of this Model.
   */ public
";


%csmethodmodifiers Model::getReaction "
/**
   * Get the nth Reaction object in this Model.
   * 
   * @return the nth Reaction of this Model.
   */ public
";


%csmethodmodifiers Model::getReaction(unsigned int n) "
/**
   * Get the nth Reaction object in this Model.
   * 
   * @return the nth Reaction of this Model.
   */ public
";


%csmethodmodifiers Model::getReaction(const std::string& sid) const "
/**
   * Get a Reaction object based on its identifier.
   * 
   * @return the Reaction in this Model with the identifier @p sid or @c null
   * if no such Reaction exists.
   */ public
";


%csmethodmodifiers Model::getReaction(const std::string& sid) "
/**
   * Get a Reaction object based on its identifier.
   * 
   * @return the Reaction in this Model with the identifier @p sid or @c null
   * if no such Reaction exists.
   */ public
";


%csmethodmodifiers Model::getSpeciesReference(const std::string& sid) "
/**
   * Get a SpeciesReference object based on its identifier.
   * 
   * @return the SpeciesReference in this Model with the identifier @p sid or @c null
   * if no such SpeciesReference exists.
   */ public
";


%csmethodmodifiers Model::getSpeciesReference(const std::string& sid) const "
/**
   * Get a SpeciesReference object based on its identifier.
   * 
   * @return the SpeciesReference in this Model with the identifier @p sid or @c null
   * if no such SpeciesReference exists.
   */ public
";


%csmethodmodifiers Model::getModifierSpeciesReference(const std::string& sid) "
/**
   * Get a ModifierSpeciesReference object based on its identifier.
   * 
   * @return the ModifierSpeciesReference in this Model with the 
   * identifier @p sid or @c null
   * if no such ModifierSpeciesReference exists.
   */ public
";


%csmethodmodifiers Model::getModifierSpeciesReference(const std::string& sid) const "
/**
   * Get a ModifierSpeciesReference object based on its identifier.
   * 
   * @return the ModifierSpeciesReference in this Model with the 
   * identifier @p sid or @c null
   * if no such ModifierSpeciesReference exists.
   */ public
";


%csmethodmodifiers Model::getEvent "
/**
   * Get the nth Event object in this Model.
   * 
   * @return the nth Event of this Model.
   */ public
";


%csmethodmodifiers Model::getEvent(unsigned int n) "
/**
   * Get the nth Event object in this Model.
   * 
   * @return the nth Event of this Model.
   */ public
";


%csmethodmodifiers Model::getEvent(const std::string& sid) const "
/**
   * Get an Event object based on its identifier.
   * 
   * @return the Event in this Model with the identifier @p sid or @c null if
   * no such Event exists.
   */ public
";


%csmethodmodifiers Model::getEvent(const std::string& sid) "
/**
   * Get an Event object based on its identifier.
   * 
   * @return the Event in this Model with the identifier @p sid or @c null if
   * no such Event exists.
   */ public
";


%csmethodmodifiers Model::getNumFunctionDefinitions() const "
/**
   * Get the number of FunctionDefinition objects in this Model.
   * 
   * @return the number of FunctionDefinitions in this Model.
   */ public
";


%csmethodmodifiers Model::getNumUnitDefinitions() const "
/**
   * Get the number of UnitDefinition objects in this Model.
   * 
   * @return the number of UnitDefinitions in this Model.
   */ public
";


%csmethodmodifiers Model::getNumCompartmentTypes() const "
/**
   * Get the number of CompartmentType objects in this Model.
   * 
   * @return the number of CompartmentTypes in this Model.
   *
   * @note The CompartmentType object class is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.  It is not available in
   * Level&nbsp;1 nor Level&nbsp;3.
   */ public
";


%csmethodmodifiers Model::getNumSpeciesTypes() const "
/**
   * Get the number of SpeciesType objects in this Model.
   * 
   * @return the number of SpeciesTypes in this Model.
   *
   * @note The SpeciesType object class is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.  It is not available in
   * Level&nbsp;1 nor Level&nbsp;3.
   */ public
";


%csmethodmodifiers Model::getNumCompartments() const "
/**
   * Get the number of Compartment objects in this Model.
   * 
   * @return the number of Compartments in this Model.
   */ public
";


%csmethodmodifiers Model::getNumSpecies() const "
/**
   * Get the number of Specie objects in this Model.
   * 
   * @return the number of Species in this Model.
   */ public
";


%csmethodmodifiers Model::getNumSpeciesWithBoundaryCondition() const "
/**
   * Get the number of Species in this Model having their
   * \'boundaryCondition\' attribute value set to @c true.
   *
   * @return the number of Species in this Model with boundaryCondition set
   * to true.
   */ public
";


%csmethodmodifiers Model::getNumParameters() const "
/**
   * Get the number of Parameter objects in this Model.
   * 
   * @return the number of Parameters in this Model.  Parameters defined in
   * KineticLaws are not included.
   */ public
";


%csmethodmodifiers Model::getNumInitialAssignments() const "
/**
   * Get the number of InitialAssignment objects in this Model.
   * 
   * @return the number of InitialAssignments in this Model.
   */ public
";


%csmethodmodifiers Model::getNumRules() const "
/**
   * Get the number of Rule objects in this Model.
   * 
   * @return the number of Rules in this Model.
   */ public
";


%csmethodmodifiers Model::getNumConstraints() const "
/**
   * Get the number of Constraint objects in this Model.
   * 
   * @return the number of Constraints in this Model.
   */ public
";


%csmethodmodifiers Model::getNumReactions() const "
/**
   * Get the number of Reaction objects in this Model.
   * 
   * @return the number of Reactions in this Model.
   */ public
";


%csmethodmodifiers Model::getNumEvents() const "
/**
   * Get the number of Event objects in this Model.
   * 
   * @return the number of Events in this Model.
   */ public
";


%csmethodmodifiers Model::removeFromParentAndDelete "
/**
   * Finds this Model\'s parent SBMLDocument and calls setModel(null) on it,
   * indirectly deleting itself.  Overridden from the SBase function since
   * the parent is not a ListOf.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers Model::renameAllIds(IdentifierTransformer* idTransformer, ElementFilter* filter=NULL) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Model::renameIDs(List* elements, IdentifierTransformer* idTransformer) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Model::renameSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames all the @c SIdRef attributes on this element, including any
   * found in MathML.
   *
   * *
 * 

 * In SBML, object identifiers are of a data type called <code>SId</code>.
 * In SBML Level&nbsp;3, an explicit data type called <code>SIdRef</code> was
 * introduced for attribute values that refer to <code>SId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to an identifier\', but the effective
 * data type was the same as <code>SIdRef</code>in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>SIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 *
 *
   * 
   * This method works by looking at all attributes and (if appropriate)
   * mathematical formulas, comparing the identifiers to the value of @p
   * oldid.  If any matches are found, the matching identifiers are replaced
   * with @p newid.  The method does @em not descend into child elements.
   *
   * @param oldid the old identifier
   * @param newid the new identifier
   */ public
";


%csmethodmodifiers Model::renameUnitSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames all the @c UnitSIdRef attributes on this element.
   *
   * *
 * 
 * In SBML, unit definitions have identifiers of type <code>UnitSId</code>.  In
 * SBML Level&nbsp;3, an explicit data type called <code>UnitSIdRef</code> was
 * introduced for attribute values that refer to <code>UnitSId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to a unit identifier\', but the effective
 * data type was the same as <code>UnitSIdRef</code> in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>UnitSIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 * 
 *
   *
   * This method works by looking at all unit identifier attribute values
   * (including, if appropriate, inside mathematical formulas), comparing the
   * unit identifiers to the value of @p oldid.  If any matches are found,
   * the matching identifiers are replaced with @p newid.  The method does
   * @em not descend into child elements.
   * 
   * @param oldid the old identifier
   * @param newid the new identifier
   */ public
";


%csmethodmodifiers Model::isBoolean(const ASTNode* node) const "
/**
   * Predicate returning @c true if the
   * given ASTNode is a bool.
   *
   * Often times, this question can be answered with the ASTNode\'s own
   * isBoolean() method, but if the AST is an expression that calls a
   * function defined in the Model\'s ListOfFunctionDefinitions, the model
   * is needed for lookup context.
   * 
   * @return true if the given ASTNode is a bool.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Model::convertL1ToL2 "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Model::convertL1ToL3 "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Model::convertL2ToL3 "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Model::convertL2ToL1(bool strict = false) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Model::convertL3ToL1 "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Model::convertL3ToL2(bool strict = false) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Model::addModifiers "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Model::addConstantAttribute "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Model::setSpatialDimensions(double dims = 3.0) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Model::addDefinitionsForDefaultUnits "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Model::convertParametersToLocals(unsigned int level, unsigned int version) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Model::setSpeciesReferenceConstantValueAndStoichiometry "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Model::removeMetaId "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Model::removeSBOTerms(bool strict) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Model::removeHasOnlySubstanceUnits "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Model::removeSBOTermsNotInL2V2(bool strict) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Model::removeDuplicateTopLevelAnnotations "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Model::removeParameterRuleUnits(bool strict) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Model::convertStoichiometryMath "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Model::assignRequiredValues "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Model::dealWithModelUnits "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Model::dealWithStoichiometry "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Model::dealWithEvents(bool strict) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Model::convertToL2Strict "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Model::setSBMLDocument(SBMLDocument* d) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Model::connectToChild "
/**
   * Sets this SBML object to child SBML objects (if any).
   * (Creates a child-parent relationship by the parent)
   *
   * Subclasses must override this function if they define
   * one ore more child elements.
   * Basically, this function needs to be called in
   * constructor, copy constructor and assignment operator.
   *
   * @see setSBMLDocument
   * @see enablePackageInternal
   */ /* libsbml-internal */ public new
";


%csmethodmodifiers Model::getTypeCode() const "
/**
   * Returns the libSBML type code for this %SBML object.
   * 
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object:
   * @link libsbmlcs.libsbml.SBML_MODEL SBML_MODEL@endlink (default).
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see getElementName()
   * @see getPackageName()
   */ public new
";


%csmethodmodifiers Model::getElementName() const "
/**
   * Returns the XML element name of this object, which for Model, is
   * always @c \'model\'.
   * 
   * @return the name of this element, i.e., @c \'model\'.
   */ public new
";


%csmethodmodifiers Model::getElementPosition() const "
/**
   * Return the position of this element.
   *
   * @return the ordinal position of the element with respect to its
   * siblings or -1 (default) to indicate the position is not significant.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Model::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Model::populateListFormulaUnitsData "
/**
   * Populates the list of FormulaDataUnits with the units derived 
   * for the model. The list contains elements of class
   * FormulaUnitsData. 
   *
   * The first element of the list refers to the default units
   * of \'substance per time\' derived from the model and has the
   * unitReferenceId \'subs_per_time\'. This facilitates the comparison of units
   * derived from mathematical formula with the expected units.
   * 
   * The next elements of the list record the units of the 
   * compartments and species established from either explicitly
   * declared or default units.
   *
   * The next elements record the units of any parameters.
   *
   * Subsequent elements of the list record the units derived for
   * each mathematical expression encountered within the model.
   *
   * @note This function is utilised by the Unit Consistency Validator.
   * The list is populated prior to running the validation and thus
   * the consistency of units can be checked by accessing the members
   * of the list and comparing the appropriate data.
   */ public
";


%csmethodmodifiers Model::isPopulatedListFormulaUnitsData "
/**
   * Predicate returning @c true if 
   * the list of FormulaUnitsData is populated.
   * 
   * @return @c true if the list of FormulaUnitsData is populated, 
   * @c false otherwise.
   */ public
";


%csmethodmodifiers Model::addFormulaUnitsData(const FormulaUnitsData* fud) "
/**
   * Adds a copy of the given FormulaUnitsData object to this Model.
   *
   * @param fud the FormulaUnitsData to add
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Model::createFormulaUnitsData "
/**
   * Creates a new FormulaUnitsData inside this Model and returns it.
   *
   * @return the FormulaUnitsData object created
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Model::getFormulaUnitsData "
/**
   * Get the nth FormulaUnitsData object in this Model.
   * 
   * @return the nth FormulaUnitsData of this Model.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Model::getFormulaUnitsData(unsigned int n) "
/**
   * Get the nth FormulaUnitsData object in this Model.
   * 
   * @return the nth FormulaUnitsData of this Model.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Model::getFormulaUnitsData(const std::string& sid, int typecode) const "
/**
   * Get a FormulaUnitsData object based on its unitReferenceId and typecode.
   * 
   * @return the FormulaUnitsData in this Model with the unitReferenceId @p sid 
   * and the typecode (int) @p typecode or @c null
   * if no such FormulaUnitsData exists.
   *
   * @note The typecode (int) parameter is necessary as the unitReferenceId
   * of the FormulaUnitsData need not be unique. For example if a Species
   * with id \'s\' is assigned by an AssignmentRule there will be two 
   * elements of the FormulaUnitsData list with the unitReferenceId \'s\'; 
   * one with
   * typecode \'SBML_SPECIES\' referring to the units related to the species, 
   * the other with typecode \'SBML_ASSIGNMENT_RULE\' referring to the units
   * derived from the math element of the AssignmentRule.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Model::getFormulaUnitsData(const std::string& sid, int) "
/**
   * Get a FormulaUnitsData object based on its unitReferenceId and typecode.
   * 
   * @return the FormulaUnitsData in this Model with the unitReferenceId @p sid 
   * and the typecode (int) @p typecode or @c null
   * if no such FormulaUnitsData exists.
   *
   * @note The typecode (int) parameter is necessary as the unitReferenceId
   * of the FormulaUnitsData need not be unique. For example if a Species
   * with id \'s\' is assigned by an AssignmentRule there will be two 
   * elements of the FormulaUnitsData list with the unitReferenceId \'s\'; 
   * one with
   * typecode \'SBML_SPECIES\' referring to the units related to the species, 
   * the other with typecode \'SBML_ASSIGNMENT_RULE\' referring to the units
   * derived from the math element of the AssignmentRule.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Model::getFormulaUnitsDataForVariable(const std::string& sid) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Model::getFormulaUnitsDataForAssignment(const std::string& sid) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Model::getNumFormulaUnitsData() const "
/**
   * Get the number of FormulaUnitsData objects in this Model.
   * 
   * @return the number of FormulaUnitsData in this Model.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Model::getListFormulaUnitsData "
/**
   * Get the list of FormulaUnitsData object in this Model.
   * 
   * @return the list of FormulaUnitsData for this Model.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Model::getListFormulaUnitsData() const "
/**
   * Get the list of FormulaUnitsData object in this Model.
   * 
   * @return the list of FormulaUnitsData for this Model.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Model::hasRequiredElements() const "
/**
   * Predicate returning @c true if
   * all the required elements for this Model object
   * have been set.
   *
   * @note The required elements for a Model object are:
   * listOfCompartments (L1 only); listOfSpecies (L1V1 only);
   * listOfReactions(L1V1 only)
   *
   * @return a bool value indicating whether all the required
   * elements for this object have been defined.
   */ public new
";


%csmethodmodifiers Model::removeFunctionDefinition(unsigned int n) "
/**
   * Removes the nth FunctionDefinition object from this Model object and 
   * returns a pointer to it.
   *
   * The caller owns the returned object and is responsible for deleting it.
   *
   * @param n the index of the FunctionDefinition object to remove
   *
   * @return the FunctionDefinition object removed.  As mentioned above, 
   * the caller owns the returned item. @c null is returned if the given index 
   * is out of range.
   *
   */ public
";


%csmethodmodifiers Model::removeFunctionDefinition(const std::string& sid) "
/**
   * Removes the FunctionDefinition object with the given identifier from this Model 
   * object and returns a pointer to it.
   *
   * The caller owns the returned object and is responsible for deleting it.
   * If none of the FunctionDefinition objects in this Model object have the identifier 
   * @p sid, then @c null is returned.
   *
   * @param sid the identifier of the FunctionDefinition object to remove
   *
   * @return the FunctionDefinition object removed.  As mentioned above, the 
   * caller owns the returned object. @c null is returned if no FunctionDefinition
   * object with the identifier exists in this Model object.
   */ public
";


%csmethodmodifiers Model::removeUnitDefinition(unsigned int n) "
/**
   * Removes the nth UnitDefinition object from this Model object and
   * returns a pointer to it.
   *
   * The caller owns the returned object and is responsible for deleting it.
   *
   * @param n the index of the UnitDefinition object to remove
   *
   * @return the UnitDefinition object removed.  As mentioned above, 
   * the caller owns the returned item. @c null is returned if the given index 
   * is out of range.
   *
   */ public
";


%csmethodmodifiers Model::removeUnitDefinition(const std::string& sid) "
/**
   * Removes the UnitDefinition object with the given identifier from this Model
   * object and returns a pointer to it.
   *
   * The caller owns the returned object and is responsible for deleting it.
   * If none of the UnitDefinition objects in this Model object have the identifier 
   * @p sid, then @c null is returned.
   *
   * @param sid the identifier of the UnitDefinition object to remove
   *
   * @return the UnitDefinition object removed.  As mentioned above, the 
   * caller owns the returned object. @c null is returned if no UnitDefinition
   * object with the identifier exists in this Model object.
   */ public
";


%csmethodmodifiers Model::removeCompartmentType(unsigned int n) "
/**
   * Removes the nth CompartmentType object from this Model object and
   * returns a pointer to it.
   *
   * The caller owns the returned object and is responsible for deleting it.
   *
   * @param n the index of the CompartmentType object to remove
   *
   * @return the ComapartmentType object removed.  As mentioned above, 
   * the caller owns the returned item. @c null is returned if the given index 
   * is out of range.
   *
   */ public
";


%csmethodmodifiers Model::removeCompartmentType(const std::string& sid) "
/**
   * Removes the CompartmentType object with the given identifier from this Model
   * object and returns a pointer to it.
   *
   * The caller owns the returned object and is responsible for deleting it.
   * If none of the CompartmentType objects in this Model object have the identifier 
   * @p sid, then @c null is returned.
   *
   * @param sid the identifier of the object to remove
   *
   * @return the CompartmentType object removed.  As mentioned above, the 
   * caller owns the returned object. @c null is returned if no CompartmentType
   * object with the identifier exists in this Model object.
   */ public
";


%csmethodmodifiers Model::removeSpeciesType(unsigned int n) "
/**
   * Removes the nth SpeciesType object from this Model object and
   * returns a pointer to it.
   *
   * The caller owns the returned object and is responsible for deleting it.
   *
   * @param n the index of the SpeciesType object to remove
   *
   * @return the SpeciesType object removed.  As mentioned above, 
   * the caller owns the returned item. @c null is returned if the given index 
   * is out of range.
   *
   */ public
";


%csmethodmodifiers Model::removeSpeciesType(const std::string& sid) "
/**
   * Removes the SpeciesType object with the given identifier from this Model
   * object and returns a pointer to it.
   *
   * The caller owns the returned object and is responsible for deleting it.
   * If none of the SpeciesType objects in this Model object have the identifier 
   * @p sid, then @c null is returned.
   *
   * @param sid the identifier of the SpeciesType object to remove
   *
   * @return the SpeciesType object removed.  As mentioned above, the 
   * caller owns the returned object. @c null is returned if no SpeciesType
   * object with the identifier exists in this Model object.
   *
   */ public
";


%csmethodmodifiers Model::removeCompartment(unsigned int n) "
/**
   * Removes the nth Compartment object from this Model object and
   * returns a pointer to it.
   *
   * The caller owns the returned object and is responsible for deleting it.
   *
   * @param n the index of the Compartment object to remove
   *
   * @return the Compartment object removed.  As mentioned above, 
   * the caller owns the returned item. @c null is returned if the given index 
   * is out of range.
   *
   */ public
";


%csmethodmodifiers Model::removeCompartment(const std::string& sid) "
/**
   * Removes the Compartment object with the given identifier from this Model
   * object and returns a pointer to it.
   *
   * The caller owns the returned object and is responsible for deleting it.
   * If none of the Compartment objects in this Model object have the identifier 
   * @p sid, then @c null is returned.
   *
   * @param sid the identifier of the Compartment object to remove
   *
   * @return the Compartment object removed.  As mentioned above, the 
   * caller owns the returned object. @c null is returned if no Compartment
   * object with the identifier exists in this Model object.
   */ public
";


%csmethodmodifiers Model::removeSpecies(unsigned int n) "
/**
   * Removes the nth Species object from this Model object and
   * returns a pointer to it.
   *
   * The caller owns the returned object and is responsible for deleting it.
   *
   * @param n the index of the Species object to remove
   *
   * @return the Species object removed.  As mentioned above, 
   * the caller owns the returned item. @c null is returned if the given index 
   * is out of range.
   *
   */ public
";


%csmethodmodifiers Model::removeSpecies(const std::string& sid) "
/**
   * Removes the Species object with the given identifier from this Model
   * object and returns a pointer to it.
   *
   * The caller owns the returned object and is responsible for deleting it.
   * If none of the Species objects in this Model object have the identifier 
   * @p sid, then @c null is returned.
   *
   * @param sid the identifier of the Species object to remove
   *
   * @return the Species object removed.  As mentioned above, the 
   * caller owns the returned object. @c null is returned if no Species
   * object with the identifier exists in this Model object.
   *
   */ public
";


%csmethodmodifiers Model::removeParameter(unsigned int n) "
/**
   * Removes the nth Parameter object from this Model object and
   * returns a pointer to it.
   *
   * The caller owns the returned object and is responsible for deleting it.
   *
   * @param n the index of the Parameter object to remove
   *
   * @return the Parameter object removed.  As mentioned above, 
   * the caller owns the returned item. @c null is returned if the given index 
   * is out of range.
   *
   */ public
";


%csmethodmodifiers Model::removeParameter(const std::string& sid) "
/**
   * Removes the Parameter object with the given identifier from this Model
   * object and returns a pointer to it.
   *
   * The caller owns the returned object and is responsible for deleting it.
   * If none of the Parameter objects in this Model object have the identifier 
   * @p sid, then @c null is returned.
   *
   * @param sid the identifier of the Parameter object to remove
   *
   * @return the Parameter object removed.  As mentioned above, the 
   * caller owns the returned object. @c null is returned if no Parameter
   * object with the identifier exists in this Model object.
   */ public
";


%csmethodmodifiers Model::removeInitialAssignment(unsigned int n) "
/**
   * Removes the nth InitialAssignment object from this Model object and
   * returns a pointer to it.
   *
   * The caller owns the returned object and is responsible for deleting it.
   *
   * @param n the index of the InitialAssignment object to remove
   *
   * @return the InitialAssignment object removed.  As mentioned above, 
   * the caller owns the returned item. @c null is returned if the given index 
   * is out of range.
   *
   */ public
";


%csmethodmodifiers Model::removeInitialAssignment(const std::string& symbol) "
/**
   * Removes the InitialAssignment object with the given \'symbol\' attribute 
   * from this Model object and returns a pointer to it.
   *
   * The caller owns the returned object and is responsible for deleting it.
   * If none of the InitialAssignment objects in this Model object have the
   * \'symbol\' attribute @p symbol, then @c null is returned.
   *
   * @param symbol the \'symbol\' attribute of the InitialAssignment object to remove
   *
   * @return the InitialAssignment object removed.  As mentioned above, the 
   * caller owns the returned object. @c null is returned if no InitialAssignment
   * object with the \'symbol\' attribute exists in this Model object.
   */ public
";


%csmethodmodifiers Model::removeRule(unsigned int n) "
/**
   * Removes the nth Rule object from this Model object and
   * returns a pointer to it.
   *
   * The caller owns the returned object and is responsible for deleting it.
   *
   * @param n the index of the Rule object to remove
   *
   * @return the Rule object removed.  As mentioned above, 
   * the caller owns the returned item. @c null is returned if the given index 
   * is out of range.
   *
   */ public
";


%csmethodmodifiers Model::removeRule(const std::string& variable) "
/**
   * Removes the Rule object with the given \'variable\' attribute from this Model 
   * object and returns a pointer to it.
   *
   * The caller owns the returned object and is responsible for deleting it.
   * If none of the Rule objects in this Model object have the \'variable\' attribute
   * @p variable, then @c null is returned.
   *
   * @param variable the \'variable\' attribute of the Rule object to remove
   *
   * @return the Rule object removed.  As mentioned above, the 
   * caller owns the returned object. @c null is returned if no Rule
   * object with the \'variable\' attribute exists in this Model object.
   */ public
";


%csmethodmodifiers Model::removeConstraint(unsigned int n) "
/**
   * Removes the nth Constraint object from this Model object and
   * returns a pointer to it.
   *
   * The caller owns the returned object and is responsible for deleting it.
   *
   * @param n the index of the Constraint object to remove
   *
   * @return the Constraint object removed.  As mentioned above, 
   * the caller owns the returned item. @c null is returned if the given index 
   * is out of range.
   *
   */ public
";


%csmethodmodifiers Model::removeReaction(unsigned int n) "
/**
   * Removes the nth Reaction object from this Model object and
   * returns a pointer to it.
   *
   * The caller owns the returned object and is responsible for deleting it.
   *
   * @param n the index of the Reaction object to remove
   *
   * @return the Reaction object removed.  As mentioned above, 
   * the caller owns the returned item. @c null is returned if the given index 
   * is out of range.
   *
   */ public
";


%csmethodmodifiers Model::removeReaction(const std::string& sid) "
/**
   * Removes the Reaction object with the given identifier from this Model
   * object and returns a pointer to it.
   *
   * The caller owns the returned object and is responsible for deleting it.
   * If none of the Reaction objects in this Model object have the identifier 
   * @p sid, then @c null is returned.
   *
   * @param sid the identifier of the Reaction object to remove
   *
   * @return the Reaction object removed.  As mentioned above, the 
   * caller owns the returned object. @c null is returned if no Reaction
   * object with the identifier exists in this Model object.
   *
   */ public
";


%csmethodmodifiers Model::removeEvent(unsigned int n) "
/**
   * Removes the nth Event object from this Model object and
   * returns a pointer to it.
   *
   * The caller owns the returned object and is responsible for deleting it.
   *
   * @param n the index of the Event object to remove
   *
   * @return the Event object removed.  As mentioned above, 
   * the caller owns the returned item. @c null is returned if the given index 
   * is out of range.
   *
   */ public
";


%csmethodmodifiers Model::removeEvent(const std::string& sid) "
/**
   * Removes the Event object with the given identifier from this Model
   * object and returns a pointer to it.
   *
   * The caller owns the returned object and is responsible for deleting it.
   * If none of the Event objects in this Model object have the identifier 
   * @p sid, then @c null is returned.
   *
   * @param sid the identifier of the Event object to remove
   *
   * @return the Event object removed.  As mentioned above, the 
   * caller owns the returned object. @c null is returned if no Event
   * object with the identifier exists in this Model object.
   *
   */ public
";


%csmethodmodifiers Model::appendFrom(const Model* model) "
/**
   * Takes the contents of the passed-in Model, makes copies of everything,
   * and appends those copies to the appropriate places in this Model.
   *
   * This method also calls the <code>appendFrom</code> method on all libSBML
   * plug-in objects.&nbsp; *
 * 
 * SBML Level&nbsp;3 consists of a <em>Core</em> definition that can be extended
 * via optional SBML Level&nbsp;3 <em>packages</em>.  A given model may indicate
 * that it uses one or more SBML packages, and likewise, a software tool may be
 * able to support one or more packages.  LibSBML does not come preconfigured
 * with all possible packages included and enabled, in part because not all
 * package specifications have been finalized.  To support the ability for
 * software systems to enable support for the Level&nbsp;3 packages they choose,
 * libSBML features a <em>plug-in</em> mechanism.  Each SBML Level&nbsp;3
 * package is implemented in a separate code plug-in that can be enabled by the
 * application to support working with that SBML package.  A given SBML model
 * may thus contain not only objects defined by SBML Level&nbsp;3 Core, but also
 * objects created by libSBML plug-ins supporting additional Level&nbsp;3
 * packages.
 *
 *
   *
   * @param model the Model to merge with this one.
   *
   */ public
";


%csmethodmodifiers Model::enablePackageInternal(const std::string& pkgURI, const std::string& pkgPrefix, bool flag) "
/**
   * Enables/Disables the given package with this element and child elements
   * (if any).  (This is an internal implementation for enablePackage
   * function)
   *
   * @note Subclasses of the SBML Core package in which one or more child
   * elements are defined must override this function.
   */ /* libsbml-internal */ public new
";


%csmethodmodifiers Model::readOtherXML(XMLInputStream& stream) "
/**
   * Subclasses should override this method to read (and store) XHTML,
   * MathML, etc. directly from the XMLInputStream.
   *
   * @return true if the subclass read from the stream, false otherwise.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Model::createObject(XMLInputStream& stream) "
/**
   * Create and return an SBML object of this class, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or @c null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Model::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Model::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Subclasses should override this method to read values from the given
   * XMLAttributes set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Model::readL1Attributes(const XMLAttributes& attributes) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Model::readL2Attributes(const XMLAttributes& attributes) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Model::readL3Attributes(const XMLAttributes& attributes) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Model::writeAttributes(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Model::syncAnnotation "
/**
   * Synchronizes the annotation of this SBML object.
   *
   * Annotation element (XMLNode mAnnotation) is synchronized with the
   * current CVTerm objects (List* mCVTerm), ModelHistory object 
   * (ModelHistory mHistory) and ListOfLayouts object (ListOfLayouts mLayouts).
   * Currently, this method is called in getAnnotation, isSetAnnotation,
   * and writeElements methods.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Model::checkUnitDefinition(UnitDefinition* ud, FormulaUnitsData *fud) "
/**
   * Internal function used in populateListFormulaUnitsData
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Model::checkSpeciesReference(SpeciesReference* sr, UnitFormulaFormatter* unitFormatter, FormulaUnitsData* fud, UnitDefinition* ud) "
/**
   * Internal function used in populateListFormulaUnitsData
   */ /* libsbml-internal */ public
";


%typemap(csimports) SBMLDocument "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Container for an SBML document and interface for global
 * operations on SBML documents.
 *
 * @if clike LibSBML uses the class SBMLDocument as a
 * top-level container for storing SBML content and data associated with it
 * (such as warnings and error messages).  The two primary means of reading
 * an SBML model, SBMLReader::readSBML() and
 * SBMLReader::readSBMLFromString(), both return a pointer to an
 * SBMLDocument object.  From there, callers can inquire about any errors
 * encountered (e.g., using SBMLDocument::getNumErrors()), access the Model
 * object, and perform other actions such as consistency-checking and model
 * translation.
 * @endif@if python LibSBML uses the class SBMLDocument as a
 * top-level container for storing SBML content and data associated with it
 * (such as warnings and error messages).  The two primary means of reading
 * an SBML model, SBMLReader::readSBML() and
 * SBMLReader::readSBMLFromString(), both return a pointer to an
 * SBMLDocument object.  From there, callers can inquire about any errors
 * encountered (e.g., using SBMLDocument::getNumErrors()), access the Model
 * object, and perform other actions such as consistency-checking and model
 * translation.
 * @endif@if java LibSBML uses the class SBMLDocument as a top-level
 * container for storing SBML content and data associated with it (such as
 * warnings and error messages).  The two primary means of reading an SBML
 * model, SBMLReader::readSBML(String filename) and
 * SBMLReader::readSBMLFromString(String xml), both return an SBMLDocument
 * object.  From there, callers can inquire about any errors encountered
 * (e.g., using SBMLDocument::getNumErrors()), access the Model object, and
 * perform other actions such as consistency-checking and model
 * translation.
 * @endif
 * 
 * When creating fresh models programmatically, the starting point is
 * typically the creation of an SBMLDocument object instance.  The
 * SBMLDocument constructor accepts arguments for the SBML Level and
 * Version of the model to be created.  After creating the SBMLDocument
 * object, calling programs then typically call SBMLDocument::createModel()
 * almost immediately, and then proceed to call the methods on the Model
 * object to fill out the model\'s contents.
 *
 * SBMLDocument corresponds roughly to the class <i>Sbml</i> defined in the
 * SBML Level&nbsp;2 specification and <i>SBML</i> in the Level&nbsp;3
 * specification.  It does not have a direct correspondence in SBML
 * Level&nbsp;1.  (However, to make matters simpler for applications,
 * libSBML creates an SBMLDocument no matter whether the model is
 * Level&nbsp;1, Level&nbsp;2 or Level&nbsp;3.)  In its barest form, when written out in
 * XML format for (e.g.) SBML Level&nbsp;2 Version&nbsp;4, the corresponding
 * structure is the following:
 * @verbatim
<sbml xmlns=\'http://www.sbml.org/sbml/level2/version4\' level=\'2\' version=\'4\'>
  ...
</sbml>@endverbatim
 * 
 * SBMLDocument is derived from SBase, and therefore contains the usual SBase
 * attributes (in SBML Level&nbsp;2 and Level&nbsp;3) of \'metaid\' and \'sboTerm\', as
 * well as the subelements \'notes\' and \'annotation\'.  It also contains the
 * attributes \'level\' and \'version\' indicating the Level and Version of the
 * SBML data structure.  These can be accessed using the methods defined by
 * the SBase class for that purpose.
 *
 * @section checking Checking consistency and adherence to SBML specifications
 *
 * One of the most important features of libSBML is its ability to perform
 * SBML validation to ensure that a model adheres to the SBML specification
 * for whatever Level+Version combination the model uses.  SBMLDocument
 * provides the methods for running consistency-checking and validation
 * rules on the SBML content.
 *
 * First, a brief explanation of the rationale is in order.  In libSBML
 * versions up to and including the version&nbsp;3.3.x series, the
 * individual methods for creating and setting attributes and other
 * components were quite lenient, and allowed a caller to compose SBML
 * entities that might not, in the end, represent valid SBML.  This allowed
 * applications the freedom to do things such as save incomplete models
 * (which is useful when models are being developed over long periods of
 * time).  In the version&nbsp;4.x series, libSBML is somewhat stricter,
 * but still permits structures to be created independently and the results
 * to be combined in a separate step.  In all these cases, it means that a
 * separate validation step is necessary when a calling program finally
 * wants to finish a complete SBML document.
 *
 * The primary interface to this validation facility is SBMLDocument\'s
 * SBMLDocument::checkInternalConsistency() and
 * SBMLDocument::checkConsistency().  The former verifies the basic
 * internal consistency and syntax of an SBML document, and the latter
 * implements more elaborate validation rules (both those defined by the
 * SBML specifications, as well as additional rules offered by libSBML).
 *
 * @if clike The checks performed by SBMLDocument::checkInternalConsistency() are
 * hardwired and cannot be changed by calling programs, but the validation
 * performed by SBMLDocument::checkConsistency() is under program control
 * using the method SBMLDocument::setConsistencyChecks().  Applications can
 * selectively disable specific kinds of checks that they may not be
 * interested in, by calling SBMLDocument::setConsistencyChecks() with
 * appropriate parameters.
 * @endif@if python The checks performed by SBMLDocument::checkInternalConsistency() are
 * hardwired and cannot be changed by calling programs, but the validation
 * performed by SBMLDocument::checkConsistency() is under program control
 * using the method SBMLDocument::setConsistencyChecks().  Applications can
 * selectively disable specific kinds of checks that they may not be
 * interested in, by calling SBMLDocument::setConsistencyChecks() with
 * appropriate parameters.
 * @endif@if java The checks performed by SBMLDocument::checkInternalConsistency() are
 * hardwired and cannot be changed by calling programs, but the validation
 * performed by SBMLDocument::checkConsistency() is under program control
 * using the method SBMLDocument::setConsistencyChecks(int categ, bool
 * onoff).  Applications can selectively disable specific kinds of checks
 * that they may not be interested by calling
 * SBMLDocument::setConsistencyChecks(int categ, bool onoff) with
 * appropriate parameters.
 * @endif
 *
 * These methods have slightly different relevance depending on whether a
 * model is created programmaticaly from scratch, or whether it is read in
 * from a file or data stream.  The following list summarizes the possible
 * scenarios.
 *
 * <em>Scenario 1: Creating a model from scratch</em>.  Before writing out
 * the model, 
 *
 * @li Call SBMLDocument::checkInternalConsistency(), then inquire about
 * the results by calling SBMLDocument::getNumErrors()
 *
 * @li Call @if java SBMLDocument::setConsistencyChecks(int categ, bool
 * onoff) @else SBMLDocument::setConsistencyChecks() @endif to configure
 * which checks will be performed by SBMLDocument::checkConsistency()
 *
 * @li Call SBMLDocument::checkConsistency(), then inquire about the results by
 * calling SBMLDocument::getNumErrors()
 *
 * <em>Scenario 2: Reading a model from a file or data stream.</em> After
 * reading the model,
 * 
 * @li Basic consistency checks will have been performed automatically by
 * libSBML upon reading the content, so you only need to inquire about the
 * results by using SBMLDocument::getNumErrors()
 * 
 * @li Call @if java SBMLDocument::setConsistencyChecks(int categ, bool
 * onoff) @else SBMLDocument::setConsistencyChecks() @endif to configure
 * which checks are performed by SBMLDocument::checkConsistency()
 * 
 * @li Call SBMLDocument::checkConsistency(), then inquire about the results
 * by calling SBMLDocument::getNumErrors()
 *
 * @if clike An example of using the consistency-checking
 * and validation facilities is provided in this manual in the
 * section @ref libsbml-example. @endif
 * 
 * @section converting Converting documents between Levels and Versions of SBML
 *
 * LibSBML provides facilities for limited translation of SBML between
 * Levels and Versions of the SBML specifications.  The method for doing is
 * is @if java SBMLDocument::setLevelAndVersion(long lev, long ver, bool strict) @else setLevelAndVersion() @endif.  In 
 * general, models can be converted upward without difficulty (e.g., from
 * SBML Level&nbsp;1 to Level&nbsp;2, or from an earlier Version of
 * Level&nbsp;2 to the latest Version of Level&nbsp;2).  Sometimes models
 * can be translated downward as well, if they do not use constructs
 * specific to more advanced Levels of SBML.
 *
 * Calling @if java SBMLDocument::setLevelAndVersion(long lev, long ver, bool strict) @else SBMLDocument::setLevelAndVersion() @endif will not @em necessarily lead
 * to a successful conversion.  The method will return a bool value
 * to indicate success or failure.  Callers must check the error log (see 
 * next section) attached to the SBMLDocument object after calling
 * @if java SBMLDocument::setLevelAndVersion(long lev, long ver) @else SBMLDocument::setLevelAndVersion() @endif in order to assess whether any
 * problems arose.
 *
 * If an application is interested in translating to a lower Level and/or
 * Version of SBML within a Level, the following methods allow for prior
 * assessment of whether there is sufficient compatibility to make a
 * translation possible:
 *
 * @li SBMLDocument::checkL1Compatibility(),
 * @li SBMLDocument::checkL2v1Compatibility(),
 * @li SBMLDocument::checkL2v2Compatibility(),
 * @li SBMLDocument::checkL2v3Compatibility(), 
 * @li SBMLDocument::checkL2v4Compatibility(), and
 * @li SBMLDocument::checkL3v1Compatibility().
 * 
 * Some changes between Versions of SBML Level&nbsp;2 may lead to
 * unexpected behaviors when attempting conversions in either direction.
 * For example, SBML Level&nbsp;2 Version&nbsp;4 relaxed the requirement
 * for consistency in units of measurement between expressions annd
 * quantities in a model.  As a result, a model written in Version&nbsp;4,
 * if converted to Version&nbsp;3 with no other changes, may fail
 * validation as a Version&nbsp;3 model because Version&nbsp;3 imposed
 * stricter requirements on unit consistency.
 *
 * Other changes between SBML Level 2 and Level 3 make downward conversions
 * challenging.  In some cases, it means that a model converted to
 * Level&nbsp;2 from Level&nbsp;3 will contain attributes that were not
 * explicitly given in the Level&nbsp;3 model, because in Level&nbsp;2
 * these attributes may have been optional or have default values.
 * 
 * @section errors Error handling
 *
 * Upon reading a model, SBMLDocument logs any problems encountered while
 * reading the model from the file or data stream.  The log contains
 * objects that record diagnostic information about any notable issues that
 * arose.  Whether the problems are warnings or errors, they are both
 * reported through a single common interface involving the object class
 * SBMLError.
 *
 * The methods SBMLDocument::getNumErrors(), @if java SBMLDocument::getError(long n) @else SBMLDocument::getError() @endif and
 * SBMLDocument::printErrors() allow callers to interact with the warnings
 * or errors logged.  Alternatively, callers may retrieve the entire log as
 * an SBMLErrorLog object using the method SBMLDocument::getErrorLog().
 * The SBMLErrorLog object provides some alternative methods for
 * interacting with the set of errors and warnings.  In either case,
 * applications typically should first call SBMLDocument::getNumErrors() to
 * find out if any issues have been logged after specific libSBML
 * operations such as the ones discussed in the sections above.  If they
 * have, then an application will should proceed to inspect the individual
 * reports using either the direct interfaces on SBMLDocument or using the
 * methods on the SBMLErrorLog object.
 *
 * @if clike An example of using the error facility is
 * provided in this manual in the
 * section @ref libsbml-example. @endif
 * 
 */
"


%csmethodmodifiers SBMLDocument::getDefaultLevel "
/**
   * The default SBML Level of new SBMLDocument objects.
   *
   * *
 * 
 * This \'default Level\' corresponds to the most recent SBML specification
 * Level available at the time libSBML version @htmlinclude
 * libsbml-version.html was released.  The default Level is used by
 * SBMLDocument if no Level is explicitly specified at the time of the
 * construction of an SBMLDocument instance.
 *
   *
   * @return an integer indicating the most recent SBML specification Level
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., SBMLDocument), and the
   * other will be a standalone top-level function with the name
   * SBMLDocument_getDefaultLevel(). They are functionally
   * identical. @endif
   * 
   * @see @if clike getDefaultVersion() @else SBMLDocument::getDefaultVersion() @endif
   */ public
";


%csmethodmodifiers SBMLDocument::getDefaultVersion "
/**
   * The default Version of new SBMLDocument objects.
   *
   * *
 * 
 * This \'default Version\' corresponds to the most recent Version within the
 * most recent Level of SBML available at the time libSBML version
 * @htmlinclude libsbml-version.html was released.  The default Version is
 * used by SBMLDocument if no Version is explicitly specified at the time of
 * the construction of an SBMLDocument instance.
 * 
   *
   * @return an integer indicating the most recent SBML specification
   * Version
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., SBMLDocument), and the
   * other will be a standalone top-level function with the name
   * SBMLDocument_getDefaultVersion(). They are functionally
   * identical. @endif
   *
   * @see @if clike getDefaultLevel() @else SBMLDocument::getDefaultLevel() @endif
   */ public
";


%csmethodmodifiers SBMLDocument::SBMLDocument(unsigned int level = 0, unsigned int version = 0) "
/**
   * Creates a new SBMLDocument, optionally with given values for the SBML
   * Level and Version.
   *
   * If <em>both</em> the SBML Level and Version attributes are not
   * specified, the SBML document is treated as having the latest Level and
   * Version of SBML as determined by SBMLDocument::getDefaultLevel() and
   * SBMLDocument::getDefaultVersion(); <em>however</em>, the SBMLDocument
   * object is otherwise left blank.  In particular, the blank SBMLDocument
   * object has no associated XML attributes, including (but not limited
   * to) an XML namespace declaration.  The XML namespace declaration is
   * not added until the model is written out, <em>or</em> the method
   * SBMLDocument::setLevelAndVersion(@if java long lev, long ver, bool strict@endif)
   * is called.  This may be important to keep in mind
   * if an application needs to add additional XML namespace declarations
   * on the <code>&lt;sbml&gt;</code> element.  Application writers should
   * either provide values for @p level and @p version on the call to this
   * constructor, or else call
   * SBMLDocument::setLevelAndVersion(@if java long lev, long ver, bool strict@endif)
   * shortly after creating the SBMLDocument object.
   *
   * @param level an integer for the SBML Level
   *
   * @param version an integer for the Version within the SBML Level
   *
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the given @p level and @p version combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent SBMLDocument object.
   *
   * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
   *
   * @see SBMLDocument::setLevelAndVersion(@if java long lev, long ver, bool strict@endif)
   * @see getDefaultLevel()
   * @see getDefaultVersion()
   */ public
";


%csmethodmodifiers SBMLDocument::SBMLDocument(SBMLNamespaces* sbmlns) "
/**
   * Creates a new SBMLDocument using the given SBMLNamespaces object 
   * @p sbmlns.
   *
   * *
 *  
 * The SBMLNamespaces object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML\'s SBMLNamespaces facilities is to create an
 * SBMLNamespaces object somewhere in a program once, then hand that object
 * as needed to object constructors that accept SBMLNamespaces as arguments.
 *
 * 
   *
   * @param sbmlns an SBMLNamespaces object.
   *
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the given @p level and @p version combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent SBMLDocument object.
   */ public
";


%csmethodmodifiers SBMLDocument::SBMLDocument(const SBMLDocument& orig) "
/**
   * Copy constructor; creates a copy of this SBMLDocument.
   *
   * @param orig the object to copy.
   * 
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the argument @p orig is @c null.
   */ public
";


%csmethodmodifiers SBMLDocument::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor for this instance of SBMLDocument.
   *
   * @param v the SBMLVisitor instance to be used.
   *
   * @return the result of calling <code>v.visit()</code>.
   */ public
";


%csmethodmodifiers SBMLDocument::clone() const "
/**
   * Creates and returns a deep copy of this SBMLDocument.
   * 
   * @return a (deep) copy of this SBMLDocument.
   */ public new
";


%csmethodmodifiers SBMLDocument::getModel() const "
/**
   * Returns the Model object stored in this SBMLDocument.
   *
   * It is important to note that this method <em>does not create</em> a
   * Model instance.  The model in the SBMLDocument must have been created
   * at some prior time, for example using SBMLDocument::createModel() 
   * or SBMLDocument::setModel(@if java Model m@endif).
   * This method returns @c null if a model does not yet exist.
   * 
   * @return the Model contained in this SBMLDocument.
   *
   * @see createModel()
   */ public new
";


%csmethodmodifiers SBMLDocument::getModel "
/**
   * Returns the Model object stored in this SBMLDocument.
   *
   * It is important to note that this method <em>does not create</em> a
   * Model instance.  The model in the SBMLDocument must have been created
   * at some prior time, for example using SBMLDocument::createModel() 
   * or SBMLDocument::setModel(@if java Model m@endif).
   * This method returns @c null if a model does not yet exist.
   * 
   * @return the Model contained in this SBMLDocument.
   *
   * @see createModel()
   */ public new
";


%csmethodmodifiers SBMLDocument::getElementBySId(const std::string& id) "
/**
   * Returns the first child element found that has the given @p id in the
   * model-wide SId namespace, or @c null if no such object is found.
   *
   * @param id string representing the id of objects to find
   *
   * @return pointer to the first element found with the given @p id.
   */ public
";


%csmethodmodifiers SBMLDocument::getElementByMetaId(const std::string& metaid) "
/**
   * Returns the first child element it can find with the given @p metaid, or
   * itself if it has the given @p metaid, or @c null if no such object is
   * found.
   *
   * @param metaid string representing the metaid of objects to find
   *
   * @return pointer to the first element found with the given @p metaid.
   */ public
";


%csmethodmodifiers SBMLDocument::getAllElements(ElementFilter* filter=NULL) "
/**
   * Returns a List of all child SBase objects, including those nested to an
   * arbitrary depth
   *
   * @return a List of pointers to all children objects.
   */ public
";


%csmethodmodifiers SBMLDocument::expandFunctionDefinitions "
/**
   * Removes FunctionDefinition constructs from the document and expands
   * any instances of their use within <code>&lt;math&gt;</code> elements.
   *
   * For example, suppose a Model contains a FunctionDefinition with
   * identifier @c \'f\' representing the math expression: <em>f(x, y) = x *
   * y</em>.  Suppose further that there is a reaction in which the
   * <code>&lt;math&gt;</code> element of the KineticLaw object contains
   * <code>f(s, p)</code>, where @c s and @c p are other identifiers
   * defined in the model.  The outcome of invoking this method is that the
   * <code>&lt;math&gt;</code> of the KineticLaw now represents the
   * expression <em>s * p</em> and the model no longer contains any
   * FunctionDefinition objects.
   * 
   * @return bool @c true if the transformation was successful, 
   * @c false, otherwise.
   *
   * @note This function will check the consistency of a model before
   * attemptimg the transformation.  If the model is not valid SBML, the
   * transformation will not be performed and the function will return @c
   * false.
   */ public
";


%csmethodmodifiers SBMLDocument::expandInitialAssignments "
/**
   * Removes InitialAssignment constructs from the document and
   * replaces them with appropriate values.
   *
   * For example, suppose a Model contains a InitialAssignment to a symbol
   * @c \'k\' where @c \'k\' is the identifier of a Parameter.  The outcome of
   * invoking this method is that the \'value\' attribute of the Parameter
   * definition is set to the result calculated using the InitialAssignment
   * object\'s <code>&lt;math&gt;</code> formula, and the corresponding
   * InitialAssignment is then removed from the Model.
   * 
   * @return bool @c true if the transformation was successful, 
   * @c false, otherwise.
   *
   * @note This function will check the consistency of a model before
   * attemptimg the transformation.  If the model is not valid SBML, the
   * transformation will not be performed and the function will return @c
   * false.  As part of that process, this method will check that it has
   * values for any components referred to by the <code>&lt;math&gt;</code>
   * elements of InitialAssignment objects.  In cases where not all of the
   * values have been declared (e.g., if the mathematical expression refers
   * to model entities that have no declared values), the InitialAssignment
   * in question will @em not be removed and this method will return @c
   * false.
   */ public
";


%csmethodmodifiers SBMLDocument::setLevelAndVersion(unsigned int level, unsigned int version, bool strict = true) "
/**
   * Sets the SBML Level and Version of this SBMLDocument instance,
   * attempting to convert the model as needed.
   *
   * This method is the principal way in libSBML to convert models between
   * Levels and Versions of SBML.  Generally, models can be converted
   * upward without difficulty (e.g., from SBML Level&nbsp;1 to
   * Level&nbsp;2, or from an earlier Version of Level&nbsp;2 to the latest
   * Version of Level&nbsp;2).  Sometimes models can be translated downward
   * as well, if they do not use constructs specific to more advanced
   * Levels of SBML.
   *
   * Before calling this method, callers may check compatibility directly
   * using the methods SBMLDocument::checkL1Compatibility(),
   * SBMLDocument::checkL2v1Compatibility(),
   * SBMLDocument::checkL2v2Compatibility(),
   * SBMLDocument::checkL2v3Compatibility(),
   * SBMLDocument::checkL2v4Compatibility(), and
   * SBMLDocument::checkL3v1Compatibility().
   * 
   * The valid combinations of SBML Level and Version as of this release
   * of libSBML are the following: 
   * <ul>
   * <li> Level&nbsp;1 Version&nbsp;2
   * <li> Level&nbsp;2 Version&nbsp;1
   * <li> Level&nbsp;2 Version&nbsp;2
   * <li> Level&nbsp;2 Version&nbsp;3
   * <li> Level&nbsp;2 Version&nbsp;4
   * <li> Level&nbsp;3 Version&nbsp;1
   * </ul>
   * 
   * Strict conversion applies the additional criteria that both the
   * source and the target model must be consistent SBML.  Users can
   * control the consistency checks that are applied using the
   * SBMLDocument::setConsistencyChecksForConversion(@if java int categ, bool onoff@endif) method.  If either
   * the source or the potential target model have validation errors, the
   * conversion is not performed.  When a strict conversion is successful,
   * the underlying SBML object model is altered to reflect the new level
   * and version.  Thus, information that cannot be converted
   * (e.g. sboTerms) will be lost.
   * 
   * @param level the desired SBML Level
   *  
   * @param version the desired Version within the SBML Level
   *
   * @param strict bool indicating whether to check consistency
   * of both the source and target model when performing
   * conversion (defaults to <code> true </code>)
   *
   * @return @c true if the level and version of the document were
   * successfully set to the requested values (which may have required
   * conversion of the model), @c false otherwise.
   *
   * @note Calling this method will not @em necessarily lead to a successful
   * conversion.  If the conversion fails, it will be logged in the error
   * list associated with this SBMLDocument.  Callers should consult
   * getNumErrors() to find out if the conversion succeeded without
   * problems.  For conversions from Level&nbsp;2 to Level&nbsp;1, callers
   * can also check the Level of the model after calling this method to
   * find out whether it is Level&nbsp;1.  (If the conversion to
   * Level&nbsp;1 failed, the Level of this model will be left unchanged.)
   *
   * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
   * 
   * @see checkL1Compatibility()
   * @see checkL2v1Compatibility()
   * @see checkL2v2Compatibility()
   * @see checkL2v3Compatibility()
   * @see checkL2v4Compatibility()
   * @see checkL3v1Compatibility()
   * @see checkL3v1Compatibility()
   */ public
";


%csmethodmodifiers SBMLDocument::updateSBMLNamespace(const std::string& package, unsigned int level, unsigned int version) "
/**
   * @param package
   * @param level
   * @param version
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBMLDocument::setModel(const Model* m) "
/**
   * Sets the Model for this SBMLDocument to a copy of the given Model.
   *
   * @param m the new Model to use.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH @endlink
   *
   * @see createModel()
   * @see getModel()
   */ public
";


%csmethodmodifiers SBMLDocument::createModel(const std::string& sid = "") "
/**
   * Creates a new Model inside this SBMLDocument, and returns a pointer to
   * it.
   *
   * In SBML Level&nbsp;2, the use of an identifier on a Model object is
   * optional.  This method takes an optional argument, @p sid, for setting
   * the identifier.  If not supplied, the identifier attribute on the
   * Model instance is not set.
   *
   * @param sid the identifier of the new Model to create.
   *
   * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
   *
   * @see getModel()
   * @see SBMLDocument::setModel(@if java Model m@endif)
   */ public
";


%csmethodmodifiers SBMLDocument::setLocationURI(const std::string& uri) "
/**
   * Sets the location of this SBMLDocument.
   *
   * Called automatically when readSBMLFromFile is used, but may be set
   * manually as well.
   */ public
";


%csmethodmodifiers SBMLDocument::getLocationURI() const "
/**
   * Get the location of this SBMLDocument.
   *
   * If this document was read from a file or had its location set manually,
   * that filename or set location will be returned, otherwise, an empty
   * string is returned.
   */ public
";


%csmethodmodifiers SBMLDocument::getLocationURI "
/**
   * Get the location of this SBMLDocument.
   *
   * If this document was read from a file or had its location set manually,
   * that filename or set location will be returned, otherwise, an empty
   * string is returned.
   */ public
";


%csmethodmodifiers SBMLDocument::setConsistencyChecks(SBMLErrorCategory_t category, bool apply) "
/**
   * Controls the consistency checks that are performed when
   * SBMLDocument::checkConsistency() is called.
   *
   * This method works by adding or subtracting consistency checks from the
   * set of all possible checks that SBMLDocument::checkConsistency() knows
   * how to perform.  This method may need to be called multiple times in
   * order to achieve the desired combination of checks.  The first
   * argument (@p category) in a call to this method indicates the category
   * of consistency/error checks that are to be turned on or off, and the
   * second argument (@p apply, a bool) indicates whether to turn it on
   * (value of @c true) or off (value of @c false).
   *
   * @if clike
   * The possible categories (values to the argument @p category) are the
   * set of values from the enumeration #SBMLErrorCategory_t.
   * The following are the possible choices:
   * @endif@if java
   * The possible categories (values to the argument @p category) are the
   * set of constants whose names begin with the characters <code>LIBSBML_CAT_</code>
   * in the interface class {@link libsbmlConstants}.
   * The following are the possible choices:
   * @endif@if python 
   * The possible categories (values to the argument @p category) are the
   * set of constants whose names begin with the characters <code>LIBSBML_CAT_</code>
   * in the interface class @link libsbml libsbml@endlink.
   * The following are the possible choices:
   * @endif
   * <ul>
   * <li> @link libsbmlcs.libsbml.LIBSBML_CAT_GENERAL_CONSISTENCY
   * LIBSBML_CAT_GENERAL_CONSISTENCY@endlink: Correctness and consistency
   * of specific SBML language constructs.  Performing this set of checks
   * is highly recommended.  With respect to the SBML specification, these
   * concern failures in applying the validation rules numbered 2xxxx in
   * the Level&nbsp;2 Versions&nbsp;2&ndash;4 and Level&nbsp;3 Version&nbsp;1
   * specifications.
   * 
   * <li> @link libsbmlcs.libsbml.LIBSBML_CAT_IDENTIFIER_CONSISTENCY
   * LIBSBML_CAT_IDENTIFIER_CONSISTENCY@endlink: Correctness and
   * consistency of identifiers used for model entities.  An example of
   * inconsistency would be using a species identifier in a reaction rate
   * formula without first having declared the species.  With respect to
   * the SBML specification, these concern failures in applying the
   * validation rules numbered 103xx in the Level&nbsp;2 Versions&nbsp;2&ndash;4
   * and Level&nbsp;3 Version&nbsp;1 specifications.
   * 
   * <li> @link libsbmlcs.libsbml.LIBSBML_CAT_UNITS_CONSISTENCY
   * LIBSBML_CAT_UNITS_CONSISTENCY@endlink: Consistency of measurement
   * units associated with quantities in a model.  With respect to the SBML
   * specification, these concern failures in applying the validation rules
   * numbered 105xx in the Level&nbsp;2 Versions&nbsp;2&ndash;4 and Level&nbsp;3
   * Version&nbsp;1 specifications.
   * 
   * <li> @link libsbmlcs.libsbml.LIBSBML_CAT_MATHML_CONSISTENCY
   * LIBSBML_CAT_MATHML_CONSISTENCY@endlink: Syntax of MathML constructs.
   * With respect to the SBML specification, these concern failures in
   * applying the validation rules numbered 102xx in the Level&nbsp;2
   * Versions&nbsp;2&ndash;4 and Level&nbsp;3 Version&nbsp;1 specifications.
   * 
   * <li> @link libsbmlcs.libsbml.LIBSBML_CAT_SBO_CONSISTENCY
   * LIBSBML_CAT_SBO_CONSISTENCY@endlink: Consistency and validity of %SBO
   * identifiers (if any) used in the model.  With respect to the SBML
   * specification, these concern failures in applying the validation rules
   * numbered 107xx in the Level&nbsp;2 Versions&nbsp;2&ndash;4 and Level&nbsp;3
   * Version&nbsp;1 specifications.
   * 
   * <li> @link libsbmlcs.libsbml.LIBSBML_CAT_OVERDETERMINED_MODEL
   * LIBSBML_CAT_OVERDETERMINED_MODEL@endlink: Static analysis of whether
   * the system of equations implied by a model is mathematically
   * overdetermined.  With respect to the SBML specification, this is
   * validation rule #10601 in the Level&nbsp;2 Versions&nbsp;2&ndash;4 and
   * Level&nbsp;3 Version&nbsp;1 specifications.
   * 
   * <li> @link libsbmlcs.libsbml.LIBSBML_CAT_MODELING_PRACTICE
   * LIBSBML_CAT_MODELING_PRACTICE@endlink: Additional checks for
   * recommended good modeling practice. (These are tests performed by
   * libSBML and do not have equivalent SBML validation rules.)
   * </ul>
   * 
   * <em>By default, all validation checks are applied</em> to the model in
   * an SBMLDocument object @em unless
   * SBMLDocument::setConsistencyChecks(@if java int categ, bool onoff@endif)
   * is called to indicate that only a subset should be applied.  Further,
   * this default (i.e., performing all checks) applies separately to
   * <em>each new SBMLDocument object</em> created.  In other words, each
   * time a model is read using SBMLReader::readSBML(@if java String filename@endif),
   * SBMLReader::readSBMLFromString(@if java String xml@endif),
   * or the global functions readSBML() and readSBMLFromString(), a new
   * SBMLDocument is created and for that document, a call to
   * SBMLDocument::checkConsistency() will default to applying all possible checks.
   * Calling programs must invoke
   * SBMLDocument::setConsistencyChecks(@if java int categ, bool onoff@endif)
   * for each such new model if they wish to change the consistency checks
   * applied.
   * 
   * @param category a value drawn from @if clike #SBMLErrorCategory_t@else
   * the set of SBML error categories@endif indicating the
   * consistency checking/validation to be turned on or off.
   *
   * @param apply a bool indicating whether the checks indicated by
   * @p category should be applied or not.
   *
   * @see SBMLDocument::checkConsistency()
   */ public
";


%csmethodmodifiers SBMLDocument::setConsistencyChecksForConversion(SBMLErrorCategory_t category, bool apply) "
/**
   * Controls the consistency checks that are performed when
   * SBMLDocument::setLevelAndVersion(@if java long lev, long ver, bool strict@endif) is called.
   *
   * This method works by adding or subtracting consistency checks from the
   * set of all possible checks that may be performed to avoid conversion
   * to or from an invalid document.  This method may need to be called 
   * multiple times in
   * order to achieve the desired combination of checks.  The first
   * argument (@p category) in a call to this method indicates the category
   * of consistency/error checks that are to be turned on or off, and the
   * second argument (@p apply, a bool) indicates whether to turn it on
   * (value of @c true) or off (value of @c false).
   *
   * @if clike
   * The possible categories (values to the argument @p category) are the
   * set of values from the enumeration #SBMLErrorCategory_t.
   * The following are the possible choices:
   * @endif@if java
   * The possible categories (values to the argument @p category) are the
   * set of constants whose names begin with the characters <code>LIBSBML_CAT_</code>
   * in the interface class {@link libsbmlConstants}.
   * The following are the possible choices:
   * @endif@if python 
   * The possible categories (values to the argument @p category) are the
   * set of constants whose names begin with the characters <code>LIBSBML_CAT_</code>
   * in the interface class @link libsbml libsbml@endlink.
   * The following are the possible choices:
   * @endif
   * <ul>
   * <li> @link libsbmlcs.libsbml.LIBSBML_CAT_GENERAL_CONSISTENCY
   * LIBSBML_CAT_GENERAL_CONSISTENCY@endlink: Correctness and consistency
   * of specific SBML language constructs.  Performing this set of checks
   * is highly recommended.  With respect to the SBML specification, these
   * concern failures in applying the validation rules numbered 2xxxx in
   * the Level&nbsp;2 Versions&nbsp;2&ndash;4 and Level&nbsp;3 Version&nbsp;1
   * specifications.
   * 
   * <li> @link libsbmlcs.libsbml.LIBSBML_CAT_IDENTIFIER_CONSISTENCY
   * LIBSBML_CAT_IDENTIFIER_CONSISTENCY@endlink: Correctness and
   * consistency of identifiers used for model entities.  An example of
   * inconsistency would be using a species identifier in a reaction rate
   * formula without first having declared the species.  With respect to
   * the SBML specification, these concern failures in applying the
   * validation rules numbered 103xx in the Level&nbsp;2 Versions&nbsp;2&ndash;4
   * and Level&nbsp;3 Version&nbsp;1 specifications.
   * 
   * <li> @link libsbmlcs.libsbml.LIBSBML_CAT_UNITS_CONSISTENCY
   * LIBSBML_CAT_UNITS_CONSISTENCY@endlink: Consistency of measurement
   * units associated with quantities in a model.  With respect to the SBML
   * specification, these concern failures in applying the validation rules
   * numbered 105xx in the Level&nbsp;2 Versions&nbsp;2&ndash;4 and Level&nbsp;3
   * Version&nbsp;1 specifications.
   * 
   * <li> @link libsbmlcs.libsbml.LIBSBML_CAT_MATHML_CONSISTENCY
   * LIBSBML_CAT_MATHML_CONSISTENCY@endlink: Syntax of MathML constructs.
   * With respect to the SBML specification, these concern failures in
   * applying the validation rules numbered 102xx in the Level&nbsp;2
   * Versions&nbsp;2&ndash;4 and Level&nbsp;3 Version&nbsp;1 specifications.
   * 
   * <li> @link libsbmlcs.libsbml.LIBSBML_CAT_SBO_CONSISTENCY
   * LIBSBML_CAT_SBO_CONSISTENCY@endlink: Consistency and validity of %SBO
   * identifiers (if any) used in the model.  With respect to the SBML
   * specification, these concern failures in applying the validation rules
   * numbered 107xx in the Level&nbsp;2 Versions&nbsp;2&ndash;4 and Level&nbsp;3
   * Version&nbsp;1 specifications.
   * 
   * <li> @link libsbmlcs.libsbml.LIBSBML_CAT_OVERDETERMINED_MODEL
   * LIBSBML_CAT_OVERDETERMINED_MODEL@endlink: Static analysis of whether
   * the system of equations implied by a model is mathematically
   * overdetermined.  With respect to the SBML specification, this is
   * validation rule #10601 in the Level&nbsp;2 Versions&nbsp;2&ndash;4 and
   * Level&nbsp;3 Version&nbsp;1 specifications.
   * 
   * <li> @link libsbmlcs.libsbml.LIBSBML_CAT_MODELING_PRACTICE
   * LIBSBML_CAT_MODELING_PRACTICE@endlink: Additional checks for
   * recommended good modeling practice. (These are tests performed by
   * libSBML and do not have equivalent SBML validation rules.)
   * </ul>
   * 
   * <em>By default, all validation checks are applied</em> to the model in
   * an SBMLDocument object @em unless
   * SBMLDocument::setConsistencyChecks(@if java int categ, bool onoff@endif)
   * is called to indicate that only a subset should be applied.  Further,
   * this default (i.e., performing all checks) applies separately to
   * <em>each new SBMLDocument object</em> created.  In other words, each
   * time a model is read using SBMLReader::readSBML(@if java String filename@endif),
   * SBMLReader::readSBMLFromString(@if java String xml@endif),
   * or the global functions readSBML() and readSBMLFromString(), a new
   * SBMLDocument is created and for that document, a call to
   * SBMLDocument::checkConsistency() will default to applying all possible checks.
   * Calling programs must invoke
   * SBMLDocument::setConsistencyChecks(@if java int categ, bool onoff@endif)
   * for each such new model if they wish to change the consistency checks
   * applied.
   * 
   * @param category a value drawn from @if clike #SBMLErrorCategory_t@else
   * the set of SBML error categories@endif indicating the consistency
   * checking/validation to be turned on or off.
   *
   * @param apply a bool indicating whether the checks indicated by
   * @p category should be applied or not.
   *
   * @see SBMLDocument::setLevelAndVersion(@if java long lev, long ver, bool strict@endif)
   */ public
";


%csmethodmodifiers SBMLDocument::checkConsistency "
/**
   * Performs consistency checking and validation on this SBML document.
   *
   * If this method returns a nonzero value (meaning, one or more
   * consistency checks have failed for SBML document), the failures may be
   * due to warnings @em or errors.  Callers should inspect the severity
   * flag in the individual SBMLError objects returned by
   * SBMLDocument::getError(@if java long n@endif) to determine the nature of the failures.
   *
   * @return the number of failed checks (errors) encountered.
   *
   * @see SBMLDocument::checkInternalConsistency()
   */ public
";


%csmethodmodifiers SBMLDocument::validateSBML "
/**
   * Performs consistency checking and validation on this SBML document.
   *
   * If this method returns a nonzero value (meaning, one or more
   * consistency checks have failed for SBML document), the failures may be
   * due to warnings @em or errors.  Callers should inspect the severity
   * flag in the individual SBMLError objects returned by
   * SBMLDocument::getError(@if java long n@endif) to determine the nature of the failures.
   *
   * @note unlike checkConsistency this method will write the document
   *       in order to determine all errors for the document. This will 
   *       also clear the error log. 
   *
   * @return the number of failed checks (errors) encountered.
   *
   * @see SBMLDocument::checkConsistency()
   */ public
";


%csmethodmodifiers SBMLDocument::checkInternalConsistency "
/**
   * Performs consistency checking on libSBML\'s internal representation of 
   * an SBML Model.
   *
   * Callers should query the results of the consistency check by calling
   * SBMLDocument::getError(@if java long n@endif).
   *
   * @return the number of failed checks (errors) encountered.
   *
   * The distinction between this method and
   * SBMLDocument::checkConsistency() is that this method reports on
   * fundamental syntactic and structural errors that violate the XML
   * Schema for SBML; by contrast, SBMLDocument::checkConsistency()
   * performs more elaborate model verifications and also validation
   * according to the validation rules written in the appendices of the
   * SBML Level&nbsp;2 Versions&nbsp;2&ndash;4 specification documents.
   * 
   * @see SBMLDocument::checkConsistency()
   */ public
";


%csmethodmodifiers SBMLDocument::checkL1Compatibility "
/**
   * Performs a set of consistency checks on the document to establish
   * whether it is compatible with SBML Level&nbsp;1 and can be converted
   * to Level&nbsp;1.
   *
   * Callers should query the results of the consistency check by calling
   * SBMLDocument::getError(@if java long n@endif).
   *
   * @return the number of failed checks (errors) encountered.
   */ public
";


%csmethodmodifiers SBMLDocument::checkL2v1Compatibility "
/**
   * Performs a set of consistency checks on the document to establish
   * whether it is compatible with SBML Level&nbsp;2 Version&nbsp;1 and can
   * be converted to Level&nbsp;2 Version&nbsp;1.
   *
   * Callers should query the results of the consistency check by calling
   * SBMLDocument::getError(@if java long n@endif).
   *
   * @return the number of failed checks (errors) encountered.
   */ public
";


%csmethodmodifiers SBMLDocument::checkL2v2Compatibility "
/**
   * Performs a set of consistency checks on the document to establish
   * whether it is compatible with SBML Level&nbsp;2 Version&nbsp;2 and can
   * be converted to Level&nbsp;2 Version&nbsp;2.
   *
   * Callers should query the results of the consistency check by calling
   * SBMLDocument::getError(@if java long n@endif).
   *
   * @return the number of failed checks (errors) encountered.
   */ public
";


%csmethodmodifiers SBMLDocument::checkL2v3Compatibility "
/**
   * Performs a set of consistency checks on the document to establish
   * whether it is compatible with SBML Level&nbsp;2 Version&nbsp;3 and can
   * be converted to Level&nbsp;2 Version&nbsp;3.
   *
   * Callers should query the results of the consistency check by calling
   * SBMLDocument::getError(@if java long n@endif).
   *
   * @return the number of failed checks (errors) encountered.
   */ public
";


%csmethodmodifiers SBMLDocument::checkL2v4Compatibility "
/**
   * Performs a set of consistency checks on the document to establish
   * whether it is compatible with SBML Level&nbsp;2 Version&nbsp;4 and can
   * be converted to Level&nbsp;2 Version&nbsp;4.
   *
   * Callers should query the results of the consistency check by calling
   * SBMLDocument::getError(@if java long n@endif).
   *
   * @return the number of failed checks (errors) encountered.
   */ public
";


%csmethodmodifiers SBMLDocument::checkL3v1Compatibility "
/**
   * Performs a set of consistency checks on the document to establish
   * whether it is compatible with SBML Level&nbsp;3 Version&nbsp;1 and can
   * be converted to Level&nbsp;3 Version&nbsp;1.
   *
   * Callers should query the results of the consistency check by calling
   * SBMLDocument::getError(@if java long n@endif).
   *
   * @return the number of failed checks (errors) encountered.
   */ public
";


%csmethodmodifiers SBMLDocument::getError "
/**
   * Returns the nth error or warning encountered during parsing,
   * consistency checking, or attempted translation of this model.
   *
   * Callers can use method XMLError::getSeverity() on the result to assess
   * the severity of the problem.  The possible severity levels range from
   * informational messages to fatal errors.
   *
   * @return the error or warning indexed by integer @p n, or return @c
   * null if <code>n &gt; (getNumErrors() - 1)</code>.
   *
   * @param n the integer index of the error sought.
   *
   * @see SBMLDocument::getNumErrors()
   */ public
";


%csmethodmodifiers SBMLDocument::getNumErrors() const "
/**
   * Returns the number of errors or warnings encountered during parsing,
   * consistency checking, or attempted translation of this model.
   *
   * @return the number of errors or warnings encountered
   *
   * @see SBMLDocument::getError(long n)
   */ public
";


%csmethodmodifiers SBMLDocument::getNumErrors "
/**
   * Returns the number of errors or warnings encountered with the given 
   * severity during parsing,
   * consistency checking, or attempted translation of this model.
   *
   * @param severity the severity of the error sought. 
   *
   * @return the number of errors or warnings encountered
   *
   * @see SBMLDocument::getError(long n)
   */ public
";


%csmethodmodifiers SBMLDocument::printErrors(std::ostream& stream = std::cerr) const "
/**
   * Prints all the errors or warnings encountered trying to parse,
   * check, or translate this SBML document.
   *
   * It prints the text to the stream given by the optional parameter @p
   * stream.  If no parameter is given, it prints the output to the
   * standard error stream.
   *
   * If no errors have occurred, i.e., <code>getNumErrors() == 0</code>, no
   * output will be sent to the stream.
   *
   * The format of the output is:
   * @verbatim
   N error(s):
     line NNN: (id) message
 @endverbatim
   *
   * @param stream the ostream or ostringstream object indicating where
   * the output should be printed.
   *
   * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
   *
   * @see getNumErrors()
   * @see getErrorLog()
   * @see SBMLDocument::getError(long n)
   */ public
";


%csmethodmodifiers SBMLDocument::setSBMLDocument(SBMLDocument* d) "
/**
   * No-op; it is provided for consistency with the method available on
   * other libSBML object classes but has no effect on SBMLDocument.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBMLDocument::connectToChild "
/**
   * Sets this SBML object to child SBML objects (if any).
   * (Creates a child-parent relationship by the parent)
   *
   * Subclasses must override this function if they define
   * one ore more child elements.
   * Basically, this function needs to be called in
   * constructor, copy constructor and assignment operator.
   *
   * @see setSBMLDocument
   * @see enablePackageInternal
   */ /* libsbml-internal */ public new
";


%csmethodmodifiers SBMLDocument::convert(const ConversionProperties& props) "
/**
   * Converts this document using the converter that best matches
   * the given conversion properties. 
   * 
   * @param props the conversion properties to use
   * 
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED  @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_CONV_CONVERSION_NOT_AVAILABLE LIBSBML_CONV_CONVERSION_NOT_AVAILABLE  @endlink
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBMLDocument::enablePackageInternal(const std::string& pkgURI,const std::string& pkgPrefix, bool flag) "
/**
   * Enables/Disables the given package with this element and child
   * elements (if any).
   * (This is an internal implementation for enablePackage function)
   *
   * @note Subclasses of the SBML Core package in which one or more child
   * elements are defined must override this function.
   */ /* libsbml-internal */ public new
";


%csmethodmodifiers SBMLDocument::getTypeCode() const "
/**
   * Returns the libSBML type code for this %SBML object.
   * 
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object:
   * @link libsbmlcs.libsbml.SBML_DOCUMENT SBML_DOCUMENT@endlink (default).
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see SBMLDocument::getElementName()
   * @see getPackageName()
   */ public new
";


%csmethodmodifiers SBMLDocument::getElementName() const "
/**
   * Returns the XML element name of this object, which for SBMLDocument,
   * is always @c \'sbml\'.
   * 
   * @return the name of this element, i.e., @c \'sbml\'.
   */ public new
";


%csmethodmodifiers SBMLDocument::getErrorLog "
/**
   * Returns the list of errors or warnings logged during parsing, 
   * consistency checking, or attempted translation of this model.
   * 
   * @return the SBMLErrorLog used for this SBMLDocument
   * 
   * @see SBMLDocument::getNumErrors()
   */ public
";


%csmethodmodifiers SBMLDocument::getErrorLog() const "
/**
   * Returns a constant pointer to the list of errors or warnings 
   * logged during parsing, consistency checking, or attempted translation 
   * of this model.
   * 
   * @return the SBMLErrorLog used for this SBMLDocument
   * 
   * @see SBMLDocument::getNumErrors()
   */ public
";


%csmethodmodifiers SBMLDocument::getNamespaces() const "
/**
   * Returns a list of XML Namespaces associated with the XML content
   * of this SBML document.
   * 
   * @return the XML Namespaces associated with this SBML object
   */ public new
";


%csmethodmodifiers SBMLDocument::enableDefaultNS(const std::string& package, bool flag) "
/**
   * Set/unset default namespace to each top-level element defined in the
   * given package extension.
   *
   * This works by adding a <code>xmlns=&quot;...&quot;</code> attribute.  No
   * prefix will be written when writing elements defined in the given
   * package extension if @c true is given as second argument.
   *
   * @param package the name or URI of the package extension.
   * @param flag bool value to indicate whether to write a namespace
   * prefix.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_PKG_UNKNOWN_VERSION LIBSBML_PKG_UNKNOWN_VERSION @endlink
   */ public
";


%csmethodmodifiers SBMLDocument::isEnabledDefaultNS(const std::string& package) "
/**
   * Returns @c true if a default namespace is added to each top-level
   * element defined in the given package extension, otherwise returns
   * @c false.
   *
   * This basically checks if the attribute
   * <code>xmlns=&quot;...&quot;</code> is present.
   *   
   * @param package the name or URI of the package extension.
   *
   * @return a bool 
   */ public
";


%csmethodmodifiers SBMLDocument::setPackageRequired(const std::string& package, bool flag) "
/**
   * Sets the <code>required</code> attribute value of the given package
   * extension.
   *
   * @note The name of package must not be given if the package is not
   * enabled.
   *
   * @param package the name or URI of the package extension.
   * @param flag Boolean value indicating whether the package is required.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_PKG_UNKNOWN_VERSION LIBSBML_PKG_UNKNOWN_VERSION @endlink
   */ public
";


%csmethodmodifiers SBMLDocument::getPackageRequired(const std::string& package) "
/**
   * Returns the <code>required</code> attribute of the given package
   * extension.
   *
   * @note The name of package must not be given if the package is not
   * enabled.
   *
   * @param package the name or URI of the package extension.
   *
   * @return Boolean flag indicating whether the package is flagged as
   * being required.
   */ public
";


%csmethodmodifiers SBMLDocument::isSetPackageRequired(const std::string& package) "
/**
   * Returns @c true if the required attribute of the given package extension
   * is defined, otherwise returns @c false.
   *
   * @note The name of package must not be given if the package is not
   * enabled.
   *
   * @param package the name or URI of the package extension.
   *
   * @return a Boolean
   */ public
";


%csmethodmodifiers SBMLDocument::isIgnoredPackage(const std::string& pkgURI) "
/**
   * Returns @c true if the given package extension is one of an ignored
   * packages, otherwise returns @c false.
   *
   * An ignored package is one that is defined to be used in this SBML
   * document, but the package is not enabled in this copy of libSBML.
   *
   * @param pkgURI the URI of the package extension.
   *
   * @return a Boolean, @c true if the package is being ignored and
   * @c false otherwise.
   */ public
";


%csmethodmodifiers SBMLDocument::isDisabledIgnoredPackage(const std::string& pkgURI) "
/**
   * Returns @c true if the given package extension is one of an ignored
   * packages that has been disabled, otherwise returns @c false.
   *
   * An ignored package is one that is defined to be used in this SBML
   * document, but the package is not enabled in this copy of libSBML.
   * It may have been disabled to avoid reproducing the package
   * information when writing out the file.
   *
   * @param pkgURI the URI of the package extension.
   *
   * @return a Boolean, @c true if the package is being ignored and
   * @c false otherwise.
   */ public
";


%csmethodmodifiers SBMLDocument::setPkgRequired(const std::string& package, bool flag) "
/**
   * Sets the value of the <code>required</code> attribute for the given
   * package.
   *
   * @note The name of package must not be given if the package is not
   * enabled.
   *
   * @param package the name or URI of the package extension.
   * @param flag a Boolean value.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_PKG_UNKNOWN_VERSION LIBSBML_PKG_UNKNOWN_VERSION @endlink
   *
   * @deprecated Replaced in libSBML 5.2.0 by
   * setPackageRequired(@if java String package, bool flag@endif)
   */ public
";


%csmethodmodifiers SBMLDocument::getPkgRequired(const std::string& package) "
/**
   * Returns the <code>required</code> attribute of the given package
   * extension.
   *
   * @note The name of package must not be given if the package is not
   * enabled.
   *
   * @param package the name or URI of the package extension.
   *
   * @return a Boolean value indicating whether the package is flagged as
   * being required in this SBML document.
   *
   * @deprecated Replaced in libSBML 5.2.0 by
   * getPackageRequired(@if java String package flag@endif)
   */ public
";


%csmethodmodifiers SBMLDocument::isSetPkgRequired(const std::string& package) "
/**
   * Returns @c true if the required attribute of the given package extension
   * is defined, otherwise returns @c false.
   *
   * @note The name of package must not be given if the package is not
   * enabled.
   *
   * @param package the name or URI of the package extension.
   *
   * @return a Boolean value.
   *
   * @deprecated Replaced in libSBML 5.2.0 by
   * isSetPackageRequired(@if java String package flag@endif)
   */ public
";


%csmethodmodifiers SBMLDocument::isIgnoredPkg(const std::string& pkgURI) "
/**
   * Returns @c true if the given package extension is one of ignored
   * packages, otherwise returns @c false.
   *
   * An ignored package is one that is defined to be used in this SBML
   * document, but the package is not enabled in this copy of libSBML.
   *
   * @param pkgURI the URI of the package extension.
   *
   * @return a bool
   *
   * @deprecated Replaced in libSBML 5.2.0 by
   * isIgnoredPackage(@if java String pkgURI flag@endif)
   */ public
";


%csmethodmodifiers SBMLDocument::getElementPosition() const "
/**
   * Return the position of this element.
   *
   * @return the ordinal position of the element with respect to its
   * siblings or -1 (default) to indicate the position is not significant.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBMLDocument::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBMLDocument::getApplicableValidators() const "
/**
   * Validation system.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBMLDocument::getConversionValidators() const "
/**
   * Validation system.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBMLDocument::setApplicableValidators(unsigned char appl) "
/**
   * Validation system.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBMLDocument::setConversionValidators(unsigned char appl) "
/**
   * Validation system.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBMLDocument::getNumValidators() const "
/**
   * Validation system.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBMLDocument::clearValidators "
/**
   * Validation system.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBMLDocument::addValidator(const SBMLValidator* validator) "
/**
   * Validation system.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBMLDocument::getValidator(unsigned int index) "
/**
   * Validation system.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBMLDocument::createObject(XMLInputStream& stream) "
/**
   * Create and return an SBML object of this class, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or @c null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBMLDocument::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBMLDocument::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Subclasses should override this method to read values from the given
   * XMLAttributes set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBMLDocument::writeAttributes(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBMLDocument::writeXMLNS(XMLOutputStream& stream) const "
/**
   *
   * Subclasses should override this method to write their xmlns attriubutes
   * (if any) to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   *
   */ /* libsbml-internal */ public
";


%typemap(csimports) FunctionDefinition "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Implementation of %SBML\'s %FunctionDefinition construct.
 *
 * The FunctionDefinition structure associates an identifier with a
 * function definition.  This identifier can then be used as the function
 * called in subsequent MathML content elsewhere in an SBML model.
 * 
 * FunctionDefinition has one required attribute, \'id\', to give the
 * function a unique identifier by which other parts of an SBML model
 * definition can refer to it.  A FunctionDefinition instance can also have
 * an optional \'name\' attribute of type @c string.  Identifiers and names
 * must be used according to the guidelines described in the %SBML
 * specification (e.g., Section 3.3 in the Level 2 Version 4
 * specification).
 * 
 * FunctionDefinition has a required \'math\' subelement containing a MathML
 * expression defining the function body.  The content of this element can
 * only be a MathML \'lambda\' element.  The \'lambda\' element must begin with
 * zero or more \'bvar\' elements, followed by any other of the elements in
 * the MathML subset allowed in SBML Level 2 @em except \'lambda\' (i.e., a
 * \'lambda\' element cannot contain another \'lambda\' element).  This is the
 * only place in SBML where a \'lambda\' element can be used.  The function
 * defined by a FunctionDefinition is only available for use in other
 * MathML elements that @em follow the FunctionDefinition definition in the
 * model.  (These restrictions prevent recursive and mutually-recursive
 * functions from being expressed.)
 *
 * A further restriction on the content of \'math\' is that it cannot contain
 * references to variables other than the variables declared to the
 * \'lambda\' itself.  That is, the contents of MathML \'ci\' elements inside
 * the body of the \'lambda\' can only be the variables declared by its
 * \'bvar\' elements, or the identifiers of other FunctionDefinition
 * instances in the model.  This means must be written so that all
 * variables or parameters used in the MathML content are passed to them
 * via their function parameters.  In SBML Level&nbsp;2, this restriction
 * applies also to the MathML @c csymbol elements for @em time and @em
 * delay; in SBML Level&nbsp;3, it additionally applies to the @c csymbol
 * element for @em avogadro.
 *
 * @note Function definitions (also informally known as user-defined
 * functions) were introduced in SBML Level 2.  They have purposefully
 * limited capabilities.  A function cannot reference parameters or other
 * model quantities outside of itself; values must be passed as parameters
 * to the function.  Moreover, recursive and mutually-recursive functions
 * are not permitted.  The purpose of these limitations is to balance power
 * against complexity of implementation.  With the restrictions as they
 * are, function definitions could be implemented as textual
 * substitutions&mdash;they are simply macros.  Software implementations
 * therefore do not need the full function-definition machinery typically
 * associated with programming languages.
 * <br><br>
 * Another important point to note is FunctionDefinition does not
 * have a separate attribute for defining the units of the value returned
 * by the function.  The units associated with the function\'s return value,
 * when the function is called from within MathML expressions elsewhere in
 * SBML, are simply the overall units of the expression in
 * FunctionDefinition\'s \'math\' subelement when applied to the arguments
 * supplied in the call to the function.  Ascertaining these units requires
 * performing dimensional analysis on the expression.  (Readers may wonder
 * why there is no attribute.  The reason is that having a separate
 * attribute for declaring the units would not only be redundant, but also
 * lead to the potential for having conflicting information.  In the case
 * of a conflict between the declared units and those of the value actually
 * returned by the function, the only logical resolution rule would be to
 * assume that the correct units are those of the expression anyway.)
 * 
 * 
 *
 */
"


%typemap(csimports) ListOfFunctionDefinitions "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Implementation of SBML\'s %ListOfFunctionDefinitions
 * construct.
 *
 * *
 * 
 * The various ListOf___ classes in SBML are merely containers used for
 * organizing the main components of an SBML model.  All are derived from
 * the abstract class SBase, and inherit the various attributes and
 * subelements of SBase, such as \'metaid\' as and \'annotation\'.  The
 * ListOf___ classes do not add any attributes of their own.
 *
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 *
 * @htmlinclude listof-illustration.html
 *
 * Readers may wonder about the motivations for using the ListOf___
 * containers.  A simpler approach in XML might be to place the components
 * all directly at the top level of the model definition.  The choice made
 * in SBML is to group them within XML elements named after
 * ListOf<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from SBase means that software tools can add information @em about
 * the lists themselves into each list container\'s \'annotation\'.
 * 
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 *
 *
 */
"


%csmethodmodifiers FunctionDefinition::FunctionDefinition(unsigned int level, unsigned int version) "
/**
   * Creates a new FunctionDefinition using the given SBML @p level and @p version
   * values.
   *
   * @param level a long integer, the SBML Level to assign to this FunctionDefinition
   *
   * @param version a long integer, the SBML Version to assign to this
   * FunctionDefinition
   *
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the given @p level and @p version combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent SBMLDocument object.
   *
   * * 
 * @note Upon the addition of a FunctionDefinition object to an SBMLDocument
 * (e.g., using Model::addFunctionDefinition(@if java FunctionDefinition
 * f@endif)), the SBML Level, SBML Version and XML namespace of the document
 * @em override the values used when creating the FunctionDefinition object
 * via this constructor.  This is necessary to ensure that an SBML document
 * is a consistent structure.  Nevertheless, the ability to supply the values
 * at the time of creation of a FunctionDefinition is an important aid to
 * producing valid SBML.  Knowledge of the intented SBML Level and Version
 * determine whether it is valid to assign a particular value to an
 * attribute, or whether it is valid to add an object to an existing
 * SBMLDocument.
 *
   */ public
";


%csmethodmodifiers FunctionDefinition::FunctionDefinition(SBMLNamespaces* sbmlns) "
/**
   * Creates a new FunctionDefinition using the given SBMLNamespaces object
   * @p sbmlns.
   *
   * *
 *  
 * The SBMLNamespaces object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML\'s SBMLNamespaces facilities is to create an
 * SBMLNamespaces object somewhere in a program once, then hand that object
 * as needed to object constructors that accept SBMLNamespaces as arguments.
 *
 * 
   *
   * @param sbmlns an SBMLNamespaces object.
   *
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the given @p level and @p version combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent SBMLDocument object.
   *
   * * 
 * @note Upon the addition of a FunctionDefinition object to an SBMLDocument
 * (e.g., using Model::addFunctionDefinition(@if java FunctionDefinition
 * f@endif)), the SBML Level, SBML Version and XML namespace of the document
 * @em override the values used when creating the FunctionDefinition object
 * via this constructor.  This is necessary to ensure that an SBML document
 * is a consistent structure.  Nevertheless, the ability to supply the values
 * at the time of creation of a FunctionDefinition is an important aid to
 * producing valid SBML.  Knowledge of the intented SBML Level and Version
 * determine whether it is valid to assign a particular value to an
 * attribute, or whether it is valid to add an object to an existing
 * SBMLDocument.
 *
   */ public
";


%csmethodmodifiers FunctionDefinition::FunctionDefinition(const FunctionDefinition& orig) "
/**
   * Copy constructor; creates a copy of this FunctionDefinition.
   *
   * @param orig the object to copy.
   * 
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the argument @p orig is @c null.
   */ public
";


%csmethodmodifiers FunctionDefinition::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor for this instance of FunctionDefinition.
   *
   * @param v the SBMLVisitor instance to be used.
   *
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether the Visitor would like to visit the next FunctionDefinition in
   * the list of function definitions.
   */ public
";


%csmethodmodifiers FunctionDefinition::clone() const "
/**
   * Creates and returns a deep copy of this FunctionDefinition.
   * 
   * @return a (deep) copy of this FunctionDefinition.
   */ public new
";


%csmethodmodifiers FunctionDefinition::getId() const "
/**
   * Returns the value of the \'id\' attribute of this FunctionDefinition.
   * 
   * @return the id of this FunctionDefinition.
   */ public new
";


%csmethodmodifiers FunctionDefinition::getName() const "
/**
   * Returns the value of the \'name\' attribute of this FunctionDefinition.
   * 
   * @return the name of this FunctionDefinition.
   */ public new
";


%csmethodmodifiers FunctionDefinition::getMath() const "
/**
   * Get the mathematical formula of this FunctionDefinition.
   *
   * @return an ASTNode, the value of the \'math\' subelement of this
   * FunctionDefinition
   */ public
";


%csmethodmodifiers FunctionDefinition::isSetId() const "
/**
   * Predicate returning @c true if this
   * FunctionDefinition\'s \'id\' attribute is set.
   *
   * @return @c true if the \'id\' attribute of this FunctionDefinition is
   * set, @c false otherwise.
   */ public new
";


%csmethodmodifiers FunctionDefinition::isSetName() const "
/**
   * Predicate returning @c true if this
   * FunctionDefinition\'s \'name\' attribute is set.
   *
   * @return @c true if the \'name\' attribute of this FunctionDefinition is
   * set, @c false otherwise.
   */ public new
";


%csmethodmodifiers FunctionDefinition::isSetMath() const "
/**
   * Predicate returning @c true if this
   * FunctionDefinition\'s \'math\' subelement contains a value.
   * 
   * @return @c true if the \'math\' for this FunctionDefinition is set,
   * @c false otherwise.
   */ public
";


%csmethodmodifiers FunctionDefinition::setId(const std::string& sid) "
/**
   * Sets the value of the \'id\' attribute of this FunctionDefinition.
   *
   * The string @p sid is copied.
   *
   * *
 * 
 * SBML has strict requirements for the syntax of identifiers, that is, the
 * values of the \'id\' attribute present on most types of SBML objects.
 * The following is a summary of the definition of the SBML identifier type 
 * <code>SId</code>, which defines the permitted syntax of identifiers.  We
 * express the syntax using an extended form of BNF notation: 
 * <pre style=\'margin-left: 2em; border: none; font-weight: bold; font-size: 13px; color: black\'>
 * letter ::= \'a\'..\'z\',\'A\'..\'Z\'
 * digit  ::= \'0\'..\'9\'
 * idChar ::= letter | digit | \'_\'
 * SId    ::= ( letter | \'_\' ) idChar*
 * </pre>
 * The characters <code>(</code> and <code>)</code> are used for grouping, the
 * character <code>*</code> \'zero or more times\', and the character
 * <code>|</code> indicates logical \'or\'.  The equality of SBML identifiers is
 * determined by an exact character sequence match; i.e., comparisons must be
 * performed in a case-sensitive manner.  In addition, there are a few
 * conditions for the uniqueness of identifiers in an SBML model.  Please
 * consult the SBML specifications for the exact details of the uniqueness
 * requirements.
 * 
 *
   *
   * @param sid the string to use as the identifier of this FunctionDefinition
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public new
";


%csmethodmodifiers FunctionDefinition::setName(const std::string& name) "
/**
   * Sets the value of the \'name\' attribute of this FunctionDefinition.
   *
   * The string in @p name is copied.
   *
   * @param name the new name for the FunctionDefinition
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public new
";


%csmethodmodifiers FunctionDefinition::setMath(const ASTNode* math) "
/**
   * Sets the \'math\' subelement of this FunctionDefinition to the Abstract
   * Syntax Tree given in @p math.
   *
   * @param math an AST containing the mathematical expression to
   * be used as the formula for this FunctionDefinition.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   */ public
";


%csmethodmodifiers FunctionDefinition::unsetName "
/**
   * Unsets the value of the \'name\' attribute of this FunctionDefinition.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public new
";


%csmethodmodifiers FunctionDefinition::getArgument "
/**
   * Get the <code>n</code>th argument to this function.
   *
   * Callers should first find out the number of arguments to the function
   * by calling getNumArguments().
   *
   * @param n an integer index for the argument sought.
   * 
   * @return the nth argument (bound variable) passed to this
   * FunctionDefinition.
   *
   * @see getNumArguments()
   */ public
";


%csmethodmodifiers FunctionDefinition::getArgument(const std::string& name) const "
/**
   * Get the argument named @p name to this FunctionDefinition.
   *
   * @param name the exact name (case-sensitive) of the sought-after
   * argument
   * 
   * @return the argument (bound variable) having the given name, or @c null if
   * no such argument exists.
   */ public
";


%csmethodmodifiers FunctionDefinition::getBody() const "
/**
   * Get the mathematical expression that is the body of this
   * FunctionDefinition object.
   * 
   * @return the body of this FunctionDefinition as an Abstract Syntax
   * Tree, or @c null if no body is defined.
   */ public
";


%csmethodmodifiers FunctionDefinition::getBody "
/**
   * Get the mathematical expression that is the body of this
   * FunctionDefinition object.
   * 
   * @return the body of this FunctionDefinition as an Abstract Syntax
   * Tree, or @c null if no body is defined.
   */ public
";


%csmethodmodifiers FunctionDefinition::isSetBody() const "
/**
   * Predicate returning @c true if the body of this
   * FunctionDefinition has set.
   *
   * @return @c true if the body of this FunctionDefinition is 
   * set, @c false otherwise.
   */ public
";


%csmethodmodifiers FunctionDefinition::getNumArguments() const "
/**
   * Get the number of arguments (bound variables) taken by this
   * FunctionDefinition.
   *
   * @return the number of arguments (bound variables) that must be passed
   * to this FunctionDefinition.
   */ public
";


%csmethodmodifiers FunctionDefinition::getTypeCode() const "
/**
   * Returns the libSBML type code for this %SBML object.
   * 
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object:
   * @link libsbmlcs.libsbml.SBML_FUNCTION_DEFINITION SBML_FUNCTION_DEFINITION@endlink (default).
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see getElementName()
   * @see getPackageName()
   */ public new
";


%csmethodmodifiers FunctionDefinition::getElementName() const "
/**
   * Returns the XML element name of this object, which for
   * FunctionDefinition, is always @c \'functionDefinition\'.
   * 
   * @return the name of this element, i.e., @c \'functionDefinition\'.
   */ public new
";


%csmethodmodifiers FunctionDefinition::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers FunctionDefinition::hasRequiredAttributes() const "
/**
   * Predicate returning @c true if
   * all the required attributes for this FunctionDefinition object
   * have been set.
   *
   * @note The required attributes for a FunctionDefinition object are:
   * @li \'id\'
   *
   * @return a bool value indicating whether all the required
   * attributes for this object have been defined.
   */ public new
";


%csmethodmodifiers FunctionDefinition::hasRequiredElements() const "
/**
   * Predicate returning @c true if
   * all the required elements for this FunctionDefinition object
   * have been set.
   *
   * @note The required elements for a FunctionDefinition object are:
   * @li \'math\'
   *
   * @return a bool value indicating whether all the required
   * elements for this object have been defined.
   */ public new
";


%csmethodmodifiers FunctionDefinition::renameUnitSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames all the @c UnitSIdRef attributes on this element.
   *
   * *
 * 
 * In SBML, unit definitions have identifiers of type <code>UnitSId</code>.  In
 * SBML Level&nbsp;3, an explicit data type called <code>UnitSIdRef</code> was
 * introduced for attribute values that refer to <code>UnitSId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to a unit identifier\', but the effective
 * data type was the same as <code>UnitSIdRef</code> in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>UnitSIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 * 
 *
   *
   * This method works by looking at all unit identifier attribute values
   * (including, if appropriate, inside mathematical formulas), comparing the
   * unit identifiers to the value of @p oldid.  If any matches are found,
   * the matching identifiers are replaced with @p newid.  The method does
   * @em not descend into child elements.
   * 
   * @param oldid the old identifier
   * @param newid the new identifier
   */ public
";


%csmethodmodifiers FunctionDefinition::readOtherXML(XMLInputStream& stream) "
/**
   * Subclasses should override this method to read (and store) XHTML,
   * MathML, etc. directly from the XMLInputStream.
   *
   * @return true if the subclass read from the stream, false otherwise.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers FunctionDefinition::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers FunctionDefinition::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Subclasses should override this method to read values from the given
   * XMLAttributes set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers FunctionDefinition::readL2Attributes(const XMLAttributes& attributes) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers FunctionDefinition::readL3Attributes(const XMLAttributes& attributes) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers FunctionDefinition::writeAttributes(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfFunctionDefinitions::ListOfFunctionDefinitions(unsigned int level, unsigned int version) "
/**
   * Creates a new ListOfFunctionDefinitions object.
   *
   * The object is constructed such that it is valid for the given SBML
   * Level and Version combination.
   *
   * @param level the SBML Level
   * 
   * @param version the Version within the SBML Level
   */ public
";


%csmethodmodifiers ListOfFunctionDefinitions::ListOfFunctionDefinitions(SBMLNamespaces* sbmlns) "
/**
   * Creates a new ListOfFunctionDefinitions object.
   *
   * The object is constructed such that it is valid for the SBML Level and
   * Version combination determined by the SBMLNamespaces object in @p
   * sbmlns.
   *
   * @param sbmlns an SBMLNamespaces object that is used to determine the
   * characteristics of the ListOfFunctionDefinitions object to be created.
   */ public
";


%csmethodmodifiers ListOfFunctionDefinitions::clone() const "
/**
   * Creates and returns a deep copy of this ListOfFunctionDefinitions instance.
   *
   * @return a (deep) copy of this ListOfFunctionDefinitions.
   */ public new
";


%csmethodmodifiers ListOfFunctionDefinitions::getItemTypeCode() const "
/**
   * Returns the libSBML type code for the objects contained in this ListOf
   * (i.e., FunctionDefinition objects, if the list is non-empty).
   *
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for the objects contained in this ListOf:
   * @link libsbmlcs.libsbml.SBML_FUNCTION_DEFINITION SBML_FUNCTION_DEFINITION@endlink (default).
   *
   * @see getElementName()
   * @see getPackageName()
   */ public new
";


%csmethodmodifiers ListOfFunctionDefinitions::getElementName() const "
/**
   * Returns the XML element name of this object.
   *
   * For ListOfFunctionDefinitions, the XML element name is @c
   * \'listOfFunctionDefinitions\'.
   * 
   * @return the name of this element, i.e., @c \'listOfFunctionDefinitions\'.
   */ public new
";


%csmethodmodifiers ListOfFunctionDefinitions::get(unsigned int n) "
/**
   * Get a FunctionDefinition from the ListOfFunctionDefinitions.
   *
   * @param n the index number of the FunctionDefinition to get.
   * 
   * @return the nth FunctionDefinition in this ListOfFunctionDefinitions.
   *
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfFunctionDefinitions::get "
/**
   * Get a FunctionDefinition from the ListOfFunctionDefinitions.
   *
   * @param n the index number of the FunctionDefinition to get.
   * 
   * @return the nth FunctionDefinition in this ListOfFunctionDefinitions.
   *
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfFunctionDefinitions::get(const std::string& sid) "
/**
   * Get a FunctionDefinition from the ListOfFunctionDefinitions
   * based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the FunctionDefinition to get.
   * 
   * @return FunctionDefinition in this ListOfFunctionDefinitions
   * with the given @p sid or @c null if no such
   * FunctionDefinition exists.
   *
   * @see get(long n)
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfFunctionDefinitions::get(const std::string& sid) const "
/**
   * Get a FunctionDefinition from the ListOfFunctionDefinitions
   * based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the FunctionDefinition to get.
   * 
   * @return FunctionDefinition in this ListOfFunctionDefinitions
   * with the given @p sid or @c null if no such
   * FunctionDefinition exists.
   *
   * @see get(long n)
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfFunctionDefinitions::remove(unsigned int n) "
/**
   * Removes the nth item from this ListOfFunctionDefinitions items and returns a pointer to
   * it.
   *
   * The caller owns the returned item and is responsible for deleting it.
   *
   * @param n the index of the item to remove
   *
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfFunctionDefinitions::remove(const std::string& sid) "
/**
   * Removes item in this ListOfFunctionDefinitions items with the given identifier.
   *
   * The caller owns the returned item and is responsible for deleting it.
   * If none of the items in this list have the identifier @p sid, then @c
   * null is returned.
   *
   * @param sid the identifier of the item to remove
   *
   * @return the item removed.  As mentioned above, the caller owns the
   * returned item.
   */ public new
";


%csmethodmodifiers ListOfFunctionDefinitions::getElementPosition() const "
/**
   * Get the ordinal position of this element in the containing object
   * (which in this case is the Model object).
   *
   * The ordering of elements in the XML form of %SBML is generally fixed
   * for most components in %SBML.  So, for example, the
   * ListOfFunctionDefinitions in a model is (in %SBML Level 2 Version 4)
   * the first ListOf___.  (However, it differs for different Levels and
   * Versions of SBML.)
   *
   * @return the ordinal position of the element with respect to its
   * siblings, or @c -1 (default) to indicate the position is not significant.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfFunctionDefinitions::createObject(XMLInputStream& stream) "
/**
   * Create and return an SBML object of this class, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or @c null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers UnitKind_equals(UnitKind_t uk1, UnitKind_t uk2) "
/**
 * Tests for logical equality between two given <code>UNIT_KIND_</code>
 * code values.
 *
 * This function behaves exactly like C\'s <code>==</code> operator, except
 * for the following two cases:
 * <ul>
 * <li>@link libsbmlcs.libsbml.UNIT_KIND_LITER UNIT_KIND_LITER@endlink <code>==</code> @link libsbmlcs.libsbml.UNIT_KIND_LITRE UNIT_KIND_LITRE@endlink
 * <li>@link libsbmlcs.libsbml.UNIT_KIND_METER UNIT_KIND_METER@endlink <code>==</code> @link libsbmlcs.libsbml.UNIT_KIND_METRE UNIT_KIND_METRE@endlink
 * </ul>
 *
 * In the two cases above, C equality comparison would yield @c false
 * (because each of the above is a distinct enumeration value), but
 * this function returns @c true.
 *
 * @param uk1 a <code>UNIT_KIND_</code> value 
 * @param uk2 a second <code>UNIT_KIND_</code> value to compare to @p uk1
 *
 * @return nonzero (for @c true) if @p uk1 is logically equivalent to @p
 * uk2, zero (for @c false) otherwise.
 *
 * @note For more information about the libSBML unit codes, please refer to
 * the class documentation for Unit.
 */ public
";


%csmethodmodifiers UnitKind_forName(const char *name) "
/**
 * Converts a text string naming a kind of unit to its corresponding
 * libSBML <code>UNIT_KIND_</code> constant/enumeration value.
 *
 * @param name a string, the name of a predefined base unit in SBML
 * 
 * @return @if clike a value from UnitKind_t corresponding to the given
 * string @p name (determined in a case-insensitive manner).
 * @endif@if python a value the set of <code>UNIT_KIND_</code> codes
 * defined in class @link libsbml libsbml@endlink, corresponding to the
 * string @p name (determined in a case-insensitive
 * manner).@endif@if java a value the set of <code>UNIT_KIND_</code> codes
 * defined in class {@link libsbmlConstants}, corresponding to the string
 * @p name (determined in a case-insensitive manner).@endif
 *
 * @note For more information about the libSBML unit codes, please refer to
 * the class documentation for Unit.
 */ public
";


%csmethodmodifiers UnitKind_toString(UnitKind_t uk) "
/**
 * Converts a unit code to a text string equivalent.
 *
 * @param uk @if clike a value from the UnitKind_t enumeration
 * @endif@if python a value from the set of <code>UNIT_KIND_</code> codes
 * defined in the class @link libsbml libsbml@endlink
 * @endif@if java a value from the set of <code>UNIT_KIND_</code> codes
 * defined in the class {@link libsbmlConstants}
 * @endif
 *
 * @return the name corresponding to the given unit code.
 *
 * @note For more information about the libSBML unit codes, please refer to
 * the class documentation for Unit.
 * 
 * @warning The string returned is a static data value.  The caller does not
 * own the returned string and is therefore not allowed to modify it.
 */ public
";


%csmethodmodifiers UnitKind_isValidUnitKindString(const char *str, unsigned int level, unsigned int version) "
/**
 * Predicate for testing whether a given string corresponds to a
 * predefined libSBML unit code.
 *
 * @param str a text string naming a base unit defined by SBML
 * @param level the Level of SBML
 * @param version the Version within the Level of SBML
 *
 * @return nonzero (for @c true) if string is the name of a valid
 * <code>UNIT_KIND_</code> value, zero (for @c false) otherwise.
 *
 * @note For more information about the libSBML unit codes, please refer to
 * the class documentation for Unit.
 */ public
";


%typemap(csimports) Unit "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Implementation of SBML\'s %Unit construct.
 *
 * The SBML unit definition facility uses two classes of objects,
 * UnitDefinition and Unit.  The approach to defining units in %SBML is
 * compositional; for example, <em>meter second<sup> &ndash;2</sup></em> is
 * constructed by combining a Unit object representing <em>meter</em> with
 * another Unit object representing <em>second<sup> &ndash;2</sup></em>.
 * The combination is wrapped inside a UnitDefinition, which provides for
 * assigning an identifier and optional name to the combination.  The
 * identifier can then be referenced from elsewhere in a model.  Thus, the
 * UnitDefinition class is the container, and Unit instances are placed
 * inside UnitDefinition instances.
 *
 * A Unit structure has four attributes named \'kind\', \'exponent\', \'scale\'
 * and \'multiplier\'.  It represents a (possibly transformed) reference to a
 * base unit.  The attribute \'kind\' on Unit indicates the chosen base unit.
 * Its value must be one of the text strings listed below; this list
 * corresponds to SBML Level&nbsp;3 Version&nbsp;1 Core:
 *
 * *
 * 
<table border=\'0\' class=\'centered text-table width80 normal-font code\'
       style=\'border: none !important\'>
<tr>
<td>ampere</td><td>farad</td><td>joule</td><td>lux</td><td>radian</td><td>volt</td>
</tr>
<tr>
<td>avogadro</td><td>gram</td><td>katal</td><td>metre</td><td>second</td><td>watt</td>
</tr>
<tr>
<td>becquerel</td><td>gray</td><td>kelvin</td><td>mole</td><td>siemens</td><td>weber</td>
</tr>
<tr>
<td>candela</td><td>henry</td><td>kilogram</td><td>newton</td><td>sievert</td>
</tr>
<tr>
<td>coulomb</td><td>hertz</td><td>litre</td><td>ohm</td><td>steradian</td>
</tr>
<tr>
<td>dimensionless</td><td>item</td><td>lumen</td><td>pascal</td><td>tesla</td>
</tr>
</table>
 *
 *
 *
 * A few small differences exist between the Level&nbsp;3 list of base
 * units and the list defined in other Level/Version combinations of SBML.
 * Specifically, Levels of SBML before Level&nbsp;3 do not define @c
 * avogadro; conversely, Level&nbsp;2 Version&nbsp;1 defines @c Celsius,
 * and Level&nbsp;1 defines @c celsius, @c meter, and @c liter, none of
 * which are available in Level&nbsp;3.  In libSBML, each of the predefined
 * base unit names is represented by an enumeration value @if clike in
 * #UnitKind_t@else whose name begins with the characters
 * <code>UNIT_KIND_</code>@endif, discussed in a separate section below.
 *
 * The attribute named \'exponent\' on Unit represents an exponent on the
 * unit.  In SBML Level&nbsp;2, the attribute is optional and has a default
 * value of @c 1 (one); in SBML Level&nbsp;3, the attribute is mandatory
 * and there is no default value.  A Unit structure also has an attribute
 * called \'scale\'; its value must be an integer exponent for a power-of-ten
 * multiplier used to set the scale of the unit.  For example, a unit
 * having a \'kind\' value of @c gram and a \'scale\' value of @c -3 signifies
 * 10<sup>&nbsp;&ndash;3</sup> * gram, or milligrams.  In SBML
 * Level&nbsp;2, the attribute is optional and has a default value of @c 0
 * (zero), because 10<sup> 0</sup> = 1; in SBML Level&nbsp;3, the attribute
 * is mandatory and has no default value.  Lastly, the attribute named
 * \'multiplier\' can be used to multiply the unit by a real-numbered factor;
 * this enables the definition of units that are not power-of-ten multiples
 * of SI units.  For instance, a multiplier of 0.3048 could be used to
 * define @c foot as a measure of length in terms of a @c metre.  The
 * \'multiplier\' attribute is optional in SBML Level&nbsp;2, where it has a
 * default value of @c 1 (one); in SBML Level&nbsp;3, the attribute is
 * mandatory and has not default value.
 *
 * @if clike
 * <h3><a class=\'anchor\' name=\'UnitKind_t\'>UnitKind_t</a></h3>
 * @else
 * <h3><a class=\'anchor\' name=\'UnitKind_t\'>%Unit identification codes</a></h3>
 * @endif
 *
 * As discussed above, SBML defines a set of base units which serves as the
 * starting point for new unit definitions.  This set of base units
 * consists of the SI units and a small number of additional convenience
 * units.
 * 
 * @if clike Until SBML Level&nbsp;2 Version&nbsp;3, there
 * existed a data type in the SBML specifications called @c UnitKind,
 * enumerating the possible SBML base units.  Although SBML Level&nbsp;2
 * Version&nbsp;3 removed this type from the language specification,
 * libSBML maintains the corresponding enumeration type #UnitKind_t as a
 * convenience and as a way to provide backward compatibility to previous
 * SBML Level/Version specifications.  (The removal in SBML Level&nbsp;2
 * Version&nbsp;3 of the enumeration @c UnitKind was also accompanied by
 * the redefinition of the data type @c UnitSId to include the previous @c
 * UnitKind values as reserved symbols in the @c UnitSId space.  This
 * change has no net effect on permissible models, their representation or
 * their syntax.  The purpose of the change in the SBML specification was
 * simply to clean up an inconsistency about the contexts in which these
 * values were usable.)
 * @endif@if java In SBML Level&nbsp;2 Versions before
 * Version&nbsp;3, there existed an enumeration of units called @c
 * UnitKind.  In Version&nbsp;3, this enumeration was removed and the
 * identifier class @c UnitSId redefined to include the previous @c
 * UnitKind values as reserved symbols.  This change has no net effect on
 * permissible models, their representation or their syntax.  The purpose
 * of the change in the SBML specification was simply to clean up an
 * inconsistency about the contexts in which these values were usable.
 * However, libSBML maintains UnitKind in the form of of a set of static
 * integer constants whose names begin with the characters
 * <code>UNIT_KIND_</code>.  These constants are defined in the class
 * <code><a href=\'libsbmlcs.libsbml.html\'>libsbmlConstants</a></code>.
 * @endif@if python In SBML Level&nbsp;2 Versions before
 * Version&nbsp;3, there existed an enumeration of units called @c
 * UnitKind.  In Version&nbsp;3, this enumeration was removed and the
 * identifier class @c UnitSId redefined to include the previous @c
 * UnitKind values as reserved symbols.  This change has no net effect on
 * permissible models, their representation or their syntax.  The purpose
 * of the change in the SBML specification was simply to clean up an
 * inconsistency about the contexts in which these values were usable.
 * However, libSBML maintains UnitKind in the form of of a set of static
 * integer constants whose names begin with the characters
 * <code>UNIT_KIND_</code>.  These constants are defined in the class
 * @link libsbml libsbml@endlink.
 * @endif
 *
 * As a consequence of the fact that libSBML supports models in all Levels
 * and Versions of SBML, libSBML\'s set of @c UNIT_KIND_ values is a union
 * of all the possible base unit names defined in the different SBML
 * specifications.  However, not every base unit is allowed in every
 * Level+Version combination of SBML.  Note in particular the following
 * exceptions:
 * <ul>
 * <li> The alternate spelling @c \'meter\' is included in
 * addition to the official SI spelling @c \'metre\'.  This spelling is only
 * permitted in SBML Level&nbsp;1 models.
 *
 * <li> The alternate spelling @c \'liter\' is included in addition to the
 * official SI spelling @c \'litre\'.  This spelling is only permitted in
 * SBML Level&nbsp;1 models.
 *
 * <li> The unit @c \'Celsius\' is included because of its presence in
 * specifications of SBML prior to SBML Level&nbsp;2 Version&nbsp;3.
 *
 * <li> The unit @c avogadro was introduced in SBML Level&nbsp;3, and
 * is only permitted for use in SBML Level&nbsp;3 models.
 * </ul>
 *
 * @if clike The table below lists the symbols defined in the
 * @c UnitKind_t enumeration, and their
 * meanings. @else The table below lists the unit
 * constants defined in libSBML, and their meanings. @endif
 *
 * @htmlinclude unitkind-table.html
 * 
 * 
 */
"


%typemap(csimports) ListOfUnits "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Implementation of SBML\'s %ListOfUnits construct.
 * 
 * ListOfUnits is entirely contained within UnitDefinition.
 *
 * *
 * 
 * The various ListOf___ classes in SBML are merely containers used for
 * organizing the main components of an SBML model.  All are derived from
 * the abstract class SBase, and inherit the various attributes and
 * subelements of SBase, such as \'metaid\' as and \'annotation\'.  The
 * ListOf___ classes do not add any attributes of their own.
 *
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 *
 * @htmlinclude listof-illustration.html
 *
 * Readers may wonder about the motivations for using the ListOf___
 * containers.  A simpler approach in XML might be to place the components
 * all directly at the top level of the model definition.  The choice made
 * in SBML is to group them within XML elements named after
 * ListOf<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from SBase means that software tools can add information @em about
 * the lists themselves into each list container\'s \'annotation\'.
 * 
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 *
 *
 */
"


%csmethodmodifiers Unit::Unit(unsigned int level, unsigned int version) "
/**
   * Creates a new Unit using the given SBML @p level and @p version
   * values.
   *
   * @param level a long integer, the SBML Level to assign to this Unit
   *
   * @param version a long integer, the SBML Version to assign to this
   * Unit
   *
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the given @p level and @p version combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent SBMLDocument object.
   *
   * * 
 * @note Upon the addition of a Unit object to an SBMLDocument, the SBML
 * Level, SBML Version and XML namespace of the document @em
 * override the values used when creating the Unit object via this
 * constructor.  This is necessary to ensure that an SBML document is a
 * consistent structure.  Nevertheless, the ability to supply the values
 * at the time of creation of a Unit is an important aid to producing
 * valid SBML.  Knowledge of the intented SBML Level and Version
 * determine whether it is valid to assign a particular value to an
 * attribute, or whether it is valid to add an object to an existing
 * SBMLDocument.
 *
   */ public
";


%csmethodmodifiers Unit::Unit(SBMLNamespaces* sbmlns) "
/**
   * Creates a new Unit using the given SBMLNamespaces object
   * @p sbmlns.
   *
   * *
 *  
 * The SBMLNamespaces object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML\'s SBMLNamespaces facilities is to create an
 * SBMLNamespaces object somewhere in a program once, then hand that object
 * as needed to object constructors that accept SBMLNamespaces as arguments.
 *
 *
   * 
   * @param sbmlns an SBMLNamespaces object.
   *
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the given @p level and @p version combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent SBMLDocument object.
   *
   * * 
 * @note Upon the addition of a Unit object to an SBMLDocument, the SBML
 * Level, SBML Version and XML namespace of the document @em
 * override the values used when creating the Unit object via this
 * constructor.  This is necessary to ensure that an SBML document is a
 * consistent structure.  Nevertheless, the ability to supply the values
 * at the time of creation of a Unit is an important aid to producing
 * valid SBML.  Knowledge of the intented SBML Level and Version
 * determine whether it is valid to assign a particular value to an
 * attribute, or whether it is valid to add an object to an existing
 * SBMLDocument.
 *
   */ public
";


%csmethodmodifiers Unit::Unit(const Unit& orig) "
/**
   * Copy constructor; creates a copy of this Unit.
   *
   * @param orig the object to copy.
   * 
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the argument @p orig is @c null.
   */ public
";


%csmethodmodifiers Unit::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor for this instance of Unit.
   *
   * @param v the SBMLVisitor instance to be used.
   *
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether the Visitor would like to visit the next Unit in the list
   * of units within which this Unit is embedded (i.e., in the ListOfUnits
   * located in the enclosing UnitDefinition instance).
   */ public
";


%csmethodmodifiers Unit::clone() const "
/**
   * Creates and returns a deep copy of this Unit.
   * 
   * @return a (deep) copy of this Unit.
   */ public new
";


%csmethodmodifiers Unit::initDefaults "
/**
   * Initializes the fields of this Unit object to \'typical\' default
   * values.
   *
   * The SBML Unit component has slightly different aspects and default
   * attribute values in different SBML Levels and Versions.  This method
   * sets the values to certain common defaults, based mostly on what they
   * are in SBML Level&nbsp;2.  Specifically:
   * <ul>
   * <li> Sets attribute \'exponent\' to @c 1
   * <li> Sets attribute \'scale\' to @c 0
   * <li> Sets attribute \'multiplier\' to @c 1.0
   * </ul>
   *
   * The \'kind\' attribute is left unchanged.
   */ public
";


%csmethodmodifiers Unit::getKind() const "
/**
   * Returns the \'kind\' of Unit this is.
   * 
   * @if clike
   * @return the value of the \'kind\' attribute of this Unit as a
   * value from the <a class=\'el\' href=\'#UnitKind_t\'>UnitKind_t</a> enumeration.
   * @endif@if java
   * @return the value of the \'kind\' attribute of this Unit as a
   * value from the set of constants whose names begin
   * with <code>UNIT_KIND_</code> defined in the class
   * <code><a href=\'libsbmlcs.libsbml.html\'>libsbmlConstants</a></code>.
   * @endif@if python
   * @return the value of the \'kind\' attribute of this Unit as a
   * value from the set of constants whose names begin
   * with <code>UNIT_KIND_</code> defined in the class
   * @link libsbml libsbml@endlink.
   * @endif
   */ public
";


%csmethodmodifiers Unit::getExponent() const "
/**
   * Returns the value of the \'exponent\' attribute of this unit.
   * 
   * @return the \'exponent\' value of this Unit, as an integer.
   */ public
";


%csmethodmodifiers Unit::getExponentAsDouble() const "
/**
   * Returns the value of the \'exponent\' attribute of this unit.
   * 
   * @return the \'exponent\' value of this Unit, as a double.
   */ public
";


%csmethodmodifiers Unit::getScale() const "
/**
   * Returns the value of the \'scale\' attribute of this unit.
   * 
   * @return the \'scale\' value of this Unit, as an integer.
   */ public
";


%csmethodmodifiers Unit::getMultiplier() const "
/**
   * Returns the value of the \'multiplier\' attribute of this Unit.
   * 
   * @return the \'multiplier\' value of this Unit, as a double.
   */ public
";


%csmethodmodifiers Unit::getOffset() const "
/**
   * Returns the value of the \'offset\' attribute of this Unit.
   * 
   * @return the \'offset\' value of this Unit, as a double.
   *
   * * 
 * @warning <span class=\'warning\'>The \'offset\' attribute is only available in
 * SBML Level&nbsp;2 Version&nbsp;1.  This attribute is not present in SBML
 * Level&nbsp;2 Version&nbsp;2 or above.  When producing SBML models using
 * these later specifications, modelers and software tools need to account
 * for units with offsets explicitly.  The %SBML specification document
 * offers a number of suggestions for how to achieve this.  LibSBML methods
 * such as this one related to \'offset\' are retained for compatibility with
 * earlier versions of SBML Level&nbsp;2, but their use is strongly
 * discouraged.</span>
 *
   */ public
";


%csmethodmodifiers Unit::isAmpere() const "
/**
   * Predicate for testing whether this Unit is of the kind @c ampere.
   * 
   * @return @c true if the kind of this Unit is @c ampere, @c false
   * otherwise. 
   */ public
";


%csmethodmodifiers Unit::isAvogadro() const "
/**
   * Predicate for testing whether this Unit is of the kind @c avogadro.
   * 
   * @return @c true if the kind of this Unit is @c avogadro, @c false
   * otherwise.
   *
   * @note The unit @c avogadro was introduced in SBML Level&nbsp;3, and
   * is only permitted for use in SBML Level&nbsp;3 models.
   */ public
";


%csmethodmodifiers Unit::isBecquerel() const "
/**
   * Predicate for testing whether this Unit is of the kind @c becquerel
   *
   * @return @c true if the kind of this Unit is @c becquerel, @c false
   * otherwise. 
   */ public
";


%csmethodmodifiers Unit::isCandela() const "
/**
   * Predicate for testing whether this Unit is of the kind @c candela
   *
   * @return @c true if the kind of this Unit is @c candela, @c false
   * otherwise. 
   */ public
";


%csmethodmodifiers Unit::isCelsius() const "
/**
   * Predicate for testing whether this Unit is of the kind @c Celsius
   *
   * @return @c true if the kind of this Unit is @c Celsius, @c false
   * otherwise. 
   *
   * @warning <span class=\'warning\'>The predefined unit @c Celsius was
   * removed from the list of predefined units in SBML Level&nbsp;2
   * Version&nbsp;2 at the same time that the \'offset\' attribute was removed
   * from Unit definitions.  LibSBML methods such as this one related to @c
   * Celsius are retained in order to support SBML Level&nbsp;2
   * Version&nbsp;1, but their use is strongly discouraged.</span>
   */ public
";


%csmethodmodifiers Unit::isCoulomb() const "
/**
   * Predicate for testing whether this Unit is of the kind @c coulomb
   *
   * @return @c true if the kind of this Unit is @c coulomb, @c false
   * otherwise. 
   */ public
";


%csmethodmodifiers Unit::isDimensionless() const "
/**
   * Predicate for testing whether this Unit is of the kind @c
   * dimensionless.
   *
   * @return @c true if the kind of this Unit is @c dimensionless, @c false
   * 
   * otherwise.
   */ public
";


%csmethodmodifiers Unit::isFarad() const "
/**
   * Predicate for testing whether this Unit is of the kind @c farad
   *
   * @return @c true if the kind of this Unit is @c farad, @c false
   * otherwise. 
   */ public
";


%csmethodmodifiers Unit::isGram() const "
/**
   * Predicate for testing whether this Unit is of the kind @c gram
   *
   * @return @c true if the kind of this Unit is @c gram, @c false
   * otherwise. 
   */ public
";


%csmethodmodifiers Unit::isGray() const "
/**
   * Predicate for testing whether this Unit is of the kind @c gray
   *
   * @return @c true if the kind of this Unit is @c gray, @c false
   * otherwise. 
   */ public
";


%csmethodmodifiers Unit::isHenry() const "
/**
   * Predicate for testing whether this Unit is of the kind @c henry
   *
   * @return @c true if the kind of this Unit is @c henry, @c false
   * otherwise. 
   */ public
";


%csmethodmodifiers Unit::isHertz() const "
/**
   * Predicate for testing whether this Unit is of the kind @c hertz
   *
   * @return @c true if the kind of this Unit is @c hertz, @c false
   * otherwise. 
   */ public
";


%csmethodmodifiers Unit::isItem() const "
/**
   * Predicate for testing whether this Unit is of the kind @c item
   *
   * @return @c true if the kind of this Unit is @c item, @c false
   * otherwise. 
   */ public
";


%csmethodmodifiers Unit::isJoule() const "
/**
   * Predicate for testing whether this Unit is of the kind @c joule
   *
   * @return @c true if the kind of this Unit is @c joule, @c false
   * otherwise. 
   */ public
";


%csmethodmodifiers Unit::isKatal() const "
/**
   * Predicate for testing whether this Unit is of the kind @c katal
   *
   * @return @c true if the kind of this Unit is @c katal, @c false
   * otherwise. 
   */ public
";


%csmethodmodifiers Unit::isKelvin() const "
/**
   * Predicate for testing whether this Unit is of the kind @c kelvin
   *
   * @return @c true if the kind of this Unit is @c kelvin, @c false
   * otherwise. 
   */ public
";


%csmethodmodifiers Unit::isKilogram() const "
/**
   * Predicate for testing whether this Unit is of the kind @c kilogram
   *
   * @return @c true if the kind of this Unit is @c kilogram, @c false
   * otherwise. 
   */ public
";


%csmethodmodifiers Unit::isLitre() const "
/**
   * Predicate for testing whether this Unit is of the kind @c litre
   *
   * @return @c true if the kind of this Unit is @c litre or \'liter\', @c
   * false 
   * otherwise.
   */ public
";


%csmethodmodifiers Unit::isLumen() const "
/**
   * Predicate for testing whether this Unit is of the kind @c lumen
   *
   * @return @c true if the kind of this Unit is @c lumen, @c false
   * otherwise. 
   */ public
";


%csmethodmodifiers Unit::isLux() const "
/**
   * Predicate for testing whether this Unit is of the kind @c lux
   *
   * @return @c true if the kind of this Unit is @c lux, @c false
   * otherwise. 
   */ public
";


%csmethodmodifiers Unit::isMetre() const "
/**
   * Predicate for testing whether this Unit is of the kind @c metre
   *
   * @return @c true if the kind of this Unit is @c metre or \'meter\', @c
   * false 
   * otherwise.
   */ public
";


%csmethodmodifiers Unit::isMole() const "
/**
   * Predicate for testing whether this Unit is of the kind @c mole
   *
   * @return @c true if the kind of this Unit is @c mole, @c false
   * otherwise. 
   */ public
";


%csmethodmodifiers Unit::isNewton() const "
/**
   * Predicate for testing whether this Unit is of the kind @c newton
   *
   * @return @c true if the kind of this Unit is @c newton, @c false
   * otherwise. 
   */ public
";


%csmethodmodifiers Unit::isOhm() const "
/**
   * Predicate for testing whether this Unit is of the kind @c ohm
   *
   * @return @c true if the kind of this Unit is @c ohm, @c false
   * otherwise. 
   */ public
";


%csmethodmodifiers Unit::isPascal() const "
/**
   * Predicate for testing whether this Unit is of the kind @c pascal
   *
   * @return @c true if the kind of this Unit is @c pascal, @c false
   * otherwise. 
   */ public
";


%csmethodmodifiers Unit::isRadian() const "
/**
   * Predicate for testing whether this Unit is of the kind @c radian
   *
   * @return @c true if the kind of this Unit is @c radian, @c false
   * otherwise. 
   */ public
";


%csmethodmodifiers Unit::isSecond() const "
/**
   * Predicate for testing whether this Unit is of the kind @c second
   *
   * @return @c true if the kind of this Unit is @c second, @c false
   * otherwise. 
   */ public
";


%csmethodmodifiers Unit::isSiemens() const "
/**
   * Predicate for testing whether this Unit is of the kind @c siemens
   *
   * @return @c true if the kind of this Unit is @c siemens, @c false
   * otherwise. 
   */ public
";


%csmethodmodifiers Unit::isSievert() const "
/**
   * Predicate for testing whether this Unit is of the kind @c sievert
   *
   * @return @c true if the kind of this Unit is @c sievert, @c false
   * otherwise. 
   */ public
";


%csmethodmodifiers Unit::isSteradian() const "
/**
   * Predicate for testing whether this Unit is of the kind @c steradian
   *
   * @return @c true if the kind of this Unit is @c steradian, @c false
   * otherwise. 
   */ public
";


%csmethodmodifiers Unit::isTesla() const "
/**
   * Predicate for testing whether this Unit is of the kind @c tesla
   *
   * @return @c true if the kind of this Unit is @c tesla, @c false
   * otherwise. 
   */ public
";


%csmethodmodifiers Unit::isVolt() const "
/**
   * Predicate for testing whether this Unit is of the kind @c volt
   *
   * @return @c true if the kind of this Unit is @c volt, @c false
   * otherwise. 
   */ public
";


%csmethodmodifiers Unit::isWatt() const "
/**
   * Predicate for testing whether this Unit is of the kind @c watt
   *
   * @return @c true if the kind of this Unit is @c watt, @c false
   * otherwise. 
   */ public
";


%csmethodmodifiers Unit::isWeber() const "
/**
   * Predicate for testing whether this Unit is of the kind @c weber
   *
   * @return @c true if the kind of this Unit is @c weber, @c false
   * otherwise. 
   */ public
";


%csmethodmodifiers Unit::isSetKind() const "
/**
   * Predicate to test whether the \'kind\' attribute of this Unit is set.
   * 
   * @return @c true if the \'kind\' attribute of this Unit is set, @c
   * false otherwise.
   */ public
";


%csmethodmodifiers Unit::isSetExponent() const "
/**
   * Predicate to test whether the \'exponent\' attribute of this Unit 
   * is set.
   * 
   * @return @c true if the \'exponent\' attribute of this Unit is set, 
   * @c false otherwise.
   */ public
";


%csmethodmodifiers Unit::isSetScale() const "
/**
   * Predicate to test whether the \'scale\' attribute of this Unit 
   * is set.
   * 
   * @return @c true if the \'scale\' attribute of this Unit is set, 
   * @c false otherwise.
   */ public
";


%csmethodmodifiers Unit::isSetMultiplier() const "
/**
   * Predicate to test whether the \'multiplier\' attribute of this Unit 
   * is set.
   * 
   * @return @c true if the \'multiplier\' attribute of this Unit is set, 
   * @c false otherwise.
   */ public
";


%csmethodmodifiers Unit::setKind(UnitKind_t kind) "
/**
   * Sets the \'kind\' attribute value of this Unit.
   *
   * @if clike
   * @param kind a value from the <a class=\'el\'
   * href=\'#UnitKind_t\'>UnitKind_t</a> enumeration.
   * @endif@if java
   * @param kind a unit identifier chosen from the set of constants whose
   * names begin with <code>UNIT_KIND_</code> in <code><a
   * href=\'libsbmlcs.libsbml.html\'>libsbmlConstants</a></code>.
   * @endif@if python
   * @param kind a unit identifier chosen from the set of constants whose
   * names begin with <code>UNIT_KIND_</code> in @link libsbml libsbml@endlink.
   * @endif
   *
   * @return integer value indicating success/failure of the
   * function. The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers Unit::setExponent(int value) "
/**
   * Sets the \'exponent\' attribute value of this Unit.
   *
   * @param value the integer to which the attribute \'exponent\' should be set
   *
   * @return integer value indicating success/failure of the
   * function. The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers Unit::setExponent(double value) "
/**
   * Sets the \'exponent\' attribute value of this Unit.
   *
   * @param value the double to which the attribute \'exponent\' should be set
   *
   * @return integer value indicating success/failure of the
   * function. The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   */ public
";


%csmethodmodifiers Unit::setScale(int value) "
/**
   * Sets the \'scale\' attribute value of this Unit.
   *
   * @param value the integer to which the attribute \'scale\' should be set
   *
   * @return integer value indicating success/failure of the
   * function. The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   */ public
";


%csmethodmodifiers Unit::setMultiplier(double value) "
/**
   * Sets the \'multipler\' attribute value of this Unit.
   *
   * @param value the floating-point value to which the attribute
   * \'multiplier\' should be set
   *
   * @return integer value indicating success/failure of the
   * function. The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   */ public
";


%csmethodmodifiers Unit::setOffset(double value) "
/**
   * Sets the \'offset\' attribute value of this Unit.
   *
   * @param value the float-point value to which the attribute \'offset\'
   * should set
   *
   * @return integer value indicating success/failure of the
   * function. The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   *
   * * 
 * @warning <span class=\'warning\'>The \'offset\' attribute is only available in
 * SBML Level&nbsp;2 Version&nbsp;1.  This attribute is not present in SBML
 * Level&nbsp;2 Version&nbsp;2 or above.  When producing SBML models using
 * these later specifications, modelers and software tools need to account
 * for units with offsets explicitly.  The %SBML specification document
 * offers a number of suggestions for how to achieve this.  LibSBML methods
 * such as this one related to \'offset\' are retained for compatibility with
 * earlier versions of SBML Level&nbsp;2, but their use is strongly
 * discouraged.</span>
 *
   */ public
";


%csmethodmodifiers Unit::getTypeCode() const "
/**
   * Returns the libSBML type code of this object instance.
   *
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object:
   * @link libsbmlcs.libsbml.SBML_UNIT SBML_UNIT@endlink (default).
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see getPackageName()
   * @see getElementName()
   */ public new
";


%csmethodmodifiers Unit::getElementName() const "
/**
   * Returns the XML element name of this object, which for Unit, is
   * always @c \'unit\'.
   * 
   * @return the name of this element, i.e., @c \'unit\'. 
   */ public new
";


%csmethodmodifiers Unit::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Unit::isBuiltIn(const std::string& name, unsigned int level) "
/**
   * Predicate to test whether a given string is the name of a
   * predefined SBML unit.
   *
   * @param name a string to be tested against the predefined unit names
   *
   * @param level the Level of SBML for which the determination should be
   * made.  This is necessary because there are a few small differences
   * in allowed units between SBML Level&nbsp;1 and Level&nbsp;2.
   * 
   * @return @c true if @p name is one of the five SBML predefined unit
   * identifiers (@c \'substance\', @c \'volume\', @c \'area\', @c \'length\' or @c
   * \'time\'), @c false otherwise.
   *
   * @note The predefined unit identifiers @c \'length\' and @c \'area\' were
   * added in Level&nbsp;2 Version&nbsp;1.
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., Unit), and the
   * other will be a standalone top-level function with the name
   * Unit_isBuiltIn(). They are functionally
   * identical. @endif
   */ public
";


%csmethodmodifiers Unit::isUnitKind(const std::string& name, unsigned int level, unsigned int version) "
/**
   * Predicate to test whether a given string is the name of a valid
   * base unit in SBML (such as @c \'gram\' or @c \'mole\').
   *
   * This method exists because prior to SBML Level&nbsp;2 Version&nbsp;3,
   * an enumeration called @c UnitKind was defined by SBML.  This enumeration
   * was removed in SBML Level&nbsp;2 Version&nbsp;3 and its values were
   * folded into the space of values of a type called @c UnitSId.  This method
   * therefore has less significance in SBML Level&nbsp;2 Version&nbsp;3
   * and Level&nbsp;2 Version&nbsp;4, but remains for backward
   * compatibility and support for reading models in older Versions of
   * Level&nbsp;2.
   *
   * @param name a string to be tested
   * 
   * @param level a long integer representing the SBML specification
   * Level 
   * 
   * @param version a long integer representing the SBML specification
   * Version
   * 
   * @return @c true if name is a valid SBML UnitKind, @c false otherwise
   *
   * @note The allowed unit names differ between SBML Levels&nbsp;1
   * and&nbsp;2 and again slightly between Level&nbsp;2 Versions&nbsp;1
   * and&nbsp;2.
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., Unit), and the
   * other will be a standalone top-level function with the name
   * Unit_isUnitKind(). They are functionally
   * identical. @endif
   */ public
";


%csmethodmodifiers Unit::areIdentical(Unit * unit1, Unit * unit2) "
/** 
   * Predicate returning @c true if two
   * Unit objects are identical.
   *
   * Two Unit objects are considered to be @em identical if they match in
   * all attributes.  (Contrast this to the method areEquivalent(@if java
   * Unit u1, %Unit u2@endif), which compares Unit objects only with respect
   * to certain attributes.)
   *
   * @param unit1 the first Unit object to compare
   * @param unit2 the second Unit object to compare
   *
   * @return @c true if all the attributes of unit1 are identical
   * to the attributes of unit2, @c false otherwise.
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., Unit), and the
   * other will be a standalone top-level function with the name
   * Unit_areIdentical(). They are functionally
   * identical. @endif
   *
   * @see @if clike areEquivalent() @else Unit::areEquivalent(Unit u1, %Unit u2) @endif
   */ public
";


%csmethodmodifiers Unit::areEquivalent(Unit * unit1, Unit * unit2) "
/** 
   * Predicate returning @c true if 
   * Unit objects are equivalent.
   *
   * Two Unit objects are considered to be @em equivalent either if (1) both
   * have a \'kind\' attribute value of @c dimensionless, or (2) their \'kind\',
   * \'exponent\' and (for SBML Level&nbsp;2 Version&nbsp;1) \'offset\'
   * attribute values are equal. (Contrast this to the method
   * areIdentical(@if java Unit u1, %Unit u2@endif), which compares Unit objects with respect to all
   * attributes, not just the \'kind\' and \'exponent\'.)
   *
   * @param unit1 the first Unit object to compare
   * @param unit2 the second Unit object to compare
   *
   * @return @c true if the \'kind\' and \'exponent\' attributes of unit1 are
   * identical to the kind and exponent attributes of unit2, @c false
   * otherwise.
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., Unit), and the
   * other will be a standalone top-level function with the name
   * Unit_areEquivalent(). They are functionally
   * identical. @endif
   * 
   * @see @if clike areIdentical() @else Unit::areIdentical(Unit u1, %Unit u2) @endif
   */ public
";


%csmethodmodifiers Unit::removeScale(Unit * unit) "
/** 
   * Manipulates the attributes of the Unit to express the unit with the 
   * value of the scale attribute reduced to zero.
   *
   * For example, 1 millimetre can be expressed as a Unit with kind=@c
   * \'metre\' multiplier=@c \'1\' scale=@c \'-3\' exponent=@c \'1\'. It can also be
   * expressed as a Unit with kind=@c \'metre\'
   * multiplier=<code>\'0.001\'</code> scale=@c \'0\' exponent=@c \'1\'.
   *
   * @param unit the Unit object to manipulate.
   *
   * @return integer value indicating success/failure of the function.  The
   * possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., Unit), and the
   * other will be a standalone top-level function with the name
   * Unit_removeScale(). They are functionally
   * identical. @endif
   *
   * @see @if clike convertToSI() @else Unit::convertToSI(Unit u) @endif
   * @see @if clike merge() @else Unit::merge(Unit u1, Unit u2) @endif
   */ public
";


%csmethodmodifiers Unit::merge(Unit * unit1, Unit * unit2) "
/** 
   * Merges two Unit objects with the same \'kind\' attribute value into a
   * single Unit.
   * 
   * For example, the following,
   * @verbatim
 <unit kind=\'metre\' exponent=\'2\'/>
 <unit kind=\'metre\' exponent=\'1\'/>
 @endverbatim
   * would be merged to become
   * @verbatim
 <unit kind=\'metre\' exponent=\'3\'/>
 @endverbatim
   *
   * @param unit1 the first Unit object; the result of the operation is
   * left as a new version of this unit, modified in-place.
   * 
   * @param unit2 the second Unit object to merge with the first
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., Unit), and the
   * other will be a standalone top-level function with the name
   * Unit_merge(). They are functionally
   * identical. @endif
   * 
   * @see @if clike convertToSI() @else Unit::convertToSI(Unit u) @endif
   * @see @if clike removeScale() @else Unit::removeScale(Unit u) @endif
   */ public
";


%csmethodmodifiers Unit::convertToSI(const Unit * unit) "
/**
   * Returns a UnitDefinition object containing the given @p unit converted
   * to the appropriate SI unit.
   *
   * This method exists because some units can be expressed in terms of
   * others when the same physical dimension is involved.  For example, one
   * hertz is identical to 1&nbsp;sec<sup>-1</sup>, one litre is equivalent
   * to 1 cubic decametre, and so on.
   *
   * @param unit the Unit object to convert to SI
   *
   * @return a UnitDefinition object containing the SI unit.
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., Unit), and the
   * other will be a standalone top-level function with the name
   * Unit_convertToSI(). They are functionally
   * identical. @endif
   *
   * @see @if clike merge() @else Unit::merge(Unit u1, Unit u2) @endif
   */ public
";


%csmethodmodifiers Unit::hasRequiredAttributes() const "
/**
   * Predicate returning @c true if
   * all the required attributes for this Unit object
   * have been set.
   *
   * @note The required attributes for a Unit object are:
   * @li \'kind\'
   * @li \'exponent\' (required in SBML Level&nbsp;3; optional in Level&nbsp;2)
   * @li \'multiplier\' (required in SBML Level&nbsp;3; optional in Level&nbsp;2)
   * @li \'scale\' (required in SBML Level&nbsp;3; optional in Level&nbsp;2)
   *
   * @return a bool value indicating whether all the required
   * elements for this object have been defined.
   */ public new
";


%csmethodmodifiers Unit::setExponentUnitChecking(double value) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Unit::getExponentUnitChecking "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Unit::getExponentUnitChecking() const "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Unit::isUnitChecking "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Unit::isUnitChecking() const "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Unit::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Unit::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Subclasses should override this method to read values from the given
   * XMLAttributes set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Unit::readL1Attributes(const XMLAttributes& attributes) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Unit::readL2Attributes(const XMLAttributes& attributes) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Unit::readL3Attributes(const XMLAttributes& attributes) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Unit::writeAttributes(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Unit::isL1UnitKind(const std::string& name) "
/**
   * Predicate to test whether a given string is the name of a valid
   * base unit in SBML Level 1 (such as @c \'gram\' or @c \'mole\')
   *
   * @param name a string to be tested
   * 
   * @return @c true if name is a valid SBML UnitKind, @c false otherwise
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Unit::isL2V1UnitKind(const std::string& name) "
/**
   * Predicate to test whether a given string is the name of a valid base
   * unit in SBML Level&nbsp;2 Version&nbsp;1 (such as @c \'gram\' or @c
   * \'mole\')
   *
   * @param name a string to be tested
   * 
   * @return @c true if name is a valid SBML UnitKind, @c false otherwise
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Unit::isL2UnitKind(const std::string& name) "
/**
   * Predicate to test whether a given string is the name of a valid base
   * unit in SBML Level&nbsp;2 Version&nbsp;2, 3 or 4 (such as @c \'gram\' or @c
   * \'mole\')
   *
   * @param name a string to be tested
   * 
   * @return @c true if name is a valid SBML UnitKind, @c false otherwise
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Unit::isL3UnitKind(const std::string& name) "
/**
   * Predicate to test whether a given string is the name of a valid base
   * unit in SBML Level&nbsp;3 Version&nbsp;1 (such as @c \'gram\' or @c
   * \'mole\')
   *
   * @param name a string to be tested
   * 
   * @return @c true if name is a valid SBML UnitKind, @c false otherwise
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Unit::isExplicitlySetExponent() const "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Unit::isExplicitlySetMultiplier() const "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Unit::isExplicitlySetScale() const "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Unit::isExplicitlySetOffset() const "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfUnits::ListOfUnits(unsigned int level, unsigned int version) "
/**
   * Creates a new ListOfUnits object.
   *
   * The object is constructed such that it is valid for the given SBML
   * Level and Version combination.
   *
   * @param level the SBML Level
   * 
   * @param version the Version within the SBML Level
   */ public
";


%csmethodmodifiers ListOfUnits::ListOfUnits(SBMLNamespaces* sbmlns) "
/**
   * Creates a new ListOfUnits object.
   *
   * The object is constructed such that it is valid for the SBML Level and
   * Version combination determined by the SBMLNamespaces object in @p
   * sbmlns.
   *
   * @param sbmlns an SBMLNamespaces object that is used to determine the
   * characteristics of the ListOfUnits object to be created.
   */ public
";


%csmethodmodifiers ListOfUnits::clone() const "
/**
   * Creates and returns a deep copy of this ListOfUnits.
   *
   * @return a (deep) copy of this ListOfUnits.
   */ public new
";


%csmethodmodifiers ListOfUnits::getItemTypeCode() const "
/**
   * Returns the libSBML type code for the objects contained in this ListOf
   * (i.e., Unit objects, if the list is non-empty).
   * 
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for objects contained in this list:
   * @link libsbmlcs.libsbml.SBML_UNIT SBML_UNIT@endlink (default).
   *
   * @see getElementName()
   * @see getPackageName()
   */ public new
";


%csmethodmodifiers ListOfUnits::getElementName() const "
/**
   * Returns the XML element name of this object.
   *
   * For ListOfUnits, the XML element name is @c \'listOfUnits\'.
   * 
   * @return the name of this element, i.e., @c \'listOfUnits\'.
   */ public new
";


%csmethodmodifiers ListOfUnits::get(unsigned int n) "
/**
   * Get a Unit from the ListOfUnits.
   *
   * @param n the index number of the Unit to get.
   * 
   * @return the nth Unit in this ListOfUnits.
   *
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfUnits::get "
/**
   * Get a Unit from the ListOfUnits.
   *
   * @param n the index number of the Unit to get.
   * 
   * @return the nth Unit in this ListOfUnits.
   *
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfUnits::remove(unsigned int n) "
/**
   * Removes the nth item from this ListOfUnits items and returns a pointer to
   * it.
   *
   * The caller owns the returned item and is responsible for deleting it.
   *
   * @param n the index of the item to remove
   *
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfUnits::getElementPosition() const "
/**
   * Get the ordinal position of this element in the containing object
   * (which in this case is the Model object).
   *
   * @return the ordinal position of the element with respect to its
   * siblings, or @c -1 (default) to indicate the position is not significant.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfUnits::createObject(XMLInputStream& stream) "
/**
   * Create a ListOfUnits object corresponding to the next token
   * in the XML input stream.
   * 
   * @return the %SBML object corresponding to next XMLToken in the
   * XMLInputStream, or @c null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%typemap(csimports) UnitDefinition "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Implementation of SBML\'s %UnitDefinition construct.
 *
 * Units of measurement may be supplied in a number of contexts in an SBML
 * model.  The SBML unit definition facility uses two classes of objects,
 * UnitDefinition and Unit.  The approach to defining units in SBML is
 * compositional; for example, <em>meter second<sup> &ndash;2</sup></em> is
 * constructed by combining a Unit object representing <em>meter</em> with
 * another Unit object representing <em>second<sup> &ndash;2</sup></em>.
 * The combination is wrapped inside a UnitDefinition, which provides for
 * assigning an identifier and optional name to the combination.  The
 * identifier can then be referenced from elsewhere in a model.  Thus, the
 * UnitDefinition class is the container, and Unit instances are placed
 * inside UnitDefinition instances.
 *
 * Two points are worth discussing in the context of SBML units.  First,
 * unit declarations in SBML models are @em optional.  The consequence of
 * this is that a model must be numerically self-consistent independently
 * of unit declarations, for the benefit of software tools that cannot
 * interpret or manipulate units.  Unit declarations in SBML are thus more
 * akin to a type of annotation; they can indicate intentions, and can be
 * used by model readers for checking the consistency of the model,
 * labeling simulation output, etc., but any transformations of values
 * implied by different units must be incorporated @em explicitly into a
 * model.
 * 
 * Second, the vast majority of situations that require new SBML unit
 * definitions involve simple multiplicative combinations of base units and
 * factors.  An example is <em>moles per litre per second</em>.  What
 * distinguishes these sorts of unit definitions from more complex ones is
 * that they may be expressed without the use of an additive offset from a
 * zero point.  The use of offsets complicates all unit definition systems,
 * yet in the domain of SBML, the real-life cases requiring offsets are few
 * (and in fact, to the best of our knowledge, only involve temperature).
 * Consequently, the SBML unit system has been consciously designed to
 * simplify implementation of unit support for the most common cases in
 * systems biology.  The cost of this simplification is to require units
 * with offsets to be handled explicitly by the modeler.
 *
 * @section unitdef-summary Summary of the UnitDefinition construct
 *
 * UnitDefinition has two attributes and one subelement.  The two
 * attributes are \'id\' and \'name\', and the subelement is ListOfUnits.
 *
 * The required attribute \'id\' and optional attribute \'name\' are both
 * strings.  The \'id\' attribute is used to give the defined unit a unique
 * identifier by which other parts of an SBML model definition can refer to
 * it.  The \'name\' attribute is intended to be used for giving the unit
 * definition an optional human-readable name.  Please see the <a
 * href=\'#unitdef-id\'>next section</a> for information about the values
 * permitted for \'id\'.
 *
 * A UnitDefinition must contain exactly one ListOfUnits, and this list
 * must contain one or more Unit definitions; see the definitions of these
 * other object classes for more information about them.  The following
 * example illustrates a complete unit definition (when written in XML)
 * when they all the pieces are combined together.  This defines \'mmls\'
 * to be millimoles per litre per second.
 * @verbatim
 <listOfUnitDefinitions>
     <unitDefinition id=\'mmls\'>
         <listOfUnits>
             <unit kind=\'mole\'   scale=\'-3\'/>
             <unit kind=\'litre\'  exponent=\'-1\'/>
             <unit kind=\'second\' exponent=\'-1\'/>
         </listOfUnits>
     </unitDefinition>
 </listOfUnitDefinitions>
 @endverbatim
 *
 * @section unitdef-id Special considerations for Unit object identifiers
 *
 * The attribute \'id\' in UnitDefinition cannot be given simply any value,
 * and the precise details of the values permitted differ slightly between
 * Levels of SBML:
 * <ul>
 *
 * <li> The \'id\' of a UnitDefinition must @em not contain a value from the
 * list of SBML\'s predefined base unit names (i.e., the strings @c gram, @c
 * litre, etc.).  In SBML Level&nbsp;3, this list consists of the
 * following:
 * 
 * *
 * 
<table border=\'0\' class=\'centered text-table width80 normal-font code\'
       style=\'border: none !important\'>
<tr>
<td>ampere</td><td>farad</td><td>joule</td><td>lux</td><td>radian</td><td>volt</td>
</tr>
<tr>
<td>avogadro</td><td>gram</td><td>katal</td><td>metre</td><td>second</td><td>watt</td>
</tr>
<tr>
<td>becquerel</td><td>gray</td><td>kelvin</td><td>mole</td><td>siemens</td><td>weber</td>
</tr>
<tr>
<td>candela</td><td>henry</td><td>kilogram</td><td>newton</td><td>sievert</td>
</tr>
<tr>
<td>coulomb</td><td>hertz</td><td>litre</td><td>ohm</td><td>steradian</td>
</tr>
<tr>
<td>dimensionless</td><td>item</td><td>lumen</td><td>pascal</td><td>tesla</td>
</tr>
</table>
 *
 *
 *
 * This list of predefined base units is nearly identical in SBML
 * Level&nbsp;2 Version&nbsp;4, the exception being that Level&nbsp;2 does
 * not define @c avogadro.  SBML Level&nbsp;2 Version&nbsp;1 (and @em only
 * this Level+Version combination) provides an additional predefined unit
 * name, @c Celsius, not available in Level&nbsp;3.  Finally, SBML
 * Level&nbsp;1 Versions&nbsp;2&ndash;3 provide two more additional
 * predefined unit names, @c meter and @c liter.  This is explained in
 * somewhat greater detail in the description of the Unit class.
 *
 * <li> In SBML Level&nbsp;2 (all Versions), there is an additional set of
 * reserved identifiers: @c substance, @c volume, @c area, @c length, and
 * @c time.  Using one of these values for the attribute \'id\' of a
 * UnitDefinition has the effect of redefining the model-wide default units
 * for the corresponding quantities.  The list of special unit names in
 * SBML Level&nbsp;2 is given in the table below:
 *
 *   @htmlinclude predefined-units.html
 *
 * Also, SBML Level&nbsp;2 imposes two limitations on redefining the
 * predefined unit @c substance, @c volume, @c area, @c length, and @c
 * time: (1) The UnitDefinition of a predefined SBML unit can only contain
 * a single Unit object within it.  (2) The value of the \'kind\' attribute
 * in a Unit instance must be drawn from one of the values in the second
 * column of the table above.
 *
 * The special unit names @c substance, @c volume, @c area, @c length, and
 * @c time are not defined by SBML Level&nbsp;3, which uses a different
 * approach to setting model-wide inherited units.
 *
 * </ul>
 * 
 *
 * @section sbml-units-limits Further comments about SBML\'s unit definition system
 * 
 * The vast majority of modeling situations requiring new SBML unit
 * definitions involve simple multiplicative combinations of base units and
 * factors.  An example of this might be <em>moles per litre per
 * second</em>.  What distinguishes these sorts of simpler unit definitions
 * from more complex ones is that they may be expressed without the use of
 * an additive offset from a zero point.  The use of offsets complicates
 * all unit definition systems, yet in the domain of SBML the real-life
 * cases requiring offsets are few (and in fact, to the best of our
 * knowledge, only involve temperature).  Consequently, the SBML unit
 * system has been consciously designed in a way that attempts to simplify
 * implementation of unit support for the most common cases in systems
 * biology.
 *
 * As of SBML Level&nbsp;2 Version&nbsp;2, Unit no longer has the
 * attribute called \'offset\' introduced in SBML Level&nbsp;2
 * Version&nbsp;1.  It turned out that the general case involving units
 * with offsets was incorrectly defined, and few (if any) developers even
 * attempted to support offset-based units in their software.  In the
 * development of Level&nbsp;2 Version&nbsp;2, a consensus among SBML
 * developers emerged that a fully generalized unit scheme is @em so
 * confusing and complicated that it actually @em impedes interoperability.
 * SBML Level&nbsp;2 Version&nbsp;2, Version&nbsp;3 and Version&nbsp;4 acknowledge this
 * reality by reducing and simplifying the unit system, specifically by
 * removing the \'offset\' attribute on Unit and @c Celsius as a pre-defined
 * unit.
 *
 * The following guidelines suggest methods for handling units that do
 * require the use of zero offsets for their definitions:
 * <ul>
 * <li> <em>Handling Celsius</em>.  A model in which certain quantities are
 *   temperatures measured in degrees Celsius can be converted
 *   straightforwardly to a model in which those temperatures are in
 *   kelvin.  A software tool could do this by performing a straightforward
 *   substitution using the following relationship: <em>T<sub> kelvin</sub> =
 *   T<sub>Celsius</sub> + 273.15</em>.  In every mathematical formula of the
 *   model where a quantity (call it @em x) in degrees Celsius appears,
 *   replace @em x with <em>x<sub>k</sub>+ 273.15</em>, where
 *   <em>x<sub>k</sub></em> is now in kelvin.  An alternative approach would 
 *   be to use a FunctionDefinition object to define a function encapsulating this
 *   relationship above and then using that in the rest of the model as
 *   needed.  Since Celsius is a commonly-used unit, software tools could
 *   help users by providing users with the ability to express temperatures
 *   in Celsius in the tools\' interfaces, and making substitutions
 *   automatically when writing out the SBML.
 *
 * <li> <em>Other units requiring offsets</em>.  One approach to handling
 *   other kinds of units is to use a FunctionDefinition to define a function
 *   encapsulating the necessary mathematical relationship, then
 *   substituting a call to this function wherever the original quantity
 *   appeared in the model.  For example, here is a possible definition for
 *   converting Fahrenheit to Celsius degrees:
 *   @verbatim
 <functionDefinition id=\'Fahrenheit_to_kelvin\'>
     <math xmlns=\'http://www.w3.org/1998/Math/MathML\'>
         <lambda>
             <bvar><ci> temp_in_fahrenheit </ci></bvar>
             <apply>
                 <divide/>
                 <apply>
                     <plus/>
                     <ci> temp_in_fahrenheit </ci>
                     <cn> 459.67 </cn>
                 </apply>
                 <cn> 1.8 </cn>
             </apply>
         </lambda>
     </math>
 </functionDefinition>
 @endverbatim
 *     
 * <li> An alternative approach not requiring the use of function definitions
 *   is to use an AssignmentRule for each variable in Fahrenheit units.
 *   The AssignmentRule could compute the conversion from Fahrenheit to
 *   (say) kelvin, assign its value to a variable (in Kelvin units), and
 *   then that variable could be used elsewhere in the model.
 *
 * <li> Still another approach is to rewrite the mathematical formulas of a
 *   model to directly incorporate the conversion formula wherever the
 *   original quantity appeared.
 * </ul>
 * 
 * Please consult the SBML specifications for more information about this
 * and other issues involving units.
 *  
 * 
 */
"


%typemap(csimports) ListOfUnitDefinitions "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Implementation of SBML\'s %ListOfUnitDefinitions
 * construct.
 * 
 * *
 * 
 * The various ListOf___ classes in SBML are merely containers used for
 * organizing the main components of an SBML model.  All are derived from
 * the abstract class SBase, and inherit the various attributes and
 * subelements of SBase, such as \'metaid\' as and \'annotation\'.  The
 * ListOf___ classes do not add any attributes of their own.
 *
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 *
 * @htmlinclude listof-illustration.html
 *
 * Readers may wonder about the motivations for using the ListOf___
 * containers.  A simpler approach in XML might be to place the components
 * all directly at the top level of the model definition.  The choice made
 * in SBML is to group them within XML elements named after
 * ListOf<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from SBase means that software tools can add information @em about
 * the lists themselves into each list container\'s \'annotation\'.
 * 
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 *
 *
 */
"


%csmethodmodifiers UnitDefinition::UnitDefinition(unsigned int level, unsigned int version) "
/**
   * Creates a new UnitDefinition using the given SBML @p level and @p version
   * values.
   *
   * @param level a long integer, the SBML Level to assign to this UnitDefinition
   *
   * @param version a long integer, the SBML Version to assign to this
   * UnitDefinition
   *
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the given @p level and @p version combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent SBMLDocument object.
   *
   * * 
 * @note Upon the addition of a UnitDefinition object to an SBMLDocument
 * (e.g., using Model::addUnitDefinition(@if java UnitDefinition ud@endif)), the SBML Level, SBML Version
 * and XML namespace of the document @em override the values used
 * when creating the UnitDefinition object via this constructor.  This is
 * necessary to ensure that an SBML document is a consistent structure.
 * Nevertheless, the ability to supply the values at the time of creation
 * of a UnitDefinition is an important aid to producing valid SBML.
 * Knowledge of the intented SBML Level and Version determine whether it
 * is valid to assign a particular value to an attribute, or whether it
 * is valid to add an object to an existing SBMLDocument.
 *
   */ public
";


%csmethodmodifiers UnitDefinition::UnitDefinition(SBMLNamespaces* sbmlns) "
/**
   * Creates a new UnitDefinition using the given SBMLNamespaces object
   * @p sbmlns.
   *
   * *
 *  
 * The SBMLNamespaces object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML\'s SBMLNamespaces facilities is to create an
 * SBMLNamespaces object somewhere in a program once, then hand that object
 * as needed to object constructors that accept SBMLNamespaces as arguments.
 *
 * 
   *
   * @param sbmlns an SBMLNamespaces object.
   *
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the given @p level and @p version combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent SBMLDocument object.
   *
   * * 
 * @note Upon the addition of a UnitDefinition object to an SBMLDocument
 * (e.g., using Model::addUnitDefinition(@if java UnitDefinition ud@endif)), the SBML Level, SBML Version
 * and XML namespace of the document @em override the values used
 * when creating the UnitDefinition object via this constructor.  This is
 * necessary to ensure that an SBML document is a consistent structure.
 * Nevertheless, the ability to supply the values at the time of creation
 * of a UnitDefinition is an important aid to producing valid SBML.
 * Knowledge of the intented SBML Level and Version determine whether it
 * is valid to assign a particular value to an attribute, or whether it
 * is valid to add an object to an existing SBMLDocument.
 *
   */ public
";


%csmethodmodifiers UnitDefinition::UnitDefinition(const UnitDefinition& orig) "
/**
   * Copy constructor; creates a copy of this UnitDefinition.
   *
   * @param orig the object to copy.
   * 
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the argument @p orig is @c null.
   */ public
";


%csmethodmodifiers UnitDefinition::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor for this instance of UnitDefinition.
   *
   * @param v the SBMLVisitor instance to be used.
   *
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether the Visitor would like to visit the next UnitDefinition in the
   * list of units within which this UnitDefinition is embedded (i.e., in
   * the ListOfUnitDefinitions located in the enclosing Model instance).
   */ public
";


%csmethodmodifiers UnitDefinition::clone() const "
/**
   * Creates and returns a deep copy of this UnitDefinition.
   * 
   * @return a (deep) copy of this UnitDefinition.
   */ public new
";


%csmethodmodifiers UnitDefinition::getElementBySId(const std::string& id) "
/**
   * Returns the first child element found that has the given @p id in the
   * model-wide SId namespace, or @c null if no such object is found.
   *
   * @param id string representing the id of objects to find.
   *
   * @return pointer to the first element found with the given @p id.
   */ public
";


%csmethodmodifiers UnitDefinition::getElementByMetaId(const std::string& metaid) "
/**
   * Returns the first child element it can find with the given @p metaid, or
   * @c null if no such object is found.
   *
   * @param metaid string representing the metaid of objects to find
   *
   * @return pointer to the first element found with the given @p metaid.
   */ public
";


%csmethodmodifiers UnitDefinition::getAllElements(ElementFilter* filter=NULL) "
/**
   * Returns a List of all child SBase objects, including those nested to an
   * arbitrary depth
   *
   * @return a List of pointers to all children objects.
   */ public
";


%csmethodmodifiers UnitDefinition::getId() const "
/**
   * Returns the value of the \'id\' attribute of this UnitDefinition.
   * 
   * @return the id of this UnitDefinition.
   */ public new
";


%csmethodmodifiers UnitDefinition::getName() const "
/**
   * Returns the value of the \'name\' attribute of this UnitDefinition.
   * 
   * @return the name of this UnitDefinition.
   */ public new
";


%csmethodmodifiers UnitDefinition::isSetId() const "
/**
   * Predicate returning @c true if this
   * UnitDefinition\'s \'id\' attribute is set.
   *
   * @return @c true if the \'id\' attribute of this UnitDefinition is
   * set, @c false otherwise.
   */ public new
";


%csmethodmodifiers UnitDefinition::isSetName() const "
/**
   * Predicate returning @c true if this
   * UnitDefinition\'s \'name\' attribute is set.
   *
   * @return @c true if the \'name\' attribute of this UnitDefinition is
   * set, @c false otherwise.
   */ public new
";


%csmethodmodifiers UnitDefinition::setId(const std::string& sid) "
/**
   * Sets the value of the \'id\' attribute of this UnitDefinition.
   *
   * The string @p sid is copied.
   *
   * *
 * 
 * SBML has strict requirements for the syntax of identifiers, that is, the
 * values of the \'id\' attribute present on most types of SBML objects.
 * The following is a summary of the definition of the SBML identifier type 
 * <code>SId</code>, which defines the permitted syntax of identifiers.  We
 * express the syntax using an extended form of BNF notation: 
 * <pre style=\'margin-left: 2em; border: none; font-weight: bold; font-size: 13px; color: black\'>
 * letter ::= \'a\'..\'z\',\'A\'..\'Z\'
 * digit  ::= \'0\'..\'9\'
 * idChar ::= letter | digit | \'_\'
 * SId    ::= ( letter | \'_\' ) idChar*
 * </pre>
 * The characters <code>(</code> and <code>)</code> are used for grouping, the
 * character <code>*</code> \'zero or more times\', and the character
 * <code>|</code> indicates logical \'or\'.  The equality of SBML identifiers is
 * determined by an exact character sequence match; i.e., comparisons must be
 * performed in a case-sensitive manner.  In addition, there are a few
 * conditions for the uniqueness of identifiers in an SBML model.  Please
 * consult the SBML specifications for the exact details of the uniqueness
 * requirements.
 * 
 *
   *
   * @param sid the string to use as the identifier of this UnitDefinition
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public new
";


%csmethodmodifiers UnitDefinition::setName(const std::string& name) "
/**
   * Sets the value of the \'name\' attribute of this UnitDefinition.
   *
   * The string in @p name is copied.
   *
   * @param name the new name for the UnitDefinition
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public new
";


%csmethodmodifiers UnitDefinition::unsetName "
/**
   * Unsets the value of the \'name\' attribute of this UnitDefinition.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public new
";


%csmethodmodifiers UnitDefinition::isVariantOfArea() const "
/**
   * Convenience function for testing if a given unit definition is a
   * variant of the predefined unit identifier @c \'area\'.
   *
   * @return @c true if this UnitDefinition is a variant of the predefined
   * unit @c area, meaning square metres with only abritrary variations
   * in scale or multiplier values; @c false otherwise.
   */ public
";


%csmethodmodifiers UnitDefinition::isVariantOfLength() const "
/**
   * Convenience function for testing if a given unit definition is a
   * variant of the predefined unit identifier @c \'length\'.
   *
   * @return @c true if this UnitDefinition is a variant of the predefined
   * unit @c length, meaning metres with only abritrary variations in scale
   * or multiplier values; @c false otherwise.
   */ public
";


%csmethodmodifiers UnitDefinition::isVariantOfSubstance() const "
/**
   * Convenience function for testing if a given unit definition is a
   * variant of the predefined unit identifier @c \'substance\'.
   *
   * @return @c true if this UnitDefinition is a variant of the predefined
   * unit @c substance, meaning moles or items (and grams or kilograms from
   * SBML Level&nbsp;2 Version&nbsp;2 onwards) with only abritrary variations
   * in scale or multiplier values; @c false otherwise.
   */ public
";


%csmethodmodifiers UnitDefinition::isVariantOfTime() const "
/**
   * Convenience function for testing if a given unit definition is a
   * variant of the predefined unit identifier @c \'time\'.
   *
   * @return @c true if this UnitDefinition is a variant of the predefined
   * unit @c time, meaning seconds with only abritrary variations in scale or
   * multiplier values; @c false otherwise.
   */ public
";


%csmethodmodifiers UnitDefinition::isVariantOfVolume() const "
/**
   * Convenience function for testing if a given unit definition is a
   * variant of the predefined unit identifier @c \'volume\'.
   *
   * @return @c true if this UnitDefinition is a variant of the predefined
   * unit @c volume, meaning litre or cubic metre with only abritrary
   * variations in scale or multiplier values; @c false otherwise.
   */ public
";


%csmethodmodifiers UnitDefinition::isVariantOfDimensionless() const "
/**
   * Convenience function for testing if a given unit definition is a
   * variant of the unit @c \'dimensionless\'.
   *
   * @return @c true if this UnitDefinition is a variant of @c
   * dimensionless, meaning dimensionless with only abritrary variations in
   * scale or multiplier values; @c false otherwise.
   */ public
";


%csmethodmodifiers UnitDefinition::isVariantOfMass() const "
/**
   * Convenience function for testing if a given unit definition is a
   * variant of the predefined unit identifier @c \'mass\'.
   *
   * @return @c true if this UnitDefinition is a variant of mass units,
   * meaning gram or kilogram with only abritrary variations in scale or
   * multiplier values; @c false otherwise.
   */ public
";


%csmethodmodifiers UnitDefinition::isVariantOfSubstancePerTime() const "
/**
   * Convenience function for testing if a given unit definition is a
   * variant of the predefined unit @c \'substance\' divided by the predefined
   * unit @c \'time\'.
   *
   * @return @c true if this UnitDefinition is a variant of the predefined
   * unit @c substance per predefined unit @c time, meaning it contains two
   * units one of which is a variant of substance and the other is a
   * variant of time which an exponent of -1; @c false otherwise.
   */ public
";


%csmethodmodifiers UnitDefinition::addUnit(const Unit* u) "
/**
   * Adds a copy of the given Unit to this UnitDefinition.
   *
   * @param u the Unit instance to add to this UnitDefinition.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   * 
   * * 
 * @note This method should be used with some caution.  The fact that this
 * method @em copies the object passed to it means that the caller will be
 * left holding a physically different object instance than the one contained
 * inside this object.  Changes made to the original object instance (such as
 * resetting attribute values) will <em>not affect the instance in this
 * object</em>.  In addition, the caller should make sure to free the
 * original object if it is no longer being used, or else a memory leak will
 * result.  Please see other methods on this class (particularly a
 * corresponding method whose name begins with the word <code>create</code>)
 * for alternatives that do not lead to these issues.
 *
 * 
   *
   * @see createUnit()
   */ public
";


%csmethodmodifiers UnitDefinition::createUnit "
/**
   * Creates a new and empty Unit, adds it to this UnitDefinition\'s list of
   * units, and returns it.
   *
   * @return a newly constructed (and empty) Unit instance.
   * 
   * @note It is worth emphasizing that the attribute \'kind\' value of a
   * Unit is a required attribute for a valid Unit definition.  The
   * createUnit() method does not assign a valid kind to the constructed
   * unit (instead, it sets the \'kind\' to @link libsbmlcs.libsbml.UNIT_KIND_INVALID UNIT_KIND_INVALID@endlink).
   * Callers are cautioned to set the newly-constructed Unit\'s kind using
   * Unit::setKind(@if java int kind@endif) soon after calling this method.
   *
   * @see addUnit(Unit u)
   */ public
";


%csmethodmodifiers UnitDefinition::getListOfUnits() const "
/**
   * Returns the list of Units for this UnitDefinition instance.
   * @return the ListOfUnits value for this UnitDefinition.
   */ public
";


%csmethodmodifiers UnitDefinition::getListOfUnits "
/**
   * Returns the list of Units for this UnitDefinition instance.
   * @return the ListOfUnits value for this UnitDefinition.
   */ public
";


%csmethodmodifiers UnitDefinition::getUnit(unsigned int n) "
/**
   * Returns a specific Unit instance belonging to this UnitDefinition.
   *
   * @param n an integer, the index of the Unit to be returned.
   * 
   * @return the nth Unit of this UnitDefinition.
   *
   * @see getNumUnits()
   */ public
";


%csmethodmodifiers UnitDefinition::getUnit "
/**
   * Returns a specific Unit instance belonging to this UnitDefinition.
   *
   * @param n an integer, the index of the Unit to be returned.
   * 
   * @return the nth Unit of this UnitDefinition.
   */ public
";


%csmethodmodifiers UnitDefinition::getNumUnits() const "
/**
   * Returns the number of Unit objects contained within this
   * UnitDefinition.
   * 
   * @return an integer representing the number of Units in this
   * UnitDefinition.
   */ public
";


%csmethodmodifiers UnitDefinition::removeUnit(unsigned int n) "
/**
   * Removes the nth Unit object from this UnitDefinition object and
   * returns a pointer to it.
   *
   * The caller owns the returned object and is responsible for deleting it.
   *
   * @param n the index of the Unit object to remove
   *
   * @return the Unit object removed, or @c null if the given index 
   * is out of range.
   *
   */ public
";


%csmethodmodifiers UnitDefinition::setSBMLDocument(SBMLDocument* d) "
/**
   * Sets the parent SBMLDocument of this SBML object.
   *
   * @param d the SBMLDocument to use
   */ /* libsbml-internal */ public
";


%csmethodmodifiers UnitDefinition::connectToChild "
/**
   * Sets this SBML object to child SBML objects (if any).
   * (Creates a child-parent relationship by the parent)
   *
   * Subclasses must override this function if they define
   * one ore more child elements.
   * Basically, this function needs to be called in
   * constructor, copy constructor and assignment operator.
   *
   * @see setSBMLDocument
   * @see enablePackageInternal
   */ /* libsbml-internal */ public new
";


%csmethodmodifiers UnitDefinition::enablePackageInternal(const std::string& pkgURI, const std::string& pkgPrefix, bool flag) "
/**
   * Enables/Disables the given package with this element and child
   * elements (if any).
   * (This is an internal implementation for enablePackage function)
   *
   * @note Subclasses of the SBML Core package in which one or more child
   * elements are defined must override this function.
   */ /* libsbml-internal */ public new
";


%csmethodmodifiers UnitDefinition::getTypeCode() const "
/**
   * Returns the libSBML type code for this object instance.
   * 
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object:
   * @link libsbmlcs.libsbml.SBML_UNIT_DEFINITION SBML_UNIT_DEFINITION@endlink (default).
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see getPackageName()
   * @see getElementName()
   */ public new
";


%csmethodmodifiers UnitDefinition::getElementName() const "
/**
   * Returns the XML element name of this object, which for UnitDefinition,
   * is always @c \'unitDefinition\'.
   * 
   * @return the name of this element, i.e., @c \'unitDefinition\'.
   */ public new
";


%csmethodmodifiers UnitDefinition::simplify(UnitDefinition * ud) "
/** 
   * Simplifies the UnitDefinition such that any given kind of Unit object
   * occurs only once in the ListOfUnits.
   *
   * For example, the following definition,
   * @verbatim
 <unitDefinition>
  <listOfUnits>
    <unit kind=\'metre\' exponent=\'1\'/>
    <unit kind=\'metre\' exponent=\'2\'/>
  </listOfUnits>
 <unitDefinition>
 @endverbatim
   * will be simplified to 
   * @verbatim
 <unitDefinition>
   <listOfUnits>
     <unit kind=\'metre\' exponent=\'3\'/>
   </listOfUnits>
 <unitDefinition>
 @endverbatim
   *
   * @param ud the UnitDefinition object to be simplified.
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., UnitDefinition), and the
   * other will be a standalone top-level function with the name
   * UnitDefinition_simplify(). They are functionally identical. @endif
   */ public
";


%csmethodmodifiers UnitDefinition::reorder(UnitDefinition * ud) "
/** 
   * Alphabetically orders the Unit objects within the ListOfUnits of a
   * UnitDefinition.
   *
   * @param ud the UnitDefinition object whose units are to be reordered.
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., UnitDefinition), and the
   * other will be a standalone top-level function with the name
   * UnitDefinition_reorder(). They are functionally identical. @endif
   */ public
";


%csmethodmodifiers UnitDefinition::convertToSI(const UnitDefinition *ud) "
/**
   * Convert a given UnitDefinition into a new UnitDefinition object
   * that uses SI units.
   * 
   * @param ud the UnitDefinition object to convert to SI
   *
   * @return a new UnitDefinition object representing the results of the
   * conversion.
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., UnitDefinition), and the
   * other will be a standalone top-level function with the name
   * UnitDefinition_convertToSI(). They are functionally identical. @endif
   */ public
";


%csmethodmodifiers UnitDefinition::areIdentical(const UnitDefinition * ud1, const UnitDefinition * ud2) "
/** 
   * Predicate returning @c true if two
   * UnitDefinition objects are identical.
   *
   * For the purposes of performing this comparison, two UnitDefinition
   * objects are considered identical when they contain identical lists of
   * Unit objects.  Pairs of Unit objects in the lists are in turn
   * considered identical if they satisfy the predicate
   * Unit::areIdentical(@if java Unit u1, %Unit u2@endif).
   * The predicate compares every attribute of the
   * Unit objects.
   *
   * @param ud1 the first UnitDefinition object to compare
   * @param ud2 the second UnitDefinition object to compare
   *
   * @return @c true if all the Unit objects in ud1 are identical to the
   * Unit objects of ud2, @c false otherwise.
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., UnitDefinition), and the
   * other will be a standalone top-level function with the name
   * UnitDefinition_areIdentical(). They are functionally identical. @endif
   *
   * @see UnitDefinition::areEquivalent(UnitDefinition  ud1, %UnitDefinition  ud2)
   * @see Unit::areIdentical(Unit  unit1, %Unit  unit2)
   */ public
";


%csmethodmodifiers UnitDefinition::areEquivalent(const UnitDefinition *ud1 , const UnitDefinition * ud2) "
/** 
   * Predicate returning @c true if two
   * UnitDefinition objects are equivalent.
   *
   * For the purposes of performing this comparison, two UnitDefinition
   * objects are considered equivalent when they contain @em equivalent
   * list of Unit objects.  Unit objects are in turn considered equivalent
   * if they satisfy the predicate
   * Unit::areEquivalent(@if java Unit u1, %Unit u2@endif).
   * The predicate tests a subset of the objects\'s attributes.
   *
   * @param ud1 the first UnitDefinition object to compare
   * 
   * @param ud2 the second UnitDefinition object to compare
   *
   * @return @c true if all the Unit objects in ud1 are equivalent
   * to the Unit objects in ud2, @c false otherwise.
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., UnitDefinition), and the
   * other will be a standalone top-level function with the name
   * UnitDefinition_areEquivalent(). They are functionally identical. @endif
   *
   * @see UnitDefinition::areIdentical(UnitDefinition  ud1, %UnitDefinition  ud2)
   * @see Unit::areEquivalent(Unit  unit1, %Unit  unit2)
   */ public
";


%csmethodmodifiers UnitDefinition::areIdenticalSIUnits(const UnitDefinition * ud1, const UnitDefinition * ud2) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers UnitDefinition::combine(UnitDefinition * ud1, UnitDefinition * ud2) "
/** 
   * Combines two UnitDefinition objects into a single UnitDefinition.
   *
   * This takes UnitDefinition objects @p ud1 and @p ud2, and creates a
   * UnitDefinition object that expresses the product of the units of @p
   * ud1 and @p ud2.
   *
   * @param ud1 the first UnitDefinition object 
   * @param ud2 the second UnitDefinition object
   *
   * @return a UnitDefinition which represents the product of the 
   * units of the two argument UnitDefinitions.
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., UnitDefinition), and the
   * other will be a standalone top-level function with the name
   * UnitDefinition_combine(). They are functionally identical. @endif
   */ public
";


%csmethodmodifiers UnitDefinition::divide(UnitDefinition * ud1, UnitDefinition * ud2) "
/** 
   * Combines two UnitDefinition objects into a single UnitDefinition as
   * a division.
   *
   * This takes UnitDefinition objects @p ud1 and @p ud2, and creates a
   * UnitDefinition object that expresses the division of the units of @p
   * ud1 and @p ud2.
   *
   * @param ud1 the first UnitDefinition object 
   * @param ud2 the second UnitDefinition object
   *
   * @return a UnitDefinition which represents the division of the 
   * units of the two argument UnitDefinitions.
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., UnitDefinition), and the
   * other will be a standalone top-level function with the name
   * UnitDefinition_combine(). They are functionally identical. @endif
   */ public
";


%csmethodmodifiers UnitDefinition::printUnits(const UnitDefinition * ud, bool compact = false) "
/** 
   * Expresses the given definition in a plain-text form.
   *
   * For example,
   * UnitDefinition::printUnits(@if java UnitDefinition u@endif)
   * applied to
   * @verbatim
 <unitDefinition>
  <listOfUnits>
    <unit kind=\'metre\' exponent=\'1\'/>
    <unit kind=\'second\' exponent=\'-2\'/>
  </listOfUnits>
 <unitDefinition>
 @endverbatim
   * will return the string <code>\'metre (exponent = 1, multiplier = 1,
   * scale = 0) second (exponent = -2, multiplier = 1, scale = 0)\'</code>
   * or, if the optional parameter @p compact is given the value @c true,
   * the string <code>\'(1 metre)^1 (1 second)^-2\'</code>.  This method may
   * be useful for printing unit information to human users, or in
   * debugging software, or other situations.
   *
   * @param ud the UnitDefinition object
   * @param compact bool indicating whether the compact form
   * should be used (defaults to false)
   *
   * @return a string expressing the unit definition defined by the given
   * UnitDefinition object @p ud.
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., UnitDefinition), and the
   * other will be a standalone top-level function with the name
   * UnitDefinition_printUnits(). They are functionally identical. @endif
   */ public
";


%csmethodmodifiers UnitDefinition::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers UnitDefinition::hasRequiredAttributes() const "
/**
   * Predicate returning @c true if
   * all the required attributes for this UnitDefinition object
   * have been set.
   *
   * @note The required attributes for a UnitDefinition object are:
   * @li \'id\'
   *
   * @return a bool value indicating whether all the required
   * attributes for this object have been defined.
   */ public new
";


%csmethodmodifiers UnitDefinition::hasRequiredElements() const "
/**
   * Predicate returning @c true if
   * all the required elements for this UnitDefinition object
   * have been set.
   *
   * @note The required elements for a Constraint object are:
   * @li \'listOfUnits\' (required in SBML Level&nbsp;2 only, optional in Level&nbsp;3)
   *
   * @return a bool value indicating whether all the required
   * elements for this object have been defined.
   */ public new
";


%csmethodmodifiers UnitDefinition::createObject(XMLInputStream& stream) "
/**
   * Create and return a unitDefinition object, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or @c null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers UnitDefinition::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers UnitDefinition::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Subclasses should override this method to read values from the given
   * XMLAttributes set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers UnitDefinition::readL1Attributes(const XMLAttributes& attributes) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers UnitDefinition::readL2Attributes(const XMLAttributes& attributes) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers UnitDefinition::readL3Attributes(const XMLAttributes& attributes) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers UnitDefinition::writeAttributes(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfUnitDefinitions::ListOfUnitDefinitions(unsigned int level, unsigned int version) "
/**
   * Creates a new ListOfUnitDefinitions object.
   *
   * The object is constructed such that it is valid for the given SBML
   * Level and Version combination.
   *
   * @param level the SBML Level
   * 
   * @param version the Version within the SBML Level
   */ public
";


%csmethodmodifiers ListOfUnitDefinitions::ListOfUnitDefinitions(SBMLNamespaces* sbmlns) "
/**
   * Creates a new ListOfUnitDefinitions object.
   *
   * The object is constructed such that it is valid for the SBML Level and
   * Version combination determined by the SBMLNamespaces object in @p
   * sbmlns.
   *
   * @param sbmlns an SBMLNamespaces object that is used to determine the
   * characteristics of the ListOfUnitDefinitions object to be created.
   */ public
";


%csmethodmodifiers ListOfUnitDefinitions::clone() const "
/**
   * Creates and returns a deep copy of this ListOfUnitDefinitions instance.
   *
   * @return a (deep) copy of this ListOfUnitDefinitions.
   */ public new
";


%csmethodmodifiers ListOfUnitDefinitions::getItemTypeCode() const "
/**
   * Returns the libSBML type code for the objects contained in this ListOf
   * (i.e., UnitDefinition objects, if the list is non-empty).
   *
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for objects contained in this list:
   * @link libsbmlcs.libsbml.SBML_UNIT_DEFINITION SBML_UNIT_DEFINITION@endlink (default).
   *
   * @see getElementName()
   * @see getPackageName()
   */ public new
";


%csmethodmodifiers ListOfUnitDefinitions::getElementName() const "
/**
   * Returns the XML element name of this object.
   *
   * For ListOfUnitDefinitions, the XML element name is @c
   * \'listOfUnitDefinitions\'.
   * 
   * @return the name of this element, i.e., @c \'listOfUnitDefinitions\'.
   */ public new
";


%csmethodmodifiers ListOfUnitDefinitions::get(unsigned int n) "
/**
   * Get a UnitDefinition from the ListOfUnitDefinitions.
   *
   * @param n the index number of the UnitDefinition to get.
   * 
   * @return the nth UnitDefinition in this ListOfUnitDefinitions.
   *
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfUnitDefinitions::get "
/**
   * Get a UnitDefinition from the ListOfUnitDefinitions.
   *
   * @param n the index number of the UnitDefinition to get.
   * 
   * @return the nth UnitDefinition in this ListOfUnitDefinitions.
   *
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfUnitDefinitions::get(const std::string& sid) "
/**
   * Get a UnitDefinition from the ListOfUnitDefinitions
   * based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the UnitDefinition to get.
   * 
   * @return UnitDefinition in this ListOfUnitDefinitions
   * with the given @p sid or @c null if no such
   * UnitDefinition exists.
   *
   * @see get(long n)
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfUnitDefinitions::get(const std::string& sid) const "
/**
   * Get a UnitDefinition from the ListOfUnitDefinitions
   * based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the UnitDefinition to get.
   * 
   * @return UnitDefinition in this ListOfUnitDefinitions
   * with the given @p sid or @c null if no such
   * UnitDefinition exists.
   *
   * @see get(long n)
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfUnitDefinitions::getElementBySId(const std::string& id) "
/**
   * Returns the first child element found that has the given @p id in the
   * model-wide SId namespace, or @c null if no such object is found.
   *
   * Note that UnitDefinitions themselves are in the UnitId namespace, not
   * the SId namespace, so no UnitDefinition object will be returned from
   * this function (and is the reason we override the base
   * ListOf::getElementBySId function here).
   *
   * @param id string representing the id of objects to find
   *
   * @return pointer to the first element found with the given @p id.
   */ public
";


%csmethodmodifiers ListOfUnitDefinitions::remove(unsigned int n) "
/**
   * Removes the nth item from this ListOfUnitDefinitions items and returns a pointer to
   * it.
   *
   * The caller owns the returned item and is responsible for deleting it.
   *
   * @param n the index of the item to remove
   *
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfUnitDefinitions::remove(const std::string& sid) "
/**
   * Removes item in this ListOfUnitDefinitions items with the given identifier.
   *
   * The caller owns the returned item and is responsible for deleting it.
   * If none of the items in this list have the identifier @p sid, then @c
   * null is returned.
   *
   * @param sid the identifier of the item to remove
   *
   * @return the item removed.  As mentioned above, the caller owns the
   * returned item.
   */ public new
";


%csmethodmodifiers ListOfUnitDefinitions::getElementPosition() const "
/**
   * Get the ordinal position of this element in the containing object
   * (which in this case is the Model object).
   *
   * The ordering of elements in the XML form of SBML is generally fixed
   * for most components in SBML.  So, for example, the
   * ListOfUnitDefinitions in a model is (in SBML Level&nbsp;2
   * Version&nbsp;4) the second ListOf___.  (However, it differs for
   * different Levels and Versions of SBML.)
   *
   * @return the ordinal position of the element with respect to its
   * siblings, or @c -1 (default) to indicate the position is not significant.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfUnitDefinitions::createObject(XMLInputStream& stream) "
/**
   * Create and return a listOfUnitDefinitions object, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%typemap(csimports) CompartmentType "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Implementation of SBML\'s Level&nbsp;2\'s %CompartmentType
 * construct.
 *
 * SBML Level&nbsp;2 Versions&nbsp;2&ndash;4 provide the <em>compartment
 * type</em> as a grouping construct that can be used to establish a
 * relationship between multiple Compartment objects.  A CompartmentType
 * object only has an identity, and this identity can only be used to
 * indicate that particular Compartment objects in the model belong to this
 * type.  This may be useful for conveying a modeling intention, such as
 * when a model contains many similar compartments, either by their
 * biological function or the reactions they carry.  Without a compartment
 * type construct, it would be impossible within SBML itself to indicate
 * that all of the compartments share an underlying conceptual relationship
 * because each SBML compartment must be given a unique and separate
 * identity.  Compartment types have no mathematical meaning in
 * SBML&mdash;they have no effect on a model\'s mathematical interpretation.
 * Simulators and other numerical analysis software may ignore
 * CompartmentType definitions and references to them in a model.
 * 
 * There is no mechanism in SBML Level 2 for representing hierarchies of
 * compartment types.  One CompartmentType instance cannot be the subtype
 * of another CompartmentType instance; SBML provides no means of defining
 * such relationships.
 * 
 * As with other major structures in SBML, CompartmentType has a mandatory
 * attribute, \'id\', used to give the compartment type an identifier.  The
 * identifier must be a text %string conforming to the identifer syntax
 * permitted in SBML.  CompartmentType also has an optional \'name\'
 * attribute, of type @c string.  The \'id\' and \'name\' must be used
 * according to the guidelines described in the SBML specification (e.g.,
 * Section 3.3 in the Level 2 Version 4 specification).
 *
 * CompartmentType was introduced in SBML Level 2 Version 2.  It is not
 * available in SBML Level&nbsp;1 nor in Level&nbsp;3.
 *
 * @see Compartment
 * @see ListOfCompartmentTypes
 * @see SpeciesType
 * @see ListOfSpeciesTypes
 *
 * 
 * 
 */
"


%typemap(csimports) ListOfCompartmentTypes "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Implementation of SBML\'s %ListOfCompartmentTypes
 * construct.
 * 
 * *
 * 
 * The various ListOf___ classes in SBML are merely containers used for
 * organizing the main components of an SBML model.  All are derived from
 * the abstract class SBase, and inherit the various attributes and
 * subelements of SBase, such as \'metaid\' as and \'annotation\'.  The
 * ListOf___ classes do not add any attributes of their own.
 *
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 *
 * @htmlinclude listof-illustration.html
 *
 * Readers may wonder about the motivations for using the ListOf___
 * containers.  A simpler approach in XML might be to place the components
 * all directly at the top level of the model definition.  The choice made
 * in SBML is to group them within XML elements named after
 * ListOf<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from SBase means that software tools can add information @em about
 * the lists themselves into each list container\'s \'annotation\'.
 * 
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 *
 *
 */
"


%csmethodmodifiers CompartmentType::CompartmentType(unsigned int level, unsigned int version) "
/**
   * Creates a new CompartmentType using the given SBML @p level and @p version
   * values.
   *
   * @param level a long integer, the SBML Level to assign to this
   * CompartmentType
   *
   * @param version a long integer, the SBML Version to assign to this
   * CompartmentType
   *
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the given @p level and @p version combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent SBMLDocument object.
   *
   * *
 * @note Upon the addition of a CompartmentType object to an SBMLDocument (e.g.,
 * using Model::addCompartmentType(@if java CompartmentType c@endif)), the SBML
 * Level, SBML Version and XML namespace of the document @em override the
 * values used when creating the CompartmentType object via the CompartmentType
 * constructors.  This is necessary to ensure that an SBML document has a
 * consistent overall structure.  Nevertheless, the ability to supply the
 * values at the time of creation of a CompartmentType is an important aid to
 * producing valid SBML.  Knowledge of the intented SBML Level and Version
 * determine whether it is valid to assign a particular value to an
 * attribute, or whether it is valid to add an object to an existing
 * SBMLDocument.
 *
   */ public
";


%csmethodmodifiers CompartmentType::CompartmentType(SBMLNamespaces* sbmlns) "
/**
   * Creates a new CompartmentType using the given SBMLNamespaces object
   * @p sbmlns.
   *
   * *
 *  
 * The SBMLNamespaces object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML\'s SBMLNamespaces facilities is to create an
 * SBMLNamespaces object somewhere in a program once, then hand that object
 * as needed to object constructors that accept SBMLNamespaces as arguments.
 *
 *
   *
   * It is worth emphasizing that although this constructor does not take an
   * identifier argument, in SBML Level&nbsp;2 and beyond, the \'id\'
   * (identifier) attribute of a CompartmentType is required to have a value.
   * Thus, callers are cautioned to assign a value after calling this
   * constructor.  Setting the identifier can be accomplished using the
   * method setId(@if java String id@endif).
   *
   * @param sbmlns an SBMLNamespaces object.
   *
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the given @p level and @p version combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent SBMLDocument object.
   *
   * *
 * @note Upon the addition of a CompartmentType object to an SBMLDocument (e.g.,
 * using Model::addCompartmentType(@if java CompartmentType c@endif)), the SBML
 * Level, SBML Version and XML namespace of the document @em override the
 * values used when creating the CompartmentType object via the CompartmentType
 * constructors.  This is necessary to ensure that an SBML document has a
 * consistent overall structure.  Nevertheless, the ability to supply the
 * values at the time of creation of a CompartmentType is an important aid to
 * producing valid SBML.  Knowledge of the intented SBML Level and Version
 * determine whether it is valid to assign a particular value to an
 * attribute, or whether it is valid to add an object to an existing
 * SBMLDocument.
 *
   */ public
";


%csmethodmodifiers CompartmentType::CompartmentType(const CompartmentType& orig) "
/**
   * Copy constructor; creates a copy of this CompartmentType.
   *
   * @param orig the object to copy.
   * 
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the argument @p orig is @c null.
   */ public
";


%csmethodmodifiers CompartmentType::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor for this instance of CompartmentType.
   *
   * @param v the SBMLVisitor instance to be used.
   *
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether the Visitor would like to visit the next CompartmentType in
   * the list of compartment types.
   */ public
";


%csmethodmodifiers CompartmentType::clone() const "
/**
   * Creates and returns a deep copy of this CompartmentType.
   * 
   * @return a (deep) copy of this CompartmentType.
   */ public new
";


%csmethodmodifiers CompartmentType::getId() const "
/**
   * Returns the value of the \'id\' attribute of this CompartmentType.
   * 
   * @return the id of this CompartmentType.
   */ public new
";


%csmethodmodifiers CompartmentType::getName() const "
/**
   * Returns the value of the \'name\' attribute of this CompartmentType.
   * 
   * @return the name of this CompartmentType.
   */ public new
";


%csmethodmodifiers CompartmentType::isSetId() const "
/**
   * Predicate returning @c true if this
   * CompartmentType\'s \'id\' attribute is set.
   *
   * @return @c true if the \'id\' attribute of this CompartmentType is
   * set, @c false otherwise.
   */ public new
";


%csmethodmodifiers CompartmentType::isSetName() const "
/**
   * Predicate returning @c true if this
   * CompartmentType\'s \'name\' attribute is set.
   *
   * @return @c true if the \'name\' attribute of this CompartmentType is
   * set, @c false otherwise.
   */ public new
";


%csmethodmodifiers CompartmentType::setId(const std::string& sid) "
/**
   * Sets the value of the \'id\' attribute of this CompartmentType.
   *
   * The string @p sid is copied.
   *
   * *
 * 
 * SBML has strict requirements for the syntax of identifiers, that is, the
 * values of the \'id\' attribute present on most types of SBML objects.
 * The following is a summary of the definition of the SBML identifier type 
 * <code>SId</code>, which defines the permitted syntax of identifiers.  We
 * express the syntax using an extended form of BNF notation: 
 * <pre style=\'margin-left: 2em; border: none; font-weight: bold; font-size: 13px; color: black\'>
 * letter ::= \'a\'..\'z\',\'A\'..\'Z\'
 * digit  ::= \'0\'..\'9\'
 * idChar ::= letter | digit | \'_\'
 * SId    ::= ( letter | \'_\' ) idChar*
 * </pre>
 * The characters <code>(</code> and <code>)</code> are used for grouping, the
 * character <code>*</code> \'zero or more times\', and the character
 * <code>|</code> indicates logical \'or\'.  The equality of SBML identifiers is
 * determined by an exact character sequence match; i.e., comparisons must be
 * performed in a case-sensitive manner.  In addition, there are a few
 * conditions for the uniqueness of identifiers in an SBML model.  Please
 * consult the SBML specifications for the exact details of the uniqueness
 * requirements.
 * 
 *
   *
   * @param sid the string to use as the identifier of this CompartmentType
   * 
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public new
";


%csmethodmodifiers CompartmentType::setName(const std::string& name) "
/**
   * Sets the value of the \'name\' attribute of this CompartmentType.
   *
   * The string in @p name is copied.
   *
   * @param name the new name for the CompartmentType
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public new
";


%csmethodmodifiers CompartmentType::unsetName "
/**
   * Unsets the value of the \'name\' attribute of this CompartmentType.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public new
";


%csmethodmodifiers CompartmentType::getTypeCode() const "
/**
   * Returns the libSBML type code for this SBML object.
   * 
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object:
   * @link libsbmlcs.libsbml.SBML_COMPARTMENT_TYPE SBML_COMPARTMENT_TYPE@endlink (default).
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see getElementName()
   * @see getPackageName()
   */ public new
";


%csmethodmodifiers CompartmentType::getElementName() const "
/**
   * Returns the XML element name of this object, which for
   * CompartmentType, is always @c \'compartmentType\'.
   * 
   * @return the name of this element, i.e., @c \'compartmentType\'.
   */ public new
";


%csmethodmodifiers CompartmentType::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers CompartmentType::hasRequiredAttributes() const "
/**
   * Predicate returning @c true if
   * all the required attributes for this CompartmentType object
   * have been set.
   *
   * @note The required attributes for a CompartmentType object are:
   * @li \'id\'
   *
   * @return a bool value indicating whether all the required
   * attributes for this object have been defined.
   */ public new
";


%csmethodmodifiers CompartmentType::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers CompartmentType::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Subclasses should override this method to read values from the given
   * XMLAttributes set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   *
   * @param attributes the XMLAttributes to use.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers CompartmentType::readL2Attributes(const XMLAttributes& attributes) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers CompartmentType::writeAttributes(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   *
   * @param stream the XMLOutputStream to use.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfCompartmentTypes::ListOfCompartmentTypes(unsigned int level, unsigned int version) "
/**
   * Creates a new ListOfCompartmentTypes object.
   *
   * The object is constructed such that it is valid for the given SBML
   * Level and Version combination.
   *
   * @param level the SBML Level
   * 
   * @param version the Version within the SBML Level
   */ public
";


%csmethodmodifiers ListOfCompartmentTypes::ListOfCompartmentTypes(SBMLNamespaces* sbmlns) "
/**
   * Creates a new ListOfCompartmentTypes object.
   *
   * The object is constructed such that it is valid for the SBML Level and
   * Version combination determined by the SBMLNamespaces object in @p
   * sbmlns.
   *
   * @param sbmlns an SBMLNamespaces object that is used to determine the
   * characteristics of the ListOfCompartmentTypes object to be created.
   */ public
";


%csmethodmodifiers ListOfCompartmentTypes::clone() const "
/**
   * Creates and returns a deep copy of this ListOfCompartmentTypes instance.
   *
   * @return a (deep) copy of this ListOfCompartmentTypes.
   */ public new
";


%csmethodmodifiers ListOfCompartmentTypes::getItemTypeCode() const "
/**
   * Returns the libSBML type code for the objects contained in this ListOf
   * (i.e., CompartmentType objects, if the list is non-empty).
   *
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   * 
   * @return the SBML type code for the objects contained in this ListOf
   * instance: @link libsbmlcs.libsbml.SBML_COMPARTMENT_TYPE SBML_COMPARTMENT_TYPE@endlink (default).
   *
   * @see getElementName()
   * @see getPackageName()
   */ public new
";


%csmethodmodifiers ListOfCompartmentTypes::getElementName() const "
/**
   * Returns the XML element name of this object.
   *
   * For ListOfCompartmentTypes, the XML element name is @c
   * \'listOfCompartmentTypes\'.
   * 
   * @return the name of this element, i.e., @c \'listOfCompartmentTypes\'.
   */ public new
";


%csmethodmodifiers ListOfCompartmentTypes::get(unsigned int n) "
/**
   * Get a CompartmentType from the ListOfCompartmentTypes.
   *
   * @param n the index number of the CompartmentType to get.
   * 
   * @return the nth CompartmentType in this ListOfCompartmentTypes.
   *
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfCompartmentTypes::get "
/**
   * Get a CompartmentType from the ListOfCompartmentTypes.
   *
   * @param n the index number of the CompartmentType to get.
   * 
   * @return the nth CompartmentType in this ListOfCompartmentTypes.
   *
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfCompartmentTypes::get(const std::string& sid) "
/**
   * Get a CompartmentType from the ListOfCompartmentTypes
   * based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the CompartmentType to get.
   * 
   * @return CompartmentType in this ListOfCompartmentTypes
   * with the given @p sid or @c null if no such
   * CompartmentType exists.
   *
   * @see get(long n)
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfCompartmentTypes::get(const std::string& sid) const "
/**
   * Get a CompartmentType from the ListOfCompartmentTypes
   * based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the CompartmentType to get.
   * 
   * @return CompartmentType in this ListOfCompartmentTypes
   * with the given @p sid or @c null if no such
   * CompartmentType exists.
   *
   * @see get(long n)
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfCompartmentTypes::remove(unsigned int n) "
/**
   * Removes the nth item from this ListOfCompartmentTypes items
   * and returns a pointer to it.
   *
   * The caller owns the returned item and is responsible for deleting it.
   *
   * @param n the index of the item to remove
   *
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfCompartmentTypes::remove(const std::string& sid) "
/**
   * Removes item in this ListOfCompartmentTypes items with the given identifier.
   *
   * The caller owns the returned item and is responsible for deleting it.
   * If none of the items in this list have the identifier @p sid, then @c
   * null is returned.
   *
   * @param sid the identifier of the item to remove
   *
   * @return the item removed.  As mentioned above, the caller owns the
   * returned item.
   */ public new
";


%csmethodmodifiers ListOfCompartmentTypes::getElementPosition() const "
/**
   * Get the ordinal position of this element in the containing object
   * (which in this case is the Model object).
   *
   * The ordering of elements in the XML form of SBML is generally fixed
   * for most components in SBML.  For example, the
   * ListOfCompartmentTypes in a model (in SBML Level 2 Version 4) is the
   * third ListOf___.  (However, it differs for different Levels and
   * Versions of SBML, so calling code should not hardwire this number.)
   *
   * @return the ordinal position of the element with respect to its
   * siblings, or @c -1 (default) to indicate the position is not significant.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfCompartmentTypes::createObject(XMLInputStream& stream) "
/**
   * Create a ListOfCompartmentTypes object corresponding to the next token
   * in the XML input stream.
   * 
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream, or @c null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%typemap(csimports) SpeciesType "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Implementation of SBML Level&nbsp;2\'s %SpeciesType
 * construct.
 *
 * The term @em species @em type refers to reacting entities independent of
 * location.  These include simple ions (e.g., protons, calcium), simple
 * molecules (e.g., glucose, ATP), large molecules (e.g., RNA,
 * polysaccharides, and proteins), and others.
 * 
 * SBML Level&nbsp;2 Versions&nbsp;2&ndash;4 provide an explicit
 * SpeciesType class of object to enable Species objects of the same type
 * to be related together.  SpeciesType is a conceptual construct; the
 * existence of SpeciesType objects in a model has no effect on the model\'s
 * numerical interpretation.  Except for the requirement for uniqueness of
 * species/species type combinations located in compartments, simulators
 * and other numerical analysis software may ignore SpeciesType definitions
 * and references to them in a model.
 * 
 * There is no mechanism in SBML Level 2 for representing hierarchies of
 * species types.  One SpeciesType object cannot be the subtype of another
 * SpeciesType object; SBML provides no means of defining such
 * relationships.
 * 
 * As with other major structures in SBML, SpeciesType has a mandatory
 * attribute, \'id\', used to give the species type an identifier.  The
 * identifier must be a text string conforming to the identifer syntax
 * permitted in SBML.  SpeciesType also has an optional \'name\' attribute,
 * of type @c string.  The \'id\' and \'name\' must be used according to the
 * guidelines described in the SBML specification (e.g., Section 3.3 in
 * the Level&nbsp;2 Version&nbsp;4 specification).
 *
 * SpeciesType was introduced in SBML Level 2 Version 2.  It is not
 * available in SBML Level&nbsp;1 nor in Level&nbsp;3.
 *
 * @see Species
 * @see ListOfSpeciesTypes
 * @see CompartmentType
 * @see ListOfCompartmentTypes
 * 
 * 
 */
"


%typemap(csimports) ListOfSpeciesTypes "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Implementation of SBML\'s %ListOfSpeciesTypes construct.
 *
 * *
 * 
 * The various ListOf___ classes in SBML are merely containers used for
 * organizing the main components of an SBML model.  All are derived from
 * the abstract class SBase, and inherit the various attributes and
 * subelements of SBase, such as \'metaid\' as and \'annotation\'.  The
 * ListOf___ classes do not add any attributes of their own.
 *
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 *
 * @htmlinclude listof-illustration.html
 *
 * Readers may wonder about the motivations for using the ListOf___
 * containers.  A simpler approach in XML might be to place the components
 * all directly at the top level of the model definition.  The choice made
 * in SBML is to group them within XML elements named after
 * ListOf<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from SBase means that software tools can add information @em about
 * the lists themselves into each list container\'s \'annotation\'.
 * 
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 *
 *
 */
"


%csmethodmodifiers SpeciesType::SpeciesType(unsigned int level, unsigned int version) "
/**
   * Creates a new SpeciesType using the given SBML @p level and @p version
   * values.
   *
   * @param level a long integer, the SBML Level to assign to this SpeciesType
   *
   * @param version a long integer, the SBML Version to assign to this
   * SpeciesType
   *
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the given @p level and @p version combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent SBMLDocument object.
   *
   * * 
 * @note Upon the addition of a SpeciesType object to an SBMLDocument
 * (e.g., using Model::addSpeciesType(@if java SpeciesType st@endif)),
 * the SBML Level, SBML Version and XML namespace of the document @em
 * override the values used when creating the SpeciesType object via this
 * constructor.  This is necessary to ensure that an SBML document is a
 * consistent structure.  Nevertheless, the ability to supply the values
 * at the time of creation of a SpeciesType is an important aid to
 * producing valid SBML.  Knowledge of the intented SBML Level and
 * Version determine whether it is valid to assign a particular value to
 * an attribute, or whether it is valid to add an object to an existing
 * SBMLDocument.
 *
   */ public
";


%csmethodmodifiers SpeciesType::SpeciesType(SBMLNamespaces* sbmlns) "
/**
   * Creates a new SpeciesType using the given SBMLNamespaces object
   * @p sbmlns.
   *
   * *
 *  
 * The SBMLNamespaces object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML\'s SBMLNamespaces facilities is to create an
 * SBMLNamespaces object somewhere in a program once, then hand that object
 * as needed to object constructors that accept SBMLNamespaces as arguments.
 *
 * 
   *
   * It is worth emphasizing that although this constructor does not take
   * an identifier argument, in SBML Level&nbsp;2 and beyond, the \'id\'
   * (identifier) attribute of a SpeciesType object is required to have a value.
   * Thus, callers are cautioned to assign a value after calling this
   * constructor.  Setting the identifier can be accomplished using the
   * method SBase::setId(@if java String id@endif).
   *
   * @param sbmlns an SBMLNamespaces object.
   *
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the given @p level and @p version combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent SBMLDocument object.
   *
   * * 
 * @note Upon the addition of a SpeciesType object to an SBMLDocument
 * (e.g., using Model::addSpeciesType(@if java SpeciesType st@endif)),
 * the SBML Level, SBML Version and XML namespace of the document @em
 * override the values used when creating the SpeciesType object via this
 * constructor.  This is necessary to ensure that an SBML document is a
 * consistent structure.  Nevertheless, the ability to supply the values
 * at the time of creation of a SpeciesType is an important aid to
 * producing valid SBML.  Knowledge of the intented SBML Level and
 * Version determine whether it is valid to assign a particular value to
 * an attribute, or whether it is valid to add an object to an existing
 * SBMLDocument.
 *
   */ public
";


%csmethodmodifiers SpeciesType::SpeciesType(const SpeciesType& orig) "
/**
   * Copy constructor; creates a copy of this SpeciesType.
   *
   * @param orig the object to copy.
   * 
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the argument @p orig is @c null.
   */ public
";


%csmethodmodifiers SpeciesType::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor for this instance of SpeciesType.
   *
   * @param v the SBMLVisitor instance to be used.
   *
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether the Visitor would like to visit the next SpeciesType in
   * the list of compartment types.
   */ public
";


%csmethodmodifiers SpeciesType::clone() const "
/**
   * Creates and returns a deep copy of this SpeciesType.
   * 
   * @return a (deep) copy of this SpeciesType.
   */ public new
";


%csmethodmodifiers SpeciesType::getId() const "
/**
   * Returns the value of the \'id\' attribute of this SpeciesType.
   * 
   * @return the id of this SpeciesType.
   */ public new
";


%csmethodmodifiers SpeciesType::getName() const "
/**
   * Returns the value of the \'name\' attribute of this SpeciesType.
   * 
   * @return the name of this SpeciesType.
   */ public new
";


%csmethodmodifiers SpeciesType::isSetId() const "
/**
   * Predicate returning @c true if this
   * SpeciesType\'s \'id\' attribute is set.
   *
   * @return @c true if the \'id\' attribute of this SpeciesType is
   * set, @c false otherwise.
   */ public new
";


%csmethodmodifiers SpeciesType::isSetName() const "
/**
   * Predicate returning @c true if this
   * SpeciesType\'s \'name\' attribute is set.
   *
   * @return @c true if the \'name\' attribute of this SpeciesType is
   * set, @c false otherwise.
   */ public new
";


%csmethodmodifiers SpeciesType::setId(const std::string& sid) "
/**
   * Sets the value of the \'id\' attribute of this SpeciesType.
   *
   * The string @p sid is copied.
   *
   * *
 * 
 * SBML has strict requirements for the syntax of identifiers, that is, the
 * values of the \'id\' attribute present on most types of SBML objects.
 * The following is a summary of the definition of the SBML identifier type 
 * <code>SId</code>, which defines the permitted syntax of identifiers.  We
 * express the syntax using an extended form of BNF notation: 
 * <pre style=\'margin-left: 2em; border: none; font-weight: bold; font-size: 13px; color: black\'>
 * letter ::= \'a\'..\'z\',\'A\'..\'Z\'
 * digit  ::= \'0\'..\'9\'
 * idChar ::= letter | digit | \'_\'
 * SId    ::= ( letter | \'_\' ) idChar*
 * </pre>
 * The characters <code>(</code> and <code>)</code> are used for grouping, the
 * character <code>*</code> \'zero or more times\', and the character
 * <code>|</code> indicates logical \'or\'.  The equality of SBML identifiers is
 * determined by an exact character sequence match; i.e., comparisons must be
 * performed in a case-sensitive manner.  In addition, there are a few
 * conditions for the uniqueness of identifiers in an SBML model.  Please
 * consult the SBML specifications for the exact details of the uniqueness
 * requirements.
 * 
 *
   *
   * @param sid the string to use as the identifier of this SpeciesType
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public new
";


%csmethodmodifiers SpeciesType::setName(const std::string& name) "
/**
   * Sets the value of the \'name\' attribute of this SpeciesType.
   *
   * The string in @p name is copied.
   *
   * @param name the new name for the SpeciesType
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public new
";


%csmethodmodifiers SpeciesType::unsetName "
/**
   * Unsets the value of the \'name\' attribute of this SpeciesType.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public new
";


%csmethodmodifiers SpeciesType::getTypeCode() const "
/**
   * Returns the libSBML type code for this SBML object.
   * 
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object:
   * @link libsbmlcs.libsbml.SBML_SPECIES_TYPE SBML_SPECIES_TYPE@endlink (default).
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see getElementName()
   * @see getPackageName()
   */ public new
";


%csmethodmodifiers SpeciesType::getElementName() const "
/**
   * Returns the XML element name of this object, which for
   * SpeciesType, is always @c \'compartmentType\'.
   * 
   * @return the name of this element, i.e., @c \'compartmentType\'.
   */ public new
";


%csmethodmodifiers SpeciesType::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SpeciesType::hasRequiredAttributes() const "
/**
   * Predicate returning @c true if
   * all the required attributes for this SpeciesType object
   * have been set.
   *
   * @note The required attributes for a SpeciesType object are:
   * @li \'id\'
   *
   * @return a bool value indicating whether all the required
   * attributes for this object have been defined.
   */ public new
";


%csmethodmodifiers SpeciesType::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SpeciesType::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Subclasses should override this method to read values from the given
   * XMLAttributes set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   *
   * @param attributes the XMLAttributes to use.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SpeciesType::readL2Attributes(const XMLAttributes& attributes) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers SpeciesType::writeAttributes(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   *
   * @param stream the XMLOutputStream to use.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfSpeciesTypes::ListOfSpeciesTypes(unsigned int level, unsigned int version) "
/**
   * Creates a new ListOfSpeciesTypes object.
   *
   * The object is constructed such that it is valid for the given SBML
   * Level and Version combination.
   *
   * @param level the SBML Level
   * 
   * @param version the Version within the SBML Level
   */ public
";


%csmethodmodifiers ListOfSpeciesTypes::ListOfSpeciesTypes(SBMLNamespaces* sbmlns) "
/**
   * Creates a new ListOfSpeciesTypes object.
   *
   * The object is constructed such that it is valid for the SBML Level and
   * Version combination determined by the SBMLNamespaces object in @p
   * sbmlns.
   *
   * @param sbmlns an SBMLNamespaces object that is used to determine the
   * characteristics of the ListOfSpeciesTypes object to be created.
   */ public
";


%csmethodmodifiers ListOfSpeciesTypes::clone() const "
/**
   * Creates and returns a deep copy of this ListOfSpeciesTypes instance.
   *
   * @return a (deep) copy of this ListOfSpeciesTypes.
   */ public new
";


%csmethodmodifiers ListOfSpeciesTypes::getItemTypeCode() const "
/**
   * Returns the libSBML type code for the objects contained in this ListOf
   * (i.e., SpeciesType objects, if the list is non-empty).
   *
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for objects contained in this list:
   * @link libsbmlcs.libsbml.SBML_SPECIES_TYPE SBML_SPECIES_TYPE@endlink (default).
   *
   * @see getElementName()
   * @see getPackageName()
   */ public new
";


%csmethodmodifiers ListOfSpeciesTypes::getElementName() const "
/**
   * Returns the XML element name of this object.
   *
   * For ListOfSpeciesTypes, the XML element name is @c
   * \'listOfSpeciesTypes\'.
   * 
   * @return the name of this element, i.e., @c \'listOfSpeciesTypes\'.
   */ public new
";


%csmethodmodifiers ListOfSpeciesTypes::get(unsigned int n) "
/**
   * Get a SpeciesType from the ListOfSpeciesTypes.
   *
   * @param n the index number of the SpeciesType to get.
   * 
   * @return the nth SpeciesType in this ListOfSpeciesTypes.
   *
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfSpeciesTypes::get "
/**
   * Get a SpeciesType from the ListOfSpeciesTypes.
   *
   * @param n the index number of the SpeciesType to get.
   * 
   * @return the nth SpeciesType in this ListOfSpeciesTypes.
   *
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfSpeciesTypes::get(const std::string& sid) "
/**
   * Get a SpeciesType from the ListOfSpeciesTypes
   * based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the SpeciesType to get.
   * 
   * @return SpeciesType in this ListOfSpeciesTypes
   * with the given @p sid or @c null if no such
   * SpeciesType exists.
   *
   * @see get(long n)
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfSpeciesTypes::get(const std::string& sid) const "
/**
   * Get a SpeciesType from the ListOfSpeciesTypes
   * based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the SpeciesType to get.
   * 
   * @return SpeciesType in this ListOfSpeciesTypes
   * with the given @p sid or @c null if no such
   * SpeciesType exists.
   *
   * @see get(long n)
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfSpeciesTypes::remove(unsigned int n) "
/**
   * Removes the nth item from this ListOfSpeciesTypes items and returns a pointer to
   * it.
   *
   * The caller owns the returned item and is responsible for deleting it.
   *
   * @param n the index of the item to remove
   *
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfSpeciesTypes::remove(const std::string& sid) "
/**
   * Removes item in this ListOfSpeciesTypes items with the given identifier.
   *
   * The caller owns the returned item and is responsible for deleting it.
   * If none of the items in this list have the identifier @p sid, then @c
   * null is returned.
   *
   * @param sid the identifier of the item to remove
   *
   * @return the item removed.  As mentioned above, the caller owns the
   * returned item.
   */ public new
";


%csmethodmodifiers ListOfSpeciesTypes::getElementPosition() const "
/**
   * Get the ordinal position of this element in the containing object
   * (which in this case is the Model object).
   *
   * The ordering of elements in the XML form of SBML is generally fixed
   * for most components in SBML.  For example, the
   * ListOfSpeciesTypes in a model (in SBML Level 2 Version 4) is the
   * third ListOf___.  (However, it differs for different Levels and
   * Versions of SBML, so calling code should not hardwire this number.)
   *
   * @return the ordinal position of the element with respect to its
   * siblings, or @c -1 (default) to indicate the position is not significant.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfSpeciesTypes::createObject(XMLInputStream& stream) "
/**
   * Create a ListOfSpeciesTypes object corresponding to the next token
   * in the XML input stream.
   * 
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream, or @c null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%typemap(csimports) Compartment "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Implementation of SBML\'s %Compartment construct.
 *
 * A compartment in SBML represents a bounded space in which species are
 * located.  Compartments do not necessarily have to correspond to actual
 * structures inside or outside of a biological cell.
 * 
 * It is important to note that although compartments are optional in the
 * overall definition of Model, every species in an SBML model must be
 * located in a compartment.  This in turn means that if a model defines
 * any species, the model must also define at least one compartment.  The
 * reason is simply that species represent physical things, and therefore
 * must exist @em somewhere.  Compartments represent the @em somewhere.
 *
 * Compartment has one required attribute, \'id\', to give the compartment a
 * unique identifier by which other parts of an SBML model definition can
 * refer to it.  A compartment can also have an optional \'name\' attribute
 * of type @c string.  Identifiers and names must be used according to the
 * guidelines described in the SBML specifications.
 * 
 * Compartment also has an optional attribute \'spatialDimensions\' that is
 * used to indicate the number of spatial dimensions possessed by the
 * compartment.  Most modeling scenarios involve compartments with integer
 * values of \'spatialDimensions\' of @c 3 (i.e., a three-dimensional
 * compartment, which is to say, a volume), or 2 (a two-dimensional
 * compartment, a surface), or @c 1 (a one-dimensional compartment, a
 * line).  In SBML Level&nbsp;3, the type of this attribute is @c double,
 * there are no restrictions on the permitted values of the
 * \'spatialDimensions\' attribute, and there are no default values.  In SBML
 * Level&nbsp;2, the value must be a positive @c integer, and the default
 * value is @c 3; the permissible values in SBML Level&nbsp;2 are @c 3, @c
 * 2, @c 1, and @c 0 (for a point).
 *
 * Another optional attribute on Compartment is \'size\', representing the
 * @em initial total size of that compartment in the model.  The \'size\'
 * attribute must be a floating-point value and may represent a volume (if
 * the compartment is a three-dimensional one), or an area (if the
 * compartment is two-dimensional), or a length (if the compartment is
 * one-dimensional).  There is no default value of compartment size in SBML
 * Level&nbsp;2 or Level&nbsp;3.  In particular, a missing \'size\' value
 * <em>does not imply that the compartment size is 1</em>.  (This is unlike
 * the definition of compartment \'volume\' in SBML Level&nbsp;1.)  When the
 * compartment\'s \'spatialDimensions\' attribute does not have a value of @c
 * 0, a missing value of \'size\' for a given compartment signifies that the
 * value either is unknown, or to be obtained from an external source, or
 * determined by an InitialAssignment, AssignmentRule, AlgebraicRule or
 * RateRule elsewhere in the model.  In SBML Level&nbsp;2, there are
 * additional special requirements on the values of \'size\'; we discuss them
 * in a <a href=\'#comp-l2\'>separate section below</a>.
 *
 * The units associated with a compartment\'s \'size\' attribute value may be
 * set using the optional attribute \'units\'.  The rules for setting and
 * using compartment size units differ between SBML Level&nbsp;2 and
 * Level&nbsp;3, and are discussed separately below.
 * 
 * Finally, the optional Compartment attribute named \'constant\' is used to
 * indicate whether the compartment\'s size stays constant after simulation
 * begins.  A value of @c true indicates the compartment\'s \'size\' cannot be
 * changed by any other construct except InitialAssignment; a value of @c
 * false indicates the compartment\'s \'size\' can be changed by other
 * constructs in SBML.  In SBML Level&nbsp;2, there is an additional
 * explicit restriction that if \'spatialDimensions\'=@c \'0\', the value
 * cannot be changed by InitialAssignment either.  Further, in
 * Level&nbsp;2, \'constant\' has a default value of @c true.  In SBML
 * Level&nbsp;3, there is no default value for the \'constant\' attribute.
 *
 * 
 * @section comp-l2 Additional considerations in SBML Level&nbsp;2
 * 
 * In SBML Level&nbsp;2, the default units of compartment size, and the
 * kinds of units allowed as values of the attribute \'units\', interact with
 * the number of spatial dimensions of the compartment.  The value of the
 * \'units\' attribute of a Compartment object must be one of the base units
 * (see Unit), or the predefined unit identifiers @c volume, @c area, @c
 * length or @c dimensionless, or a new unit defined by a UnitDefinition
 * object in the enclosing Model, subject to the restrictions detailed in
 * the following table:
 *
 * <table border=\'0\' class=\'centered text-table width80 normal-font alt-row-colors\'
 *        style=\'padding-bottom: 0.5em\'>
 * <caption class=\'top-caption\'>Restrictions on values permitted for
 * compartment <code>size</code> and <code>units</code> attributes.</caption>
 *  <tr>
 *      <th align=\'left\' valign=\'bottom\'>
 *        Value of<br><code>spatialDimensions</code>
 *      </th>
 *      <th align=\'left\' valign=\'bottom\'>
 *        <code>size</code><br>allowed?
 *      </th>
 *      <th align=\'left\' valign=\'bottom\'>
 *        <code>units</code><br>allowed?
 *      </th>
 *      <th align=\'left\' valign=\'bottom\'>
 * 	  Allowable kinds of units
 *      </th>
 *      <th align=\'left\' valign=\'bottom\'>
 * 	  Default value of attribute <code>units</code>
 *      </th>
 *  </tr>
 *  <tr>
 *      <td><code>3</code></td>
 *      <td>yes</td>
 *      <td>yes</td>
 *      <td>units of volume, or <code>dimensionless</code></td>
 *      <td><code>volume</code></td>
 *  </tr>
 *  <tr>
 *      <td><code>2</code></td>
 *      <td>yes</td>
 *      <td>yes</td>
 *      <td>units of area, or <code>dimensionless</code></td>
 *      <td><code>area</code></td>
 *  </tr>
 *  <tr>
 *      <td><code>1</code></td>
 *      <td>yes</td>
 *      <td>yes</td>
 *      <td>units of length, or <code>dimensionless</code></td>
 *      <td><code>length</code></td>
 *  </tr>
 *  <tr>
 *      <td><code>0</code></td>
 *      <td>no</td>
 *      <td>no</td>
 *      <td>(no units allowed)</td>
 *      <td></td>
 *  </tr>
 *  </tr>
 * </table>
 * 
 * In SBML Level&nbsp;2, the units of the compartment size, as defined by the
 * \'units\' attribute or (if \'units\' is not set) the default value listed in
 * the table above, are used in the following ways when the compartment has
 * a \'spatialDimensions\' value greater than @c 0:
 * <ul>
 * <li> The value of the \'units\' attribute is used as the units of the
 * compartment identifier when the identifier appears as a numerical
 * quantity in a mathematical formula expressed in MathML.
 * 
 * <li> The @c math element of an AssignmentRule or InitialAssignment
 * referring to this compartment must have identical units.
 *
 * <li> In RateRule objects that set the rate of change of the compartment\'s
 * size, the units of the rule\'s @c math element must be identical to the
 * compartment\'s \'units\' attribute divided by the default @em time units.
 * (In other words, the units for the rate of change of compartment size
 * are <em>compartment size</em>/<em>time</em> units.
 *
 * <li> When a Species is to be treated in terms of concentrations or
 * density, the units of the spatial size portion of the concentration
 * value (i.e., the denominator in the units formula @em substance/@em
 * size) are those indicated by the value of the \'units\' attribute on the
 * compartment in which the species is located.
 * </ul>
 *
 * Compartments with \'spatialDimensions\'=@c 0 require special treatment in
 * this framework.  As implied above, the \'size\' attribute must not have a
 * value on an SBML Level&nbsp;2 Compartment object if the
 * \'spatialDimensions\' attribute has a value of @c 0.  An additional
 * related restriction is that the \'constant\' attribute must default to or
 * be set to @c true if the value of the \'spatialDimensions\' attribute is
 * @c 0, because a zero-dimensional compartment cannot ever have a size.
 *
 * If a compartment has no size or dimensional units, how should such a
 * compartment\'s identifier be interpreted when it appears in mathematical
 * formulas?  The answer is that such a compartment\'s identifier should not
 * appear in mathematical formulas in the first place&mdash;it has no
 * value, and its value cannot change.  Note also that a zero-dimensional
 * compartment is a point, and species located at points can only be
 * described in terms of amounts, not spatially-dependent measures such as
 * concentration.  Since SBML KineticLaw formulas are already in terms of
 * @em substance/@em time and not (say) @em concentration/@em time, volume
 * or other factors in principle are not needed for species located in
 * zero-dimensional compartments.
 *
 * Finally, in SBML Level&nbsp;2 Versions 2&ndash;4, each compartment in a
 * model may optionally be designated as belonging to a particular
 * compartment @em type.  The optional attribute \'compartmentType\' is used
 * identify the compartment type represented by the Compartment structure.
 * The \'compartmentType\' attribute\'s value must be the identifier of a
 * CompartmentType instance defined in the model.  If the \'compartmentType\'
 * attribute is not present on a particular compartment definition, a
 * unique virtual compartment type is assumed for that compartment, and no
 * other compartment can belong to that compartment type.  The values of
 * \'compartmentType\' attributes on compartments have no effect on the
 * numerical interpretation of a model.  Simulators and other numerical
 * analysis software may ignore \'compartmentType\' attributes.  The
 * \'compartmentType\' attribute and the CompartmentType class of objects are
 * not present in SBML Level&nbsp;3 Core nor in SBML Level&nbsp;1.
 * 
 * 
 * @section comp-l3 Additional considerations in SBML Level&nbsp;3
 *
 * One difference between SBML Level&nbsp;3 and lower Levels of SBML is
 * that there are no restrictions on the permissible values of the
 * \'spatialDimensions\' attribute, and there is no default value defined for
 * the attribute.  The value of \'spatialDimensions\' does not have to be an
 * integer, either; this is to allow for the possibility of representing
 * structures with fractal dimensions.
 *
 * The number of spatial dimensions possessed by a compartment cannot enter
 * into mathematical formulas, and therefore cannot directly alter the
 * numerical interpretation of a model.  However, the value of
 * \'spatialDimensions\' @em does affect the interpretation of the units
 * associated with a compartment\'s size.  Specifically, the value of
 * \'spatialDimensions\' is used to select among the Model attributes
 * \'volumeUnits\', \'areaUnits\' and \'lengthUnits\' when a Compartment object
 * does not define a value for its \'units\' attribute.
 *
 * The \'units\' attribute may be left unspecified for a given compartment in
 * a model; in that case, the compartment inherits the unit of measurement
 * specified by one of the attributes on the enclosing Model object
 * instance.  The applicable attribute on Model depends on the value of the
 * compartment\'s \'spatialDimensions\' attribute; the relationship is shown
 * in the table below.  If the Model object does not define the relevant
 * attribute (\'volumeUnits\', \'areaUnits\' or \'lengthUnits\') for a given
 * \'spatialDimensions\' value, the unit associated with that Compartment
 * object\'s size is undefined.  If @em both \'spatialDimensions\' and \'units\'
 * are left unset on a given Compartment object instance, then no unit can
 * be chosen from among the Model\'s \'volumeUnits\', \'areaUnits\' or
 * \'lengthUnits\' attributes (even if the Model instance provides values for
 * those attributes), because there is no basis to select between them and
 * there is no default value of \'spatialDimensions\'.  Leaving the units of
 * compartments\' sizes undefined in an SBML model does not render the model
 * invalid; however, as a matter of best practice, we strongly recommend
 * that all models specify the units of measurement for all compartment
 * sizes.
 *
 * <table border=\'0\' class=\'centered text-table width80 normal-font alt-row-colors\'
 *        style=\'padding-bottom: 0.5em\'>
 * <caption class=\'top-caption\'>Interpretation of the Compartment \'units\' attribute.</caption>
 *  <tr>
 *      <th align=\'left\' valign=\'bottom\'>
 *        Value of attribute<br>\'spatialDimensions\'
 *      </th>
 *      <th align=\'left\' valign=\'bottom\'>
 *        Attribute of Model used<br>for inheriting the unit
 *      </th>
 *      <th align=\'left\' valign=\'bottom\'>
 *        Recommended candidate units
 *      </th>
 *  </tr>
 *  <tr>
 *      <td><code>3</code></td>
 *      <td>&quot;volumeUnits&quot;</td>
 *      <td>units of volume, or <code>dimensionless</code></td>
 *  </tr>
 *  <tr>
 *      <td><code>2</code></td>
 *      <td>&quot;areaUnits&quot;</td>
 *      <td>units of area, or <code>dimensionless</code></td>
 *  </tr>
 *  <tr>
 *      <td><code>1</code></td>
 *      <td>&quot;lengthUnits&quot;</td>
 *      <td>units of length, or <code>dimensionless</code></td>
 *  </tr>
 *  <tr>
 *      <td><em>other</em></td>
 *      <td><em>no units inherited</em></td>
 *      <td><em>no specific recommendations</em></td>
 *  </tr>
 *  </tr>
 * </table>
 *
 * The unit of measurement associated with a compartment\'s size, as defined
 * by the \'units\' attribute or (if \'units\' is not set) the inherited value
 * from Model according to the table above, is used in the following ways:
 *
 * <ul>
 * 
 * <li> When the identifier of the compartment appears as a numerical
 * quantity in a mathematical formula expressed in MathML, it represents
 * the size of the compartment, and the unit associated with the size is
 * the value of the \'units\' attribute.
 * 
 * <li> When a Species is to be treated in terms of concentrations or
 * density, the unit associated with the spatial size portion of the
 * concentration value (i.e., the denominator in the formula
 * <em>amount</em>/<em>size</em>) is specified by the value of the \'units\'
 * attribute on the compartment in which the species is located.
 * 
 * <li> The \'math\' elements of AssignmentRule, InitialAssignment and
 * EventAssignment objects setting the value of the compartment size
 * should all have the same units as the unit associated with the
 * compartment\'s size.
 * 
 * <li> In a RateRule object that defines a rate of change for a
 * compartment\'s size, the unit of the rule\'s \'math\' element should be
 * identical to the compartment\'s \'units\' attribute divided by the
 * model-wide unit of <em>time</em>.  (In other words, {<em>unit of
 * compartment size</em>}/{<em>unit of time</em>}.)
 * 
 * </ul>
 * 
 *
 * @section comp-other Other aspects of Compartment
 *
 * In SBML Level&nbsp;1 and Level&nbsp;2, Compartment has an optional
 * attribute named \'outside\', whose value can be the identifier of another
 * Compartment object defined in the enclosing Model object.  Doing so
 * means that the other compartment contains it or is outside of it.  This
 * enables the representation of simple topological relationships between
 * compartments, for those simulation systems that can make use of the
 * information (e.g., for drawing simple diagrams of compartments).  It is
 * worth noting that in SBML, there is no relationship between compartment
 * sizes when compartment positioning is expressed using the \'outside\'
 * attribute.  The size of a given compartment does not in any sense
 * include the sizes of other compartments having it as the value of their
 * \'outside\' attributes.  In other words, if a compartment @em B has the
 * identifier of compartment @em A as its \'outside\' attribute value, the
 * size of @em A does not include the size of @em B.  The compartment sizes
 * are separate.
 *
 * In Level&nbsp;2, there are two restrictions on the \'outside\' attribute.
 * First, because a compartment with \'spatialDimensions\' of @c 0 has no
 * size, such a compartment cannot act as the container of any other
 * compartment @em except compartments that @em also have
 * \'spatialDimensions\' values of @c 0.  Second, the directed graph formed
 * by representing Compartment structures as vertexes and the \'outside\'
 * attribute values as edges must be acyclic.  The latter condition is
 * imposed to prevent a compartment from being contained inside itself.  In
 * the absence of a value for \'outside\', compartment definitions in SBML
 * Level&nbsp;2 do not have any implied spatial relationships between each
 * other.
 *
 * 
 * 
 */
"


%typemap(csimports) ListOfCompartments "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Implementation of SBML Level&nbsp;2\'s %ListOfCompartments
 * construct.
 * 
 * *
 * 
 * The various ListOf___ classes in SBML are merely containers used for
 * organizing the main components of an SBML model.  All are derived from
 * the abstract class SBase, and inherit the various attributes and
 * subelements of SBase, such as \'metaid\' as and \'annotation\'.  The
 * ListOf___ classes do not add any attributes of their own.
 *
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 *
 * @htmlinclude listof-illustration.html
 *
 * Readers may wonder about the motivations for using the ListOf___
 * containers.  A simpler approach in XML might be to place the components
 * all directly at the top level of the model definition.  The choice made
 * in SBML is to group them within XML elements named after
 * ListOf<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from SBase means that software tools can add information @em about
 * the lists themselves into each list container\'s \'annotation\'.
 * 
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 *
 *
 */
"


%csmethodmodifiers Compartment::Compartment(unsigned int level, unsigned int version) "
/**
   * Creates a new Compartment using the given SBML @p level and @p version
   * values.
   *
   * @param level a long integer, the SBML Level to assign to this Compartment
   *
   * @param version a long integer, the SBML Version to assign to this
   * Compartment
   *
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the given @p level and @p version combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent SBMLDocument object.
   * 
   * *
 * @note Upon the addition of a Compartment object to an SBMLDocument (e.g.,
 * using Model::addCompartment(@if java Compartment c@endif)), the SBML
 * Level, SBML Version and XML namespace of the document @em override the
 * values used when creating the Compartment object via the Compartment
 * constructors.  This is necessary to ensure that an SBML document has a
 * consistent overall structure.  Nevertheless, the ability to supply the
 * values at the time of creation of a Compartment is an important aid to
 * producing valid SBML.  Knowledge of the intented SBML Level and Version
 * determine whether it is valid to assign a particular value to an
 * attribute, or whether it is valid to add an object to an existing
 * SBMLDocument.
 *
   */ public
";


%csmethodmodifiers Compartment::Compartment(SBMLNamespaces* sbmlns) "
/**
   * Creates a new Compartment using the given SBMLNamespaces object 
   * @p sbmlns.
   *
   * *
 *  
 * The SBMLNamespaces object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML\'s SBMLNamespaces facilities is to create an
 * SBMLNamespaces object somewhere in a program once, then hand that object
 * as needed to object constructors that accept SBMLNamespaces as arguments.
 *
 * 
   *
   * It is worth emphasizing that although this constructor does not take
   * an identifier argument, in SBML Level&nbsp;2 and beyond, the \'id\'
   * (identifier) attribute of a Compartment is required to have a value.
   * Thus, callers are cautioned to assign a value after calling this
   * constructor.  Setting the identifier can be accomplished using the
   * method @if java Compartment::setId(String id)@else setId()@endif.
   *
   * @param sbmlns an SBMLNamespaces object.
   *
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the given @p level and @p version combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent SBMLDocument object.
   *
   * *
 * @note Upon the addition of a Compartment object to an SBMLDocument (e.g.,
 * using Model::addCompartment(@if java Compartment c@endif)), the SBML
 * Level, SBML Version and XML namespace of the document @em override the
 * values used when creating the Compartment object via the Compartment
 * constructors.  This is necessary to ensure that an SBML document has a
 * consistent overall structure.  Nevertheless, the ability to supply the
 * values at the time of creation of a Compartment is an important aid to
 * producing valid SBML.  Knowledge of the intented SBML Level and Version
 * determine whether it is valid to assign a particular value to an
 * attribute, or whether it is valid to add an object to an existing
 * SBMLDocument.
 *
   */ public
";


%csmethodmodifiers Compartment::Compartment(const Compartment& orig) "
/**
   * Copy constructor; creates a copy of a Compartment.
   * 
   * @param orig the Compartment instance to copy.
   *
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the argument @p orig is @c null.
   */ public
";


%csmethodmodifiers Compartment::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor for this instance of Compartment.
   *
   * @param v the SBMLVisitor instance to be used.
   *
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether the Visitor would like to visit the next Compartment in the
   * list of compartments within which this Compartment is embedded (i.e.,
   * the ListOfCompartments in the parent Model).
   */ public
";


%csmethodmodifiers Compartment::clone() const "
/**
   * Creates and returns a deep copy of this Compartment object.
   * 
   * @return a (deep) copy of this Compartment.
   */ public new
";


%csmethodmodifiers Compartment::initDefaults "
/**
   * Initializes the fields of this Compartment object to \'typical\' default
   * values.
   *
   * The SBML Compartment component has slightly different aspects and
   * default attribute values in different SBML Levels and Versions.
   * This method sets the values to certain common defaults, based
   * mostly on what they are in SBML Level&nbsp;2.  Specifically:
   * <ul>
   * <li> Sets attribute \'spatialDimensions\' to @c 3
   * <li> Sets attribute \'constant\' to @c true
   * <li> (Applies to Level&nbsp;1 models only) Sets attribute \'volume\' to @c 1.0
   * <li> (Applies to Level&nbsp;3 models only) Sets attribute \'units\' to @c litre
   * </ul>
   */ public
";


%csmethodmodifiers Compartment::getId() const "
/**
   * Returns the value of the \'id\' attribute of this Compartment object.
   * 
   * @return the id of this Compartment.
   */ public new
";


%csmethodmodifiers Compartment::getName() const "
/**
   * Returns the value of the \'name\' attribute of this Compartment object.
   * 
   * @return the name of this Compartment.
   */ public new
";


%csmethodmodifiers Compartment::getCompartmentType() const "
/**
   * Get the value of the \'compartmentType\' attribute of this Compartment
   * object.
   * 
   * @return the value of the \'compartmentType\' attribute of this
   * Compartment as a string.
   *
   * @note The \'compartmentType\' attribute is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.
   */ public
";


%csmethodmodifiers Compartment::getSpatialDimensions() const "
/**
   * Get the number of spatial dimensions of this Compartment object.
   *
   * @return the value of the \'spatialDimensions\' attribute of this
   * Compartment as a long integereger
   *
   * @note In SBML Level&nbsp;3, the data type of the \'spatialDimensions\'
   * attribute is @c double, whereas in Level&nbsp;2, it is @c integer.
   * LibSBML provides a separate method for obtaining the value as a double,
   * for models where it is relevant.
   *
   * @see getSpatialDimensionsAsDouble()
   */ public
";


%csmethodmodifiers Compartment::getSpatialDimensionsAsDouble() const "
/**
   * Get the number of spatial dimensions of this Compartment object
   * as a double.
   *
   * @return the value of the \'spatialDimensions\' attribute of this
   * Compartment as a double, or @c NaN if this model is not in SBML
   * Level&nbsp;3 format.
   *
   * @note In SBML Level&nbsp;3, the data type of the \'spatialDimensions\'
   * attribute is @c double, whereas in Level&nbsp;2, it is @c integer.  To
   * avoid backward compatibility issues, libSBML provides a separate
   * method for obtaining the value as a double, for models where it is
   * relevant.
   *
   * @see getSpatialDimensions()
   */ public
";


%csmethodmodifiers Compartment::getSize() const "
/**
   * Get the size of this Compartment.
   *
   * *
 * 
 * In SBML Level&nbsp;1, compartments are always three-dimensional
 * constructs and only have volumes, whereas in SBML Level&nbsp;2 and higher,
 * compartments may be other than three-dimensional, and therefore the
 * \'volume\' attribute is named \'size\' in Level&nbsp;2 and above.  LibSBML
 * provides both Compartment::getSize() and Compartment::getVolume() for
 * easier support of different SBML Levels.
 * 
   *
   * @return the value of the \'size\' attribute (\'volume\' in Level&nbsp;1) of
   * this Compartment as a floating-point number.
   *
   * @note This method is identical to
   * @if java Compartment::getVolume()@else getVolume()@endif.
   *
   * @see isSetSize()
   * @see getVolume()
   */ public
";


%csmethodmodifiers Compartment::getVolume() const "
/**
   * Get the volume of this Compartment.
   * 
   * *
 * 
 * In SBML Level&nbsp;1, compartments are always three-dimensional
 * constructs and only have volumes, whereas in SBML Level&nbsp;2 and higher,
 * compartments may be other than three-dimensional, and therefore the
 * \'volume\' attribute is named \'size\' in Level&nbsp;2 and above.  LibSBML
 * provides both Compartment::getSize() and Compartment::getVolume() for
 * easier support of different SBML Levels.
 *
   *
   * @return the value of the \'volume\' attribute (\'size\' in Level&nbsp;2) of
   * this Compartment, as a floating-point number.
   *
   * *
 * @note The attribute \'volume\' only exists by that name in SBML
 * Level&nbsp;1.  In Level&nbsp;2 and above, the equivalent attribute is
 * named \'size\'.  In SBML Level&nbsp;1, a compartment\'s volume has a default
 * value (@c 1.0) and therefore methods such as Compartment::isSetVolume()
 * will always return @c true for a Level&nbsp;1 model.  In Level&nbsp;2, a
 * compartment\'s size (the equivalent of SBML Level&nbsp;1\'s \'volume\') is
 * optional and has no default value, and therefore may or may not be set.
 *
   * 
   * @note This method is identical to
   * @if java Compartment::getSize()@else getSize()@endif.
   *
   * @see isSetVolume()
   * @see getSize()
   */ public
";


%csmethodmodifiers Compartment::getUnits() const "
/**
   * Get the units of this compartment\'s size.
   * 
   * The value of an SBML compartment\'s \'units\' attribute establishes the
   * unit of measurement associated with the compartment\'s size.
   *
   * @return the value of the \'units\' attribute of this Compartment, as a
   * string.  An empty string indicates that no units have been assigned to
   * the value of the size.
   *
   * *
 * @note There is an important distinction to be made between <em>no units
 * assigned</em>, and assuming a value without units has any specific unit
 * such as <code>dimensionless</code>.  In SBML, default units are never
 * attributed to numbers, and numbers without units are not automatically
 * assumed to have the unit <code>dimensionless</code>.  Please consult the
 * relevant SBML specification document for a more in-depth explanation of
 * this topic and the SBML unit system.
 *
 *
   *
   * @see isSetUnits()
   * @see @if java Compartment::setUnits(String sid)@else setUnits()@endif
   * @see getSize()
   */ public
";


%csmethodmodifiers Compartment::getOutside() const "
/**
   * Get the identifier, if any, of the compartment that is designated
   * as being outside of this one.
   * 
   * @return the value of the \'outside\' attribute of this Compartment.
   *
   * @note The \'outside\' attribute is defined in SBML Level&nbsp;1 and
   * Level&nbsp;2, but does not exist in SBML Level&nbsp;3 Version&nbsp;1
   * Core.
   */ public
";


%csmethodmodifiers Compartment::getConstant() const "
/**
   * Get the value of the \'constant\' attribute of this Compartment.
   *
   * @return @c true if this Compartment\'s size is flagged as being
   * constant, @c false otherwise.
   */ public
";


%csmethodmodifiers Compartment::isSetId() const "
/**
   * Predicate returning @c true if this
   * Compartment\'s \'id\' attribute is set.
   *
   * @return @c true if the \'id\' attribute of this Compartment is 
   * set, @c false otherwise.
   */ public new
";


%csmethodmodifiers Compartment::isSetName() const "
/**
   * Predicate returning @c true if this
   * Compartment\'s \'name\' attribute is set.
   *
   * @return @c true if the \'name\' attribute of this Compartment is
   * set, @c false otherwise.
   */ public new
";


%csmethodmodifiers Compartment::isSetCompartmentType() const "
/**
   * Predicate returning @c true if this
   * Compartment\'s \'compartmentType\' attribute is set.
   *
   * @return @c true if the \'compartmentType\' attribute of this Compartment
   * is set, @c false otherwise.
   *
   * @note The \'compartmentType\' attribute is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.
   */ public
";


%csmethodmodifiers Compartment::isSetSize() const "
/**
   * Predicate returning @c true if this Compartment\'s \'size\' attribute is
   * set.
   *
   * This method is similar but not identical to
   * @if java Compartment::isSetVolume()@else isSetVolume()@endif.  The latter
   * should be used in the context of SBML Level&nbsp;1 models instead of
   * @if java Compartment::isSetSize()@else isSetSize()@endif
   * because @if java Compartment::isSetVolume()@else isSetVolume()@endif
   * performs extra processing to take into account the difference in
   * default values between SBML Levels&nbsp;1 and&nbsp;2.
   * 
   * @return @c true if the \'size\' attribute (\'volume\' in Level&nbsp;2) of
   * this Compartment is set, @c false otherwise.
   *
   * @see isSetVolume()
   * @see @if java Compartment::setSize(double value)@else setSize()@endif
   */ public
";


%csmethodmodifiers Compartment::isSetVolume() const "
/**
   * Predicate returning @c true if this Compartment\'s \'volume\' attribute is
   * set.
   * 
   * This method is similar but not identical to
   * @if java Compartment::isSetSize()@else isSetSize()@endif.  The latter
   * should not be used in the context of SBML Level&nbsp;1 models because the
   * present method performs extra processing to take into account
   * the difference in default values between SBML Levels&nbsp;1 and&nbsp;2.
   * 
   * @return @c true if the \'volume\' attribute (\'size\' in Level&nbsp;2 and
   * above) of this Compartment is set, @c false otherwise.
   *
   * *
 * @note The attribute \'volume\' only exists by that name in SBML
 * Level&nbsp;1.  In Level&nbsp;2 and above, the equivalent attribute is
 * named \'size\'.  In SBML Level&nbsp;1, a compartment\'s volume has a default
 * value (@c 1.0) and therefore methods such as Compartment::isSetVolume()
 * will always return @c true for a Level&nbsp;1 model.  In Level&nbsp;2, a
 * compartment\'s size (the equivalent of SBML Level&nbsp;1\'s \'volume\') is
 * optional and has no default value, and therefore may or may not be set.
 *
   *
   * @see isSetSize()
   * @see @if java Compartment::setVolume(double value)@else setVolume()@endif
   */ public
";


%csmethodmodifiers Compartment::isSetUnits() const "
/**
   * Predicate returning @c true if this
   * Compartment\'s \'units\' attribute is set.
   * 
   * @return @c true if the \'units\' attribute of this Compartment is
   * set, @c false otherwise.
   *
   * *
 * @note There is an important distinction to be made between <em>no units
 * assigned</em>, and assuming a value without units has any specific unit
 * such as <code>dimensionless</code>.  In SBML, default units are never
 * attributed to numbers, and numbers without units are not automatically
 * assumed to have the unit <code>dimensionless</code>.  Please consult the
 * relevant SBML specification document for a more in-depth explanation of
 * this topic and the SBML unit system.
 *
 *
   */ public
";


%csmethodmodifiers Compartment::isSetOutside() const "
/**
   * Predicate returning @c true if this
   * Compartment\'s \'outside\' attribute is set.
   * 
   * @return @c true if the \'outside\' attribute of this Compartment is
   * set, @c false otherwise.
   * 
   * @note The \'outside\' attribute is defined in SBML Level&nbsp;1 and
   * Level&nbsp;2, but does not exist in SBML Level&nbsp;3 Version&nbsp;1
   * Core.
   */ public
";


%csmethodmodifiers Compartment::isSetSpatialDimensions() const "
/**
   * Predicate returning @c true if this
   * Compartment\'s \'spatialDimensions\' attribute is set.
   * 
   * @return @c true if the \'spatialDimensions\' attribute of this
   * Compartment is set, @c false otherwise.
   */ public
";


%csmethodmodifiers Compartment::isSetConstant() const "
/**
   * Predicate returning @c true if this
   * Compartment\'s \'constant\' attribute is set.
   * 
   * @return @c true if the \'constant\' attribute of this Compartment is
   * set, @c false otherwise.
   */ public
";


%csmethodmodifiers Compartment::setId(const std::string& sid) "
/**
   * Sets the value of the \'id\' attribute of this Compartment.
   *
   * The string @p sid is copied.
   *
   * *
 * 
 * SBML has strict requirements for the syntax of identifiers, that is, the
 * values of the \'id\' attribute present on most types of SBML objects.
 * The following is a summary of the definition of the SBML identifier type 
 * <code>SId</code>, which defines the permitted syntax of identifiers.  We
 * express the syntax using an extended form of BNF notation: 
 * <pre style=\'margin-left: 2em; border: none; font-weight: bold; font-size: 13px; color: black\'>
 * letter ::= \'a\'..\'z\',\'A\'..\'Z\'
 * digit  ::= \'0\'..\'9\'
 * idChar ::= letter | digit | \'_\'
 * SId    ::= ( letter | \'_\' ) idChar*
 * </pre>
 * The characters <code>(</code> and <code>)</code> are used for grouping, the
 * character <code>*</code> \'zero or more times\', and the character
 * <code>|</code> indicates logical \'or\'.  The equality of SBML identifiers is
 * determined by an exact character sequence match; i.e., comparisons must be
 * performed in a case-sensitive manner.  In addition, there are a few
 * conditions for the uniqueness of identifiers in an SBML model.  Please
 * consult the SBML specifications for the exact details of the uniqueness
 * requirements.
 * 
 *
   *
   * @param sid the string to use as the identifier of this Compartment
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public new
";


%csmethodmodifiers Compartment::setName(const std::string& name) "
/**
   * Sets the value of the \'name\' attribute of this Compartment.
   *
   * The string in @p name is copied.
   *
   * @param name the new name for the Compartment
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public new
";


%csmethodmodifiers Compartment::setCompartmentType(const std::string& sid) "
/**
   * Sets the \'compartmentType\' attribute of this Compartment.
   *
   * @param sid the identifier of a CompartmentType object defined
   * elsewhere in this Model.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   * 
   * @note The \'compartmentType\' attribute is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.
   */ public
";


%csmethodmodifiers Compartment::setSpatialDimensions(unsigned int value) "
/**
   * Sets the \'spatialDimensions\' attribute of this Compartment.
   *
   * If @p value is not one of @c 0, @c 1, @c 2, or @c 3, this method will
   * have no effect (i.e., the \'spatialDimensions\' attribute will not be
   * set).
   * 
   * @param value a long integereger indicating the number of dimensions
   * of this compartment.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   */ public
";


%csmethodmodifiers Compartment::setSpatialDimensions(double value) "
/**
   * Sets the \'spatialDimensions\' attribute of this Compartment as a double.
   *
   * @param value a double indicating the number of dimensions
   * of this compartment.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   */ public
";


%csmethodmodifiers Compartment::setSize(double value) "
/**
   * Sets the \'size\' attribute (or \'volume\' in SBML Level&nbsp;1) of this
   * Compartment.
   *
   * @param value a @c double representing the size of this compartment
   * instance in whatever units are in effect for the compartment.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   *
   * @note This method is identical to
   * @if java Compartment::setVolume(double value)@else setVolume()@endif.
   *
   * @see isSetSize()
   * @see @if java Compartment::setVolume(double value)@else setVolume()@endif
   */ public
";


%csmethodmodifiers Compartment::setVolume(double value) "
/**
   * Sets the \'volume\' attribute (or \'size\' in SBML Level&nbsp;2) of this
   * Compartment.
   *
   * This method is identical to
   * @if java Compartment::setSize(double value)@else setSize()@endif
   * and is provided for compatibility between SBML Level&nbsp;1 and
   * Level&nbsp;2.
   * 
   * @param value a @c double representing the volume of this compartment
   * instance in whatever units are in effect for the compartment.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   *
   * *
 * @note The attribute \'volume\' only exists by that name in SBML
 * Level&nbsp;1.  In Level&nbsp;2 and above, the equivalent attribute is
 * named \'size\'.  In SBML Level&nbsp;1, a compartment\'s volume has a default
 * value (@c 1.0) and therefore methods such as Compartment::isSetVolume()
 * will always return @c true for a Level&nbsp;1 model.  In Level&nbsp;2, a
 * compartment\'s size (the equivalent of SBML Level&nbsp;1\'s \'volume\') is
 * optional and has no default value, and therefore may or may not be set.
 *
   *
   * @see isSetVolume()
   * @see @if java Compartment::setSize(double value)@else setSize()@endif
   */ public
";


%csmethodmodifiers Compartment::setUnits(const std::string& sid) "
/**
   * Sets the \'units\' attribute of this Compartment.
   *
   * @param sid the identifier of the defined units to use.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers Compartment::setOutside(const std::string& sid) "
/**
   * Sets the \'outside\' attribute of this Compartment.
   *
   * @param sid the identifier of a compartment that encloses this one.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   *
   * @note The \'outside\' attribute is defined in SBML Level&nbsp;1 and
   * Level&nbsp;2, but does not exist in SBML Level&nbsp;3 Version&nbsp;1
   * Core.
   */ public
";


%csmethodmodifiers Compartment::setConstant(bool value) "
/**
   * Sets the value of the \'constant\' attribute of this Compartment.
   *
   * @param value a bool indicating whether the size/volume of this
   * compartment should be considered constant (@c true) or variable
   * (@c false)
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   */ public
";


%csmethodmodifiers Compartment::renameSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames all the @c SIdRef attributes on this element, including any
   * found in MathML.
   *
   * *
 * 

 * In SBML, object identifiers are of a data type called <code>SId</code>.
 * In SBML Level&nbsp;3, an explicit data type called <code>SIdRef</code> was
 * introduced for attribute values that refer to <code>SId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to an identifier\', but the effective
 * data type was the same as <code>SIdRef</code>in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>SIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 *
 *
   * 
   * This method works by looking at all attributes and (if appropriate)
   * mathematical formulas, comparing the identifiers to the value of @p
   * oldid.  If any matches are found, the matching identifiers are replaced
   * with @p newid.  The method does @em not descend into child elements.
   *
   * @param oldid the old identifier
   * @param newid the new identifier
   */ public
";


%csmethodmodifiers Compartment::renameUnitSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames all the @c UnitSIdRef attributes on this element.
   *
   * *
 * 
 * In SBML, unit definitions have identifiers of type <code>UnitSId</code>.  In
 * SBML Level&nbsp;3, an explicit data type called <code>UnitSIdRef</code> was
 * introduced for attribute values that refer to <code>UnitSId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to a unit identifier\', but the effective
 * data type was the same as <code>UnitSIdRef</code> in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>UnitSIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 * 
 *
   *
   * This method works by looking at all unit identifier attribute values
   * (including, if appropriate, inside mathematical formulas), comparing the
   * unit identifiers to the value of @p oldid.  If any matches are found,
   * the matching identifiers are replaced with @p newid.  The method does
   * @em not descend into child elements.
   * 
   * @param oldid the old identifier
   * @param newid the new identifier
   */ public
";


%csmethodmodifiers Compartment::unsetName "
/**
   * Unsets the value of the \'name\' attribute of this Compartment.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public new
";


%csmethodmodifiers Compartment::unsetCompartmentType "
/**
   * Unsets the value of the \'compartmentType\'
   * attribute of this Compartment.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   * 
   * @note The \'compartmentType\' attribute is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.
   *
   * @see setCompartmentType(string sid)
   * @see isSetCompartmentType()
   */ public
";


%csmethodmodifiers Compartment::unsetSize "
/**
   * Unsets the value of the \'size\' attribute of this Compartment.
   * 
   * In SBML Level&nbsp;1, a compartment\'s volume has a default value (@c
   * 1.0) and therefore <em>should always be set</em>.  Calling this method
   * on a Level&nbsp;1 model resets the value to @c 1.0 rather than actually
   * unsetting it.  In Level&nbsp;2, a compartment\'s \'size\' is optional with
   * no default value, and unsetting it will result in the compartment having
   * no defined size.
   * 
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   *
   * @note This method is identical to
   * @if java Compartment::unsetVolume()@else unsetVolume()@endif.
   */ public
";


%csmethodmodifiers Compartment::unsetVolume "
/**
   * Unsets the value of the \'volume\' attribute of this Compartment.
   *
   * This method is identical to
   * @if java Compartment::unsetSize()@else unsetSize()@endif.  Please refer
   * to that method\'s documentation for more information about its behavior.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   *
   * *
 * @note The attribute \'volume\' only exists by that name in SBML
 * Level&nbsp;1.  In Level&nbsp;2 and above, the equivalent attribute is
 * named \'size\'.  In SBML Level&nbsp;1, a compartment\'s volume has a default
 * value (@c 1.0) and therefore methods such as Compartment::isSetVolume()
 * will always return @c true for a Level&nbsp;1 model.  In Level&nbsp;2, a
 * compartment\'s size (the equivalent of SBML Level&nbsp;1\'s \'volume\') is
 * optional and has no default value, and therefore may or may not be set.
 *
   */ public
";


%csmethodmodifiers Compartment::unsetUnits "
/**
   * Unsets the value of the \'units\' attribute of this Compartment.
   * 
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers Compartment::unsetOutside "
/**
   * Unsets the value of the \'outside\' attribute of this Compartment.
   * 
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   *
   * @note The \'outside\' attribute is defined in SBML Level&nbsp;1 and
   * Level&nbsp;2, but does not exist in SBML Level&nbsp;3 Version&nbsp;1
   * Core.
   */ public
";


%csmethodmodifiers Compartment::unsetSpatialDimensions "
/**
   * Unsets the value of the \'spatialDimensions\' attribute of this Compartment.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   *
   * @note This function is only valid for SBML Level&nbsp;3.
   */ public
";


%csmethodmodifiers Compartment::getDerivedUnitDefinition "
/**
   * Constructs and returns a UnitDefinition that corresponds to the units
   * of this Compartment\'s designated size.
   *
   * *
 * 
 * Compartments in SBML have an attribute (\'units\') for declaring the
 * units of measurement intended for the value of the compartment\'s size.  In
 * the absence of a value given for this attribute, the units are inherited
 * from values either defined on the enclosing Model (in SBML Level&nbsp;3)
 * or in defaults (in SBML Level&nbsp;2).  This method returns a
 * UnitDefinition object based on how this compartment\'s units are
 * interpreted according to the relevant SBML guidelines, or it returns @c
 * null if no units have been declared and no defaults are defined by the
 * relevant SBML specification.
 *
 * Note that unit declarations for Compartment objects are specified in terms
 * of the @em identifier of a unit (e.g., using 
 * Compartment::setUnits(@if java String sid@endif)), but @em this
 * method returns a UnitDefinition object, not a unit identifier.  It does
 * this by constructing an appropriate UnitDefinition.  For SBML Level&nbsp;2
 * models, it will do this even when the value of the \'units\' attribute is
 * one of the special SBML Level&nbsp;2 unit identifiers @c \'substance\', @c
 * \'volume\', @c \'area\', @c \'length\' or @c \'time\'.  Callers may find this
 * useful in conjunction with the helper methods provided by the
 * UnitDefinition class for comparing different UnitDefinition objects.
 *
   * 
   * @return a UnitDefinition that expresses the units of this 
   * Compartment, or @c null if one cannot be constructed.
   *
   * @note The libSBML system for unit analysis depends on the model as a
   * whole.  In cases where the Compartment object has not yet been added
   * to a model, or the model itself is incomplete, unit analysis is not
   * possible, and consequently this method will return @c null.
   *
   * @see isSetUnits()
   * @see getUnits()
   */ public
";


%csmethodmodifiers Compartment::getDerivedUnitDefinition() const "
/**
   * Constructs and returns a UnitDefinition that corresponds to the units
   * of this Compartment\'s designated size.
   *
   * *
 * 
 * Compartments in SBML have an attribute (\'units\') for declaring the
 * units of measurement intended for the value of the compartment\'s size.  In
 * the absence of a value given for this attribute, the units are inherited
 * from values either defined on the enclosing Model (in SBML Level&nbsp;3)
 * or in defaults (in SBML Level&nbsp;2).  This method returns a
 * UnitDefinition object based on how this compartment\'s units are
 * interpreted according to the relevant SBML guidelines, or it returns @c
 * null if no units have been declared and no defaults are defined by the
 * relevant SBML specification.
 *
 * Note that unit declarations for Compartment objects are specified in terms
 * of the @em identifier of a unit (e.g., using 
 * Compartment::setUnits(@if java String sid@endif)), but @em this
 * method returns a UnitDefinition object, not a unit identifier.  It does
 * this by constructing an appropriate UnitDefinition.  For SBML Level&nbsp;2
 * models, it will do this even when the value of the \'units\' attribute is
 * one of the special SBML Level&nbsp;2 unit identifiers @c \'substance\', @c
 * \'volume\', @c \'area\', @c \'length\' or @c \'time\'.  Callers may find this
 * useful in conjunction with the helper methods provided by the
 * UnitDefinition class for comparing different UnitDefinition objects.
 *
   * 
   * @return a UnitDefinition that expresses the units of this 
   * Compartment, or @c null if one cannot be constructed.
   *
   * @note The libSBML system for unit analysis depends on the model as a
   * whole.  In cases where the Compartment object has not yet been added
   * to a model, or the model itself is incomplete, unit analysis is not
   * possible, and consequently this method will return @c null.
   *
   * @see isSetUnits()
   * @see getUnits()
   */ public
";


%csmethodmodifiers Compartment::getTypeCode() const "
/**
   * Returns the libSBML type code for this SBML object.
   * 
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object:
   * @link libsbmlcs.libsbml.SBML_COMPARTMENT SBML_COMPARTMENT@endlink (default).
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see getElementName()
   * @see getPackageName()
   */ public new
";


%csmethodmodifiers Compartment::getElementName() const "
/**
   * Returns the XML element name of this object, which for Compartment, is
   * always @c \'compartment\'.
   * 
   * @return the name of this element, i.e., @c \'compartment\'.
   */ public new
";


%csmethodmodifiers Compartment::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Compartment::hasRequiredAttributes() const "
/**
   * Predicate returning @c true if
   * all the required attributes for this Compartment object
   * have been set.
   *
   * @note The required attributes for a Compartment object are:
   * @li \'id\' (or \'name\' in SBML Level&nbsp;1)
   * @li \'constant\' (in SBML Level&nbsp;3 only)
   *
   * @return a bool value indicating whether all the required
   * attributes for this object have been defined.
   */ public new
";


%csmethodmodifiers Compartment::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Compartment::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Subclasses should override this method to read values from the given
   * XMLAttributes set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Compartment::readL1Attributes(const XMLAttributes& attributes) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Compartment::readL2Attributes(const XMLAttributes& attributes) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Compartment::readL3Attributes(const XMLAttributes& attributes) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Compartment::writeAttributes(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Compartment::isExplicitlySetSpatialDimensions() const "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Compartment::isExplicitlySetConstant() const "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfCompartments::ListOfCompartments(unsigned int level, unsigned int version) "
/**
   * Creates a new ListOfCompartments object.
   *
   * The object is constructed such that it is valid for the given SBML
   * Level and Version combination.
   *
   * @param level the SBML Level
   * 
   * @param version the Version within the SBML Level
   */ public
";


%csmethodmodifiers ListOfCompartments::ListOfCompartments(SBMLNamespaces* sbmlns) "
/**
   * Creates a new ListOfCompartments object.
   *
   * The object is constructed such that it is valid for the SBML Level and
   * Version combination determined by the SBMLNamespaces object in @p
   * sbmlns.
   *
   * @param sbmlns an SBMLNamespaces object that is used to determine the
   * characteristics of the ListOfCompartments object to be created.
   */ public
";


%csmethodmodifiers ListOfCompartments::clone() const "
/**
   * Creates and returns a deep copy of this ListOfCompartments instance.
   *
   * @return a (deep) copy of this ListOfCompartments.
   */ public new
";


%csmethodmodifiers ListOfCompartments::getItemTypeCode() const "
/**
   * Returns the libSBML type code for the objects contained in this ListOf
   * (i.e., Compartment objects, if the list is non-empty).
   *
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for the objects contained in this ListOf
   * instance: @link libsbmlcs.libsbml.SBML_COMPARTMENT SBML_COMPARTMENT@endlink (default).
   *
   * @see getElementName()
   * @see getPackageName()
   */ public new
";


%csmethodmodifiers ListOfCompartments::getElementName() const "
/**
   * Returns the XML element name of this object.
   *
   * For ListOfCompartments, the XML element name is @c \'listOfCompartments\'.
   * 
   * @return the name of this element, i.e., @c \'listOfCompartments\'.
   */ public new
";


%csmethodmodifiers ListOfCompartments::get(unsigned int n) "
/**
   * Get a Compartment from the ListOfCompartments.
   *
   * @param n the index number of the Compartment to get.
   * 
   * @return the nth Compartment in this ListOfCompartments.
   *
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfCompartments::get "
/**
   * Get a Compartment from the ListOfCompartments.
   *
   * @param n the index number of the Compartment to get.
   * 
   * @return the nth Compartment in this ListOfCompartments.
   *
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfCompartments::get(const std::string& sid) "
/**
   * Get a Compartment from the ListOfCompartments
   * based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the Compartment to get.
   * 
   * @return Compartment in this ListOfCompartments
   * with the given @p sid or @c null if no such
   * Compartment exists.
   *
   * @see get(long n)
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfCompartments::get(const std::string& sid) const "
/**
   * Get a Compartment from the ListOfCompartments
   * based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the Compartment to get.
   * 
   * @return Compartment in this ListOfCompartments
   * with the given @p sid or @c null if no such
   * Compartment exists.
   *
   * @see get(long n)
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfCompartments::remove(unsigned int n) "
/**
   * Removes the nth item from this ListOfCompartments items and returns a pointer to
   * it.
   *
   * The caller owns the returned item and is responsible for deleting it.
   *
   * @param n the index of the item to remove
   *
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfCompartments::remove(const std::string& sid) "
/**
   * Removes item in this ListOfCompartments items with the given identifier.
   *
   * The caller owns the returned item and is responsible for deleting it.
   * If none of the items in this list have the identifier @p sid, then
   * @c null is returned.
   *
   * @param sid the identifier of the item to remove
   *
   * @return the item removed.  As mentioned above, the caller owns the
   * returned item.
   */ public new
";


%csmethodmodifiers ListOfCompartments::getElementPosition() const "
/**
   * Get the ordinal position of this element in the containing object
   * (which in this case is the Model object).
   *
   * The ordering of elements in the XML form of SBML is generally fixed
   * for most components in SBML.  So, for example, the ListOfCompartments
   * in a model is (in SBML Level&nbsp;2 Version&nbsp;4) the fifth
   * ListOf___.  (However, it differs for different Levels and Versions of
   * SBML.)
   *
   * @return the ordinal position of the element with respect to its
   * siblings, or @c -1 (default) to indicate the position is not significant.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfCompartments::createObject(XMLInputStream& stream) "
/**
   * Create and return an SBML object of this class, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or @c null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%typemap(csimports) Species "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Implementation of SBML\'s %Species construct.
 *
 * A @em species in SBML refers to a pool of entities that (a) are
 * considered indistinguishable from each other for the purposes of the
 * model, (b) participate in reactions, and (c) are located in a specific
 * @em compartment.  The SBML Species object class is intended to represent
 * these pools.
 *
 * As with other major constructs in SBML, Species has a mandatory
 * attribute, \'id\', used to give the species type an identifier in the
 * model.  The identifier must be a text string conforming to the identifer
 * syntax permitted in SBML.  Species also has an optional \'name\'
 * attribute, of type @c string.  The \'id\' and \'name\' must be used
 * according to the guidelines described in the SBML specifications.
 *
 * The required attribute \'compartment\' is used to identify the compartment
 * in which the species is located.  The attribute\'s value must be the
 * identifier of an existing Compartment object.  It is important to note
 * that there is no default value for the \'compartment\' attribute on
 * Species; every species in an SBML model must be assigned a compartment
 * @em explicitly.  (This also implies that every model with one or more
 * Species objects must define at least one Compartment object.)
 *
 * 
 * @section species-amounts The initial amount and concentration of a species
 *
 * The optional attributes \'initialAmount\' and \'initialConcentration\', both
 * having a data type of @c double, can be used to set the @em initial
 * quantity of the species in the compartment where the species is located.
 * These attributes are mutually exclusive; i.e., <em>only one</em> can
 * have a value on any given instance of a Species object.  Missing
 * \'initialAmount\' and \'initialConcentration\' values implies that their
 * values either are unknown, or to be obtained from an external source, or
 * determined by an InitialAssignment or other SBML construct elsewhere in
 * the model.
 *
 * A species\' initial quantity in SBML is set by the \'initialAmount\' or
 * \'initialConcentration\' attribute exactly once.  If the \'constant\'
 * attribute is @c true, then the value of the species\' quantity is fixed
 * and cannot be changed except by an InitialAssignment.  These methods
 * differ in that the \'initialAmount\' and \'initialConcentration\' attributes
 * can only be used to set the species quantity to a literal floating-point
 * number, whereas the use of an InitialAssignment object allows the value
 * to be set using an arbitrary mathematical expression (which, thanks to
 * MathML\'s expressiveness, may evaluate to a rational number).  If the
 * species\' \'constant\' attribute is @c false, the species\' quantity value
 * may be overridden by an InitialAssignment or changed by AssignmentRule
 * or AlgebraicRule, and in addition, for <em>t &gt; 0</em>, it may also be
 * changed by a RateRule, Event objects, and as a result of being a
 * reactant or product in one or more Reaction objects.  (However, some
 * constructs are mutually exclusive; see the SBML specifications for the
 * precise details.)  It is not an error to define \'initialAmount\' or
 * \'initialConcentration\' on a species and also redefine the value using an
 * InitialAssignment, but the \'initialAmount\' or \'initialConcentration\'
 * setting in that case is ignored.  The SBML specifications provide
 * additional information about the semantics of assignments, rules and
 * values for simulation time <em>t</em> <= <em>0</em>.
 * 
 * SBML Level&nbsp;2 additionally stipulates that in cases where a species\'
 * compartment has a \'spatialDimensions\' value of @c 0 (zero), the species
 * cannot have a value for \'initialConcentration\' because the concepts of
 * concentration and density break down when a container has zero
 * dimensions.
 *
 * @section species-units The units of a species\' amount or concentration
 * 
 * When the attribute \'initialAmount\' is set, the unit of measurement
 * associated with the value of \'initialAmount\' is specified by the Species
 * attribute \'substanceUnits\'.  When the \'initialConcentration\' attribute
 * is set, the unit of measurement associated with this concentration value
 * is {<em>unit of amount</em>} divided by {<em>unit of size</em>}, where
 * the {<em>unit of amount</em>} is specified by the Species
 * \'substanceUnits\' attribute, and the {<em>unit of size</em>} is specified
 * by the \'units\' attribute of the Compartment object in which the species
 * is located.  Note that in either case, a unit of <em>amount</em> is
 * involved and determined by the \'substanceUnits\' attribute.  Note
 * <strong>these two attributes alone do not determine the units of the
 * species when the species identifier appears in a mathematical
 * expression</strong>; <em>that</em> aspect is determined by the attribute
 * \'hasOnlySubstanceUnits\' discussed below.
 * 
 * In SBML Level&nbsp;3, if the \'substanceUnits\' attribute is not set on a
 * given Species object instance, then the unit of <em>amount</em> for that
 * species is inherited from the \'substanceUnits\' attribute on the
 * enclosing Model object instance.  If that attribute on Model is not set
 * either, then the unit associated with the species\' quantity is
 * undefined.
 *
 * In SBML Level&nbsp;2, if the \'substanceUnits\' attribute is not set on a
 * given Species object instance, then the unit of <em>amount</em> for that
 * species is taken from the predefined SBML unit identifier @c
 * \'substance\'.  The value assigned to \'substanceUnits\' must be chosen from
 * one of the following possibilities: one of the base unit identifiers
 * defined in SBML, the built-in unit identifier @c \'substance\', or the
 * identifier of a new unit defined in the list of unit definitions in the
 * enclosing Model object.  The chosen units for \'substanceUnits\' must be
 * be @c \'dimensionless\', @c \'mole\', @c \'item\', @c \'kilogram\', @c \'gram\',
 * or units derived from these.
 * 
 * As noted at the beginning of this section, simply setting
 * \'initialAmount\' or \'initialConcentration\' alone does @em not determine
 * whether a species identifier represents an amount or a concentration
 * when it appears elsewhere in an SBML model.  The role of the attribute
 * \'hasOnlySubstanceUnits\' is to indicate whether the units of the species,
 * when the species identifier appears in mathematical formulas, are
 * intended to be concentration or amount.  The attribute takes on a
 * bool value.  In SBML Level&nbsp;3, the attribute has no default value
 * and must always be set in a model; in SBML Level&nbsp;2, it has a
 * default value of @c false.
 *
 * The <em>units of the species</em> are used in the following ways:
 * <ul>

 * <li> When the species\' identifier appears in a MathML formula, it
 * represents the species\' quantity, and the unit of measurement associated
 * with the quantity is as described above.
 * 
 * <li> The \'math\' elements of AssignmentRule, InitialAssignment and
 * EventAssignment objects referring to this species should all have the
 * same units as the unit of measurement associated with the species
 * quantity.
 * 
 * <li> In a RateRule object that defines the rate of change of the
 * species\' quantity, the unit associated with the rule\'s \'math\' element
 * should be equal to the unit of the species\' quantity divided by the
 * model-wide unit of <em>time</em>; in other words, {<em>unit of species
 * quantity</em>}/{<em>unit of time</em>}.
 * 
 * </ul>
 *
 *
 * @section species-constant The \'constant\' and \'boundaryCondition\' attributes
 *
 * The Species object class has two bool attributes named \'constant\' and
 * \'boundaryCondition\', used to indicate whether and how the quantity of
 * that species can vary during a simulation.  In SBML Level&nbsp;2 they
 * are optional; in SBML Level&nbsp;3 they are mandatory.  The following
 * table shows how to interpret the combined values of these attributes.
 *
 * @htmlinclude species-boundarycondition.html
 * 
 * By default, when a species is a product or reactant of one or more
 * reactions, its quantity is determined by those reactions.  In SBML, it
 * is possible to indicate that a given species\' quantity is <em>not</em>
 * determined by the set of reactions even when that species occurs as a
 * product or reactant; i.e., the species is on the <em>boundary</em> of
 * the reaction system, and its quantity is not determined by the
 * reactions.  The bool attribute \'boundaryCondition\' can be used to
 * indicate this.  A value of @c false indicates that the species @em is
 * part of the reaction system.  In SBML Level&nbsp;2, the attribute has a
 * default value of @c false, while in SBML Level&nbsp;3, it has no
 * default.
 *
 * The \'constant\' attribute indicates whether the species\' quantity can be
 * changed at all, regardless of whether by reactions, rules, or constructs
 * other than InitialAssignment.  A value of @c false indicates that the
 * species\' quantity can be changed.  (This is also a common value because
 * the purpose of most simulations is precisely to calculate changes in
 * species quantities.)  In SBML Level&nbsp;2, the attribute has a default
 * value of @c false, while in SBML Level&nbsp;3, it has no default.  Note
 * that the initial quantity of a species can be set by an
 * InitialAssignment irrespective of the value of the \'constant\' attribute.
 *
 * In practice, a \'boundaryCondition\' value of @c true means a differential
 * equation derived from the reaction definitions should not be generated
 * for the species.  However, the species\' quantity may still be changed by
 * AssignmentRule, RateRule, AlgebraicRule, Event, and InitialAssignment
 * constructs if its \'constant\' attribute is @c false.  Conversely, if the
 * species\' \'constant\' attribute is @c true, then its value cannot be
 * changed by anything except InitialAssignment.
 *
 * A species having \'boundaryCondition\'=@c false and \'constant\'=@c false
 * can appear as a product and/or reactant of one or more reactions in the
 * model.  If the species is a reactant or product of a reaction, it must
 * @em not also appear as the target of any AssignmentRule or RateRule
 * object in the model.  If instead the species has \'boundaryCondition\'=@c
 * false and \'constant\'=@c true, then it cannot appear as a reactant or
 * product, or as the target of any AssignmentRule, RateRule or
 * EventAssignment object in the model.
 *
 *
 * @section species-l2-convfactor The conversionFactor attribute in SBML Level&nbsp;3
 * 
 * In SBML Level&nbsp;3, Species has an additional optional attribute,
 * \'conversionFactor\', that defines a conversion factor that applies to a
 * particular species.  The value must be the identifier of a Parameter
 * object instance defined in the model.  That Parameter object must be a
 * constant, meaning its \'constant\' attribute must be set to @c true.
 * If a given Species object definition defines a value for its
 * \'conversionFactor\' attribute, it takes precedence over any factor
 * defined by the Model object\'s \'conversionFactor\' attribute.
 * 
 * The unit of measurement associated with a species\' quantity can be
 * different from the unit of extent of reactions in the model.  SBML
 * Level&nbsp;3 avoids implicit unit conversions by providing an explicit
 * way to indicate any unit conversion that might be required.  The use of
 * a conversion factor in computing the effects of reactions on a species\'
 * quantity is explained in detail in the SBML Level&nbsp;3 specification
 * document.  Because the value of the \'conversionFactor\' attribute is the
 * identifier of a Parameter object, and because parameters can have units
 * attached to them, the transformation from reaction extent units to
 * species units can be completely specified using this approach.
 * 
 * Note that the unit conversion factor is <strong>only applied when
 * calculating the effect of a reaction on a species</strong>.  It is not
 * used in any rules or other SBML constructs that affect the species, and
 * it is also not used when the value of the species is referenced in a
 * mathematical expression.
 * 
 *
 * @section species-l2-type The speciesType attribute in SBML Level&nbsp;2 Versions&nbsp;2&ndash;4
 *
 * In SBML Level&nbsp;2 Versions&nbsp;2&ndash;4, each species in a model
 * may optionally be designated as belonging to a particular species type.
 * The optional attribute \'speciesType\' is used to identify the species
 * type of the chemical entities that make up the pool represented by the
 * Species objects.  The attribute\'s value must be the identifier of an
 * existing SpeciesType object in the model.  If the \'speciesType\'
 * attribute is not present on a particular species definition, it means
 * the pool contains chemical entities of a type unique to that pool; in
 * effect, a virtual species type is assumed for that species, and no other
 * species can belong to that species type.  The value of \'speciesType\'
 * attributes on species have no effect on the numerical interpretation of
 * a model; simulators and other numerical analysis software may ignore
 * \'speciesType\' attributes.
 * 
 * There can be only one species of a given species type in any given
 * compartment of a model.  More specifically, for all Species objects
 * having a value for the \'speciesType\' attribute, the pair
 * <center>
 * (\'speciesType\' attribute value, \'compartment\' attribute value)
 * </center>
 * 
 * must be unique across the set of all Species object in a model.
 *
 * 
 * @section species-other The spatialSizeUnits attribute in SBML Level&nbsp;2 Versions&nbsp;1&ndash;2
 *
 * In versions of SBML Level&nbsp;2 before Version&nbsp;3, the class
 * Species included an attribute called \'spatialSizeUnits\', which allowed
 * explicitly setting the units of size for initial concentration.  LibSBML
 * retains this attribute for compatibility with older definitions of
 * Level&nbsp;2, but its use is strongly discouraged because many software
 * tools do no properly interpret this unit declaration and it is
 * incompatible with all SBML specifications after Level&nbsp;2
 * Version&nbsp;3.
 *
 * 
 * @section species-math Additional considerations for interpreting the numerical value of a species
 * 
 * Species are unique in SBML in that they have a kind of duality: a
 * species identifier may stand for either substance amount (meaning, a
 * count of the number of individual entities) or a concentration or
 * density (meaning, amount divided by a compartment size).  The previous
 * sections explain the meaning of a species identifier when it is
 * referenced in a mathematical formula or in rules or other SBML
 * constructs; however, it remains to specify what happens to a species
 * when the compartment in which it is located changes in size.
 * 
 * When a species definition has a \'hasOnlySubstanceUnits\' attribute value
 * of @c false and the size of the compartment in which the species is
 * located changes, the default in SBML is to assume that it is the
 * concentration that must be updated to account for the size change.  This
 * follows from the principle that, all other things held constant, if a
 * compartment simply changes in size, the size change does not in itself
 * cause an increase or decrease in the number of entities of any species
 * in that compartment.  In a sense, the default is that the @em amount of
 * a species is preserved across compartment size changes.  Upon such size
 * changes, the value of the concentration or density must be recalculated
 * from the simple relationship <em>concentration = amount / size</em> if
 * the value of the concentration is needed (for example, if the species
 * identifier appears in a mathematical formula or is otherwise referenced
 * in an SBML construct).  There is one exception: if the species\' quantity
 * is determined by an AssignmentRule, RateRule, AlgebraicRule, or an
 * EventAssignment and the species has a \'hasOnlySubstanceUnits\' attribute
 * value of @c false, it means that the <em>concentration</em> is assigned
 * by the rule or event; in that case, the <em>amount</em> must be
 * calculated when the compartment size changes.  (Events also require
 * additional care in this situation, because an event with multiple
 * assignments could conceivably reassign both a species quantity and a
 * compartment size simultaneously.  Please refer to the SBML
 * specifications for the details.)
 * 
 * Note that the above only matters if a species has a
 * \'hasOnlySubstanceUnits\' attribute value of @c false, meaning that the
 * species identifier refers to a concentration wherever the identifier
 * appears in a mathematical formula.  If instead the attribute\'s value is
 * @c true, then the identifier of the species <em>always</em> stands for
 * an amount wherever it appears in a mathematical formula or is referenced
 * by an SBML construct.  In that case, there is never a question about
 * whether an assignment or event is meant to affect the amount or
 * concentration: it is always the amount.
 * 
 * A particularly confusing situation can occur when the species has
 * \'constant\' attribute value of @c true in combination with a
 * \'hasOnlySubstanceUnits\' attribute value of @c false.  Suppose this
 * species is given a value for \'initialConcentration\'.  Does a \'constant\'
 * value of @c true mean that the concentration is held constant if the
 * compartment size changes?  No; it is still the amount that is kept
 * constant across a compartment size change.  The fact that the species
 * was initialized using a concentration value is irrelevant.
 * 
 *
 * 
 */
"


%typemap(csimports) ListOfSpecies "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Implementation of SBML Level&nbsp;2\'s %ListOfSpecies
 * construct.
 * 
 * *
 * 
 * The various ListOf___ classes in SBML are merely containers used for
 * organizing the main components of an SBML model.  All are derived from
 * the abstract class SBase, and inherit the various attributes and
 * subelements of SBase, such as \'metaid\' as and \'annotation\'.  The
 * ListOf___ classes do not add any attributes of their own.
 *
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 *
 * @htmlinclude listof-illustration.html
 *
 * Readers may wonder about the motivations for using the ListOf___
 * containers.  A simpler approach in XML might be to place the components
 * all directly at the top level of the model definition.  The choice made
 * in SBML is to group them within XML elements named after
 * ListOf<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from SBase means that software tools can add information @em about
 * the lists themselves into each list container\'s \'annotation\'.
 * 
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 *
 *
 */
"


%csmethodmodifiers Species::Species(unsigned int level, unsigned int version) "
/**
   * Creates a new Species using the given SBML @p level and @p version
   * values.
   *
   * @param level a long integer, the SBML Level to assign to this Species
   *
   * @param version a long integer, the SBML Version to assign to this
   * Species
   *
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the given @p level and @p version combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent SBMLDocument object.
   *
   * *
 * @note Upon the addition of a Species object to an SBMLDocument (e.g.,
 * using Model::addSpecies(@if java Species s@endif)), the SBML Level, SBML Version and XML
 * namespace of the document @em override the values used when creating
 * the Species object via this constructor.  This is necessary to ensure
 * that an SBML document is a consistent structure.  Nevertheless, the
 * ability to supply the values at the time of creation of a Species is
 * an important aid to producing valid SBML.  Knowledge of the intented
 * SBML Level and Version determine whether it is valid to assign a
 * particular value to an attribute, or whether it is valid to add an
 * object to an existing SBMLDocument.
 *
   */ public
";


%csmethodmodifiers Species::Species(SBMLNamespaces* sbmlns) "
/**
   * Creates a new Species using the given SBMLNamespaces object
   * @p sbmlns.
   *
   * *
 *  
 * The SBMLNamespaces object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML\'s SBMLNamespaces facilities is to create an
 * SBMLNamespaces object somewhere in a program once, then hand that object
 * as needed to object constructors that accept SBMLNamespaces as arguments.
 *
 * 
   *
   * It is worth emphasizing that although this constructor does not take
   * an identifier argument, in SBML Level&nbsp;2 and beyond, the \'id\'
   * (identifier) attribute of a Species is required to have a value.
   * Thus, callers are cautioned to assign a value after calling this
   * constructor.  Setting the identifier can be accomplished using the
   * method Species::setId(@if java String id@endif).
   *
   * @param sbmlns an SBMLNamespaces object.
   *
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the given @p level and @p version combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent SBMLDocument object.
   *
   * *
 * @note Upon the addition of a Species object to an SBMLDocument (e.g.,
 * using Model::addSpecies(@if java Species s@endif)), the SBML Level, SBML Version and XML
 * namespace of the document @em override the values used when creating
 * the Species object via this constructor.  This is necessary to ensure
 * that an SBML document is a consistent structure.  Nevertheless, the
 * ability to supply the values at the time of creation of a Species is
 * an important aid to producing valid SBML.  Knowledge of the intented
 * SBML Level and Version determine whether it is valid to assign a
 * particular value to an attribute, or whether it is valid to add an
 * object to an existing SBMLDocument.
 *
   */ public
";


%csmethodmodifiers Species::Species(const Species& orig) "
/**
   * Copy constructor; creates a copy of this Species object.
   *
   * @param orig the object to copy.
   * 
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the argument @p orig is @c null.
   */ public
";


%csmethodmodifiers Species::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor for this instance of Species.
   *
   * @param v the SBMLVisitor instance to be used.
   *
   * @return the result of calling <code>v.visit()</code>.
   */ public
";


%csmethodmodifiers Species::clone() const "
/**
   * Creates and returns a deep copy of this Species object.
   * 
   * @return a (deep) copy of this Species object.
   */ public new
";


%csmethodmodifiers Species::initDefaults "
/**
   * Initializes the fields of this Species object to \'typical\' defaults
   * values.
   *
   * The SBML Species component has slightly different aspects and
   * default attribute values in different SBML Levels and Versions.
   * This method sets the values to certain common defaults, based
   * mostly on what they are in SBML Level&nbsp;2.  Specifically:
   * <ul>
   * <li> Sets \'boundaryCondition\' to @c false
   * <li> Sets \'constant\' to @c false
   * <li> sets \'hasOnlySubstanceUnits\' to @c false
   * <li> (Applies to Level&nbsp;3 models only) Sets attribute \'substanceUnits\' to @c mole
   * </ul>
   */ public
";


%csmethodmodifiers Species::getId() const "
/**
   * Returns the value of the \'id\' attribute of this Species object.
   * 
   * @return the id of this Species object.
   */ public new
";


%csmethodmodifiers Species::getName() const "
/**
   * Returns the value of the \'name\' attribute of this Species object.
   * 
   * @return the name of this Species object.
   */ public new
";


%csmethodmodifiers Species::getSpeciesType() const "
/**
   * Get the type of this Species object object.
   * 
   * @return the value of the \'speciesType\' attribute of this
   * Species as a string.
   * 
   * @note The \'speciesType\' attribute is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.
   */ public
";


%csmethodmodifiers Species::getCompartment() const "
/**
   * Get the compartment in which this species is located.
   *
   * The compartment is designated by its identifier.
   * 
   * @return the value of the \'compartment\' attribute of this Species
   * object, as a string.
   */ public
";


%csmethodmodifiers Species::getInitialAmount() const "
/**
   * Get the value of the \'initialAmount\' attribute.
   * 
   * @return the initialAmount of this Species, as a float-point number.
   */ public
";


%csmethodmodifiers Species::getInitialConcentration() const "
/**
   * Get the value of the \'initialConcentration\' attribute.
   * 
   * @return the initialConcentration of this Species,, as a float-point
   * number.
   *
   * @note The attribute \'initialConcentration\' is only available in SBML
   * Level&nbsp;2 and&nbsp;3.  It does not exist on Species in Level&nbsp;1.
   */ public
";


%csmethodmodifiers Species::getSubstanceUnits() const "
/**
   * Get the value of the \'substanceUnits\' attribute.
   * 
   * @return the value of the \'substanceUnits\' attribute of this Species,
   * as a string.  An empty string indicates that no units have been
   * assigned.
   *
   * *
 * @note There is an important distinction to be made between <em>no units
 * assigned</em>, and assuming a value without units has any specific unit
 * such as <code>dimensionless</code>.  In SBML, default units are never
 * attributed to numbers, and numbers without units are not automatically
 * assumed to have the unit <code>dimensionless</code>.  Please consult the
 * relevant SBML specification document for a more in-depth explanation of
 * this topic and the SBML unit system.
 *
 *
   *
   * @see isSetSubstanceUnits()
   * @see setSubstanceUnits(string sid)
   */ public
";


%csmethodmodifiers Species::getSpatialSizeUnits() const "
/**
   * Get the value of the \'spatialSizeUnits\' attribute.
   * 
   * @return the value of the \'spatialSizeUnits\' attribute of this Species
   * object, as a string.
   *
   * *
 * @warning <span class=\'warning\'>In versions of SBML Level&nbsp;2 before
 * Version&nbsp;3, the class Species included an attribute called
 * \'spatialSizeUnits\', which allowed explicitly setting the units of size for
 * initial concentration.  This attribute was removed in SBML Level&nbsp;2
 * Version&nbsp;3.  LibSBML retains this attribute for compatibility with
 * older definitions of Level&nbsp;2, but its use is strongly discouraged
 * because it is incompatible with Level&nbsp;2 Version&nbsp;3 and
 * Level&nbsp;2 Version&nbsp;4.</span>
 *
   */ public
";


%csmethodmodifiers Species::getUnits() const "
/**
   * Get the value of the \'units\' attribute.
   * 
   * @return the units of this Species (L1 only).
   *
   * * 
 * @note The \'units\' attribute is defined only in SBML Level&nbsp;1.  In
 * SBML Level&nbsp;2 and Level&nbsp;3, it has been replaced by a
 * combination of \'substanceUnits\' and the units of the Compartment
 * object in which a species is located.  In SBML Level&nbsp;2
 * Versions&nbsp;1&ndash;2, an additional attribute \'spatialSizeUnits\'
 * helps determine the units of the species quantity, but this attribute
 * was removed in later versions of SBML Level&nbsp;2.
 * 
   */ public
";


%csmethodmodifiers Species::getHasOnlySubstanceUnits() const "
/**
   * Get the value of the \'hasOnlySubstanceUnits\' attribute.
   * 
   * @return @c true if this Species\' \'hasOnlySubstanceUnits\' attribute
   * value is nonzero, @c false otherwise.
   *
   * @note The \'hasOnlySubstanceUnits\' attribute does not exist in SBML
   * Level&nbsp;1.
   */ public
";


%csmethodmodifiers Species::getBoundaryCondition() const "
/**
   * Get the value of the \'boundaryCondition\' attribute.
   * 
   * @return @c true if this Species\' \'boundaryCondition\' attribute value
   * is nonzero, @c false otherwise.
   */ public
";


%csmethodmodifiers Species::getCharge() const "
/**
   * Get the value of the \'charge\' attribute.
   * 
   * @return the charge of this Species object.
   *
   * * 
 * @note Beginning in SBML Level&nbsp;2 Version&nbsp;2, the \'charge\'
 * attribute on Species is deprecated and in SBML Level&nbsp;3 it does
 * not exist at all.  Its use strongly discouraged.  Its presence is
 * considered a misfeature in earlier definitions of SBML because its
 * implications for the mathematics of a model were never defined, and in
 * any case, no known modeling system ever used it.  Instead, models take
 * account of charge values directly in their definitions of species by
 * (for example) having separate species identities for the charged and
 * uncharged versions of the same species.  This allows the condition to
 * affect model mathematics directly.  LibSBML retains this method for
 * easier compatibility with SBML Level&nbsp;1.
   */ public
";


%csmethodmodifiers Species::getConstant() const "
/**
   * Get the value of the \'constant\' attribute.
   * 
   * @return @c true if this Species\'s \'constant\' attribute value is
   * nonzero, @c false otherwise.
   *
   * @note The attribute \'constant\' is only available in SBML Levels&nbsp;2
   * and&nbsp;3.  It does not exist on Species in Level&nbsp;1.
   */ public
";


%csmethodmodifiers Species::getConversionFactor() const "
/**
   * Get the value of the \'conversionFactor\' attribute.
   * 
   * @return the conversionFactor of this Species, as a string.
   * 
   * @note The \'conversionFactor\' attribute was introduced in SBML
   * Level&nbsp;3.  It does not exist on Species in SBML Levels&nbsp;1
   * and&nbsp;2.
   */ public
";


%csmethodmodifiers Species::isSetId() const "
/**
   * Predicate returning @c true if this
   * Species object\'s \'id\' attribute is set.
   *
   * @return @c true if the \'id\' attribute of this Species is
   * set, @c false otherwise.
   */ public new
";


%csmethodmodifiers Species::isSetName() const "
/**
   * Predicate returning @c true if this
   * Species object\'s \'name\' attribute is set.
   *
   * @return @c true if the \'name\' attribute of this Species is
   * set, @c false otherwise.
   */ public new
";


%csmethodmodifiers Species::isSetSpeciesType() const "
/**
   * Predicate returning @c true if this Species object\'s
   * \'speciesType\' attribute is set.
   *
   * @return @c true if the \'speciesType\' attribute of this Species is
   * set, @c false otherwise.
   * 
   * @note The \'speciesType\' attribute is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.
   */ public
";


%csmethodmodifiers Species::isSetCompartment() const "
/**
   * Predicate returning @c true if this
   * Species object\'s \'compartment\' attribute is set.
   *
   * @return @c true if the \'compartment\' attribute of this Species is
   * set, @c false otherwise.
   */ public
";


%csmethodmodifiers Species::isSetInitialAmount() const "
/**
   * Predicate returning @c true if this
   * Species object\'s \'initialAmount\' attribute is set.
   *
   * @return @c true if the \'initialAmount\' attribute of this Species is
   * set, @c false otherwise.
   *
   * @note In SBML Level&nbsp;1, Species\' \'initialAmount\' is required and
   * therefore <em>should always be set</em>.  (However, in Level&nbsp;1, the
   * attribute has no default value either, so this method will not return
   * @c true until a value has been assigned.)  In SBML Level&nbsp;2,
   * \'initialAmount\' is optional and as such may or may not be set.
   */ public
";


%csmethodmodifiers Species::isSetInitialConcentration() const "
/**
   * Predicate returning @c true if this
   * Species object\'s \'initialConcentration\' attribute is set.
   *
   * @return @c true if the \'initialConcentration\' attribute of this Species is
   * set, @c false otherwise.
   *
   * @note The attribute \'initialConcentration\' is only available in SBML
   * Level&nbsp;2 and&nbsp;3.  It does not exist on Species in Level&nbsp;1.
   */ public
";


%csmethodmodifiers Species::isSetSubstanceUnits() const "
/**
   * Predicate returning @c true if this
   * Species object\'s \'substanceUnits\' attribute is set.
   *
   * @return @c true if the \'substanceUnits\' attribute of this Species is
   * set, @c false otherwise.
   */ public
";


%csmethodmodifiers Species::isSetSpatialSizeUnits() const "
/**
   * Predicate returning @c true if this
   * Species object\'s \'spatialSizeUnits\' attribute is set.
   *
   * @return @c true if the \'spatialSizeUnits\' attribute of this Species is
   * set, @c false otherwise.
   *
   * *
 * @warning <span class=\'warning\'>In versions of SBML Level&nbsp;2 before
 * Version&nbsp;3, the class Species included an attribute called
 * \'spatialSizeUnits\', which allowed explicitly setting the units of size for
 * initial concentration.  This attribute was removed in SBML Level&nbsp;2
 * Version&nbsp;3.  LibSBML retains this attribute for compatibility with
 * older definitions of Level&nbsp;2, but its use is strongly discouraged
 * because it is incompatible with Level&nbsp;2 Version&nbsp;3 and
 * Level&nbsp;2 Version&nbsp;4.</span>
 *
   */ public
";


%csmethodmodifiers Species::isSetUnits() const "
/**
   * Predicate returning @c true if
   * this Species object\'s \'units\' attribute is set.
   *
   * @return @c true if the \'units\' attribute of this Species is
   * set, @c false otherwise.
   */ public
";


%csmethodmodifiers Species::isSetCharge() const "
/**
   * Predicate returning @c true if this
   * Species object\'s \'charge\' attribute is set.
   *
   * @return @c true if the \'charge\' attribute of this Species is
   * set, @c false otherwise.
   *
   * * 
 * @note Beginning in SBML Level&nbsp;2 Version&nbsp;2, the \'charge\'
 * attribute on Species is deprecated and in SBML Level&nbsp;3 it does
 * not exist at all.  Its use strongly discouraged.  Its presence is
 * considered a misfeature in earlier definitions of SBML because its
 * implications for the mathematics of a model were never defined, and in
 * any case, no known modeling system ever used it.  Instead, models take
 * account of charge values directly in their definitions of species by
 * (for example) having separate species identities for the charged and
 * uncharged versions of the same species.  This allows the condition to
 * affect model mathematics directly.  LibSBML retains this method for
 * easier compatibility with SBML Level&nbsp;1. 
   */ public
";


%csmethodmodifiers Species::isSetConversionFactor() const "
/**
   * Predicate returning @c true if this
   * Species object\'s \'conversionFactor\' attribute is set.
   *
   * @return @c true if the \'conversionFactor\' attribute of this Species is
   * set, @c false otherwise.
   * 
   * @note The \'conversionFactor\' attribute was introduced in SBML
   * Level&nbsp;3.  It does not exist on Species in SBML Levels&nbsp;1
   * and&nbsp;2.
   */ public
";


%csmethodmodifiers Species::isSetBoundaryCondition() const "
/**
   * Predicate returning @c true if this
   * Species object\'s \'boundaryCondition\' attribute is set.
   *
   * @return @c true if the \'boundaryCondition\' attribute of this Species is
   * set, @c false otherwise.
   */ public
";


%csmethodmodifiers Species::isSetHasOnlySubstanceUnits() const "
/**
   * Predicate returning @c true if this
   * Species object\'s \'hasOnlySubstanceUnits\' attribute is set.
   *
   * @return @c true if the \'hasOnlySubstanceUnits\' attribute of this Species is
   * set, @c false otherwise.
   *
   * @note The \'hasOnlySubstanceUnits\' attribute does not exist in SBML
   * Level&nbsp;1.
   */ public
";


%csmethodmodifiers Species::isSetConstant() const "
/**
   * Predicate returning @c true if this
   * Species object\'s \'constant\' attribute is set.
   *
   * @return @c true if the \'constant\' attribute of this Species is
   * set, @c false otherwise.
   *
   * @note The attribute \'constant\' is only available in SBML Levels&nbsp;2
   * and&nbsp;3.  It does not exist on Species in Level&nbsp;1.
   */ public
";


%csmethodmodifiers Species::setId(const std::string& sid) "
/**
   * Sets the value of the \'id\' attribute of this Species object.
   *
   * The string @p sid is copied.
   *
   * *
 * 
 * SBML has strict requirements for the syntax of identifiers, that is, the
 * values of the \'id\' attribute present on most types of SBML objects.
 * The following is a summary of the definition of the SBML identifier type 
 * <code>SId</code>, which defines the permitted syntax of identifiers.  We
 * express the syntax using an extended form of BNF notation: 
 * <pre style=\'margin-left: 2em; border: none; font-weight: bold; font-size: 13px; color: black\'>
 * letter ::= \'a\'..\'z\',\'A\'..\'Z\'
 * digit  ::= \'0\'..\'9\'
 * idChar ::= letter | digit | \'_\'
 * SId    ::= ( letter | \'_\' ) idChar*
 * </pre>
 * The characters <code>(</code> and <code>)</code> are used for grouping, the
 * character <code>*</code> \'zero or more times\', and the character
 * <code>|</code> indicates logical \'or\'.  The equality of SBML identifiers is
 * determined by an exact character sequence match; i.e., comparisons must be
 * performed in a case-sensitive manner.  In addition, there are a few
 * conditions for the uniqueness of identifiers in an SBML model.  Please
 * consult the SBML specifications for the exact details of the uniqueness
 * requirements.
 * 
 *
   *
   * @param sid the string to use as the identifier of this Species
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public new
";


%csmethodmodifiers Species::setName(const std::string& name) "
/**
   * Sets the value of the \'name\' attribute of this Species object.
   *
   * The string in @p name is copied.
   *
   * @param name the new name for the Species
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public new
";


%csmethodmodifiers Species::setSpeciesType(const std::string& sid) "
/**
   * Sets the \'speciesType\' attribute of this Species object.
   *
   * @param sid the identifier of a SpeciesType object defined elsewhere
   * in this Model.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   * 
   * @note The \'speciesType\' attribute is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.
   */ public
";


%csmethodmodifiers Species::setCompartment(const std::string& sid) "
/**
   * Sets the \'compartment\' attribute of this Species object.
   *
   * @param sid the identifier of a Compartment object defined elsewhere
   * in this Model.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers Species::setInitialAmount(double value) "
/**
   * Sets the \'initialAmount\' attribute of this Species and marks the field
   * as set.
   *
   * This method also unsets the \'initialConcentration\' attribute.
   *
   * @param value the value to which the \'initialAmount\' attribute should
   * be set.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   */ public
";


%csmethodmodifiers Species::setInitialConcentration(double value) "
/**
   * Sets the \'initialConcentration\' attribute of this Species and marks
   * the field as set.
   *
   * This method also unsets the \'initialAmount\' attribute.
   *
   * @param value the value to which the \'initialConcentration\' attribute
   * should be set.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   *
   * @note The attribute \'initialConcentration\' is only available in SBML
   * Level&nbsp;2 and&nbsp;3.  It does not exist on Species in Level&nbsp;1.
   */ public
";


%csmethodmodifiers Species::setSubstanceUnits(const std::string& sid) "
/**
   * Sets the \'substanceUnits\' attribute of this Species object.
   *
   * @param sid the identifier of the unit to use.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers Species::setSpatialSizeUnits(const std::string& sid) "
/**
   * (SBML Level&nbsp;2 Versions&nbsp;1&ndash;2) Sets the \'spatialSizeUnits\' attribute of this Species object.
   *
   * @param sid the identifier of the unit to use.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   *
   * *
 * @warning <span class=\'warning\'>In versions of SBML Level&nbsp;2 before
 * Version&nbsp;3, the class Species included an attribute called
 * \'spatialSizeUnits\', which allowed explicitly setting the units of size for
 * initial concentration.  This attribute was removed in SBML Level&nbsp;2
 * Version&nbsp;3.  LibSBML retains this attribute for compatibility with
 * older definitions of Level&nbsp;2, but its use is strongly discouraged
 * because it is incompatible with Level&nbsp;2 Version&nbsp;3 and
 * Level&nbsp;2 Version&nbsp;4.</span>
 *
   */ public
";


%csmethodmodifiers Species::setUnits(const std::string& sname) "
/**
   * (SBML Level&nbsp;1 only) Sets the units of this Species object.
   *
   * @param sname the identifier of the unit to use.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
  */ public
";


%csmethodmodifiers Species::setHasOnlySubstanceUnits(bool value) "
/**
   * Sets the \'hasOnlySubstanceUnits\' attribute of this Species object.
   *
   * @param value bool value for the \'hasOnlySubstanceUnits\' attribute.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   *
   * @note The \'hasOnlySubstanceUnits\' attribute does not exist in SBML
   * Level&nbsp;1.
   */ public
";


%csmethodmodifiers Species::setBoundaryCondition(bool value) "
/**
   * Sets the \'boundaryCondition\' attribute of this Species object.
   *
   * @param value bool value for the \'boundaryCondition\' attribute.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   */ public
";


%csmethodmodifiers Species::setCharge(int value) "
/**
   * Sets the \'charge\' attribute of this Species object.
   *
   * @param value an integer to which to set the \'charge\' to.
   *
   * * 
 * @note Beginning in SBML Level&nbsp;2 Version&nbsp;2, the \'charge\'
 * attribute on Species is deprecated and in SBML Level&nbsp;3 it does
 * not exist at all.  Its use strongly discouraged.  Its presence is
 * considered a misfeature in earlier definitions of SBML because its
 * implications for the mathematics of a model were never defined, and in
 * any case, no known modeling system ever used it.  Instead, models take
 * account of charge values directly in their definitions of species by
 * (for example) having separate species identities for the charged and
 * uncharged versions of the same species.  This allows the condition to
 * affect model mathematics directly.  LibSBML retains this method for
 * easier compatibility with SBML Level&nbsp;1. 
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   */ public
";


%csmethodmodifiers Species::setConstant(bool value) "
/**
   * Sets the \'constant\' attribute of this Species object.
   *
   * @param value a bool value for the \'constant\' attribute
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   *
   * @note The attribute \'constant\' is only available in SBML Levels&nbsp;2
   * and&nbsp;3.  It does not exist on Species in Level&nbsp;1.
   */ public
";


%csmethodmodifiers Species::setConversionFactor(const std::string& sid) "
/**
   * Sets the value of the \'conversionFactor\' attribute of this Species object.
   *
   * The string in @p sid is copied.
   *
   * @param sid the new conversionFactor for the Species
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   * 
   * @note The \'conversionFactor\' attribute was introduced in SBML
   * Level&nbsp;3.  It does not exist on Species in SBML Levels&nbsp;1
   * and&nbsp;2.
   */ public
";


%csmethodmodifiers Species::unsetName "
/**
   * Unsets the value of the \'name\' attribute of this Species object.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public new
";


%csmethodmodifiers Species::unsetSpeciesType "
/**
   * Unsets the \'speciesType\' attribute value of this Species object.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   *
   * @note The attribute \'speciesType\' is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.
   */ public
";


%csmethodmodifiers Species::unsetInitialAmount "
/**
   * Unsets the \'initialAmount\' attribute value of this Species object.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers Species::unsetInitialConcentration "
/**
   * Unsets the \'initialConcentration\' attribute value of this Species object.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   *
   * @note The attribute \'initialConcentration\' is only available in SBML
   * Level&nbsp;2 and&nbsp;3.  It does not exist on Species in Level&nbsp;1.
   */ public
";


%csmethodmodifiers Species::unsetSubstanceUnits "
/**
   * Unsets the \'substanceUnits\' attribute value of this Species object.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers Species::unsetSpatialSizeUnits "
/**
   * Unsets the \'spatialSizeUnits\' attribute value of this Species object.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   *
   * *
 * @warning <span class=\'warning\'>In versions of SBML Level&nbsp;2 before
 * Version&nbsp;3, the class Species included an attribute called
 * \'spatialSizeUnits\', which allowed explicitly setting the units of size for
 * initial concentration.  This attribute was removed in SBML Level&nbsp;2
 * Version&nbsp;3.  LibSBML retains this attribute for compatibility with
 * older definitions of Level&nbsp;2, but its use is strongly discouraged
 * because it is incompatible with Level&nbsp;2 Version&nbsp;3 and
 * Level&nbsp;2 Version&nbsp;4.</span>
 *
   */ public
";


%csmethodmodifiers Species::unsetUnits "
/**
   * Unsets the \'units\' attribute value of this Species object.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers Species::unsetCharge "
/**
   * Unsets the \'charge\' attribute
   * value of this Species object.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   *
   * * 
 * @note Beginning in SBML Level&nbsp;2 Version&nbsp;2, the \'charge\'
 * attribute on Species is deprecated and in SBML Level&nbsp;3 it does
 * not exist at all.  Its use strongly discouraged.  Its presence is
 * considered a misfeature in earlier definitions of SBML because its
 * implications for the mathematics of a model were never defined, and in
 * any case, no known modeling system ever used it.  Instead, models take
 * account of charge values directly in their definitions of species by
 * (for example) having separate species identities for the charged and
 * uncharged versions of the same species.  This allows the condition to
 * affect model mathematics directly.  LibSBML retains this method for
 * easier compatibility with SBML Level&nbsp;1. 
   */ public
";


%csmethodmodifiers Species::unsetConversionFactor "
/**
   * Unsets the \'conversionFactor\' attribute value of this Species object.
   *
   * @return integer value indicating success/failure of the
   * function. The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   * 
   * @note The \'conversionFactor\' attribute was introduced in SBML
   * Level&nbsp;3.  It does not exist on Species in SBML Levels&nbsp;1
   * and&nbsp;2.
   */ public
";


%csmethodmodifiers Species::getDerivedUnitDefinition "
/**
   * Constructs and returns a UnitDefinition that corresponds to the units
   * of this Species\' amount or concentration.
   *
   * Species in SBML have an attribute (\'substanceUnits\') for declaring the
   * units of measurement intended for the species\' amount or concentration
   * (depending on which one applies).  In the absence of a value given for
   * \'substanceUnits\', the units are taken from the enclosing Model\'s
   * definition of @c \'substance\' or @c \'substance\'/<em>(size of the
   * compartment)</em> in which the species is located, or finally, if
   * these are not redefined by the Model, the relevant SBML default units
   * for those quantities.  Following that procedure, the method
   * @if java Species::getDerivedUnitDefinition()@else getDerivedUnitDefinition()@endif
   * returns a UnitDefinition based on the
   * interpreted units of this species\'s amount or concentration.
   *
   * Note that the functionality that facilitates unit analysis depends 
   * on the model as a whole.  Thus, in cases where the object has not 
   * been added to a model or the model itself is incomplete,
   * unit analysis is not possible and this method will return @c null.
   *
   * Note also that unit declarations for Species are in terms of the @em
   * identifier of a unit, but this method returns a UnitDefinition object,
   * not a unit identifier.  It does this by constructing an appropriate
   * UnitDefinition.  Callers may find this particularly useful when used
   * in conjunction with the helper methods on UnitDefinition for comparing
   * different UnitDefinition objects.
   * 
   * In SBML Level&nbsp;2 specifications prior to Version&nbsp;3, Species
   * includes an additional attribute named \'spatialSizeUnits\', which
   * allows explicitly setting the units of size for initial concentration.
   * The @if java Species::getDerivedUnitDefinition()@else getDerivedUnitDefinition()@endif
   * takes this into account for models
   * expressed in SBML Level&nbsp;2 Versions&nbsp;1 and&nbsp;2.
   *
   * @return a UnitDefinition that expresses the units of this 
   * Species, or @c null if one cannot be constructed.
   *
   * @see getSubstanceUnits()
   */ public
";


%csmethodmodifiers Species::getDerivedUnitDefinition() const "
/**
   * Constructs and returns a UnitDefinition that corresponds to the units
   * of this Species\' amount or concentration.
   *
   * Species in SBML have an attribute (\'substanceUnits\') for declaring the
   * units of measurement intended for the species\' amount or concentration
   * (depending on which one applies).  In the absence of a value given for
   * \'substanceUnits\', the units are taken from the enclosing Model\'s
   * definition of @c \'substance\' or @c \'substance\'/<em>(size of the
   * compartment)</em> in which the species is located, or finally, if
   * these are not redefined by the Model, the relevant SBML default units
   * for those quantities.  Following that procedure, the method
   * @if java Species::getDerivedUnitDefinition()@else getDerivedUnitDefinition()@endif
   * returns a UnitDefinition based on the
   * interpreted units of this species\'s amount or concentration.
   *
   * Note that the functionality that facilitates unit analysis depends 
   * on the model as a whole.  Thus, in cases where the object has not 
   * been added to a model or the model itself is incomplete,
   * unit analysis is not possible and this method will return @c null.
   *
   * Note also that unit declarations for Species are in terms of the @em
   * identifier of a unit, but this method returns a UnitDefinition object,
   * not a unit identifier.  It does this by constructing an appropriate
   * UnitDefinition.  Callers may find this particularly useful when used
   * in conjunction with the helper methods on UnitDefinition for comparing
   * different UnitDefinition objects.
   * 
   * In SBML Level&nbsp;2 specifications prior to Version&nbsp;3, Species
   * includes an additional attribute named \'spatialSizeUnits\', which
   * allows explicitly setting the units of size for initial concentration.
   * The @if java Species::getDerivedUnitDefinition()@else getDerivedUnitDefinition()@endif
   * takes this into account for models
   * expressed in SBML Level&nbsp;2 Versions&nbsp;1 and&nbsp;2.
   *
   * @return a UnitDefinition that expresses the units of this 
   * Species, or @c null if one cannot be constructed.
   *
   * @see getSubstanceUnits()
   */ public
";


%csmethodmodifiers Species::getTypeCode() const "
/**
   * Returns the libSBML type code for this SBML object.
   * 
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object:
   * @link libsbmlcs.libsbml.SBML_SPECIES SBML_SPECIES@endlink (default).
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see getElementName()
   * @see getPackageName()
   */ public new
";


%csmethodmodifiers Species::getElementName() const "
/**
   * Returns the XML element name of this object, which for Species, is
   * always @c \'species\'.
   * 
   * @return the name of this element, i.e., @c \'species\'.
   */ public new
";


%csmethodmodifiers Species::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Species::hasRequiredAttributes() const "
/**
   * Predicate returning @c true if
   * all the required attributes for this Species object
   * have been set.
   *
   * @note The required attributes for a Species object are:
   * @li \'id\' (or \'name\' in SBML Level&nbsp;1)
   * @li \'compartment\'
   * @li \'initialAmount\' (required in SBML Level&nbsp;1 only; optional otherwise)
   * @li \'hasOnlySubstanceUnits\' (required in SBML Level&nbsp;3; optional in SBML Level&nbsp;2)
   * @li \'boundaryCondition\' (required in SBML Level&nbsp;3; optional in Levels&nbsp;1 and&nbsp;2)
   * @li \'constant\' (required in SBML Level&nbsp;3; optional in SBML Level&nbsp;2)
   *
   * @return a bool value indicating whether all the required
   * attributes for this object have been defined.
   */ public new
";


%csmethodmodifiers Species::renameSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames all the @c SIdRef attributes on this element, including any
   * found in MathML.
   *
   * *
 * 

 * In SBML, object identifiers are of a data type called <code>SId</code>.
 * In SBML Level&nbsp;3, an explicit data type called <code>SIdRef</code> was
 * introduced for attribute values that refer to <code>SId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to an identifier\', but the effective
 * data type was the same as <code>SIdRef</code>in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>SIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 *
 *
   * 
   * This method works by looking at all attributes and (if appropriate)
   * mathematical formulas, comparing the identifiers to the value of @p
   * oldid.  If any matches are found, the matching identifiers are replaced
   * with @p newid.  The method does @em not descend into child elements.
   *
   * @param oldid the old identifier
   * @param newid the new identifier
   */ public
";


%csmethodmodifiers Species::renameUnitSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames all the @c UnitSIdRef attributes on this element.
   *
   * *
 * 
 * In SBML, unit definitions have identifiers of type <code>UnitSId</code>.  In
 * SBML Level&nbsp;3, an explicit data type called <code>UnitSIdRef</code> was
 * introduced for attribute values that refer to <code>UnitSId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to a unit identifier\', but the effective
 * data type was the same as <code>UnitSIdRef</code> in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>UnitSIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 * 
 *
   *
   * This method works by looking at all unit identifier attribute values
   * (including, if appropriate, inside mathematical formulas), comparing the
   * unit identifiers to the value of @p oldid.  If any matches are found,
   * the matching identifiers are replaced with @p newid.  The method does
   * @em not descend into child elements.
   * 
   * @param oldid the old identifier
   * @param newid the new identifier
   */ public
";


%csmethodmodifiers Species::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Species::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Subclasses should override this method to read values from the given
   * XMLAttributes set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Species::readL1Attributes(const XMLAttributes& attributes) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Species::readL2Attributes(const XMLAttributes& attributes) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Species::readL3Attributes(const XMLAttributes& attributes) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Species::writeAttributes(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Species::isExplicitlySetBoundaryCondition() const "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Species::isExplicitlySetConstant() const "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Species::isExplicitlySetHasOnlySubsUnits() const "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfSpecies::ListOfSpecies(unsigned int level, unsigned int version) "
/**
   * Creates a new ListOfSpecies object.
   *
   * The object is constructed such that it is valid for the given SBML
   * Level and Version combination.
   *
   * @param level the SBML Level
   * 
   * @param version the Version within the SBML Level
   */ public
";


%csmethodmodifiers ListOfSpecies::ListOfSpecies(SBMLNamespaces* sbmlns) "
/**
   * Creates a new ListOfSpecies object.
   *
   * The object is constructed such that it is valid for the SBML Level and
   * Version combination determined by the SBMLNamespaces object in @p
   * sbmlns.
   *
   * @param sbmlns an SBMLNamespaces object that is used to determine the
   * characteristics of the ListOfSpecies object to be created.
   */ public
";


%csmethodmodifiers ListOfSpecies::clone() const "
/**
   * Creates and returns a deep copy of this ListOfSpeciess instance.
   *
   * @return a (deep) copy of this ListOfSpeciess.
   */ public new
";


%csmethodmodifiers ListOfSpecies::getItemTypeCode() const "
/**
   * Returns the libSBML type code for the objects contained in this ListOf
   * (i.e., Species objects, if the list is non-empty).
   * 
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for objects contained in this list:
   * @link libsbmlcs.libsbml.SBML_SPECIES SBML_SPECIES@endlink (default).
   *
   * @see getElementName()
   * @see getPackageName()
   */ public new
";


%csmethodmodifiers ListOfSpecies::getElementName() const "
/**
   * Returns the XML element name of this object.
   *
   * For ListOfSpeciess, the XML element name is @c \'listOfSpeciess\'.
   * 
   * @return the name of this element, i.e., @c \'listOfSpeciess\'.
   */ public new
";


%csmethodmodifiers ListOfSpecies::get(unsigned int n) "
/**
   * Get a Species from the ListOfSpecies.
   *
   * @param n the index number of the Species to get.
   * 
   * @return the nth Species in this ListOfSpecies.
   *
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfSpecies::get "
/**
   * Get a Species from the ListOfSpecies.
   *
   * @param n the index number of the Species to get.
   * 
   * @return the nth Species in this ListOfSpecies.
   *
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfSpecies::get(const std::string& sid) "
/**
   * Get a Species from the ListOfSpecies
   * based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the Species to get.
   * 
   * @return Species in this ListOfSpecies
   * with the given @p sid or @c null if no such
   * Species exists.
   *
   * @see get(long n)
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfSpecies::get(const std::string& sid) const "
/**
   * Get a Species from the ListOfSpecies
   * based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the Species to get.
   * 
   * @return Species in this ListOfSpecies
   * with the given @p sid or @c null if no such
   * Species exists.
   *
   * @see get(long n)
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfSpecies::remove(unsigned int n) "
/**
   * Removes the nth item from this ListOfSpeciess items and returns a pointer to
   * it.
   *
   * The caller owns the returned item and is responsible for deleting it.
   *
   * @param n the index of the item to remove
   *
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfSpecies::remove(const std::string& sid) "
/**
   * Removes item in this ListOfSpeciess items with the given identifier.
   *
   * The caller owns the returned item and is responsible for deleting it.
   * If none of the items in this list have the identifier @p sid, then @c
   * null is returned.
   *
   * @param sid the identifier of the item to remove
   *
   * @return the item removed.  As mentioned above, the caller owns the
   * returned item.
   */ public new
";


%csmethodmodifiers ListOfSpecies::getElementPosition() const "
/**
   * Get the ordinal position of this element in the containing object
   * (which in this case is the Model object).
   *
   * The ordering of elements in the XML form of SBML is generally fixed
   * for most components in SBML.  So, for example, the ListOfSpeciess in
   * a model is (in SBML Level&nbsp;2 Version&nbsp;4) the sixth
   * ListOf___.  (However, it differs for different Levels and Versions of
   * SBML.)
   *
   * @return the ordinal position of the element with respect to its
   * siblings, or @c -1 (default) to indicate the position is not significant.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfSpecies::createObject(XMLInputStream& stream) "
/**
   * Create and return an SBML object of this class, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or @c null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%typemap(csimports) Parameter "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Implementation of SBML\'s %Parameter construct.
 *
 * A Parameter is used in SBML to define a symbol associated with a value;
 * this symbol can then be used in mathematical formulas in a model.  By
 * default, parameters have constant value for the duration of a
 * simulation, and for this reason are called @em parameters instead of @em
 * variables in SBML, although it is crucial to understand that <em>SBML
 * parameters represent both concepts</em>.  Whether a given SBML
 * parameter is intended to be constant or variable is indicated by the
 * value of its \'constant\' attribute.
 * 
 * SBML\'s Parameter has a required attribute, \'id\', that gives the
 * parameter a unique identifier by which other parts of an SBML model
 * definition can refer to it.  A parameter can also have an optional
 * \'name\' attribute of type @c string.  Identifiers and names must be used
 * according to the guidelines described in the SBML specifications.
 * 
 * The optional attribute \'value\' determines the value (of type @c double)
 * assigned to the parameter.  A missing value for \'value\' implies that
 * the value either is unknown, or to be obtained from an external source,
 * or determined by an initial assignment.  The unit of measurement
 * associated with the value of the parameter can be specified using the
 * optional attribute \'units\'.  Here we only mention briefly some notable
 * points about the possible unit choices, but readers are urged to consult
 * the SBML specification documents for more information:
 * <ul>
 *
 * <li> In SBML Level&nbsp;3, there are no constraints on the units that
 * can be assigned to parameters in a model; there are also no units to
 * inherit from the enclosing Model object (unlike the case for, e.g.,
 * Species and Compartment).
 *
 * <li> In SBML Level&nbsp;2, the value assigned to the parameter\'s \'units\'
 * attribute must be chosen from one of the following possibilities: one of
 * the base unit identifiers defined in SBML; one of the built-in unit
 * identifiers @c \'substance\', @c \'time\', @c \'volume\', @c \'area\' or @c
 * \'length\'; or the identifier of a new unit defined in the list of unit
 * definitions in the enclosing Model structure.  There are no constraints
 * on the units that can be chosen from these sets.  There are no default
 * units for parameters.
 * </ul>
 *
 * The Parameter structure has another bool attribute named \'constant\'
 * that is used to indicate whether the parameter\'s value can vary during a
 * simulation.  (In SBML Level&nbsp;3, the attribute is mandatory and must
 * be given a value; in SBML Levels below Level&nbsp;3, the attribute is
 * optional.)  A value of @c true indicates the parameter\'s value cannot be
 * changed by any construct except InitialAssignment.  Conversely, if the
 * value of \'constant\' is @c false, other constructs in SBML, such as rules
 * and events, can change the value of the parameter.
 *
 * SBML Level&nbsp;3 uses a separate object class, LocalParameter, for
 * parameters that are local to a Reaction\'s KineticLaw.  In Levels prior
 * to SBML Level&nbsp;3, the Parameter class is used both for definitions
 * of global parameters, as well as reaction-local parameters stored in a
 * list within KineticLaw objects.  Parameter objects that are local to a
 * reaction (that is, those defined within the KineticLaw structure of a
 * Reaction) cannot be changed by rules and therefore are <em>implicitly
 * always constant</em>; consequently, in SBML Level&nbsp;2, parameter
 * definitions within Reaction structures should @em not have their
 * \'constant\' attribute set to @c false.
 * 
 * What if a global parameter has its \'constant\' attribute set to @c false,
 * but the model does not contain any rules, events or other constructs
 * that ever change its value over time?  Although the model may be
 * suspect, this situation is not strictly an error.  A value of @c false
 * for \'constant\' only indicates that a parameter @em can change value, not
 * that it @em must.
 *
 * As with all other major SBML components, Parameter is derived from
 * SBase, and the methods defined on SBase are available on Parameter.
 * 
 * @note The use of the term @em parameter in SBML sometimes leads to
 * confusion among readers who have a particular notion of what something
 * called \'parameter\' should be.  It has been the source of heated debate,
 * but despite this, no one has yet found an adequate replacement term that
 * does not have different connotations to different people and hence leads
 * to confusion among @em some subset of users.  Perhaps it would have been
 * better to have two constructs, one called @em constants and the other
 * called @em variables.  The current approach in SBML is simply more
 * parsimonious, using a single Parameter construct with the bool flag
 * \'constant\' indicating which flavor it is.  In any case, readers are
 * implored to look past their particular definition of a @em parameter and
 * simply view SBML\'s Parameter as a single mechanism for defining both
 * constants and (additional) variables in a model.  (We write @em
 * additional because the species in a model are usually considered to be
 * the central variables.)  After all, software tools are not required to
 * expose to users the actual names of particular SBML constructs, and
 * thus tools can present to their users whatever terms their designers
 * feel best matches their target audience.
 *
 * @see ListOfParameters
 *
 *
 * 
 */
"


%typemap(csimports) ListOfParameters "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Implementation of SBML\'s %ListOfParameters construct.
 * 
 * *
 * 
 * The various ListOf___ classes in SBML are merely containers used for
 * organizing the main components of an SBML model.  All are derived from
 * the abstract class SBase, and inherit the various attributes and
 * subelements of SBase, such as \'metaid\' as and \'annotation\'.  The
 * ListOf___ classes do not add any attributes of their own.
 *
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 *
 * @htmlinclude listof-illustration.html
 *
 * Readers may wonder about the motivations for using the ListOf___
 * containers.  A simpler approach in XML might be to place the components
 * all directly at the top level of the model definition.  The choice made
 * in SBML is to group them within XML elements named after
 * ListOf<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from SBase means that software tools can add information @em about
 * the lists themselves into each list container\'s \'annotation\'.
 * 
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 *
 *
 */
"


%csmethodmodifiers Parameter::Parameter(unsigned int level, unsigned int version) "
/**
   * Creates a new Parameter using the given SBML @p level and @p version
   * values.
   *
   * @param level a long integer, the SBML Level to assign to this Parameter
   *
   * @param version a long integer, the SBML Version to assign to this
   * Parameter
   *
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the given @p level and @p version combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent SBMLDocument object.
   *
   * *
 * @note Upon the addition of a Parameter object to an SBMLDocument
 * (e.g., using Model::addParameter(@if java Parameter p@endif)), the SBML Level, SBML Version
 * and XML namespace of the document @em override the values used
 * when creating the Parameter object via this constructor.  This is
 * necessary to ensure that an SBML document is a consistent structure.
 * Nevertheless, the ability to supply the values at the time of creation
 * of a Parameter is an important aid to producing valid SBML.  Knowledge
 * of the intented SBML Level and Version determine whether it is valid
 * to assign a particular value to an attribute, or whether it is valid
 * to add an object to an existing SBMLDocument.
 *
   */ public
";


%csmethodmodifiers Parameter::Parameter(SBMLNamespaces* sbmlns) "
/**
   * Creates a new Parameter using the given SBMLNamespaces object
   * @p sbmlns.
   *
   * *
 *  
 * The SBMLNamespaces object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML\'s SBMLNamespaces facilities is to create an
 * SBMLNamespaces object somewhere in a program once, then hand that object
 * as needed to object constructors that accept SBMLNamespaces as arguments.
 *
 * 
   *
   * It is worth emphasizing that although this constructor does not take
   * an identifier argument, in SBML Level&nbsp;2 and beyond, the \'id\'
   * (identifier) attribute of a Parameter is required to have a value.
   * Thus, callers are cautioned to assign a value after calling this
   * constructor if no identifier is provided as an argument.  Setting the
   * identifier can be accomplished using the method
   * @if java setId(String id)@else setId()@endif.
   *
   * @param sbmlns an SBMLNamespaces object.
   *
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the given @p level and @p version combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent SBMLDocument object.
   *
   * *
 * @note Upon the addition of a Parameter object to an SBMLDocument
 * (e.g., using Model::addParameter(@if java Parameter p@endif)), the SBML Level, SBML Version
 * and XML namespace of the document @em override the values used
 * when creating the Parameter object via this constructor.  This is
 * necessary to ensure that an SBML document is a consistent structure.
 * Nevertheless, the ability to supply the values at the time of creation
 * of a Parameter is an important aid to producing valid SBML.  Knowledge
 * of the intented SBML Level and Version determine whether it is valid
 * to assign a particular value to an attribute, or whether it is valid
 * to add an object to an existing SBMLDocument.
 *
   */ public
";


%csmethodmodifiers Parameter::Parameter(const Parameter& orig) "
/**
   * Copy constructor; creates a copy of a Parameter.
   * 
   * @param orig the Parameter instance to copy.
   * 
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the argument @p orig is @c null.
   */ public
";


%csmethodmodifiers Parameter::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor for this instance of Parameter.
   *
   * @param v the SBMLVisitor instance to be used.
   *
   * @return the result of calling <code>v.visit()</code>, indicating
   * whether the Visitor would like to visit the next Parameter object in
   * the list of parameters within which @em the present object is
   * embedded.
   */ public
";


%csmethodmodifiers Parameter::clone() const "
/**
   * Creates and returns a deep copy of this Parameter.
   * 
   * @return a (deep) copy of this Parameter.
   */ public new
";


%csmethodmodifiers Parameter::initDefaults "
/**
   * Initializes the fields of this Parameter object to \'typical\' defaults
   * values.
   *
   * The SBML Parameter component has slightly different aspects and
   * default attribute values in different SBML Levels and Versions.  Many
   * SBML object classes defined by libSBML have an initDefaults() method
   * to set the values to certain common defaults, based mostly on what
   * they are in SBML Level&nbsp;2.  In the case of Parameter, this method
   * only sets the value of the \'constant\' attribute to @c true.
   *
   * @see getConstant()
   * @see isSetConstant()
   * @see setConstant(@if java bool flag@endif)
   */ public
";


%csmethodmodifiers Parameter::getId() const "
/**
   * Returns the value of the \'id\' attribute of this Parameter.
   * 
   * @return the id of this Parameter.
   */ public new
";


%csmethodmodifiers Parameter::getName() const "
/**
   * Returns the value of the \'name\' attribute of this Parameter.
   * 
   * @return the name of this Parameter.
   */ public new
";


%csmethodmodifiers Parameter::getValue() const "
/**
   * Gets the numerical value of this Parameter.
   * 
   * @return the value of the \'value\' attribute of this Parameter, as a
   * number of type @c double.
   *
   * @note <b>It is crucial</b> that callers not blindly call
   * Parameter::getValue() without first using Parameter::isSetValue() to
   * determine whether a value has ever been set.  Otherwise, the value
   * return by Parameter::getValue() may not actually represent a value
   * assigned to the parameter.  The reason is simply that the data type
   * @c double in a program always has @em some value.  A separate test is
   * needed to determine whether the value is a true model value, or
   * uninitialized data in a computer\'s memory location.
   * 
   * @see isSetValue()
   * @see setValue(double value)
   * @see getUnits()
   */ public
";


%csmethodmodifiers Parameter::getUnits() const "
/**
   * Gets the units defined for this Parameter.
   *
   * The value of an SBML parameter\'s \'units\' attribute establishes the
   * unit of measurement associated with the parameter\'s value.
   *
   * @return the value of the \'units\' attribute of this Parameter, as a
   * string.  An empty string indicates that no units have been assigned.
   *
   * *
 * @note There is an important distinction to be made between <em>no units
 * assigned</em>, and assuming a value without units has any specific unit
 * such as <code>dimensionless</code>.  In SBML, default units are never
 * attributed to numbers, and numbers without units are not automatically
 * assumed to have the unit <code>dimensionless</code>.  Please consult the
 * relevant SBML specification document for a more in-depth explanation of
 * this topic and the SBML unit system.
 *
 *
   * 
   * @see isSetUnits()
   * @see setUnits(@if java String units@endif)
   * @see getValue()
   */ public
";


%csmethodmodifiers Parameter::getConstant() const "
/**
   * Gets the value of the \'constant\' attribute of this Parameter instance.
   * 
   * @return @c true if this Parameter is declared as being constant,
   * @c false otherwise.
   *
   * *
 * @note Readers who view the documentation for LocalParameter may be
 * confused about the presence of this method.  LibSBML derives
 * LocalParameter from Parameter; however, this does not precisely match
 * the object hierarchy defined by SBML Level&nbsp;3, where
 * LocalParameter is derived directly from SBase and not Parameter.  We
 * believe this arrangement makes it easier for libSBML users to program
 * applications that work with both SBML Level&nbsp;2 and SBML
 * Level&nbsp;3, but programmers should also keep in mind this difference
 * exists.  A side-effect of libSBML\'s scheme is that certain methods on
 * LocalParameter that are inherited from Parameter do not actually have
 * relevance to LocalParameter objects.  An example of this is the
 * methods pertaining to Parameter\'s attribute \'constant\' (i.e.,
 * isSetConstant(), setConstant(), and getConstant()).
 *
   * 
   * @see isSetConstant()
   * @see setConstant(@if java bool flag@endif)
   */ public
";


%csmethodmodifiers Parameter::isSetId() const "
/**
   * Predicate returning @c true if this
   * Parameter\'s \'id\' attribute is set.
   *
   * @return @c true if the \'id\' attribute of this Parameter is
   * set, @c false otherwise.
   */ public new
";


%csmethodmodifiers Parameter::isSetName() const "
/**
   * Predicate returning @c true if this
   * Parameter\'s \'name\' attribute is set.
   *
   * @return @c true if the \'name\' attribute of this Parameter is
   * set, @c false otherwise.
   */ public new
";


%csmethodmodifiers Parameter::isSetValue() const "
/**
   * Predicate returning @c true if the
   * \'value\' attribute of this Parameter is set.
   *
   * In SBML definitions after SBML Level&nbsp;1 Version&nbsp;1,
   * parameter values are optional and have no defaults.  If a model read
   * from a file does not contain a setting for the \'value\' attribute of a
   * parameter, its value is considered unset; it does not default to any
   * particular value.  Similarly, when a Parameter object is created in
   * libSBML, it has no value until given a value.  The
   * Parameter::isSetValue() method allows calling applications to
   * determine whether a given parameter\'s value has ever been set.
   *
   * In SBML Level&nbsp;1 Version&nbsp;1, parameters are required to have
   * values and therefore, the value of a Parameter <b>should always be
   * set</b>.  In Level&nbsp;1 Version&nbsp;2 and beyond, the value is
   * optional and as such, the \'value\' attribute may or may not be set.
   *
   * @return @c true if the value of this Parameter is set,
   * @c false otherwise.
   *
   * @see getValue()
   * @see setValue(double value)
   */ public
";


%csmethodmodifiers Parameter::isSetUnits() const "
/**
   * Predicate returning @c true if the
   * \'units\' attribute of this Parameter is set.
   *
   * @return @c true if the \'units\' attribute of this Parameter is
   * set, @c false otherwise.
   *
   * *
 * @note There is an important distinction to be made between <em>no units
 * assigned</em>, and assuming a value without units has any specific unit
 * such as <code>dimensionless</code>.  In SBML, default units are never
 * attributed to numbers, and numbers without units are not automatically
 * assumed to have the unit <code>dimensionless</code>.  Please consult the
 * relevant SBML specification document for a more in-depth explanation of
 * this topic and the SBML unit system.
 *
 *
   */ public
";


%csmethodmodifiers Parameter::isSetConstant() const "
/**
   * Predicate returning @c true if the
   * \'constant\' attribute of this Parameter is set.
   *
   * @return @c true if the \'constant\' attribute of this Parameter is
   * set, @c false otherwise.
   *
   * *
 * @note Readers who view the documentation for LocalParameter may be
 * confused about the presence of this method.  LibSBML derives
 * LocalParameter from Parameter; however, this does not precisely match
 * the object hierarchy defined by SBML Level&nbsp;3, where
 * LocalParameter is derived directly from SBase and not Parameter.  We
 * believe this arrangement makes it easier for libSBML users to program
 * applications that work with both SBML Level&nbsp;2 and SBML
 * Level&nbsp;3, but programmers should also keep in mind this difference
 * exists.  A side-effect of libSBML\'s scheme is that certain methods on
 * LocalParameter that are inherited from Parameter do not actually have
 * relevance to LocalParameter objects.  An example of this is the
 * methods pertaining to Parameter\'s attribute \'constant\' (i.e.,
 * isSetConstant(), setConstant(), and getConstant()).
 *
   *
   * @see getConstant()
   * @see setConstant(@if java bool flag@endif)
   */ public
";


%csmethodmodifiers Parameter::setId(const std::string& sid) "
/**
   * Sets the value of the \'id\' attribute of this Parameter.
   *
   * The string @p sid is copied.
   *
   * *
 * 
 * SBML has strict requirements for the syntax of identifiers, that is, the
 * values of the \'id\' attribute present on most types of SBML objects.
 * The following is a summary of the definition of the SBML identifier type 
 * <code>SId</code>, which defines the permitted syntax of identifiers.  We
 * express the syntax using an extended form of BNF notation: 
 * <pre style=\'margin-left: 2em; border: none; font-weight: bold; font-size: 13px; color: black\'>
 * letter ::= \'a\'..\'z\',\'A\'..\'Z\'
 * digit  ::= \'0\'..\'9\'
 * idChar ::= letter | digit | \'_\'
 * SId    ::= ( letter | \'_\' ) idChar*
 * </pre>
 * The characters <code>(</code> and <code>)</code> are used for grouping, the
 * character <code>*</code> \'zero or more times\', and the character
 * <code>|</code> indicates logical \'or\'.  The equality of SBML identifiers is
 * determined by an exact character sequence match; i.e., comparisons must be
 * performed in a case-sensitive manner.  In addition, there are a few
 * conditions for the uniqueness of identifiers in an SBML model.  Please
 * consult the SBML specifications for the exact details of the uniqueness
 * requirements.
 * 
 *
   *
   * @param sid the string to use as the identifier of this Parameter
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public new
";


%csmethodmodifiers Parameter::setName(const std::string& name) "
/**
   * Sets the value of the \'name\' attribute of this Parameter.
   *
   * The string in @p name is copied.
   *
   * @param name the new name for the Parameter
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public new
";


%csmethodmodifiers Parameter::setValue(double value) "
/**
   * Sets the \'value\' attribute of this Parameter to the given @c double
   * value and marks the attribute as set.
   *
   * @param value a @c double, the value to assign
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   */ public
";


%csmethodmodifiers Parameter::setUnits(const std::string& units) "
/**
   * Sets the \'units\' attribute of this Parameter to a copy of the given
   * units identifier @p units.
   *
   * @param units a string, the identifier of the units to assign to this
   * Parameter instance
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers Parameter::setConstant(bool flag) "
/**
   * Sets the \'constant\' attribute of this Parameter to the given bool
   * @p flag.
   *
   * @param flag a bool, the value for the \'constant\' attribute of this
   * Parameter instance
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   *
   * *
 * @note Readers who view the documentation for LocalParameter may be
 * confused about the presence of this method.  LibSBML derives
 * LocalParameter from Parameter; however, this does not precisely match
 * the object hierarchy defined by SBML Level&nbsp;3, where
 * LocalParameter is derived directly from SBase and not Parameter.  We
 * believe this arrangement makes it easier for libSBML users to program
 * applications that work with both SBML Level&nbsp;2 and SBML
 * Level&nbsp;3, but programmers should also keep in mind this difference
 * exists.  A side-effect of libSBML\'s scheme is that certain methods on
 * LocalParameter that are inherited from Parameter do not actually have
 * relevance to LocalParameter objects.  An example of this is the
 * methods pertaining to Parameter\'s attribute \'constant\' (i.e.,
 * isSetConstant(), setConstant(), and getConstant()).
 *
   *
   * @see getConstant()
   * @see isSetConstant()
   */ public
";


%csmethodmodifiers Parameter::unsetName "
/**
   * Unsets the value of the \'name\' attribute of this Parameter.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public new
";


%csmethodmodifiers Parameter::unsetValue "
/**
   * Unsets the \'value\' attribute of this Parameter instance.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   *
   * In SBML Level&nbsp;1 Version&nbsp;1, parameters are required to have
   * values and therefore, the value of a Parameter <b>should always be
   * set</b>.  In SBML Level&nbsp;1 Version&nbsp;2 and beyond, the value
   * is optional and as such, the \'value\' attribute may or may not be set.
   */ public
";


%csmethodmodifiers Parameter::unsetUnits "
/**
   * Unsets the \'units\' attribute of this Parameter instance.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers Parameter::getDerivedUnitDefinition "
/**
   * Constructs and returns a UnitDefinition that corresponds to the units
   * of this Parameter\'s value.
   *
   * Parameters in SBML have an attribute (\'units\') for declaring the units
   * of measurement intended for the parameter\'s value.  <b>No defaults are
   * defined</b> by SBML in the absence of a definition for \'units\'.  This
   * method returns a UnitDefinition object based on the units declared for
   * this Parameter using its \'units\' attribute, or it returns @c null if
   * no units have been declared.
   *
   * Note that unit declarations for Parameter objects are specified in
   * terms of the @em identifier of a unit (e.g., using setUnits()), but
   * @em this method returns a UnitDefinition object, not a unit
   * identifier.  It does this by constructing an appropriate
   * UnitDefinition.For SBML Level&nbsp;2 models, it will do this even when
   * the value of the \'units\' attribute is one of the special SBML
   * Level&nbsp;2 unit identifiers @c \'substance\', @c \'volume\', @c \'area\',
   * @c \'length\' or @c \'time\'.  Callers may find this useful in conjunction
   * with the helper methods provided by the UnitDefinition class for
   * comparing different UnitDefinition objects.
   *
   * @return a UnitDefinition that expresses the units of this 
   * Parameter, or @c null if one cannot be constructed.
   *
   * @note The libSBML system for unit analysis depends on the model as a
   * whole.  In cases where the Parameter object has not yet been added to
   * a model, or the model itself is incomplete, unit analysis is not
   * possible, and consequently this method will return @c null.
   *
   * @see isSetUnits()
   */ public
";


%csmethodmodifiers Parameter::getDerivedUnitDefinition() const "
/**
   * Constructs and returns a UnitDefinition that corresponds to the units
   * of this Parameter\'s value.
   *
   * Parameters in SBML have an attribute (\'units\') for declaring the units
   * of measurement intended for the parameter\'s value.  <b>No defaults are
   * defined</b> by SBML in the absence of a definition for \'units\'.  This
   * method returns a UnitDefinition object based on the units declared for
   * this Parameter using its \'units\' attribute, or it returns @c null if
   * no units have been declared.
   *
   * Note that unit declarations for Parameter objects are specified in
   * terms of the @em identifier of a unit (e.g., using setUnits()), but
   * @em this method returns a UnitDefinition object, not a unit
   * identifier.  It does this by constructing an appropriate
   * UnitDefinition.  For SBML Level&nbsp;2 models, it will do this even
   * when the value of the \'units\' attribute is one of the predefined SBML
   * units @c \'substance\', @c \'volume\', @c \'area\', @c \'length\' or @c
   * \'time\'.  Callers may find this useful in conjunction with the helper
   * methods provided by the UnitDefinition class for comparing different
   * UnitDefinition objects.
   *
   * @return a UnitDefinition that expresses the units of this 
   * Parameter, or @c null if one cannot be constructed.
   *
   * @note The libSBML system for unit analysis depends on the model as a
   * whole.  In cases where the Parameter object has not yet been added to
   * a model, or the model itself is incomplete, unit analysis is not
   * possible, and consequently this method will return @c null.
   * 
   * @see isSetUnits()
   */ public
";


%csmethodmodifiers Parameter::getTypeCode() const "
/**
   * Returns the libSBML type code for this SBML object.
   * 
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object:
   * @link libsbmlcs.libsbml.SBML_PARAMETER SBML_PARAMETER@endlink (default).
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see getElementName()
   * @see getPackageName()
   */ public new
";


%csmethodmodifiers Parameter::getElementName() const "
/**
   * Returns the XML element name of this object, which for Parameter, is
   * always @c \'parameter\'.
   * 
   * @return the name of this element, i.e., @c \'parameter\'.
   */ public new
";


%csmethodmodifiers Parameter::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Parameter::hasRequiredAttributes() const "
/**
   * Predicate returning @c true if
   * all the required attributes for this Parameter object
   * have been set.
   *
   * @note The required attributes for a Parameter object are:
   * @li \'id\' (or \'name\' in SBML Level&nbsp;1)
   * @li \'value\' (required in Level&nbsp;1, optional otherwise)
   *
   * @return a bool value indicating whether all the required
   * attributes for this object have been defined.
   */ public new
";


%csmethodmodifiers Parameter::renameUnitSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames all the @c UnitSIdRef attributes on this element.
   *
   * *
 * 
 * In SBML, unit definitions have identifiers of type <code>UnitSId</code>.  In
 * SBML Level&nbsp;3, an explicit data type called <code>UnitSIdRef</code> was
 * introduced for attribute values that refer to <code>UnitSId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to a unit identifier\', but the effective
 * data type was the same as <code>UnitSIdRef</code> in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>UnitSIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 * 
 *
   *
   * This method works by looking at all unit identifier attribute values
   * (including, if appropriate, inside mathematical formulas), comparing the
   * unit identifiers to the value of @p oldid.  If any matches are found,
   * the matching identifiers are replaced with @p newid.  The method does
   * @em not descend into child elements.
   * 
   * @param oldid the old identifier
   * @param newid the new identifier
   */ public
";


%csmethodmodifiers Parameter::setCalculatingUnits(bool calculatingUnits) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Parameter::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Parameter::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Subclasses should override this method to read values from the given
   * XMLAttributes set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Parameter::readL1Attributes(const XMLAttributes& attributes) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Parameter::readL2Attributes(const XMLAttributes& attributes) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Parameter::readL3Attributes(const XMLAttributes& attributes) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Parameter::writeAttributes(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Parameter::isExplicitlySetConstant() const "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Parameter::inferUnits(Model* m, bool globalParameter) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Parameter::inferUnitsFromAssignments(UnitFormulaFormatter *uff, Model *m) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Parameter::inferUnitsFromRules(UnitFormulaFormatter *uff, Model *m) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Parameter::inferUnitsFromReactions(UnitFormulaFormatter *uff, Model *m) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Parameter::inferUnitsFromEvents(UnitFormulaFormatter *uff, Model *m) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Parameter::inferUnitsFromEvent(Event * e, UnitFormulaFormatter *uff, Model *m) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Parameter::inferUnitsFromKineticLaw(KineticLaw* kl, UnitFormulaFormatter *uff, Model *m) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Parameter::getCalculatingUnits() const "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfParameters::ListOfParameters(unsigned int level, unsigned int version) "
/**
   * Creates a new ListOfParameters object.
   *
   * The object is constructed such that it is valid for the given SBML
   * Level and Version combination.
   *
   * @param level the SBML Level
   * 
   * @param version the Version within the SBML Level
   */ public
";


%csmethodmodifiers ListOfParameters::ListOfParameters(SBMLNamespaces* sbmlns) "
/**
   * Creates a new ListOfParameters object.
   * 
   * The object is constructed such that it is valid for the SBML Level and
   * Version combination determined by the SBMLNamespaces object in @p
   * sbmlns.
   *
   * @param sbmlns an SBMLNamespaces object that is used to determine the
   * characteristics of the ListOfParameters object to be created.
   */ public
";


%csmethodmodifiers ListOfParameters::clone() const "
/**
   * Creates and returns a deep copy of this ListOfParameters instance.
   *
   * @return a (deep) copy of this ListOfParameters.
   */ public new
";


%csmethodmodifiers ListOfParameters::getItemTypeCode() const "
/**
   * Returns the libSBML type code for the objects contained in this ListOf
   * (i.e., Parameter objects, if the list is non-empty).
   * 
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this objects contained in this list:
   * @link libsbmlcs.libsbml.SBML_PARAMETER SBML_PARAMETER@endlink (default).
   *
   * @see getElementName()
   * @see getPackageName()
   */ public new
";


%csmethodmodifiers ListOfParameters::getElementName() const "
/**
   * Returns the XML element name of this object.
   *
   * For ListOfParameters, the XML element name is @c \'listOfParameters\'.
   * 
   * @return the name of this element, i.e., @c \'listOfParameters\'.
   */ public new
";


%csmethodmodifiers ListOfParameters::get(unsigned int n) "
/**
   * Returns the Parameter object located at position @p n within this
   * ListOfParameters instance.
   *
   * @param n the index number of the Parameter to get.
   * 
   * @return the nth Parameter in this ListOfParameters.  If the index @p n
   * is out of bounds for the length of the list, then @c null is returned.
   *
   * @see size()
   * @see get(string sid)
   */ public new
";


%csmethodmodifiers ListOfParameters::get "
/**
   * Returns the Parameter object located at position @p n within this
   * ListOfParameters instance.
   *
   * @param n the index number of the Parameter to get.
   * 
   * @return the nth Parameter in this ListOfParameters.  If the index @p n
   * is out of bounds for the length of the list, then @c null is returned.
   *
   * @see size()
   * @see get(string sid)
   */ public new
";


%csmethodmodifiers ListOfParameters::get(const std::string& sid) "
/**
   * Returns the first Parameter object matching the given identifier.
   *
   * @param sid a string, the identifier of the Parameter to get.
   * 
   * @return the Parameter object found.  The caller owns the returned
   * object and is responsible for deleting it.  If none of the items have
   * an identifier matching @p sid, then @c null is returned.
   *
   * @see get(long n)
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfParameters::get(const std::string& sid) const "
/**
   * Returns the first Parameter object matching the given identifier.
   *
   * @param sid a string representing the identifier of the Parameter to
   * get.
   * 
   * @return the Parameter object found.  The caller owns the returned
   * object and is responsible for deleting it.  If none of the items have
   * an identifier matching @p sid, then @c null is returned.
   *
   * @see get(long n)
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfParameters::remove(unsigned int n) "
/**
   * Removes the nth item from this ListOfParameters, and returns a pointer
   * to it.
   *
   * @param n the index of the item to remove
   *
   * @return the item removed.  The caller owns the returned object and is
   * responsible for deleting it.  If the index number @p n is out of
   * bounds for the length of the list, then @c null is returned.
   *
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfParameters::remove(const std::string& sid) "
/**
   * Removes the first Parameter object in this ListOfParameters
   * matching the given identifier, and returns a pointer to it.
   *
   * @param sid the identifier of the item to remove.
   *
   * @return the item removed.  The caller owns the returned object and is
   * responsible for deleting it.  If none of the items have an identifier
   * matching @p sid, then @c null is returned.
   */ public new
";


%csmethodmodifiers ListOfParameters::getElementPosition() const "
/**
   * Gets the ordinal position of this element in the containing object
   * (which in this case is the Model object).
   *
   * The ordering of elements in the XML form of SBML is generally fixed
   * for most components in SBML.  So, for example, the ListOfParameters
   * in a model is (in SBML Level&nbsp;2 Version&nbsp;4) the seventh
   * ListOf___.  (However, it differs for different Levels and Versions of
   * SBML.)
   *
   * @return the ordinal position of the element with respect to its
   * siblings, or @c -1 (default) to indicate the position is not significant.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfParameters::createObject(XMLInputStream& stream) "
/**
   * Create a ListOfParameters object corresponding to the next token in
   * the XML input stream.
   * 
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream, or @c null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%typemap(csimports) LocalParameter "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Implementation of SBML Level&nbsp;3\'s %LocalParameter
 * construct.
 *
 * LocalParameter has been introduced in SBML Level&nbsp;3 to serve as the
 * object class for parameter definitions that are intended to be local to
 * a Reaction.  Objects of class LocalParameter never appear at the Model
 * level; they are always contained within ListOfLocalParameters lists
 * which are in turn contained within KineticLaw objects.
 *
 * Like its global Parameter counterpart, the LocalParameter object class
 * is used to define a symbol associated with a value; this symbol can then
 * be used in a model\'s mathematical formulas (and specifically, for
 * LocalParameter, reaction rate formulas).  Unlike Parameter, the
 * LocalParameter class does not have a \'constant\' attribute: local
 * parameters within reactions are @em always constant.
 * 
 * LocalParameter has one required attribute, \'id\', to give the
 * parameter a unique identifier by which other parts of an SBML model
 * definition can refer to it.  A parameter can also have an optional
 * \'name\' attribute of type @c string.  Identifiers and names must be used
 * according to the guidelines described in the SBML specifications.
 * 
 * The optional attribute \'value\' determines the value (of type @c double)
 * assigned to the parameter.  A missing value for \'value\' implies that
 * the value either is unknown, or to be obtained from an external source,
 * or determined by an initial assignment.  The unit of measurement
 * associated with the value of the parameter can be specified using the
 * optional attribute \'units\'.  Here we only mention briefly some notable
 * points about the possible unit choices, but readers are urged to consult
 * the SBML specification documents for more information:
 * <ul>
 *
 * <li> In SBML Level&nbsp;3, there are no constraints on the units that
 * can be assigned to parameters in a model; there are also no units to
 * inherit from the enclosing Model object.
 *
 * <li> In SBML Level&nbsp;2, the value assigned to the parameter\'s \'units\'
 * attribute must be chosen from one of the following possibilities: one of
 * the base unit identifiers defined in SBML; one of the built-in unit
 * identifiers @c \'substance\', @c \'time\', @c \'volume\', @c \'area\' or @c
 * \'length\'; or the identifier of a new unit defined in the list of unit
 * definitions in the enclosing Model structure.  There are no constraints
 * on the units that can be chosen from these sets.  There are no default
 * units for local parameters.
 * </ul>
 *
 * As with all other major SBML components, LocalParameter is derived from
 * SBase, and the methods defined on SBase are available on LocalParameter.
 * 
 * @warning <span class=\'warning\'>LibSBML derives LocalParameter from
 * Parameter; however, this does not precisely match the object hierarchy
 * defined by SBML Level&nbsp;3, where LocalParameter is derived directly
 * from SBase and not Parameter.  We believe this arrangement makes it easier
 * for libSBML users to program applications that work with both SBML
 * Level&nbsp;2 and SBML Level&nbsp;3, but programmers should also keep in
 * mind this difference exists.  A side-effect of libSBML\'s scheme is that
 * certain methods on LocalParameter that are inherited from Parameter do not
 * actually have relevance to LocalParameter objects.  An example of this is
 * the methods pertaining to Parameter\'s attribute \'constant\' (i.e.,
 * isSetConstant(), setConstant(), and getConstant()).</span>
 *
 * @see ListOfLocalParameters
 * @see KineticLaw
 * 
 * 
 * 
 */
"


%typemap(csimports) ListOfLocalParameters "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Implementation of SBML Level&nbsp;3\'s
 * %ListOfLocalParameters construct.
 * 
 * *
 * 
 * The various ListOf___ classes in SBML are merely containers used for
 * organizing the main components of an SBML model.  All are derived from
 * the abstract class SBase, and inherit the various attributes and
 * subelements of SBase, such as \'metaid\' as and \'annotation\'.  The
 * ListOf___ classes do not add any attributes of their own.
 *
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 *
 * @htmlinclude listof-illustration.html
 *
 * Readers may wonder about the motivations for using the ListOf___
 * containers.  A simpler approach in XML might be to place the components
 * all directly at the top level of the model definition.  The choice made
 * in SBML is to group them within XML elements named after
 * ListOf<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from SBase means that software tools can add information @em about
 * the lists themselves into each list container\'s \'annotation\'.
 * 
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 *
 *
 */
"


%csmethodmodifiers LocalParameter::LocalParameter(unsigned int level, unsigned int version) "
/**
   * Creates a new LocalParameter object with the given SBML @p level and
   * @p version values.
   *
   * @param level a long integer, the SBML Level to assign to this
   * LocalParameter.
   *
   * @param version a long integer, the SBML Version to assign to this
   * LocalParameter.
   *
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the given @p level and @p version combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent SBMLDocument object.
   *
   * * 
 * @note Upon the addition of a LocalParameter object to an SBMLDocument
 * (e.g., using KineticLaw::addLocalParameter(@if java LocalParameter p@endif)), the SBML Level, SBML
 * Version and XML namespace of the document @em override the
 * values used when creating the LocalParameter object via this
 * constructor.  This is necessary to ensure that an SBML document is a
 * consistent structure.  Nevertheless, the ability to supply the values
 * at the time of creation of a LocalParameter is an important aid to
 * producing valid SBML.  Knowledge of the intented SBML Level and
 * Version determine whether it is valid to assign a particular value to
 * an attribute, or whether it is valid to add an object to an existing
 * SBMLDocument.
 *
   */ public
";


%csmethodmodifiers LocalParameter::LocalParameter(SBMLNamespaces* sbmlns) "
/**
   * Creates a new LocalParameter object with the given SBMLNamespaces
   * object @p sbmlns.
   *
   * *
 *  
 * The SBMLNamespaces object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML\'s SBMLNamespaces facilities is to create an
 * SBMLNamespaces object somewhere in a program once, then hand that object
 * as needed to object constructors that accept SBMLNamespaces as arguments.
 *
 * 
   *
   * It is worth emphasizing that although this constructor does not take
   * an identifier argument, in SBML Level&nbsp;2 and beyond, the \'id\'
   * (identifier) attribute of a LocalParameter is required to have a value.
   * Thus, callers are cautioned to assign a value after calling this
   * constructor if no identifier is provided as an argument.  Setting the
   * identifier can be accomplished using the method
   * @if java setId(String id)@else setId()@endif.
   *
   * @param sbmlns an SBMLNamespaces object.
   *
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the given @p level and @p version combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent SBMLDocument object.
   *
   * *
 * @note Upon the addition of a Compartment object to an SBMLDocument (e.g.,
 * using Model::addCompartment(@if java Compartment c@endif)), the SBML
 * Level, SBML Version and XML namespace of the document @em override the
 * values used when creating the Compartment object via the Compartment
 * constructors.  This is necessary to ensure that an SBML document has a
 * consistent overall structure.  Nevertheless, the ability to supply the
 * values at the time of creation of a Compartment is an important aid to
 * producing valid SBML.  Knowledge of the intented SBML Level and Version
 * determine whether it is valid to assign a particular value to an
 * attribute, or whether it is valid to add an object to an existing
 * SBMLDocument.
 *
   */ public
";


%csmethodmodifiers LocalParameter::LocalParameter(const LocalParameter& orig) "
/**
   * Copy constructor; creates a copy of a given LocalParameter object.
   * 
   * @param orig the LocalParameter instance to copy.
   * 
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the argument @p orig is @c null.
   */ public
";


%csmethodmodifiers LocalParameter::LocalParameter(const Parameter& orig) "
/**
   * Copy constructor; creates a LocalParameter object by copying
   * the attributes of a given Parameter object.
   * 
   * @param orig the Parameter instance to copy.
   *
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the argument @p orig is @c null.
   */ public
";


%csmethodmodifiers LocalParameter::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor for this instance of LocalParameter.
   *
   * @param v the SBMLVisitor instance to be used.
   *
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether the Visitor would like to visit the next LocalParameter in the list
   * of parameters within which this LocalParameter is embedded (i.e., either
   * the list of parameters in the parent Model or the list of parameters
   * in the enclosing KineticLaw).
   */ public
";


%csmethodmodifiers LocalParameter::clone() const "
/**
   * Creates and returns a deep copy of this LocalParameter.
   * 
   * @return a (deep) copy of this LocalParameter.
   */ public new
";


%csmethodmodifiers LocalParameter::getDerivedUnitDefinition "
/**
   * Constructs and returns a UnitDefinition that corresponds to the units
   * of this LocalParameter\'s value.
   *
   * *
 * 
 * LocalParameters in SBML have an attribute (\'units\') for declaring the
 * units of measurement intended for the parameter\'s value.  <b>No
 * defaults are defined</b> by SBML in the absence of a definition for
 * \'units\'.  This method returns a UnitDefinition object based on the
 * units declared for this LocalParameter using its \'units\' attribute, or
 * it returns @c null if no units have been declared.
 *
 * Note that unit declarations for LocalParameter objects are specified
 * in terms of the @em identifier of a unit (e.g., using setUnits()), but
 * @em this method returns a UnitDefinition object, not a unit
 * identifier.  It does this by constructing an appropriate
 * UnitDefinition.  For SBML Level&nbsp;2 models, it will do this even
 * when the value of the \'units\' attribute is one of the predefined SBML
 * units @c \'substance\', @c \'volume\', @c \'area\', @c \'length\' or @c
 * \'time\'.  Callers may find this useful in conjunction with the helper
 * methods provided by the UnitDefinition class for comparing different
 * UnitDefinition objects.
 *
   * 
   * @return a UnitDefinition that expresses the units of this 
   * LocalParameter, or @c null if one cannot be constructed.
   *
   * @note The libSBML system for unit analysis depends on the model as a
   * whole.  In cases where the LocalParameter object has not yet been
   * added to a model, or the model itself is incomplete, unit analysis is
   * not possible, and consequently this method will return @c null.
   *
   * @see isSetUnits()
   */ public new
";


%csmethodmodifiers LocalParameter::getDerivedUnitDefinition() const "
/**
   * Constructs and returns a UnitDefinition that corresponds to the units
   * of this LocalParameter\'s value.
   *
   * *
 * 
 * LocalParameters in SBML have an attribute (\'units\') for declaring the
 * units of measurement intended for the parameter\'s value.  <b>No
 * defaults are defined</b> by SBML in the absence of a definition for
 * \'units\'.  This method returns a UnitDefinition object based on the
 * units declared for this LocalParameter using its \'units\' attribute, or
 * it returns @c null if no units have been declared.
 *
 * Note that unit declarations for LocalParameter objects are specified
 * in terms of the @em identifier of a unit (e.g., using setUnits()), but
 * @em this method returns a UnitDefinition object, not a unit
 * identifier.  It does this by constructing an appropriate
 * UnitDefinition.  For SBML Level&nbsp;2 models, it will do this even
 * when the value of the \'units\' attribute is one of the predefined SBML
 * units @c \'substance\', @c \'volume\', @c \'area\', @c \'length\' or @c
 * \'time\'.  Callers may find this useful in conjunction with the helper
 * methods provided by the UnitDefinition class for comparing different
 * UnitDefinition objects.
 *
   *
   * @return a UnitDefinition that expresses the units of this 
   * LocalParameter, or @c null if one cannot be constructed.
   *
   * @note The libSBML system for unit analysis depends on the model as a
   * whole.  In cases where the LocalParameter object has not yet been
   * added to a model, or the model itself is incomplete, unit analysis is
   * not possible, and consequently this method will return @c null.
   *
   * @see isSetUnits()
   */ public new
";


%csmethodmodifiers LocalParameter::getTypeCode() const "
/**
   * Returns the libSBML type code for this SBML object.
   * 
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object:
   * @link libsbmlcs.libsbml.SBML_LOCAL_PARAMETER SBML_LOCAL_PARAMETER@endlink (default).
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see getElementName()
   * @see getPackageName()
   */ public new
";


%csmethodmodifiers LocalParameter::getElementName() const "
/**
   * Returns the XML element name of this object, which for LocalParameter,
   * is always @c \'localParameter\'.
   * 
   * @return the name of this element, i.e., @c \'localParameter\'.
   */ public new
";


%csmethodmodifiers LocalParameter::hasRequiredAttributes() const "
/**
   * Predicate returning @c true if all the required attributes for this
   * LocalParameter object have been set.
   *
   * @note The required attributes for a LocalParameter object are:
   * @li \'id\'
   * @li \'value\'
   *
   * @return a bool value indicating whether all the required
   * attributes for this object have been defined.
   */ public new
";


%csmethodmodifiers LocalParameter::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers LocalParameter::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Subclasses should override this method to read values from the given
   * XMLAttributes set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers LocalParameter::readL3Attributes(const XMLAttributes& attributes) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers LocalParameter::writeAttributes(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfLocalParameters::ListOfLocalParameters(unsigned int level, unsigned int version) "
/**
   * Creates a new ListOfLocalParameters object.
   *
   * The object is constructed such that it is valid for the given SBML
   * Level and Version combination.
   *
   * @param level the SBML Level
   * 
   * @param version the Version within the SBML Level
   */ public
";


%csmethodmodifiers ListOfLocalParameters::ListOfLocalParameters(SBMLNamespaces* sbmlns) "
/**
   * Creates a new ListOfLocalParameters object.
   *
   * The object is constructed such that it is valid for the SBML Level and
   * Version combination determined by the SBMLNamespaces object in @p
   * sbmlns.
   *
   * @param sbmlns an SBMLNamespaces object that is used to determine the
   * characteristics of the ListOfLocalParameters object to be created.
   */ public
";


%csmethodmodifiers ListOfLocalParameters::clone() const "
/**
   * Creates and returns a deep copy of this ListOfLocalParameters object.
   *
   * @return a (deep) copy of this ListOfLocalParameters.
   */ public new
";


%csmethodmodifiers ListOfLocalParameters::getItemTypeCode() const "
/**
   * Returns the libSBML type code for the objects contained in this ListOf
   * (i.e., LocalParameter objects, if the list is non-empty).
   * 
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for the objects contained in this ListOf:
   * @link libsbmlcs.libsbml.SBML_LOCAL_PARAMETER SBML_LOCAL_PARAMETER@endlink (default).
   *
   * @see getElementName()
   * @see getPackageName()
   */ public new
";


%csmethodmodifiers ListOfLocalParameters::getElementName() const "
/**
   * Returns the XML element name of this object.
   *
   * For ListOfLocalParameters, the XML element name is @c \'listOfLocalParameters\'.
   * 
   * @return the name of this element, i.e., @c \'listOfLocalParameters\'.
   */ public new
";


%csmethodmodifiers ListOfLocalParameters::get(unsigned int n) "
/**
   * Returns the LocalParameter object located at position @p n within this
   * ListOfLocalParameters instance.
   *
   * @param n the index number of the LocalParameter to get.
   * 
   * @return the nth LocalParameter in this ListOfLocalParameters.  If the
   * index @p n is out of bounds for the length of the list, then @c null
   * is returned.
   *
   * @see size()
   * @see get(string sid)
   */ public new
";


%csmethodmodifiers ListOfLocalParameters::get "
/**
   * Returns the LocalParameter object located at position @p n within this
   * ListOfLocalParameters instance.
   *
   * @param n the index number of the LocalParameter to get.
   * 
   * @return the item at position @p n.  The caller owns the returned
   * object and is responsible for deleting it.  If the index number @p n
   * is out of bounds for the length of the list, then @c null is returned.
   *
   * @see size()
   * @see get(string sid)
   */ public new
";


%csmethodmodifiers ListOfLocalParameters::get(const std::string& sid) "
/**
   * Returns the first LocalParameter object matching the given identifier.
   *
   * @param sid a string, the identifier of the LocalParameter to get.
   * 
   * @return the LocalParameter object found.  The caller owns the returned
   * object and is responsible for deleting it.  If none of the items have
   * an identifier matching @p sid, then @c null is returned.
   *
   * @see get(long n)
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfLocalParameters::get(const std::string& sid) const "
/**
   * Returns the first LocalParameter object matching the given identifier.
   *
   * @param sid a string representing the identifier of the LocalParameter
   * to get.
   * 
   * @return the LocalParameter object found.  The caller owns the returned
   * object and is responsible for deleting it.  If none of the items have
   * an identifier matching @p sid, then @c null is returned.
   *
   * @see get(long n)
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfLocalParameters::getElementBySId(const std::string& id) "
/**
   * Returns the first child element found that has the given @p id in the
   * model-wide SId namespace, or @c null if no such object is found.
   *
   * Note that LocalParameters, while they use the SId namespace, are not in
   * the model-wide SId namespace, so no LocalParameter object will be
   * returned from this function (and is the reason we override the base
   * ListOf::getElementBySId function here).
   *
   * @param id string representing the id of objects to find
   *
   * @return pointer to the first element found with the given @p id.
   */ public
";


%csmethodmodifiers ListOfLocalParameters::remove(unsigned int n) "
/**
   * Removes the nth item from this ListOfLocalParameters, and returns a
   * pointer to it.
   *
   * @param n the index of the item to remove.  
   *
   * @return the item removed.  The caller owns the returned object and is
   * responsible for deleting it.  If the index number @p n is out of
   * bounds for the length of the list, then @c null is returned.
   *
   * @see size()
   * @see remove(string sid)
   */ public new
";


%csmethodmodifiers ListOfLocalParameters::remove(const std::string& sid) "
/**
   * Removes the first LocalParameter object in this ListOfLocalParameters
   * matching the given identifier, and returns a pointer to it.
   *
   * @param sid the identifier of the item to remove.
   *
   * @return the item removed.  The caller owns the returned object and is
   * responsible for deleting it.  If none of the items have an identifier
   * matching @p sid, then @c null is returned.
   */ public new
";


%csmethodmodifiers ListOfLocalParameters::getElementPosition() const "
/**
   * Get the ordinal position of this element in the containing object
   * (which in this case is the Model object).
   *
   * The ordering of elements in the XML form of SBML is generally fixed
   * for most components in SBML.  So, for example, the ListOfLocalParameters
   * in a model is (in SBML Level&nbsp;2 Version&nbsp;4) the seventh
   * ListOf___.  (However, it differs for different Levels and Versions of
   * SBML.)
   *
   * @return the ordinal position of the element with respect to its
   * siblings, or @c -1 (default) to indicate the position is not significant.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfLocalParameters::createObject(XMLInputStream& stream) "
/**
   * Create a ListOfLocalParameters object corresponding to the next token in
   * the XML input stream.
   * 
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream, or @c null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%typemap(csimports) InitialAssignment "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Implementation of %SBML\'s %InitialAssignment construct.
 *
 * SBML Level 2 Versions 2&ndash;4 and SBML Level&nbsp;3 provide two ways of assigning initial
 * values to entities in a model.  The simplest and most basic is to set
 * the values of the appropriate attributes in the relevant components; for
 * example, the initial value of a model parameter (whether it is a
 * constant or a variable) can be assigned by setting its \'value\' attribute
 * directly in the model definition.  However, this approach is not
 * suitable when the value must be calculated, because the initial value
 * attributes on different components such as species, compartments, and
 * parameters are single values and not mathematical expressions.  In those
 * situations, the InitialAssignment construct can be used; it permits the
 * calculation of the value of a constant or the initial value of a
 * variable from the values of @em other quantities in a model.
 *
 * As explained below, the provision of InitialAssignment does not mean
 * that models necessarily must use this construct when defining initial
 * values of quantities in a model.  If a value can be set directly using
 * the relevant attribute of a component in a model, then that
 * approach may be more efficient and more portable to other software
 * tools.  InitialAssignment should be used when the other mechanism is
 * insufficient for the needs of a particular model.
 *
 * The InitialAssignment construct has some similarities to AssignmentRule.
 * The main differences are: (a) an InitialAssignment can set the value of
 * a constant whereas an AssignmentRule cannot, and (b) unlike
 * AssignmentRule, an InitialAssignment definition only applies up to and
 * including the beginning of simulation time, i.e., <em>t <= 0</em>,
 * while an AssignmentRule applies at all times.
 *
 * InitialAssignment has a required attribute, \'symbol\', whose value must
 * follow the guidelines for identifiers described in the %SBML
 * specification (e.g., Section 3.3 in the Level 2 Version 4
 * specification).  The value of this attribute in an InitialAssignment
 * object can be the identifier of a Compartment, Species or global
 * Parameter elsewhere in the model.  The InitialAssignment defines the
 * initial value of the constant or variable referred to by the \'symbol\'
 * attribute.  (The attribute\'s name is \'symbol\' rather than \'variable\'
 * because it may assign values to constants as well as variables in a
 * model.)  Note that an initial assignment cannot be made to reaction
 * identifiers, that is, the \'symbol\' attribute value of an
 * InitialAssignment cannot be an identifier that is the \'id\' attribute
 * value of a Reaction object in the model.  This is identical to a
 * restriction placed on rules.
 *
 * InitialAssignment also has a required \'math\' subelement that contains a
 * MathML expression used to calculate the value of the constant or the
 * initial value of the variable.  The units of the value computed by the
 * formula in the \'math\' subelement should (in SBML Level&nbsp;2
 * Version&nbsp;4 and in SBML Level&nbsp;3) or must (in previous Versions) be identical to be the
 * units associated with the identifier given in the \'symbol\' attribute.
 * (That is, the units are the units of the species, compartment, or
 * parameter, as appropriate for the kind of object identified by the value
 * of \'symbol\'.)
 *
 * InitialAssignment was introduced in SBML Level 2 Version 2.  It is not
 * available in SBML Level&nbsp;2 Version&nbsp;1 nor in any version of Level 1.
 *
 * @section initassign-semantics Semantics of Initial Assignments
 * 
 * The value calculated by an InitialAssignment object overrides the value
 * assigned to the given symbol by the object defining that symbol.  For
 * example, if a compartment\'s \'size\' attribute is set in its definition,
 * and the model also contains an InitialAssignment having that
 * compartment\'s identifier as its \'symbol\' attribute value, then the
 * interpretation is that the \'size\' assigned in the Compartment object
 * should be ignored and the value assigned based on the computation
 * defined in the InitialAssignment.  Initial assignments can take place
 * for Compartment, Species and global Parameter objects regardless of the
 * value of their \'constant\' attribute.
 * 
 * The actions of all InitialAssignment objects are in general terms
 * the same, but differ in the precise details depending on the type
 * of variable being set:
 * <ul>
 * <li> <em>In the case of a species</em>, an InitialAssignment sets the
 * referenced species\' initial quantity (concentration or amount of
 * substance) to the value determined by the formula in the \'math\'
 * subelement.    The overall units of the formula should (in SBML
 * Level&nbsp;2 Version&nbsp;4 and in SBML Level&nbsp;3) or must (in previous Versions) be the same
 * as the units specified for the species.
 * 
 * <li> <em>In the case of a compartment</em>, an InitialAssignment sets
 * the referenced compartment\'s initial size to the size determined by the
 * formula in \'math\'.  The overall units of the formula should (in SBML
 * Level&nbsp;2 Version&nbsp;4 and in SBML Level&nbsp;3) or must (in previous Versions) be the same
 * as the units specified for the size of the compartment.
 * 
 * <li> <em>In the case of a parameter</em>, an InitialAssignment sets the
 * referenced parameter\'s initial value to that determined by the formula
 * in \'math\'.  The overall units of the formula should (in SBML
 * Level&nbsp;2 Version&nbsp;4 and SBML Level&nbsp;3) or must (in previous Versions) be the same
 * as the units defined for the parameter.  </ul>
 * 
 * In the context of a simulation, initial assignments establish values
 * that are in effect prior to and including the start of simulation time,
 * i.e., <em>t <= 0</em>.  Section 3.4.8 in the SBML Level 2
 * Version 4  and SBML Level&nbsp;3 Version&nbsp;1 Core specifications provides information about the interpretation of
 * assignments, rules, and entity values for simulation time up to and
 * including the start time <em>t = 0</em>; this is important for
 * establishing the initial conditions of a simulation if the model
 * involves expressions containing the <em>delay</em> \'csymbol\'.
 * 
 * There cannot be two initial assignments for the same symbol in a model;
 * that is, a model must not contain two or more InitialAssignment objects
 * that both have the same identifier as their \'symbol\' attribute value.  A
 * model must also not define initial assignments <em>and</em> assignment
 * rules for the same entity.  That is, there cannot be <em>both</em> an
 * InitialAssignment and an AssignmentRule for the same symbol in a model,
 * because both kinds of constructs apply prior to and at the start of
 * simulated time&mdash;allowing both to exist for a given symbol would
 * result in indeterminism).
 * 
 * The ordering of InitialAssignment objects is not significant.  The
 * combined set of InitialAssignment, AssignmentRule and KineticLaw
 * objects form a set of assignment statements that must be considered as a
 * whole.  The combined set of assignment statements should not contain
 * algebraic loops: a chain of dependency between these statements should
 * terminate.  (More formally, consider the directed graph of assignment
 * statements where nodes are a model\'s assignment statements and directed
 * arcs exist for each occurrence of a symbol in an assignment statement
 * \'math\' attribute.  The directed arcs in this graph start from the
 * statement assigning the symbol and end at the statement that contains
 * the symbol in their math elements.  Such a graph must be acyclic.)
 *
 * Finally, it is worth being explicit about the expected behavior in the
 * following situation.  Suppose (1) a given symbol has a value <em>x</em>
 * assigned to it in its definition, and (2) there is an initial assignment
 * having the identifier as its \'symbol\' value and reassigning the value to
 * <em>y</em>, <em>and</em> (3) the identifier is also used in the
 * mathematical formula of a second initial assignment.  What value should
 * the second initial assignment use?  It is <em>y</em>, the value assigned
 * to the symbol by the first initial assignment, not whatever value was
 * given in the symbol\'s definition.  This follows directly from the
 * behavior described above: if an InitialAssignment object exists for a
 * given symbol, then the symbol\'s value is overridden by that initial
 * assignment.
 *
 * 
 *
 */
"


%typemap(csimports) ListOfInitialAssignments "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Implementation of SBML\'s %ListOfInitialAssignments
 * construct.
 *
 * *
 * 
 * The various ListOf___ classes in SBML are merely containers used for
 * organizing the main components of an SBML model.  All are derived from
 * the abstract class SBase, and inherit the various attributes and
 * subelements of SBase, such as \'metaid\' as and \'annotation\'.  The
 * ListOf___ classes do not add any attributes of their own.
 *
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 *
 * @htmlinclude listof-illustration.html
 *
 * Readers may wonder about the motivations for using the ListOf___
 * containers.  A simpler approach in XML might be to place the components
 * all directly at the top level of the model definition.  The choice made
 * in SBML is to group them within XML elements named after
 * ListOf<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from SBase means that software tools can add information @em about
 * the lists themselves into each list container\'s \'annotation\'.
 * 
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 *
 *
 */
"


%csmethodmodifiers InitialAssignment::InitialAssignment(unsigned int level, unsigned int version) "
/**
   * Creates a new InitialAssignment using the given SBML @p level and @p version
   * values.
   *
   * @param level a long integer, the SBML Level to assign to this InitialAssignment
   *
   * @param version a long integer, the SBML Version to assign to this
   * InitialAssignment
   *
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the given @p level and @p version combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent SBMLDocument object.
   *
   * *
 * @note Upon the addition of a InitialAssignment object to an SBMLDocument
 * (e.g., using Model::addInitialAssignment(@if java InitialAssignment
 * ia@endif)), the SBML Level, SBML Version and XML namespace of the document
 * @em override the values used when creating the InitialAssignment object
 * via this constructor.  This is necessary to ensure that an SBML document
 * is a consistent structure.  Nevertheless, the ability to supply the values
 * at the time of creation of a InitialAssignment is an important aid to
 * producing valid SBML.  Knowledge of the intented SBML Level and Version
 * determine whether it is valid to assign a particular value to an
 * attribute, or whether it is valid to add an object to an existing
 * SBMLDocument.
 *
   */ public
";


%csmethodmodifiers InitialAssignment::InitialAssignment(SBMLNamespaces* sbmlns) "
/**
   * Creates a new InitialAssignment using the given SBMLNamespaces object
   * @p sbmlns.
   *
   * *
 *  
 * The SBMLNamespaces object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML\'s SBMLNamespaces facilities is to create an
 * SBMLNamespaces object somewhere in a program once, then hand that object
 * as needed to object constructors that accept SBMLNamespaces as arguments.
 *
 * 
   *
   * @param sbmlns an SBMLNamespaces object.
   *
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the given @p level and @p version combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent SBMLDocument object.
   *
   * *
 * @note Upon the addition of a InitialAssignment object to an SBMLDocument
 * (e.g., using Model::addInitialAssignment(@if java InitialAssignment
 * ia@endif)), the SBML Level, SBML Version and XML namespace of the document
 * @em override the values used when creating the InitialAssignment object
 * via this constructor.  This is necessary to ensure that an SBML document
 * is a consistent structure.  Nevertheless, the ability to supply the values
 * at the time of creation of a InitialAssignment is an important aid to
 * producing valid SBML.  Knowledge of the intented SBML Level and Version
 * determine whether it is valid to assign a particular value to an
 * attribute, or whether it is valid to add an object to an existing
 * SBMLDocument.
 * 
   */ public
";


%csmethodmodifiers InitialAssignment::InitialAssignment(const InitialAssignment& orig) "
/**
   * Copy constructor; creates a copy of this InitialAssignment.
   *
   * @param orig the object to copy.
   * 
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the argument @p orig is @c null.
   */ public
";


%csmethodmodifiers InitialAssignment::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor for this instance of InitialAssignment.
   *
   * @param v the SBMLVisitor instance to be used.
   *
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether the Visitor would like to visit the next InitialAssignment in
   * the list of compartment types.
   */ public
";


%csmethodmodifiers InitialAssignment::clone() const "
/**
   * Creates and returns a deep copy of this InitialAssignment.
   * 
   * @return a (deep) copy of this InitialAssignment.
   */ public new
";


%csmethodmodifiers InitialAssignment::getSymbol() const "
/**
   * Get the value of the \'symbol\' attribute of this InitialAssignment.
   * 
   * @return the identifier string stored as the \'symbol\' attribute value
   * in this InitialAssignment.
   */ public
";


%csmethodmodifiers InitialAssignment::getMath() const "
/**
   * Get the mathematical formula of this InitialAssignment.
   *
   * @return an ASTNode, the value of the \'math\' subelement of this
   * InitialAssignment
   */ public
";


%csmethodmodifiers InitialAssignment::isSetSymbol() const "
/**
   * Predicate returning @c true if this
   * InitialAssignment\'s \'symbol\' attribute is set.
   * 
   * @return @c true if the \'symbol\' attribute of this InitialAssignment
   * is set, @c false otherwise.
   */ public
";


%csmethodmodifiers InitialAssignment::isSetMath() const "
/**
   * Predicate returning @c true if this
   * InitialAssignment\'s \'math\' subelement contains a value.
   * 
   * @return @c true if the \'math\' for this InitialAssignment is set,
   * @c false otherwise.
   */ public
";


%csmethodmodifiers InitialAssignment::setSymbol(const std::string& sid) "
/**
   * Sets the \'symbol\' attribute value of this InitialAssignment.
   *
   * @param sid the identifier of a Species, Compartment or Parameter
   * object defined elsewhere in this Model.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers InitialAssignment::setMath(const ASTNode* math) "
/**
   * Sets the \'math\' subelement of this InitialAssignment.
   *
   * The AST passed in @p math is copied.
   *
   * @param math an AST containing the mathematical expression to
   * be used as the formula for this InitialAssignment.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   */ public
";


%csmethodmodifiers InitialAssignment::getDerivedUnitDefinition "
/**
   * Calculates and returns a UnitDefinition that expresses the units
   * of measurement assumed for the \'math\' expression of this
   * InitialAssignment.
   *
   * *
 * 
 * The units are calculated based on the mathematical expression in the
 * InitialAssignment and the model quantities referenced by
 * <code>&lt;ci&gt;</code> elements used within that expression.  The method
 * InitialAssignment::getDerivedUnitDefinition() returns the calculated
 * units, to the extent that libSBML can compute them.
 *
   *
   * * 
 * @note The functionality that facilitates unit analysis depends on the
 * model as a whole.  Thus, in cases where the object has not been added to
 * a model or the model itself is incomplete, unit analysis is not possible
 * and this method will return @c null.
 *
 * 
   *
   * * 
 * @warning <span class=\'warning\'>Note that it is possible the \'math\'
 * expression in the InitialAssignment contains literal numbers or parameters
 * with undeclared units.  In those cases, it is not possible to calculate
 * the units of the overall expression without making assumptions.  LibSBML
 * does not make assumptions about the units, and
 * InitialAssignment::getDerivedUnitDefinition() only returns the units as
 * far as it is able to determine them.  For example, in an expression <em>X
 * + Y</em>, if <em>X</em> has unambiguously-defined units and <em>Y</em>
 * does not, it will return the units of <em>X</em>.  When using this method,
 * <strong>it is critical that callers also invoke the method</strong>
 * InitialAssignment::containsUndeclaredUnits() <strong>to determine whether
 * this situation holds</strong>.  Callers should take suitable action in
 * those situations.</span>
 *
   *
   * @return a UnitDefinition that expresses the units of the math 
   * expression of this InitialAssignment, or @c null if one cannot be constructed.
   * 
   * @see containsUndeclaredUnits()
   */ public
";


%csmethodmodifiers InitialAssignment::getDerivedUnitDefinition() const "
/**
   * Calculates and returns a UnitDefinition that expresses the units
   * of measurement assumed for the \'math\' expression of this
   * InitialAssignment.
   *
   * *
 * 
 * The units are calculated based on the mathematical expression in the
 * InitialAssignment and the model quantities referenced by
 * <code>&lt;ci&gt;</code> elements used within that expression.  The method
 * InitialAssignment::getDerivedUnitDefinition() returns the calculated
 * units, to the extent that libSBML can compute them.
 *
   *
   * * 
 * @note The functionality that facilitates unit analysis depends on the
 * model as a whole.  Thus, in cases where the object has not been added to
 * a model or the model itself is incomplete, unit analysis is not possible
 * and this method will return @c null.
 *
 * 
   *
   * * 
 * @warning <span class=\'warning\'>Note that it is possible the \'math\'
 * expression in the InitialAssignment contains literal numbers or parameters
 * with undeclared units.  In those cases, it is not possible to calculate
 * the units of the overall expression without making assumptions.  LibSBML
 * does not make assumptions about the units, and
 * InitialAssignment::getDerivedUnitDefinition() only returns the units as
 * far as it is able to determine them.  For example, in an expression <em>X
 * + Y</em>, if <em>X</em> has unambiguously-defined units and <em>Y</em>
 * does not, it will return the units of <em>X</em>.  When using this method,
 * <strong>it is critical that callers also invoke the method</strong>
 * InitialAssignment::containsUndeclaredUnits() <strong>to determine whether
 * this situation holds</strong>.  Callers should take suitable action in
 * those situations.</span>
 *
   * 
   * @return a UnitDefinition that expresses the units of the math 
   * expression of this InitialAssignment, or @c null if one cannot be constructed.
   * 
   * @see containsUndeclaredUnits()
   */ public
";


%csmethodmodifiers InitialAssignment::containsUndeclaredUnits "
/**
   * Predicate returning @c true if the math expression of this
   * InitialAssignment contains parameters/numbers with undeclared units.
   * 
   * @return @c true if the math expression of this InitialAssignment
   * includes parameters/numbers 
   * with undeclared units, @c false otherwise.
   *
   * @note A return value of @c true indicates that the UnitDefinition
   * returned by InitialAssignment::getDerivedUnitDefinition may not
   * accurately represent the units of the expression.
   *
   * @see getDerivedUnitDefinition()
   */ public
";


%csmethodmodifiers InitialAssignment::containsUndeclaredUnits() const "
/**
   * Predicate returning @c true if the math expression of this
   * InitialAssignment contains parameters/numbers with undeclared units.
   * 
   * @return @c true if the math expression of this InitialAssignment
   * includes parameters/numbers 
   * with undeclared units, @c false otherwise.
   *
   * @note A return value of @c true indicates that the UnitDefinition
   * returned by InitialAssignment::getDerivedUnitDefinition may not
   * accurately represent the units of the expression.
   *
   * @see getDerivedUnitDefinition()
   */ public
";


%csmethodmodifiers InitialAssignment::getTypeCode() const "
/**
   * Returns the libSBML type code for this %SBML object.
   * 
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object:
   * @link libsbmlcs.libsbml.SBML_INITIAL_ASSIGNMENT SBML_INITIAL_ASSIGNMENT@endlink (default).
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see getElementName()
   * @see getPackageName()
   */ public new
";


%csmethodmodifiers InitialAssignment::getElementName() const "
/**
   * Returns the XML element name of this object, which for
   * InitialAssignment, is always @c \'initialAssignment\'.
   * 
   * @return the name of this element, i.e., @c \'initialAssignment\'.
   */ public new
";


%csmethodmodifiers InitialAssignment::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers InitialAssignment::hasRequiredAttributes() const "
/**
   * Predicate returning @c true if all the required attributes for this
   * InitialAssignment object have been set.
   *
   * @note The required attributes for an InitialAssignment object are:
   * @li \'symbol\'
   *
   * @return a bool value indicating whether all the required
   * attributes for this object have been defined.
   */ public new
";


%csmethodmodifiers InitialAssignment::hasRequiredElements() const "
/**
   * Predicate returning @c true if all the required elements for this
   * InitialAssignment object have been set.
   *
   * @note The required elements for a InitialAssignment object are:
   * @li \'math\'
   *
   * @return a bool value indicating whether all the required
   * elements for this object have been defined.
   */ public new
";


%csmethodmodifiers InitialAssignment::getId() const "
/** */ /* libsbml-internal */ public new
";


%csmethodmodifiers InitialAssignment::renameSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames all the @c SIdRef attributes on this element, including any
   * found in MathML.
   *
   * *
 * 

 * In SBML, object identifiers are of a data type called <code>SId</code>.
 * In SBML Level&nbsp;3, an explicit data type called <code>SIdRef</code> was
 * introduced for attribute values that refer to <code>SId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to an identifier\', but the effective
 * data type was the same as <code>SIdRef</code>in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>SIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 *
 *
   * 
   * This method works by looking at all attributes and (if appropriate)
   * mathematical formulas, comparing the identifiers to the value of @p
   * oldid.  If any matches are found, the matching identifiers are replaced
   * with @p newid.  The method does @em not descend into child elements.
   *
   * @param oldid the old identifier
   * @param newid the new identifier
   */ public
";


%csmethodmodifiers InitialAssignment::renameUnitSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames all the @c UnitSIdRef attributes on this element.
   *
   * *
 * 
 * In SBML, unit definitions have identifiers of type <code>UnitSId</code>.  In
 * SBML Level&nbsp;3, an explicit data type called <code>UnitSIdRef</code> was
 * introduced for attribute values that refer to <code>UnitSId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to a unit identifier\', but the effective
 * data type was the same as <code>UnitSIdRef</code> in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>UnitSIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 * 
 *
   *
   * This method works by looking at all unit identifier attribute values
   * (including, if appropriate, inside mathematical formulas), comparing the
   * unit identifiers to the value of @p oldid.  If any matches are found,
   * the matching identifiers are replaced with @p newid.  The method does
   * @em not descend into child elements.
   * 
   * @param oldid the old identifier
   * @param newid the new identifier
   */ public
";


%csmethodmodifiers InitialAssignment::replaceSIDWithFunction(const std::string& id, const ASTNode* function) "
/**
   * Replace all nodes with the name \'id\' from the child \'math\' object with the provided function. 
   *
   */ /* libsbml-internal */ public
";


%csmethodmodifiers InitialAssignment::divideAssignmentsToSIdByFunction(const std::string& id, const ASTNode* function) "
/**
   * If this assignment assigns a value to the \'id\' element, replace the \'math\' object with the function (existing/function). 
   */ /* libsbml-internal */ public
";


%csmethodmodifiers InitialAssignment::multiplyAssignmentsToSIdByFunction(const std::string& id, const ASTNode* function) "
/**
   * If this assignment assigns a value to the \'id\' element, replace the \'math\' object with the function (existing*function). 
   */ /* libsbml-internal */ public
";


%csmethodmodifiers InitialAssignment::readOtherXML(XMLInputStream& stream) "
/**
   * Subclasses should override this method to read (and store) XHTML,
   * MathML, etc. directly from the XMLInputStream.
   *
   * @return true if the subclass read from the stream, false otherwise.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers InitialAssignment::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers InitialAssignment::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Subclasses should override this method to read values from the given
   * XMLAttributes set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers InitialAssignment::readL2Attributes(const XMLAttributes& attributes) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers InitialAssignment::readL3Attributes(const XMLAttributes& attributes) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers InitialAssignment::writeAttributes(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfInitialAssignments::ListOfInitialAssignments(unsigned int level, unsigned int version) "
/**
   * Creates a new ListOfInitialAssignments object.
   *
   * The object is constructed such that it is valid for the given SBML
   * Level and Version combination.
   *
   * @param level the SBML Level
   * 
   * @param version the Version within the SBML Level
   */ public
";


%csmethodmodifiers ListOfInitialAssignments::ListOfInitialAssignments(SBMLNamespaces* sbmlns) "
/**
   * Creates a new ListOfInitialAssignments object.
   *
   * The object is constructed such that it is valid for the SBML Level and
   * Version combination determined by the SBMLNamespaces object in @p
   * sbmlns.
   *
   * @param sbmlns an SBMLNamespaces object that is used to determine the
   * characteristics of the ListOfInitialAssignments object to be created.
   */ public
";


%csmethodmodifiers ListOfInitialAssignments::clone() const "
/**
   * Creates and returns a deep copy of this ListOfInitialAssignments instance.
   *
   * @return a (deep) copy of this ListOfInitialAssignments.
   */ public new
";


%csmethodmodifiers ListOfInitialAssignments::getItemTypeCode() const "
/**
   * Returns the libSBML type code for the objects contained in this ListOf
   * (i.e., InitialAssignment objects, if the list is non-empty).
   * 
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for the objects contained in this ListOf:
   * @link libsbmlcs.libsbml.SBML_INITIAL_ASSIGNMENT SBML_INITIAL_ASSIGNMENT@endlink (default).
   *
   * @see getElementName()
   * @see getPackageName()
   */ public new
";


%csmethodmodifiers ListOfInitialAssignments::getElementName() const "
/**
   * Returns the XML element name of this object.
   *
   * For ListOfInitialAssignments, the XML element name is @c
   * \'listOfInitialAssignments\'.
   * 
   * @return the name of this element, i.e., @c \'listOfInitialAssignments\'.
   */ public new
";


%csmethodmodifiers ListOfInitialAssignments::get(unsigned int n) "
/**
   * Get a InitialAssignment from the ListOfInitialAssignments.
   *
   * @param n the index number of the InitialAssignment to get.
   * 
   * @return the nth InitialAssignment in this ListOfInitialAssignments.
   *
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfInitialAssignments::get "
/**
   * Get a InitialAssignment from the ListOfInitialAssignments.
   *
   * @param n the index number of the InitialAssignment to get.
   * 
   * @return the nth InitialAssignment in this ListOfInitialAssignments.
   *
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfInitialAssignments::get(const std::string& sid) "
/**
   * Get a InitialAssignment from the ListOfInitialAssignments
   * based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the InitialAssignment to get.
   * 
   * @return InitialAssignment in this ListOfInitialAssignments
   * with the given @p sid or @c null if no such
   * InitialAssignment exists.
   *
   * @see get(long n)
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfInitialAssignments::get(const std::string& sid) const "
/**
   * Get a InitialAssignment from the ListOfInitialAssignments
   * based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the InitialAssignment to get.
   * 
   * @return InitialAssignment in this ListOfInitialAssignments
   * with the given @p sid or @c null if no such
   * InitialAssignment exists.
   *
   * @see get(long n)
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfInitialAssignments::remove(unsigned int n) "
/**
   * Removes the nth item from this ListOfInitialAssignments items and returns a pointer to
   * it.
   *
   * The caller owns the returned item and is responsible for deleting it.
   *
   * @param n the index of the item to remove
   *
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfInitialAssignments::remove(const std::string& sid) "
/**
   * Removes item in this ListOfInitialAssignments items with the given identifier.
   *
   * The caller owns the returned item and is responsible for deleting it.
   * If none of the items in this list have the identifier @p sid, then @c
   * null is returned.
   *
   * @param sid the identifier of the item to remove
   *
   * @return the item removed.  As mentioned above, the caller owns the
   * returned item.
   */ public new
";


%csmethodmodifiers ListOfInitialAssignments::getElementBySId(const std::string& id) "
/**
   * Returns the first child element found that has the given @p id in the
   * model-wide SId namespace, or @c null if no such object is found.
   *
   * Note that InitialAssignments do not actually have IDs, though the
   * libsbml interface pretends that they do: no initial assignment is
   * returned by this function.
   *
   * @param id string representing the id of objects to find
   *
   * @return pointer to the first element found with the given @p id.
   */ public
";


%csmethodmodifiers ListOfInitialAssignments::getElementPosition() const "
/**
   * Get the ordinal position of this element in the containing object
   * (which in this case is the Model object).
   *
   * The ordering of elements in the XML form of %SBML is generally fixed
   * for most components in %SBML.  So, for example, the
   * ListOfInitialAssignments in a model is (in %SBML Level 2 Version 4)
   * the eighth ListOf___.  (However, it differs for different Levels and
   * Versions of SBML.)
   *
   * @return the ordinal position of the element with respect to its
   * siblings, or @c -1 (default) to indicate the position is not significant.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfInitialAssignments::createObject(XMLInputStream& stream) "
/**
   * Create and return an SBML object of this class, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or @c null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%typemap(csimports) Rule "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Implementation of %SBML\'s %Rule construct.
 *
 * In SBML, @em rules provide additional ways to define the values of
 * variables in a model, their relationships, and the dynamical behaviors
 * of those variables.  They enable encoding relationships that cannot be
 * expressed using Reaction nor InitialAssignment objects alone.
 *
 * The libSBML implementation of rules mirrors the SBML Level&nbsp;3
 * Version&nbsp;1 Core definition (which is in turn is very similar to the
 * Level&nbsp;2 Version&nbsp;4 definition), with Rule being the parent
 * class of three subclasses as explained below.  The Rule class itself
 * cannot be instantiated by user programs and has no constructor; only the
 * subclasses AssignmentRule, AlgebraicRule and RateRule can be
 * instantiated directly.
 *
 * *
 * @section rules-general General summary of SBML rules
 *
 * In SBML Level&nbsp;3 as well as Level&nbsp;2, rules are separated into three
 * subclasses for the benefit of model analysis software.  The three
 * subclasses are based on the following three different possible functional
 * forms (where <em>x</em> is a variable, <em>f</em> is some arbitrary
 * function returning a numerical result, <b><em>V</em></b> is a vector of
 * variables that does not include <em>x</em>, and <b><em>W</em></b> is a
 * vector of variables that may include <em>x</em>):
 * 
 * <table border=\'0\' cellpadding=\'0\' class=\'centered\' style=\'font-size: small\'>
 * <tr><td width=\'120px\'><em>Algebraic:</em></td><td width=\'250px\'>left-hand side is zero</td><td><em>0 = f(<b>W</b>)</em></td></tr>
 * <tr><td><em>Assignment:</em></td><td>left-hand side is a scalar:</td><td><em>x = f(<b>V</b>)</em></td></tr>
 * <tr><td><em>Rate:</em></td><td>left-hand side is a rate-of-change:</td><td><em>dx/dt = f(<b>W</b>)</em></td></tr>
 * </table>
 * 
 * In their general form given above, there is little to distinguish
 * between <em>assignment</em> and <em>algebraic</em> rules.  They are treated as
 * separate cases for the following reasons:
 * 
 * @li <em>Assignment</em> rules can simply be evaluated to calculate
 * intermediate values for use in numerical methods.  They are statements
 * of equality that hold at all times.  (For assignments that are only
 * performed once, see InitialAssignment.)

 * @li SBML needs to place restrictions on assignment rules, for example
 * the restriction that assignment rules cannot contain algebraic loops.
 * 
 * @li Some simulators do not contain numerical solvers capable of solving
 * unconstrained algebraic equations, and providing more direct forms such
 * as assignment rules may enable those simulators to process models they
 * could not process if the same assignments were put in the form of
 * general algebraic equations;
 * 
 * @li Those simulators that <em>can</em> solve these algebraic equations make a
 * distinction between the different categories listed above; and
 * 
 * @li Some specialized numerical analyses of models may only be applicable
 * to models that do not contain <em>algebraic</em> rules.
 * 
 * The approach taken to covering these cases in SBML is to define an
 * abstract Rule structure containing a subelement, \'math\', to hold the
 * right-hand side expression, then to derive subtypes of Rule that add
 * attributes to distinguish the cases of algebraic, assignment and rate
 * rules.  The \'math\' subelement must contain a MathML expression defining the
 * mathematical formula of the rule.  This MathML formula must return a
 * numerical value.  The formula can be an arbitrary expression referencing
 * the variables and other entities in an SBML model.
 * 
 * Each of the three subclasses of Rule (AssignmentRule, AlgebraicRule,
 * RateRule) inherit the the \'math\' subelement and other fields from SBase.
 * The AssignmentRule and RateRule classes add an additional attribute,
 * \'variable\'.  See the definitions of AssignmentRule, AlgebraicRule and
 * RateRule for details about the structure and interpretation of each one.
 * 
 * @section rules-restrictions Additional restrictions on SBML rules
 *
 * An important design goal of SBML rule semantics is to ensure that a
 * model\'s simulation and analysis results will not be dependent on when or
 * how often rules are evaluated.  To achieve this, SBML needs to place two
 * restrictions on rule use.  The first concerns algebraic loops in the system
 * of assignments in a model, and the second concerns overdetermined systems.
 * 
 * @subsection rules-no-loops A model must not contain algebraic loops
 * 
 * The combined set of InitialAssignment, AssignmentRule and KineticLaw
 * objects in a model constitute a set of assignment statements that should be
 * considered as a whole.  (A KineticLaw object is counted as an assignment
 * because it assigns a value to the symbol contained in the \'id\' attribute of
 * the Reaction object in which it is defined.)  This combined set of
 * assignment statements must not contain algebraic loops&mdash;dependency
 * chains between these statements must terminate.  To put this more formally,
 * consider a directed graph in which nodes are assignment statements and
 * directed arcs exist for each occurrence of an SBML species, compartment or
 * parameter symbol in an assignment statement\'s \'math\' subelement.  Let the
 * directed arcs point from the statement assigning the symbol to the
 * statements that contain the symbol in their \'math\' subelement expressions.
 * This graph must be acyclic.
 * 
 * SBML does not specify when or how often rules should be evaluated.
 * Eliminating algebraic loops ensures that assignment statements can be
 * evaluated any number of times without the result of those evaluations
 * changing.  As an example, consider the set of equations <em>x = x + 1</em>,
 * <em>y = z + 200</em> and <em>z = y + 100</em>.  If this set of equations
 * were interpreted as a set of assignment statements, it would be invalid
 * because the rule for <em>x</em> refers to <em>x</em> (exhibiting one type
 * of loop), and the rule for <em>y</em> refers to <em>z</em> while the rule
 * for <em>z</em> refers back to <em>y</em> (exhibiting another type of loop).
 * Conversely, the following set of equations would constitute a valid set of
 * assignment statements: <em>x = 10</em>, <em>y = z + 200</em>, and <em>z = x
 * + 100</em>.
 * 
 * @subsection rules-not-overdetermined A model must not be overdetermined
 * 
 * An SBML model must not be overdetermined; that is, a model must not
 * define more equations than there are unknowns in a model.  An SBML model
 * that does not contain AlgebraicRule structures cannot be overdetermined.
 * 
 * LibSBML implements the static analysis procedure described in
 * Appendix&nbsp;B of the SBML Level&nbsp;3 Version&nbsp;1 Core
 * specification for assessing whether a model is overdetermined.
 * 
 * (In summary, assessing whether a given continuous, deterministic,
 * mathematical model is overdetermined does not require dynamic analysis; it
 * can be done by analyzing the system of equations created from the model.
 * One approach is to construct a bipartite graph in which one set of vertices
 * represents the variables and the other the set of vertices represents the
 * equations.  Place edges between vertices such that variables in the system
 * are linked to the equations that determine them.  For algebraic equations,
 * there will be edges between the equation and each variable occurring in the
 * equation.  For ordinary differential equations (such as those defined by
 * rate rules or implied by the reaction rate definitions), there will be a
 * single edge between the equation and the variable determined by that
 * differential equation.  A mathematical model is overdetermined if the
 * maximal matchings of the bipartite graph contain disconnected vertexes
 * representing equations.  If one maximal matching has this property, then
 * all the maximal matchings will have this property; i.e., it is only
 * necessary to find one maximal matching.)
 *
 * @section RuleType_t Rule types for SBML Level 1
 *
 * SBML Level 1 uses a different scheme than SBML Level 2 and Level 3 for
 * distinguishing rules; specifically, it uses an attribute whose value is
 * drawn from an enumeration of 3 values.  LibSBML supports this using methods
 * that work @if clike a libSBML enumeration type, RuleType_t, whose values
 * are @else with the enumeration values @endif listed below.
 *
 * @li @link libsbmlcs.libsbml.RULE_TYPE_RATE RULE_TYPE_RATE@endlink: Indicates
 * the rule is a \'rate\' rule.
 * @li @link libsbmlcs.libsbml.RULE_TYPE_SCALAR RULE_TYPE_SCALAR@endlink:
 * Indicates the rule is a \'scalar\' rule.
 * @li @link libsbmlcs.libsbml.RULE_TYPE_INVALID RULE_TYPE_INVALID@endlink:
 * Indicates the rule type is unknown or not yet set.
 *
 *
 *
 *
 * 
 */
"


%typemap(csimports) ListOfRules "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Implementation of SBML\'s %ListOfRules construct.
 * 
 * *
 * 
 * The various ListOf___ classes in SBML are merely containers used for
 * organizing the main components of an SBML model.  All are derived from
 * the abstract class SBase, and inherit the various attributes and
 * subelements of SBase, such as \'metaid\' as and \'annotation\'.  The
 * ListOf___ classes do not add any attributes of their own.
 *
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 *
 * @htmlinclude listof-illustration.html
 *
 * Readers may wonder about the motivations for using the ListOf___
 * containers.  A simpler approach in XML might be to place the components
 * all directly at the top level of the model definition.  The choice made
 * in SBML is to group them within XML elements named after
 * ListOf<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from SBase means that software tools can add information @em about
 * the lists themselves into each list container\'s \'annotation\'.
 * 
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 *
 *
 */
"


%csmethodmodifiers Rule::Rule(const Rule& orig) "
/**
   * Copy constructor; creates a copy of this Rule.
   *
   * @param orig the object to copy.
   * 
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the argument @p orig is @c null.
   */ public
";


%csmethodmodifiers Rule::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor for this instance of Rule.
   *
   * @param v the SBMLVisitor instance to be used.
   *
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether the Visitor would like to visit the next Rule object in the
   * list of rules within which @em the present object is embedded.
   */ public
";


%csmethodmodifiers Rule::clone() const "
/**
   * Creates and returns a deep copy of this Rule.
   * 
   * @return a (deep) copy of this Rule.
   */ public new
";


%csmethodmodifiers Rule::getFormula() const "
/**
   * Returns the mathematical expression of this Rule in text-string form.
   *
   * The text string is produced by
   * @if java <code><a href=\'libsbml.html#formulaToString(org.sbml.libsbml.ASTNode)\'>libsbml.formulaToString()</a></code>@else libsbmlcs.libsbml.formulaToString()@endif; please consult
   * the documentation for that function to find out more about the format
   * of the text-string formula.
   * 
   * @return the formula text string for this Rule.
   *
   * @note The attribute \'formula\' is specific to SBML Level&nbsp;1; in
   * higher Levels of SBML, it has been replaced with a subelement named
   * \'math\'.  However, libSBML provides a unified interface to the
   * underlying math expression and this method can be used for models
   * of all Levels of SBML.
   *
   * @see getMath()
   */ public
";


%csmethodmodifiers Rule::getMath() const "
/**
   * Get the mathematical formula of this Rule as an ASTNode tree.
   *
   * @return an ASTNode, the value of the \'math\' subelement of this Rule.
   *
   * @note The subelement \'math\' is present in SBML Levels&nbsp;2
   * and&nbsp;3.  In SBML Level&nbsp;1, the equivalent construct is the
   * attribute named \'formula\'.  LibSBML provides a unified interface to
   * the underlying math expression and this method can be used for models
   * of all Levels of SBML.
   *
   * @see getFormula()
   */ public
";


%csmethodmodifiers Rule::getVariable() const "
/**
   * Get the value of the \'variable\' attribute of this Rule object.
   *
   * *
 * 
 * In SBML Level&nbsp;1, the different rule types each have a different
 * name for the attribute holding the reference to the object constituting
 * the left-hand side of the rule.  (E.g., for SBML Level&nbsp;1\'s
 * SpeciesConcentrationRule the attribute is \'species\', for
 * CompartmentVolumeRule it is \'compartment\', etc.)  In SBML Levels&nbsp;2
 * and&nbsp;3, the only two types of Rule objects with a left-hand side
 * object reference are AssignmentRule and RateRule, and both of them use the
 * same name for attribute: \'variable\'.  In order to make it easier for
 * application developers to work with all Levels of SBML, libSBML uses a
 * uniform name for all such attributes, and it is \'variable\', regardless of
 * whether Level&nbsp;1 rules or Level&nbsp;2&ndash;3 rules are being used.
 *
   * 
   * @return the identifier string stored as the \'variable\' attribute value
   * in this Rule, or @c null if this object is an AlgebraicRule object.
   */ public
";


%csmethodmodifiers Rule::getUnits() const "
/**
   * Returns the units for the
   * mathematical formula of this Rule.
   * 
   * @return the identifier of the units for the expression of this Rule.
   *
   * @note The attribute \'units\' exists on SBML Level&nbsp;1 ParameterRule
   * objects only.  It is not present in SBML Levels&nbsp;2 and&nbsp;3.
   */ public
";


%csmethodmodifiers Rule::isSetFormula() const "
/**
   * Predicate returning @c true if this Rule\'s mathematical expression is
   * set.
   * 
   * This method is equivalent to isSetMath().  This version is present for
   * easier compatibility with SBML Level&nbsp;1, in which mathematical
   * formulas were written in text-string form.
   * 
   * @return @c true if the mathematical formula for this Rule is
   * set, @c false otherwise.
   *
   * @note The attribute \'formula\' is specific to SBML Level&nbsp;1; in
   * higher Levels of SBML, it has been replaced with a subelement named
   * \'math\'.  However, libSBML provides a unified interface to the
   * underlying math expression and this method can be used for models
   * of all Levels of SBML.
   *
   * @see isSetMath()
   */ public
";


%csmethodmodifiers Rule::isSetMath() const "
/**
   * Predicate returning @c true if this Rule\'s mathematical expression is
   * set.
   *
   * This method is equivalent to isSetFormula().
   * 
   * @return @c true if the formula (or equivalently the math) for this
   * Rule is set, @c false otherwise.
   *
   * @note The subelement \'math\' is present in SBML Levels&nbsp;2
   * and&nbsp;3.  In SBML Level&nbsp;1, the equivalent construct is the
   * attribute named \'formula\'.  LibSBML provides a unified interface to
   * the underlying math expression and this method can be used for models
   * of all Levels of SBML.
   *
   * @see isSetFormula()
   */ public
";


%csmethodmodifiers Rule::isSetVariable() const "
/**
   * Predicate returning @c true if this Rule\'s \'variable\' attribute is set.
   *
   * *
 * 
 * In SBML Level&nbsp;1, the different rule types each have a different
 * name for the attribute holding the reference to the object constituting
 * the left-hand side of the rule.  (E.g., for SBML Level&nbsp;1\'s
 * SpeciesConcentrationRule the attribute is \'species\', for
 * CompartmentVolumeRule it is \'compartment\', etc.)  In SBML Levels&nbsp;2
 * and&nbsp;3, the only two types of Rule objects with a left-hand side
 * object reference are AssignmentRule and RateRule, and both of them use the
 * same name for attribute: \'variable\'.  In order to make it easier for
 * application developers to work with all Levels of SBML, libSBML uses a
 * uniform name for all such attributes, and it is \'variable\', regardless of
 * whether Level&nbsp;1 rules or Level&nbsp;2&ndash;3 rules are being used.
 *
   * 
   * @return @c true if the \'variable\' attribute value of this Rule is
   * set, @c false otherwise.
   */ public
";


%csmethodmodifiers Rule::isSetUnits() const "
/**
   * Predicate returning @c true if this Rule\'s \'units\' attribute is set.
   *
   * @return @c true if the units for this Rule is set, @c false
   * otherwise
   *
   * @note The attribute \'units\' exists on SBML Level&nbsp;1 ParameterRule
   * objects only.  It is not present in SBML Levels&nbsp;2 and&nbsp;3.
   */ public
";


%csmethodmodifiers Rule::setFormula(const std::string& formula) "
/**
   * Sets the \'math\' subelement of this Rule to an expression in text-string
   * form.
   *
   * This is equivalent to setMath(ASTNode math).  The provision of
   * using text-string formulas is retained for easier SBML Level&nbsp;1
   * compatibility.  The formula is converted to an ASTNode internally.
   *
   * @param formula a mathematical formula in text-string form.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   *
   * @note The attribute \'formula\' is specific to SBML Level&nbsp;1; in
   * higher Levels of SBML, it has been replaced with a subelement named
   * \'math\'.  However, libSBML provides a unified interface to the
   * underlying math expression and this method can be used for models
   * of all Levels of SBML.
   *
   * @see setMath(ASTNode math)
   */ public
";


%csmethodmodifiers Rule::setMath(const ASTNode* math) "
/**
   * Sets the \'math\' subelement of this Rule to a copy of the given
   * ASTNode.
   *
   * @param math the ASTNode structure of the mathematical formula.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   *
   * @note The subelement \'math\' is present in SBML Levels&nbsp;2
   * and&nbsp;3.  In SBML Level&nbsp;1, the equivalent construct is the
   * attribute named \'formula\'.  LibSBML provides a unified interface to
   * the underlying math expression and this method can be used for models
   * of all Levels of SBML.
   *
   * @see setFormula(string formula)
   */ public
";


%csmethodmodifiers Rule::setVariable(const std::string& sid) "
/**
   * Sets the \'variable\' attribute value of this Rule object.
   *
   * *
 * 
 * In SBML Level&nbsp;1, the different rule types each have a different
 * name for the attribute holding the reference to the object constituting
 * the left-hand side of the rule.  (E.g., for SBML Level&nbsp;1\'s
 * SpeciesConcentrationRule the attribute is \'species\', for
 * CompartmentVolumeRule it is \'compartment\', etc.)  In SBML Levels&nbsp;2
 * and&nbsp;3, the only two types of Rule objects with a left-hand side
 * object reference are AssignmentRule and RateRule, and both of them use the
 * same name for attribute: \'variable\'.  In order to make it easier for
 * application developers to work with all Levels of SBML, libSBML uses a
 * uniform name for all such attributes, and it is \'variable\', regardless of
 * whether Level&nbsp;1 rules or Level&nbsp;2&ndash;3 rules are being used.
 *
   * 
   * @param sid the identifier of a Compartment, Species or Parameter
   * elsewhere in the enclosing Model object.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   */ public
";


%csmethodmodifiers Rule::setUnits(const std::string& sname) "
/**
   * Sets the units for this Rule.
   *
   * @param sname the identifier of the units
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   *
   * @note The attribute \'units\' exists on SBML Level&nbsp;1 ParameterRule
   * objects only.  It is not present in SBML Levels&nbsp;2 and&nbsp;3.
   */ public
";


%csmethodmodifiers Rule::unsetUnits "
/**
   * Unsets the \'units\' for this Rule.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   *
   * @note The attribute \'units\' exists on SBML Level&nbsp;1 ParameterRule
   * objects only.  It is not present in SBML Levels&nbsp;2 and&nbsp;3.
   */ public
";


%csmethodmodifiers Rule::getDerivedUnitDefinition "
/**
   * Calculates and returns a UnitDefinition that expresses the units of
   * measurement assumed for the \'math\' expression of this Rule.
   *
   * *
 * 
 * The units are calculated based on the mathematical expression in the
 * Rule and the model quantities referenced by <code>&lt;ci&gt;</code>
 * elements used within that expression.  The method
 * Rule::getDerivedUnitDefinition() returns the calculated units, to the
 * extent that libSBML can compute them.
 * 
   *
   * * 
 * @note The functionality that facilitates unit analysis depends on the
 * model as a whole.  Thus, in cases where the object has not been added to
 * a model or the model itself is incomplete, unit analysis is not possible
 * and this method will return @c null.
 *
 * 
   *
   * * 
 * @warning <span class=\'warning\'>Note that it is possible the \'math\'
 * expression in the Rule contains pure numbers or parameters with undeclared
 * units.  In those cases, it is not possible to calculate the units of the
 * overall expression without making assumptions.  LibSBML does not make
 * assumptions about the units, and Rule::getDerivedUnitDefinition() only
 * returns the units as far as it is able to determine them.  For example, in
 * an expression <em>X + Y</em>, if <em>X</em> has unambiguously-defined
 * units and <em>Y</em> does not, it will return the units of <em>X</em>.
 * <strong>It is important that callers also invoke the method</strong>
 * Rule::containsUndeclaredUnits() <strong>to determine whether this
 * situation holds</strong>.  Callers may wish to take suitable actions in
 * those scenarios.</span>
 *
   * 
   * @return a UnitDefinition that expresses the units of the math 
   * expression of this Rule, or @c null if one cannot be constructed.
   *
   * @see containsUndeclaredUnits()
   */ public
";


%csmethodmodifiers Rule::getDerivedUnitDefinition() const "
/**
   * Calculates and returns a UnitDefinition that expresses the units of
   * measurement assumed for the \'math\' expression of this Rule.
   *
   * *
 * 
 * The units are calculated based on the mathematical expression in the
 * Rule and the model quantities referenced by <code>&lt;ci&gt;</code>
 * elements used within that expression.  The method
 * Rule::getDerivedUnitDefinition() returns the calculated units, to the
 * extent that libSBML can compute them.
 * 
   *
   * * 
 * @note The functionality that facilitates unit analysis depends on the
 * model as a whole.  Thus, in cases where the object has not been added to
 * a model or the model itself is incomplete, unit analysis is not possible
 * and this method will return @c null.
 *
 * 
   *
   * * 
 * @warning <span class=\'warning\'>Note that it is possible the \'math\'
 * expression in the Rule contains pure numbers or parameters with undeclared
 * units.  In those cases, it is not possible to calculate the units of the
 * overall expression without making assumptions.  LibSBML does not make
 * assumptions about the units, and Rule::getDerivedUnitDefinition() only
 * returns the units as far as it is able to determine them.  For example, in
 * an expression <em>X + Y</em>, if <em>X</em> has unambiguously-defined
 * units and <em>Y</em> does not, it will return the units of <em>X</em>.
 * <strong>It is important that callers also invoke the method</strong>
 * Rule::containsUndeclaredUnits() <strong>to determine whether this
 * situation holds</strong>.  Callers may wish to take suitable actions in
 * those scenarios.</span>
 *
   * 
   * @return a UnitDefinition that expresses the units of the math 
   * expression of this Rule, or @c null if one cannot be constructed.
   *
   * @see containsUndeclaredUnits()
   */ public
";


%csmethodmodifiers Rule::containsUndeclaredUnits "
/**
   * Predicate returning @c true if the math expression of this Rule contains
   * parameters/numbers with undeclared units.
   * 
   * @return @c true if the math expression of this Rule includes
   * parameters/numbers with undeclared units, @c false otherwise.
   *
   * @note A return value of @c true indicates that the UnitDefinition
   * returned by getDerivedUnitDefinition() may not accurately represent
   * the units of the expression.
   *
   * @see getDerivedUnitDefinition()
   */ public
";


%csmethodmodifiers Rule::containsUndeclaredUnits() const "
/**
   * Predicate returning @c true if the math expression of this Rule contains
   * parameters/numbers with undeclared units.
   * 
   * @return @c true if the math expression of this Rule includes
   * parameters/numbers with undeclared units, @c false otherwise.
   *
   * @note A return value of @c true indicates that the UnitDefinition
   * returned by getDerivedUnitDefinition() may not accurately represent the
   * units of the expression.
   *
   * @see getDerivedUnitDefinition()
   */ public
";


%csmethodmodifiers Rule::getType() const "
/**
   * Returns a code representing the type of rule this is.
   * 
   * @return the rule type, which will be one of the following three possible
   * values:
   * @if clike
   * 
   * @li @link libsbmlcs.libsbml.RULE_TYPE_RATE RULE_TYPE_RATE@endlink
   * @li @link libsbmlcs.libsbml.RULE_TYPE_SCALAR RULE_TYPE_SCALAR@endlink
   * @li @link libsbmlcs.libsbml.RULE_TYPE_INVALID RULE_TYPE_INVALID@endlink
   * @endif@if python
   * 
   * @li @link libsbml.RULE_TYPE_RATE RULE_TYPE_RATE@endlink
   * @li @link libsbml.RULE_TYPE_SCALAR RULE_TYPE_SCALAR@endlink
   * @li @link libsbml.RULE_TYPE_INVALID RULE_TYPE_INVALID@endlink
   * @endif@if java
   *
   * @li @link libsbmlConstants#RULE_TYPE_RATE RULE_TYPE_RATE@endlink
   * @li @link libsbmlConstants#RULE_TYPE_SCALAR RULE_TYPE_SCALAR@endlink
   * @li @link libsbmlConstants#RULE_TYPE_INVALID RULE_TYPE_INVALID@endlink
   * @endif@if csharp
   * 
   * @li @link libsbmlcs.libsbml.RULE_TYPE_RATE RULE_TYPE_RATE@endlink
   * @li @link libsbmlcs.libsbml.RULE_TYPE_SCALAR RULE_TYPE_SCALAR@endlink
   * @li @link libsbmlcs.libsbml.RULE_TYPE_INVALID RULE_TYPE_INVALID@endlink
   * 
   * @endif
   *
   * @note The attribute \'type\' on Rule objects is present only in SBML
   * Level&nbsp;1.  In SBML Level&nbsp;2 and later, the type has been
   * replaced by subclassing the Rule object.
   */ public
";


%csmethodmodifiers Rule::isAlgebraic() const "
/**
   * Predicate returning @c true if this Rule is an AlgebraicRule.
   * 
   * @return @c true if this Rule is an AlgebraicRule, @c false otherwise.
   */ public
";


%csmethodmodifiers Rule::isAssignment() const "
/**
   * Predicate returning @c true if this Rule is an AssignmentRule.
   * 
   * @return @c true if this Rule is an AssignmentRule, @c false otherwise.
   */ public
";


%csmethodmodifiers Rule::isCompartmentVolume() const "
/**
   * Predicate returning @c true if this Rule is an CompartmentVolumeRule
   * or equivalent.
   *
   * This libSBML method works for SBML Level&nbsp;1 models (where there is
   * such a thing as an explicit CompartmentVolumeRule), as well as other Levels of
   * SBML.  For Levels above Level&nbsp;1, this method checks the symbol
   * being affected by the rule, and returns @c true if the symbol is the
   * identifier of a Compartment object defined in the model.
   *
   * @return @c true if this Rule is a CompartmentVolumeRule, @c false
   * otherwise.
   */ public
";


%csmethodmodifiers Rule::isParameter() const "
/**
   * Predicate returning @c true if this Rule is an ParameterRule or
   * equivalent.
   *
   * This libSBML method works for SBML Level&nbsp;1 models (where there is
   * such a thing as an explicit ParameterRule), as well as other Levels of
   * SBML.  For Levels above Level&nbsp;1, this method checks the symbol
   * being affected by the rule, and returns @c true if the symbol is the
   * identifier of a Parameter object defined in the model.
   *
   * @return @c true if this Rule is a ParameterRule, @c false
   * otherwise.
   */ public
";


%csmethodmodifiers Rule::isRate() const "
/**
   * Predicate returning @c true if this Rule is a RateRule (SBML
   * Levels&nbsp;2&ndash;3) or has a \'type\' attribute value of @c \'rate\'
   * (SBML Level&nbsp;1).
   *
   * @return @c true if this Rule is a RateRule (Level&nbsp;2) or has
   * type \'rate\' (Level&nbsp;1), @c false otherwise.
   */ public
";


%csmethodmodifiers Rule::isScalar() const "
/**
   * Predicate returning @c true if this Rule is an AssignmentRule (SBML
   * Levels&nbsp;2&ndash;3) or has a \'type\' attribute value of @c \'scalar\'
   * (SBML Level&nbsp;1).
   *
   * @return @c true if this Rule is an AssignmentRule (Level&nbsp;2) or has
   * type \'scalar\' (Level&nbsp;1), @c false otherwise.
   */ public
";


%csmethodmodifiers Rule::isSpeciesConcentration() const "
/**
   * Predicate returning @c true if this Rule is a SpeciesConcentrationRule
   * or equivalent.
   *
   * This libSBML method works for SBML Level&nbsp;1 models (where there is
   * such a thing as an explicit SpeciesConcentrationRule), as well as
   * other Levels of SBML.  For Levels above Level&nbsp;1, this method
   * checks the symbol being affected by the rule, and returns @c true if
   * the symbol is the identifier of a Species object defined in the model.
   *
   * @return @c true if this Rule is a SpeciesConcentrationRule, @c false
   * otherwise.
   */ public
";


%csmethodmodifiers Rule::getTypeCode() const "
/**
   * Returns the libSBML type code for this %SBML object.
   * 
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object, either
   * @link libsbmlcs.libsbml.SBML_ASSIGNMENT_RULE SBML_ASSIGNMENT_RULE@endlink,
   * @link libsbmlcs.libsbml.SBML_RATE_RULE SBML_RATE_RULE@endlink, or
   * @link libsbmlcs.libsbml.SBML_ALGEBRAIC_RULE SBML_ALGEBRAIC_RULE@endlink 
   * for %SBML Core.
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see getElementName()
   * @see getPackageName()
   */ public new
";


%csmethodmodifiers Rule::getL1TypeCode() const "
/**
   * Returns the SBML Level&nbsp;1 type code for this Rule object.
   *
   * This method only applies to SBML Level&nbsp;1 model objects.  If this
   * is not an SBML Level&nbsp;1 rule object, this method will return @link
   * libsbmlcs.libsbml.SBML_UNKNOWN SBML_UNKNOWN@endlink.
   * 
   * @return the SBML Level&nbsp;1 type code for this Rule (namely, @link
   * libsbmlcs.libsbml.SBML_COMPARTMENT_VOLUME_RULE
   * SBML_COMPARTMENT_VOLUME_RULE@endlink, @link
   * libsbmlcs.libsbml.SBML_PARAMETER_RULE SBML_PARAMETER_RULE@endlink, @link
   * libsbmlcs.libsbml.SBML_SPECIES_CONCENTRATION_RULE
   * SBML_SPECIES_CONCENTRATION_RULE@endlink, or @link
   * libsbmlcs.libsbml.SBML_UNKNOWN SBML_UNKNOWN@endlink).
   */ public
";


%csmethodmodifiers Rule::getElementName() const "
/**
   * Returns the XML element name of this object
   *
   * The returned value can be any of a number of different strings,
   * depending on the SBML Level in use and the kind of Rule object this
   * is.  The rules as of libSBML version @htmlinclude libsbml-version.html
   * are the following:
   * <ul>
   * <li> (Level&nbsp;2 and&nbsp;3) RateRule: returns @c \'rateRule\'
   * <li> (Level&nbsp;2 and&nbsp;3) AssignmentRule: returns @c \'assignmentRule\' 
   * <li> (Level&nbsp;2 and&nbsp;3) AlgebraicRule: returns @c \'algebraicRule\'
   * <li> (Level&nbsp;1 Version&nbsp;1) SpecieConcentrationRule: returns @c \'specieConcentrationRule\'
   * <li> (Level&nbsp;1 Version&nbsp;2) SpeciesConcentrationRule: returns @c \'speciesConcentrationRule\'
   * <li> (Level&nbsp;1) CompartmentVolumeRule: returns @c \'compartmentVolumeRule\'
   * <li> (Level&nbsp;1) ParameterRule: returns @c \'parameterRule\'
   * <li> Unknown rule type: returns @c \'unknownRule\'
   * </ul>
   *
   * Beware that the last (@c \'unknownRule\') is not a valid SBML element
   * name.
   * 
   * @return the name of this element
   */ public new
";


%csmethodmodifiers Rule::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Rule::setL1TypeCode(int type) "
/**
   * Sets the SBML Level&nbsp;1 type code for this Rule.
   *
   * @param type the SBML Level&nbsp;1 type code for this Rule. The
   * allowable values are @link libsbmlcs.libsbml.SBML_COMPARTMENT_VOLUME_RULE
   * SBML_COMPARTMENT_VOLUME_RULE@endlink, @link
   * libsbmlcs.libsbml.SBML_PARAMETER_RULE SBML_PARAMETER_RULE@endlink, and
   * @link libsbmlcs.libsbml.SBML_SPECIES_CONCENTRATION_RULE
   * SBML_SPECIES_CONCENTRATION_RULE@endlink.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS@endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE@endlink
   * if given @p type value is not one of the above.
   */ public
";


%csmethodmodifiers Rule::hasRequiredElements() const "
/**
   * Predicate returning @c true if all the required elements for this Rule
   * object have been set.
   *
   * The only required element for a Rule object is the \'math\' subelement.
   *
   * @return a bool value indicating whether all the required
   * elements for this object have been defined.
   */ public new
";


%csmethodmodifiers Rule::hasRequiredAttributes() const "
/**
   * Predicate returning @c true if all the required attributes for this Rule
   * object have been set.
   *
   * The required attributes for a Rule object depend on the type of Rule
   * it is.  For AssignmentRule and RateRule objects (and SBML
   * Level&nbsp1\'s SpeciesConcentrationRule, CompartmentVolumeRule, and
   * ParameterRule objects), the required attribute is \'variable\'; for
   * AlgebraicRule objects, there is no required attribute.
   *
   * @return a bool value indicating whether all the required
   * elements for this object have been defined.
   */ public new
";


%csmethodmodifiers Rule::renameSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames all the @c SIdRef attributes on this element, including any
   * found in MathML.
   *
   * *
 * 

 * In SBML, object identifiers are of a data type called <code>SId</code>.
 * In SBML Level&nbsp;3, an explicit data type called <code>SIdRef</code> was
 * introduced for attribute values that refer to <code>SId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to an identifier\', but the effective
 * data type was the same as <code>SIdRef</code>in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>SIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 *
 *
   * 
   * This method works by looking at all attributes and (if appropriate)
   * mathematical formulas, comparing the identifiers to the value of @p
   * oldid.  If any matches are found, the matching identifiers are replaced
   * with @p newid.  The method does @em not descend into child elements.
   *
   * @param oldid the old identifier
   * @param newid the new identifier
   */ public
";


%csmethodmodifiers Rule::renameUnitSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames all the @c UnitSIdRef attributes on this element.
   *
   * *
 * 
 * In SBML, unit definitions have identifiers of type <code>UnitSId</code>.  In
 * SBML Level&nbsp;3, an explicit data type called <code>UnitSIdRef</code> was
 * introduced for attribute values that refer to <code>UnitSId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to a unit identifier\', but the effective
 * data type was the same as <code>UnitSIdRef</code> in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>UnitSIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 * 
 *
   *
   * This method works by looking at all unit identifier attribute values
   * (including, if appropriate, inside mathematical formulas), comparing the
   * unit identifiers to the value of @p oldid.  If any matches are found,
   * the matching identifiers are replaced with @p newid.  The method does
   * @em not descend into child elements.
   * 
   * @param oldid the old identifier
   * @param newid the new identifier
   */ public
";


%csmethodmodifiers Rule::getInternalId() const "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Rule::setInternalId(std::string id) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Rule::getId() const "
/** */ /* libsbml-internal */ public new
";


%csmethodmodifiers Rule::replaceSIDWithFunction(const std::string& id, const ASTNode* function) "
/**
   * Replace all nodes with the name \'id\' from the child \'math\' object with the provided function. 
   *
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Rule::divideAssignmentsToSIdByFunction(const std::string& id, const ASTNode* function) "
/**
   * If this rule assigns a value or a change to the \'id\' element, replace the \'math\' object with the function (existing/function). 
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Rule::multiplyAssignmentsToSIdByFunction(const std::string& id, const ASTNode* function) "
/**
   * If this assignment assigns a value to the \'id\' element, replace the \'math\' object with the function (existing*function). 
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Rule::Rule(  int      type , unsigned int        level , unsigned int        version ) "
/**
   * Only subclasses may create Rules.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Rule::Rule(  int      type , SBMLNamespaces *    sbmlns ) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Rule::readOtherXML(XMLInputStream& stream) "
/**
   * Subclasses should override this method to read (and store) XHTML,
   * MathML, etc. directly from the XMLInputStream.
   *
   * @return true if the subclass read from the stream, false otherwise.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Rule::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Rule::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Subclasses should override this method to read values from the given
   * XMLAttributes set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Rule::readL1Attributes(const XMLAttributes& attributes) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Rule::readL2Attributes(const XMLAttributes& attributes) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Rule::readL3Attributes(const XMLAttributes& attributes) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Rule::writeAttributes(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfRules::ListOfRules(unsigned int level, unsigned int version) "
/**
   * Creates a new ListOfRules object.
   *
   * The object is constructed such that it is valid for the given SBML
   * Level and Version combination.
   *
   * @param level the SBML Level
   * 
   * @param version the Version within the SBML Level
   */ public
";


%csmethodmodifiers ListOfRules::ListOfRules(SBMLNamespaces* sbmlns) "
/**
   * Creates a new ListOfRules object.
   *
   * The object is constructed such that it is valid for the SBML Level and
   * Version combination determined by the SBMLNamespaces object in @p
   * sbmlns.
   *
   * @param sbmlns an SBMLNamespaces object that is used to determine the
   * characteristics of the ListOfRules object to be created.
   */ public
";


%csmethodmodifiers ListOfRules::clone() const "
/**
   * Creates and returns a deep copy of this ListOfRules instance.
   *
   * @return a (deep) copy of this ListOfRules.
   */ public new
";


%csmethodmodifiers ListOfRules::getItemTypeCode() const "
/**
   * Returns the libSBML type code for the objects contained in this ListOf
   * (i.e., Rule objects, if the list is non-empty).
   * 
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for objects contained in this list:
   * @link libsbmlcs.libsbml.SBML_RULE SBML_RULE@endlink (default).
   *
   * @see getElementName()
   * @see getPackageName()
   */ public new
";


%csmethodmodifiers ListOfRules::getElementName() const "
/**
   * Returns the XML element name of this object.
   *
   * For ListOfRules, the XML element name is @c \'listOfRules\'.
   * 
   * @return the name of this element, i.e., @c \'listOfRules\'.
   */ public new
";


%csmethodmodifiers ListOfRules::get(unsigned int n) "
/**
   * Get a Rule from the ListOfRules.
   *
   * @param n the index number of the Rule to get.
   * 
   * @return the nth Rule in this ListOfRules.
   *
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfRules::get "
/**
   * Get a Rule from the ListOfRules.
   *
   * @param n the index number of the Rule to get.
   * 
   * @return the nth Rule in this ListOfRules.
   *
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfRules::get(const std::string& sid) "
/**
   * Get a Rule from the ListOfRules based on its identifier.
   *
   * @param sid a string representing the identifier of the Rule to get.
   * 
   * @return Rule in this ListOfRules with the given @p id or @c null if no
   * such Rule exists.
   *
   * @see get(long n)
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfRules::get(const std::string& sid) const "
/**
   * Get a Rule from the ListOfRules based on its identifier.
   *
   * @param sid a string representing the identifier of the Rule to get.
   * 
   * @return Rule in this ListOfRules with the given @p sid or @c null if no
   * such Rule exists.
   *
   * @see get(long n)
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfRules::remove(unsigned int n) "
/**
   * Removes the nth item from this ListOfRules items and returns a pointer to
   * it.
   *
   * The caller owns the returned item and is responsible for deleting it.
   *
   * @param n the index of the item to remove
   *
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfRules::getElementBySId(const std::string& id) "
/**
   * Returns the first child element found that has the given @p id in the
   * model-wide SId namespace, or @c null if no such object is found.
   *
   * Note that AssignmentRules and RateRules do not actually have IDs, but
   * the libsbml interface pretends that they do: no assignment rule or rate
   * rule is returned by this function.
   *
   * @param id string representing the id of objects to find
   *
   * @return pointer to the first element found with the given @p id.
   */ public
";


%csmethodmodifiers ListOfRules::remove(const std::string& sid) "
/**
   * Removes item in this ListOfRules items with the given identifier.
   *
   * The caller owns the returned item and is responsible for deleting it.
   * If none of the items in this list have the identifier @p sid, then @c
   * null is returned.
   *
   * @param sid the identifier of the item to remove
   *
   * @return the item removed.  As mentioned above, the caller owns the
   * returned item.
   */ public new
";


%csmethodmodifiers ListOfRules::getElementPosition() const "
/**
   * Get the ordinal position of this element in the containing object
   * (which in this case is the Model object).
   *
   * The ordering of elements in the XML form of %SBML is generally fixed
   * for most components in %SBML.
   *
   * @return the ordinal position of the element with respect to its
   * siblings, or @c -1 (default) to indicate the position is not significant.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfRules::createObject(XMLInputStream& stream) "
/**
   * Create and return a listOfRules object, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or @c null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfRules::isValidTypeForList(SBase * item) "
/** */ /* libsbml-internal */ public
";


%typemap(csimports) AlgebraicRule "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Implementation of %SBML\'s %AlgebraicRule construct.
 *
 * The rule type AlgebraicRule is derived from the parent class Rule.  It
 * is used to express equations that are neither assignments of model
 * variables nor rates of change.  AlgebraicRule does not add any
 * attributes to the basic Rule; its role is simply to distinguish this
 * case from the other cases.
 *
 * In the context of a simulation, algebraic rules are in effect at all
 * times, <em>t</em> >= <em>0</em>.  For purposes of evaluating
 * expressions that involve the delay \'csymbol\' (see the SBML
 * specification), algebraic rules are considered to apply also at
 * <em>t</em> <= <em>0</em>.  Please consult the relevant SBML
 * specification for additional information about the semantics of
 * assignments, rules, and entity values for simulation time <em>t</em>
 * <= <em>0</em>.
 *
 * An SBML model must not be overdetermined.  The ability to define
 * arbitrary algebraic expressions in an SBML model introduces the
 * possibility that a model is mathematically overdetermined by the overall
 * system of equations constructed from its rules, reactions and events.
 * Therefore, if an algebraic rule is introduced in a model, for at least
 * one of the entities referenced in the rule\'s \'math\' element the value of
 * that entity must not be completely determined by other constructs in the
 * model.  This means that at least this entity must not have the attribute
 * \'constant\'=@c true and there must also not be a rate rule or assignment
 * rule for it.  Furthermore, if the entity is a Species object, its value
 * must not be determined by reactions, which means that it must either
 * have the attribute \'boundaryCondition\'=@c true or else not be involved
 * in any reaction at all.  These restrictions are explained in more detail
 * in the SBML specification documents.
 *
 * In SBML Levels 2 and&nbsp;3, Reaction object identifiers can be
 * referenced in the \'math\' expression of an algebraic rule, but reaction
 * rates can never be <em>determined</em> by algebraic rules.  This is true
 * even when a reaction does not contain a KineticLaw element.  (In such
 * cases of missing KineticLaw elements, the model is valid but incomplete;
 * the rates of reactions lacking kinetic laws are simply undefined, and
 * not determined by the algebraic rule.)
 * 
 * *
 * @section rules-general General summary of SBML rules
 *
 * In SBML Level&nbsp;3 as well as Level&nbsp;2, rules are separated into three
 * subclasses for the benefit of model analysis software.  The three
 * subclasses are based on the following three different possible functional
 * forms (where <em>x</em> is a variable, <em>f</em> is some arbitrary
 * function returning a numerical result, <b><em>V</em></b> is a vector of
 * variables that does not include <em>x</em>, and <b><em>W</em></b> is a
 * vector of variables that may include <em>x</em>):
 * 
 * <table border=\'0\' cellpadding=\'0\' class=\'centered\' style=\'font-size: small\'>
 * <tr><td width=\'120px\'><em>Algebraic:</em></td><td width=\'250px\'>left-hand side is zero</td><td><em>0 = f(<b>W</b>)</em></td></tr>
 * <tr><td><em>Assignment:</em></td><td>left-hand side is a scalar:</td><td><em>x = f(<b>V</b>)</em></td></tr>
 * <tr><td><em>Rate:</em></td><td>left-hand side is a rate-of-change:</td><td><em>dx/dt = f(<b>W</b>)</em></td></tr>
 * </table>
 * 
 * In their general form given above, there is little to distinguish
 * between <em>assignment</em> and <em>algebraic</em> rules.  They are treated as
 * separate cases for the following reasons:
 * 
 * @li <em>Assignment</em> rules can simply be evaluated to calculate
 * intermediate values for use in numerical methods.  They are statements
 * of equality that hold at all times.  (For assignments that are only
 * performed once, see InitialAssignment.)

 * @li SBML needs to place restrictions on assignment rules, for example
 * the restriction that assignment rules cannot contain algebraic loops.
 * 
 * @li Some simulators do not contain numerical solvers capable of solving
 * unconstrained algebraic equations, and providing more direct forms such
 * as assignment rules may enable those simulators to process models they
 * could not process if the same assignments were put in the form of
 * general algebraic equations;
 * 
 * @li Those simulators that <em>can</em> solve these algebraic equations make a
 * distinction between the different categories listed above; and
 * 
 * @li Some specialized numerical analyses of models may only be applicable
 * to models that do not contain <em>algebraic</em> rules.
 * 
 * The approach taken to covering these cases in SBML is to define an
 * abstract Rule structure containing a subelement, \'math\', to hold the
 * right-hand side expression, then to derive subtypes of Rule that add
 * attributes to distinguish the cases of algebraic, assignment and rate
 * rules.  The \'math\' subelement must contain a MathML expression defining the
 * mathematical formula of the rule.  This MathML formula must return a
 * numerical value.  The formula can be an arbitrary expression referencing
 * the variables and other entities in an SBML model.
 * 
 * Each of the three subclasses of Rule (AssignmentRule, AlgebraicRule,
 * RateRule) inherit the the \'math\' subelement and other fields from SBase.
 * The AssignmentRule and RateRule classes add an additional attribute,
 * \'variable\'.  See the definitions of AssignmentRule, AlgebraicRule and
 * RateRule for details about the structure and interpretation of each one.
 * 
 * @section rules-restrictions Additional restrictions on SBML rules
 *
 * An important design goal of SBML rule semantics is to ensure that a
 * model\'s simulation and analysis results will not be dependent on when or
 * how often rules are evaluated.  To achieve this, SBML needs to place two
 * restrictions on rule use.  The first concerns algebraic loops in the system
 * of assignments in a model, and the second concerns overdetermined systems.
 * 
 * @subsection rules-no-loops A model must not contain algebraic loops
 * 
 * The combined set of InitialAssignment, AssignmentRule and KineticLaw
 * objects in a model constitute a set of assignment statements that should be
 * considered as a whole.  (A KineticLaw object is counted as an assignment
 * because it assigns a value to the symbol contained in the \'id\' attribute of
 * the Reaction object in which it is defined.)  This combined set of
 * assignment statements must not contain algebraic loops&mdash;dependency
 * chains between these statements must terminate.  To put this more formally,
 * consider a directed graph in which nodes are assignment statements and
 * directed arcs exist for each occurrence of an SBML species, compartment or
 * parameter symbol in an assignment statement\'s \'math\' subelement.  Let the
 * directed arcs point from the statement assigning the symbol to the
 * statements that contain the symbol in their \'math\' subelement expressions.
 * This graph must be acyclic.
 * 
 * SBML does not specify when or how often rules should be evaluated.
 * Eliminating algebraic loops ensures that assignment statements can be
 * evaluated any number of times without the result of those evaluations
 * changing.  As an example, consider the set of equations <em>x = x + 1</em>,
 * <em>y = z + 200</em> and <em>z = y + 100</em>.  If this set of equations
 * were interpreted as a set of assignment statements, it would be invalid
 * because the rule for <em>x</em> refers to <em>x</em> (exhibiting one type
 * of loop), and the rule for <em>y</em> refers to <em>z</em> while the rule
 * for <em>z</em> refers back to <em>y</em> (exhibiting another type of loop).
 * Conversely, the following set of equations would constitute a valid set of
 * assignment statements: <em>x = 10</em>, <em>y = z + 200</em>, and <em>z = x
 * + 100</em>.
 * 
 * @subsection rules-not-overdetermined A model must not be overdetermined
 * 
 * An SBML model must not be overdetermined; that is, a model must not
 * define more equations than there are unknowns in a model.  An SBML model
 * that does not contain AlgebraicRule structures cannot be overdetermined.
 * 
 * LibSBML implements the static analysis procedure described in
 * Appendix&nbsp;B of the SBML Level&nbsp;3 Version&nbsp;1 Core
 * specification for assessing whether a model is overdetermined.
 * 
 * (In summary, assessing whether a given continuous, deterministic,
 * mathematical model is overdetermined does not require dynamic analysis; it
 * can be done by analyzing the system of equations created from the model.
 * One approach is to construct a bipartite graph in which one set of vertices
 * represents the variables and the other the set of vertices represents the
 * equations.  Place edges between vertices such that variables in the system
 * are linked to the equations that determine them.  For algebraic equations,
 * there will be edges between the equation and each variable occurring in the
 * equation.  For ordinary differential equations (such as those defined by
 * rate rules or implied by the reaction rate definitions), there will be a
 * single edge between the equation and the variable determined by that
 * differential equation.  A mathematical model is overdetermined if the
 * maximal matchings of the bipartite graph contain disconnected vertexes
 * representing equations.  If one maximal matching has this property, then
 * all the maximal matchings will have this property; i.e., it is only
 * necessary to find one maximal matching.)
 *
 * @section RuleType_t Rule types for SBML Level 1
 *
 * SBML Level 1 uses a different scheme than SBML Level 2 and Level 3 for
 * distinguishing rules; specifically, it uses an attribute whose value is
 * drawn from an enumeration of 3 values.  LibSBML supports this using methods
 * that work @if clike a libSBML enumeration type, RuleType_t, whose values
 * are @else with the enumeration values @endif listed below.
 *
 * @li @link libsbmlcs.libsbml.RULE_TYPE_RATE RULE_TYPE_RATE@endlink: Indicates
 * the rule is a \'rate\' rule.
 * @li @link libsbmlcs.libsbml.RULE_TYPE_SCALAR RULE_TYPE_SCALAR@endlink:
 * Indicates the rule is a \'scalar\' rule.
 * @li @link libsbmlcs.libsbml.RULE_TYPE_INVALID RULE_TYPE_INVALID@endlink:
 * Indicates the rule type is unknown or not yet set.
 *
 *
 */
"


%csmethodmodifiers AlgebraicRule::AlgebraicRule(unsigned int level, unsigned int version) "
/**
   * Creates a new AlgebraicRule using the given SBML @p level and @p version
   * values.
   *
   * @param level a long integer, the SBML Level to assign to this AlgebraicRule
   *
   * @param version a long integer, the SBML Version to assign to this
   * AlgebraicRule
   *
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the given @p level and @p version combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent SBMLDocument object.
   *
   * *
 * @note Upon the addition of an AlgebraicRule object to an SBMLDocument
 * (e.g., using Model::addRule(@if java Rule r@endif)), the SBML Level, SBML
 * Version and XML namespace of the document @em override the values used
 * when creating the AlgebraicRule object via the AlgebraicRule constructors.
 * This is necessary to ensure that an SBML document has a consistent overall
 * structure.  Nevertheless, the ability to supply the values at the time of
 * creation of a AlgebraicRule is an important aid to producing valid SBML.
 * Knowledge of the intented SBML Level and Version determine whether it is
 * valid to assign a particular value to an attribute, or whether it is valid
 * to add an object to an existing SBMLDocument.
 *
   */ public
";


%csmethodmodifiers AlgebraicRule::AlgebraicRule(SBMLNamespaces* sbmlns) "
/**
   * Creates a new AlgebraicRule using the given SBMLNamespaces object
   * @p sbmlns.
   *
   * The SBMLNamespaces object encapsulates SBML Level/Version/namespaces
   * information.  It is used to communicate the SBML Level, Version, and
   * (in Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.
   * A common approach to using this class constructor is to create an
   * SBMLNamespaces object somewhere in a program, once, then pass it to
   * object constructors such as this one when needed.
   *
   * @param sbmlns an SBMLNamespaces object.
   *
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the given @p level and @p version combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent SBMLDocument object.
   *
   * *
 * @note Upon the addition of an AlgebraicRule object to an SBMLDocument
 * (e.g., using Model::addRule(@if java Rule r@endif)), the SBML Level, SBML
 * Version and XML namespace of the document @em override the values used
 * when creating the AlgebraicRule object via the AlgebraicRule constructors.
 * This is necessary to ensure that an SBML document has a consistent overall
 * structure.  Nevertheless, the ability to supply the values at the time of
 * creation of a AlgebraicRule is an important aid to producing valid SBML.
 * Knowledge of the intented SBML Level and Version determine whether it is
 * valid to assign a particular value to an attribute, or whether it is valid
 * to add an object to an existing SBMLDocument.
 *
   */ public
";


%csmethodmodifiers AlgebraicRule::clone() const "
/**
   * Creates and returns a deep copy of this Rule.
   * 
   * @return a (deep) copy of this Rule.
   */ public new
";


%csmethodmodifiers AlgebraicRule::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor for this instance of AlgebraicRule.
   *
   * @param v the SBMLVisitor instance to be used.
   *
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether the Visitor would like to visit the next AlgebraicRule object
   * in the list of rules within which @em the present object is embedded.
   */ public
";


%csmethodmodifiers AlgebraicRule::setInternalIdOnly "
/**
   * sets the mInternalIdOnly flag
   */ /* libsbml-internal */ public
";


%csmethodmodifiers AlgebraicRule::getInternalIdOnly() const "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers AlgebraicRule::hasRequiredAttributes() const "
/**
   * Predicate returning @c true if
   * all the required attributes for this AlgebraicRule object
   * have been set.
   *
   * @note In SBML Levels&nbsp;2&ndash;3, there is no required attribute
   * for an AlgebraicRule object.  For Level&nbsp;1, the only required
   * attribute is \'formula\'.
   * 
   * @return @c true if the required attributes have been set, @c false
   * otherwise.
   */ public new
";


%typemap(csimports) AssignmentRule "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Implementation of %SBML\'s %AssignmentRule construct.
 *
 * The rule type AssignmentRule is derived from the parent class Rule.  It
 * is used to express equations that set the values of variables.  The
 * left-hand side (the attribute named \'variable\') of an assignment rule
 * can refer to the identifier of a Species, SpeciesReference (in SBML
 * Level&nbsp;3), Compartment, or Parameter object in the model (but not a
 * Reaction).  The entity identified must have its \'constant\' attribute set
 * to @c false.  The effects of an AssignmentRule are in general terms the
 * same, but differ in the precise details depending on the type of
 * variable being set: <ul>

 * <li> <em>In the case of a species</em>, an AssignmentRule sets the
 * referenced species\' quantity (whether a \'concentration\' or \'amount\') to
 * the value determined by the formula in the MathML subelement \'math\'.
 * The unit associated with the value produced by the \'math\' formula @em
 * should (in SBML Level&nbsp;2 Version&nbsp;4 and in SBML Level&nbsp;3) or @em must (in
 * SBML releases prior to Level&nbsp;2 version&nbsp;4) be equal to the unit
 * associated with the species\' quantity.  <em>Restrictions</em>: There
 * must not be both an AssignmentRule \'variable\' attribute and a
 * SpeciesReference \'species\' attribute having the same value, unless the
 * referenced Species object has its \'boundaryCondition\' attribute set to
 * @c true.  In other words, an assignment rule cannot be defined for a
 * species that is created or destroyed in a reaction unless that species
 * is defined as a boundary condition in the model.
 *
 * <li> (For SBML Level&nbsp;3 only) <em>In the case of a species
 * reference</em>, an AssignmentRule sets the stoichiometry of the
 * referenced reactant or product to the value determined by the formula in
 * \'math\'.  The unit associated with the value produced by the \'math\'
 * formula should be consistent with the unit \'dimensionless\', because
 * reactant and product stoichiometries in reactions are dimensionless
 * quantities.
  *
 * <li> <em>In the case of a compartment</em>, an AssignmentRule sets the
 * referenced compartment\'s size to the value determined by the formula in
 * the \'math\' subelement of the AssignmentRule object.  The overall units
 * of the formula in \'math\' @em should (in SBML Level&nbsp;2 Version&nbsp;4
 * and in SBML Level&nbsp;3) or @em must (in SBML releases prior to Level&nbsp;2
 * version&nbsp;4) be the same as the units of the size of the compartment.
 *
 * <li> <em>In the case of a parameter</em>, an AssignmentRule sets the
 * referenced parameter\'s value to that determined by the formula in the
 * \'math\' subelement of the AssignmentRule object.  The overall units of
 * the formula in the \'math\' subelement @em should (in SBML Level&nbsp;2
 * Version&nbsp;4 and in SBML Level&nbsp;3) or @em must (in SBML releases prior to
 * Level&nbsp;2 version&nbsp;4) be the same as the units defined for the
 * parameter.  </ul>
 * 
 * In the context of a simulation, assignment rules are in effect at all
 * times, <em>t</em> >= <em>0</em>.  For purposes of evaluating
 * expressions that involve the <em>delay</em> \'csymbol\' (see the SBML
 * Level&nbsp;2 specification), assignment rules are considered to apply
 * also at <em>t</em> <= <em>0</em>.  Please consult the relevant
 * SBML specification for additional information about the semantics of
 * assignments, rules, and entity values for simulation time <em>t</em>
 * <= <em>0</em>.
 *
 * A model must not contain more than one AssignmentRule or RateRule
 * object having the same value of \'variable\'; in other words, in the set
 * of all assignment rules and rate rules in an SBML model, each variable
 * appearing in the left-hand sides can only appear once.  This simply
 * follows from the fact that an indeterminate system would result if a
 * model contained more than one assignment rule for the same variable or
 * both an assignment rule and a rate rule for the same variable.
 *
 * Similarly, a model must also not contain <em>both</em> an AssignmentRule
 * and an InitialAssignment for the same variable, because both kinds of
 * constructs apply prior to and at the start of simulation time, i.e.,
 * <em>t</em> <= <em>0</em>.  If a model contained both an initial
 * assignment and an assignment rule for the same variable, an
 * indeterminate system would result.
 *
 * The value calculated by an AssignmentRule object overrides the value
 * assigned to the given symbol by the object defining that symbol.  For
 * example, if a Compartment object\'s \'size\' attribute value is set in its
 * definition, and the model also contains an AssignmentRule object having
 * that compartment\'s \'id\' as its \'variable\' value, then the \'size\'
 * assigned in the Compartment object definition is ignored and the value
 * assigned based on the computation defined in the AssignmentRule.  This
 * does <em>not</em> mean that a definition for a given symbol can be
 * omitted if there is an AssignmentRule object for it.  For example, there
 * must be a Parameter definition for a given parameter if there is an
 * AssignmentRule for that parameter.  It is only a question of which value
 * definition takes precedence.
 * 
 * *
 * @section rules-general General summary of SBML rules
 *
 * In SBML Level&nbsp;3 as well as Level&nbsp;2, rules are separated into three
 * subclasses for the benefit of model analysis software.  The three
 * subclasses are based on the following three different possible functional
 * forms (where <em>x</em> is a variable, <em>f</em> is some arbitrary
 * function returning a numerical result, <b><em>V</em></b> is a vector of
 * variables that does not include <em>x</em>, and <b><em>W</em></b> is a
 * vector of variables that may include <em>x</em>):
 * 
 * <table border=\'0\' cellpadding=\'0\' class=\'centered\' style=\'font-size: small\'>
 * <tr><td width=\'120px\'><em>Algebraic:</em></td><td width=\'250px\'>left-hand side is zero</td><td><em>0 = f(<b>W</b>)</em></td></tr>
 * <tr><td><em>Assignment:</em></td><td>left-hand side is a scalar:</td><td><em>x = f(<b>V</b>)</em></td></tr>
 * <tr><td><em>Rate:</em></td><td>left-hand side is a rate-of-change:</td><td><em>dx/dt = f(<b>W</b>)</em></td></tr>
 * </table>
 * 
 * In their general form given above, there is little to distinguish
 * between <em>assignment</em> and <em>algebraic</em> rules.  They are treated as
 * separate cases for the following reasons:
 * 
 * @li <em>Assignment</em> rules can simply be evaluated to calculate
 * intermediate values for use in numerical methods.  They are statements
 * of equality that hold at all times.  (For assignments that are only
 * performed once, see InitialAssignment.)

 * @li SBML needs to place restrictions on assignment rules, for example
 * the restriction that assignment rules cannot contain algebraic loops.
 * 
 * @li Some simulators do not contain numerical solvers capable of solving
 * unconstrained algebraic equations, and providing more direct forms such
 * as assignment rules may enable those simulators to process models they
 * could not process if the same assignments were put in the form of
 * general algebraic equations;
 * 
 * @li Those simulators that <em>can</em> solve these algebraic equations make a
 * distinction between the different categories listed above; and
 * 
 * @li Some specialized numerical analyses of models may only be applicable
 * to models that do not contain <em>algebraic</em> rules.
 * 
 * The approach taken to covering these cases in SBML is to define an
 * abstract Rule structure containing a subelement, \'math\', to hold the
 * right-hand side expression, then to derive subtypes of Rule that add
 * attributes to distinguish the cases of algebraic, assignment and rate
 * rules.  The \'math\' subelement must contain a MathML expression defining the
 * mathematical formula of the rule.  This MathML formula must return a
 * numerical value.  The formula can be an arbitrary expression referencing
 * the variables and other entities in an SBML model.
 * 
 * Each of the three subclasses of Rule (AssignmentRule, AlgebraicRule,
 * RateRule) inherit the the \'math\' subelement and other fields from SBase.
 * The AssignmentRule and RateRule classes add an additional attribute,
 * \'variable\'.  See the definitions of AssignmentRule, AlgebraicRule and
 * RateRule for details about the structure and interpretation of each one.
 * 
 * @section rules-restrictions Additional restrictions on SBML rules
 *
 * An important design goal of SBML rule semantics is to ensure that a
 * model\'s simulation and analysis results will not be dependent on when or
 * how often rules are evaluated.  To achieve this, SBML needs to place two
 * restrictions on rule use.  The first concerns algebraic loops in the system
 * of assignments in a model, and the second concerns overdetermined systems.
 * 
 * @subsection rules-no-loops A model must not contain algebraic loops
 * 
 * The combined set of InitialAssignment, AssignmentRule and KineticLaw
 * objects in a model constitute a set of assignment statements that should be
 * considered as a whole.  (A KineticLaw object is counted as an assignment
 * because it assigns a value to the symbol contained in the \'id\' attribute of
 * the Reaction object in which it is defined.)  This combined set of
 * assignment statements must not contain algebraic loops&mdash;dependency
 * chains between these statements must terminate.  To put this more formally,
 * consider a directed graph in which nodes are assignment statements and
 * directed arcs exist for each occurrence of an SBML species, compartment or
 * parameter symbol in an assignment statement\'s \'math\' subelement.  Let the
 * directed arcs point from the statement assigning the symbol to the
 * statements that contain the symbol in their \'math\' subelement expressions.
 * This graph must be acyclic.
 * 
 * SBML does not specify when or how often rules should be evaluated.
 * Eliminating algebraic loops ensures that assignment statements can be
 * evaluated any number of times without the result of those evaluations
 * changing.  As an example, consider the set of equations <em>x = x + 1</em>,
 * <em>y = z + 200</em> and <em>z = y + 100</em>.  If this set of equations
 * were interpreted as a set of assignment statements, it would be invalid
 * because the rule for <em>x</em> refers to <em>x</em> (exhibiting one type
 * of loop), and the rule for <em>y</em> refers to <em>z</em> while the rule
 * for <em>z</em> refers back to <em>y</em> (exhibiting another type of loop).
 * Conversely, the following set of equations would constitute a valid set of
 * assignment statements: <em>x = 10</em>, <em>y = z + 200</em>, and <em>z = x
 * + 100</em>.
 * 
 * @subsection rules-not-overdetermined A model must not be overdetermined
 * 
 * An SBML model must not be overdetermined; that is, a model must not
 * define more equations than there are unknowns in a model.  An SBML model
 * that does not contain AlgebraicRule structures cannot be overdetermined.
 * 
 * LibSBML implements the static analysis procedure described in
 * Appendix&nbsp;B of the SBML Level&nbsp;3 Version&nbsp;1 Core
 * specification for assessing whether a model is overdetermined.
 * 
 * (In summary, assessing whether a given continuous, deterministic,
 * mathematical model is overdetermined does not require dynamic analysis; it
 * can be done by analyzing the system of equations created from the model.
 * One approach is to construct a bipartite graph in which one set of vertices
 * represents the variables and the other the set of vertices represents the
 * equations.  Place edges between vertices such that variables in the system
 * are linked to the equations that determine them.  For algebraic equations,
 * there will be edges between the equation and each variable occurring in the
 * equation.  For ordinary differential equations (such as those defined by
 * rate rules or implied by the reaction rate definitions), there will be a
 * single edge between the equation and the variable determined by that
 * differential equation.  A mathematical model is overdetermined if the
 * maximal matchings of the bipartite graph contain disconnected vertexes
 * representing equations.  If one maximal matching has this property, then
 * all the maximal matchings will have this property; i.e., it is only
 * necessary to find one maximal matching.)
 *
 * @section RuleType_t Rule types for SBML Level 1
 *
 * SBML Level 1 uses a different scheme than SBML Level 2 and Level 3 for
 * distinguishing rules; specifically, it uses an attribute whose value is
 * drawn from an enumeration of 3 values.  LibSBML supports this using methods
 * that work @if clike a libSBML enumeration type, RuleType_t, whose values
 * are @else with the enumeration values @endif listed below.
 *
 * @li @link libsbmlcs.libsbml.RULE_TYPE_RATE RULE_TYPE_RATE@endlink: Indicates
 * the rule is a \'rate\' rule.
 * @li @link libsbmlcs.libsbml.RULE_TYPE_SCALAR RULE_TYPE_SCALAR@endlink:
 * Indicates the rule is a \'scalar\' rule.
 * @li @link libsbmlcs.libsbml.RULE_TYPE_INVALID RULE_TYPE_INVALID@endlink:
 * Indicates the rule type is unknown or not yet set.
 *
 *
 */
"


%csmethodmodifiers AssignmentRule::AssignmentRule(unsigned int level, unsigned int version) "
/**
   * Creates a new AssignmentRule using the given SBML @p level and @p version
   * values.
   *
   * @param level a long integer, the SBML Level to assign to this AssignmentRule
   *
   * @param version a long integer, the SBML Version to assign to this
   * AssignmentRule
   *
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the given @p level and @p version combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent SBMLDocument object.
   * 
   * *
 * @note Upon the addition of an AssignmentRule object to an SBMLDocument
 * (e.g., using Model::addRule(@if java Rule r@endif)), the SBML Level, SBML
 * Version and XML namespace of the document @em override the values used
 * when creating the AssignmentRule object via the AssignmentRule constructors.
 * This is necessary to ensure that an SBML document has a consistent overall
 * structure.  Nevertheless, the ability to supply the values at the time of
 * creation of a AssignmentRule is an important aid to producing valid SBML.
 * Knowledge of the intented SBML Level and Version determine whether it is
 * valid to assign a particular value to an attribute, or whether it is valid
 * to add an object to an existing SBMLDocument.
 *
   */ public
";


%csmethodmodifiers AssignmentRule::AssignmentRule(SBMLNamespaces* sbmlns) "
/**
   * Creates a new AssignmentRule using the given SBMLNamespaces object
   * @p sbmlns.
   *
   * The SBMLNamespaces object encapsulates SBML Level/Version/namespaces
   * information.  It is used to communicate the SBML Level, Version, and
   * (in Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.
   * A common approach to using this class constructor is to create an
   * SBMLNamespaces object somewhere in a program, once, then pass it to
   * object constructors such as this one when needed.
   *
   * @param sbmlns an SBMLNamespaces object.
   *
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the given @p level and @p version combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent SBMLDocument object.
   *
   * *
 * @note Upon the addition of an AssignmentRule object to an SBMLDocument
 * (e.g., using Model::addRule(@if java Rule r@endif)), the SBML Level, SBML
 * Version and XML namespace of the document @em override the values used
 * when creating the AssignmentRule object via the AssignmentRule constructors.
 * This is necessary to ensure that an SBML document has a consistent overall
 * structure.  Nevertheless, the ability to supply the values at the time of
 * creation of a AssignmentRule is an important aid to producing valid SBML.
 * Knowledge of the intented SBML Level and Version determine whether it is
 * valid to assign a particular value to an attribute, or whether it is valid
 * to add an object to an existing SBMLDocument.
 *
   */ public
";


%csmethodmodifiers AssignmentRule::clone() const "
/**
   * Creates and returns a deep copy of this Rule.
   * 
   * @return a (deep) copy of this Rule.
   */ public new
";


%csmethodmodifiers AssignmentRule::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor for this instance of AssignmentRule.
   *
   * @param v the SBMLVisitor instance to be used.
   *
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether the Visitor would like to visit the next AssignmentRule object
   * in the list of rules within which @em the present object is embedded.
   */ public
";


%csmethodmodifiers AssignmentRule::hasRequiredAttributes() const "
/**
   * Predicate returning @c true if all the required attributes for this
   * AssignmentRule object have been set.
   *
   * @note In SBML Levels&nbsp;2&ndash;3, the only required attribute for
   * an AssignmentRule object is \'variable\'.  For Level&nbsp;1, where the
   * equivalent attribute is known by different names (\'compartment\',
   * \'species\', or \'name\', depending on the type of object), there is an
   * additional required attribute called \'formula\'.
   * 
   * @return @c true if the required attributes have been set, @c false
   * otherwise.
   */ public new
";


%csmethodmodifiers AssignmentRule::renameSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames all the @c SIdRef attributes on this element, including any
   * found in MathML.
   *
   * *
 * 

 * In SBML, object identifiers are of a data type called <code>SId</code>.
 * In SBML Level&nbsp;3, an explicit data type called <code>SIdRef</code> was
 * introduced for attribute values that refer to <code>SId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to an identifier\', but the effective
 * data type was the same as <code>SIdRef</code>in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>SIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 *
 *
   * 
   * This method works by looking at all attributes and (if appropriate)
   * mathematical formulas, comparing the identifiers to the value of @p
   * oldid.  If any matches are found, the matching identifiers are replaced
   * with @p newid.  The method does @em not descend into child elements.
   *
   * @param oldid the old identifier
   * @param newid the new identifier
   */ public
";


%typemap(csimports) RateRule "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Implementation of %SBML\'s %RateRule construct.
 *
 * The rule type RateRule is derived from the parent class Rule.  It is
 * used to express equations that determine the rates of change of
 * variables.  The left-hand side (the \'variable\' attribute) can refer to
 * the identifier of a species, compartment, or parameter (but not a
 * reaction).  The entity identified must have its \'constant\' attribute set
 * to @c false.  The effects of a RateRule are in general terms the same,
 * but differ in the precise details depending on which variable is being
 * set:
 * 
 * <ul> <li> <em>In the case of a species</em>, a RateRule sets the rate of
 * change of the species\' quantity (<em>concentration</em> or <em>amount of
 * substance</em>) to the value determined by the formula in the \'math\'
 * subelement of the RateRule object.  The overall units of the formula in
 * \'math\' @em should (in SBML Level&nbsp;2 Version&nbsp;4 and in SBML Level&nbsp;3) or @em
 * must (in SBML releases prior to Level&nbsp;2 version&nbsp;4) be equal to
 * the unit of <em>species quantity</em> divided by the model-wide unit of
 * <em>time</em>.  <em>Restrictions</em>: There must not be both a RateRule
 * \'variable\' attribute and a SpeciesReference \'species\' attribute having
 * the same value, unless that species has its \'boundaryCondition\'
 * attribute is set to @c true.  This means a rate rule cannot be defined
 * for a species that is created or destroyed in a reaction, unless that
 * species is defined as a boundary condition in the model.
 *
 * <li> (For SBML Level&nbsp;3 only) <em>In the case of a species
 * reference</em>, a RateRule sets the rate of change of the stoichiometry
 * of the referenced reactant or product to the value determined by the
 * formula in \'math\'.  The unit associated with the value produced by the
 * \'math\' formula should be consistent with the unit \'dimensionless\'
 * divided by the model-wide unit of <em>time</em>.
 *
 * <li> <em>In the case of a compartment</em>, a RateRule sets the rate of
 * change of the compartment\'s size to the value determined by the formula
 * in the \'math\' subelement of the RateRule object.  The overall units of
 * the formula @em should (in SBML Level&nbsp;2 Version&nbsp;4 and in SBML
 * Level&nbsp;3) or @em must (in SBML releases prior to Level&nbsp;2
 * version&nbsp;4) be the units of the compartment\'s <em>size</em> divided
 * by the model-wide unit of <em>time</em>.
 *
 * <li> <em>In the case of a parameter</em>, a RateRule sets the rate of
 * change of the parameter\'s value to that determined by the formula in the
 * \'math\' subelement of the RateRule object.  The overall units of the
 * formula @em should (in SBML Level&nbsp;2 Version&nbsp;4 and in SBML
 * Level&nbsp;3) or @em must (in SBML releases prior to Level&nbsp;2
 * version&nbsp;4) be the Parameter object\'s \'unit\' attribute value divided
 * by the model-wide unit of <em>time</em>.  </ul>
 * 
 * In the context of a simulation, rate rules are in effect for simulation
 * time <em>t</em> &lt; <em>0</em>.  Please consult the relevant SBML
 * specification for additional information about the semantics of
 * assignments, rules, and entity values for simulation time <em>t</em>
 * <= <em>0</em>.
 *
 * As mentioned in the description of AssignmentRule, a model must not
 * contain more than one RateRule or AssignmentRule object having the same
 * value of \'variable\'; in other words, in the set of all assignment rules
 * and rate rules in an SBML model, each variable appearing in the
 * left-hand sides can only appear once.  This simply follows from the fact
 * that an indeterminate system would result if a model contained more than
 * one assignment rule for the same variable or both an assignment rule and
 * a rate rule for the same variable.
 * 
 * *
 * @section rules-general General summary of SBML rules
 *
 * In SBML Level&nbsp;3 as well as Level&nbsp;2, rules are separated into three
 * subclasses for the benefit of model analysis software.  The three
 * subclasses are based on the following three different possible functional
 * forms (where <em>x</em> is a variable, <em>f</em> is some arbitrary
 * function returning a numerical result, <b><em>V</em></b> is a vector of
 * variables that does not include <em>x</em>, and <b><em>W</em></b> is a
 * vector of variables that may include <em>x</em>):
 * 
 * <table border=\'0\' cellpadding=\'0\' class=\'centered\' style=\'font-size: small\'>
 * <tr><td width=\'120px\'><em>Algebraic:</em></td><td width=\'250px\'>left-hand side is zero</td><td><em>0 = f(<b>W</b>)</em></td></tr>
 * <tr><td><em>Assignment:</em></td><td>left-hand side is a scalar:</td><td><em>x = f(<b>V</b>)</em></td></tr>
 * <tr><td><em>Rate:</em></td><td>left-hand side is a rate-of-change:</td><td><em>dx/dt = f(<b>W</b>)</em></td></tr>
 * </table>
 * 
 * In their general form given above, there is little to distinguish
 * between <em>assignment</em> and <em>algebraic</em> rules.  They are treated as
 * separate cases for the following reasons:
 * 
 * @li <em>Assignment</em> rules can simply be evaluated to calculate
 * intermediate values for use in numerical methods.  They are statements
 * of equality that hold at all times.  (For assignments that are only
 * performed once, see InitialAssignment.)

 * @li SBML needs to place restrictions on assignment rules, for example
 * the restriction that assignment rules cannot contain algebraic loops.
 * 
 * @li Some simulators do not contain numerical solvers capable of solving
 * unconstrained algebraic equations, and providing more direct forms such
 * as assignment rules may enable those simulators to process models they
 * could not process if the same assignments were put in the form of
 * general algebraic equations;
 * 
 * @li Those simulators that <em>can</em> solve these algebraic equations make a
 * distinction between the different categories listed above; and
 * 
 * @li Some specialized numerical analyses of models may only be applicable
 * to models that do not contain <em>algebraic</em> rules.
 * 
 * The approach taken to covering these cases in SBML is to define an
 * abstract Rule structure containing a subelement, \'math\', to hold the
 * right-hand side expression, then to derive subtypes of Rule that add
 * attributes to distinguish the cases of algebraic, assignment and rate
 * rules.  The \'math\' subelement must contain a MathML expression defining the
 * mathematical formula of the rule.  This MathML formula must return a
 * numerical value.  The formula can be an arbitrary expression referencing
 * the variables and other entities in an SBML model.
 * 
 * Each of the three subclasses of Rule (AssignmentRule, AlgebraicRule,
 * RateRule) inherit the the \'math\' subelement and other fields from SBase.
 * The AssignmentRule and RateRule classes add an additional attribute,
 * \'variable\'.  See the definitions of AssignmentRule, AlgebraicRule and
 * RateRule for details about the structure and interpretation of each one.
 * 
 * @section rules-restrictions Additional restrictions on SBML rules
 *
 * An important design goal of SBML rule semantics is to ensure that a
 * model\'s simulation and analysis results will not be dependent on when or
 * how often rules are evaluated.  To achieve this, SBML needs to place two
 * restrictions on rule use.  The first concerns algebraic loops in the system
 * of assignments in a model, and the second concerns overdetermined systems.
 * 
 * @subsection rules-no-loops A model must not contain algebraic loops
 * 
 * The combined set of InitialAssignment, AssignmentRule and KineticLaw
 * objects in a model constitute a set of assignment statements that should be
 * considered as a whole.  (A KineticLaw object is counted as an assignment
 * because it assigns a value to the symbol contained in the \'id\' attribute of
 * the Reaction object in which it is defined.)  This combined set of
 * assignment statements must not contain algebraic loops&mdash;dependency
 * chains between these statements must terminate.  To put this more formally,
 * consider a directed graph in which nodes are assignment statements and
 * directed arcs exist for each occurrence of an SBML species, compartment or
 * parameter symbol in an assignment statement\'s \'math\' subelement.  Let the
 * directed arcs point from the statement assigning the symbol to the
 * statements that contain the symbol in their \'math\' subelement expressions.
 * This graph must be acyclic.
 * 
 * SBML does not specify when or how often rules should be evaluated.
 * Eliminating algebraic loops ensures that assignment statements can be
 * evaluated any number of times without the result of those evaluations
 * changing.  As an example, consider the set of equations <em>x = x + 1</em>,
 * <em>y = z + 200</em> and <em>z = y + 100</em>.  If this set of equations
 * were interpreted as a set of assignment statements, it would be invalid
 * because the rule for <em>x</em> refers to <em>x</em> (exhibiting one type
 * of loop), and the rule for <em>y</em> refers to <em>z</em> while the rule
 * for <em>z</em> refers back to <em>y</em> (exhibiting another type of loop).
 * Conversely, the following set of equations would constitute a valid set of
 * assignment statements: <em>x = 10</em>, <em>y = z + 200</em>, and <em>z = x
 * + 100</em>.
 * 
 * @subsection rules-not-overdetermined A model must not be overdetermined
 * 
 * An SBML model must not be overdetermined; that is, a model must not
 * define more equations than there are unknowns in a model.  An SBML model
 * that does not contain AlgebraicRule structures cannot be overdetermined.
 * 
 * LibSBML implements the static analysis procedure described in
 * Appendix&nbsp;B of the SBML Level&nbsp;3 Version&nbsp;1 Core
 * specification for assessing whether a model is overdetermined.
 * 
 * (In summary, assessing whether a given continuous, deterministic,
 * mathematical model is overdetermined does not require dynamic analysis; it
 * can be done by analyzing the system of equations created from the model.
 * One approach is to construct a bipartite graph in which one set of vertices
 * represents the variables and the other the set of vertices represents the
 * equations.  Place edges between vertices such that variables in the system
 * are linked to the equations that determine them.  For algebraic equations,
 * there will be edges between the equation and each variable occurring in the
 * equation.  For ordinary differential equations (such as those defined by
 * rate rules or implied by the reaction rate definitions), there will be a
 * single edge between the equation and the variable determined by that
 * differential equation.  A mathematical model is overdetermined if the
 * maximal matchings of the bipartite graph contain disconnected vertexes
 * representing equations.  If one maximal matching has this property, then
 * all the maximal matchings will have this property; i.e., it is only
 * necessary to find one maximal matching.)
 *
 * @section RuleType_t Rule types for SBML Level 1
 *
 * SBML Level 1 uses a different scheme than SBML Level 2 and Level 3 for
 * distinguishing rules; specifically, it uses an attribute whose value is
 * drawn from an enumeration of 3 values.  LibSBML supports this using methods
 * that work @if clike a libSBML enumeration type, RuleType_t, whose values
 * are @else with the enumeration values @endif listed below.
 *
 * @li @link libsbmlcs.libsbml.RULE_TYPE_RATE RULE_TYPE_RATE@endlink: Indicates
 * the rule is a \'rate\' rule.
 * @li @link libsbmlcs.libsbml.RULE_TYPE_SCALAR RULE_TYPE_SCALAR@endlink:
 * Indicates the rule is a \'scalar\' rule.
 * @li @link libsbmlcs.libsbml.RULE_TYPE_INVALID RULE_TYPE_INVALID@endlink:
 * Indicates the rule type is unknown or not yet set.
 *
 *
 */
"


%csmethodmodifiers RateRule::RateRule(unsigned int level, unsigned int version) "
/**
   * Creates a new RateRule using the given SBML @p level and @p version
   * values.
   *
   * @param level a long integer, the SBML Level to assign to this RateRule
   *
   * @param version a long integer, the SBML Version to assign to this
   * RateRule
   *
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the given @p level and @p version combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent SBMLDocument object.
   *
   * *
 * @note Upon the addition of an RateRule object to an SBMLDocument
 * (e.g., using Model::addRule(@if java Rule r@endif)), the SBML Level, SBML
 * Version and XML namespace of the document @em override the values used
 * when creating the RateRule object via the RateRule constructors.
 * This is necessary to ensure that an SBML document has a consistent overall
 * structure.  Nevertheless, the ability to supply the values at the time of
 * creation of a RateRule is an important aid to producing valid SBML.
 * Knowledge of the intented SBML Level and Version determine whether it is
 * valid to assign a particular value to an attribute, or whether it is valid
 * to add an object to an existing SBMLDocument.
 *
   */ public
";


%csmethodmodifiers RateRule::RateRule(SBMLNamespaces* sbmlns) "
/**
   * Creates a new RateRule using the given SBMLNamespaces object
   * @p sbmlns.
   *
   * *
 *  
 * The SBMLNamespaces object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML\'s SBMLNamespaces facilities is to create an
 * SBMLNamespaces object somewhere in a program once, then hand that object
 * as needed to object constructors that accept SBMLNamespaces as arguments.
 *
 * 
   *
   * @param sbmlns an SBMLNamespaces object.
   *
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the given @p level and @p version combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent SBMLDocument object.
   *
   * *
 * @note Upon the addition of an RateRule object to an SBMLDocument
 * (e.g., using Model::addRule(@if java Rule r@endif)), the SBML Level, SBML
 * Version and XML namespace of the document @em override the values used
 * when creating the RateRule object via the RateRule constructors.
 * This is necessary to ensure that an SBML document has a consistent overall
 * structure.  Nevertheless, the ability to supply the values at the time of
 * creation of a RateRule is an important aid to producing valid SBML.
 * Knowledge of the intented SBML Level and Version determine whether it is
 * valid to assign a particular value to an attribute, or whether it is valid
 * to add an object to an existing SBMLDocument.
 *
   *
   */ public
";


%csmethodmodifiers RateRule::clone() const "
/**
   * Creates and returns a deep copy of this Rule.
   * 
   * @return a (deep) copy of this Rule.
   */ public new
";


%csmethodmodifiers RateRule::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor.
   *
   * @param v the SBMLVisitor instance to be used.
   *
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether the Visitor would like to visit the next RateRule object
   * in the list of rules within which @em the present object is embedded.
   */ public
";


%csmethodmodifiers RateRule::hasRequiredAttributes() const "
/**
   * Predicate returning @c true if
   * all the required attributes for this RateRule object
   * have been set.
   *
   * @note In SBML Levels&nbsp;2&ndash;3, the only required attribute for a
   * RateRule object is \'variable\'.  For Level&nbsp;1, where the equivalent
   * attribute is known by different names (\'compartment\', \'species\', or
   * \'name\', depending on the type of object), there is an additional
   * required attribute called \'formula\'.
   *
   * @return @c true if the required attributes have been set, @c false
   * otherwise.
   */ public new
";


%csmethodmodifiers RateRule::renameSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames all the @c SIdRef attributes on this element, including any
   * found in MathML.
   *
   * *
 * 

 * In SBML, object identifiers are of a data type called <code>SId</code>.
 * In SBML Level&nbsp;3, an explicit data type called <code>SIdRef</code> was
 * introduced for attribute values that refer to <code>SId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to an identifier\', but the effective
 * data type was the same as <code>SIdRef</code>in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>SIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 *
 *
   * 
   * This method works by looking at all attributes and (if appropriate)
   * mathematical formulas, comparing the identifiers to the value of @p
   * oldid.  If any matches are found, the matching identifiers are replaced
   * with @p newid.  The method does @em not descend into child elements.
   *
   * @param oldid the old identifier
   * @param newid the new identifier
   */ public
";


%typemap(csimports) Constraint "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Implementation of SBML\'s %Constraint construct.
 *
 * The Constraint object class was introduced in SBML Level&nbsp;2
 * Version&nbsp;2 as a mechanism for stating the assumptions under which a
 * model is designed to operate.  The <em>constraints</em> are statements
 * about permissible values of different quantities in a model.
 * Constraints are not used to compute dynamical values for simulation or
 * analysis, but rather, they serve an advisory role for
 * simulation/analysis tools.
 *
 * SBML\'s Constraint object class has one required attribute, \'id\', to
 * give the parameter a unique identifier by which other parts of an SBML
 * model definition can refer to it.  A Constraint object can also have an
 * optional \'name\' attribute of type @c string.  Identifiers and names must
 * be used according to the guidelines described in the SBML specification
 * (e.g., Section 3.3 in the Level&nbsp;2 Version 4 specification).  
 *
 * Constraint has one required subelement, \'math\', containing a MathML
 * formula defining the condition of the constraint.  This formula must
 * return a bool value of @c true when the model is a <em>valid</em>
 * state.  The formula can be an arbitrary expression referencing the
 * variables and other entities in an SBML model.  The evaluation of \'math\'
 * and behavior of constraints are described in more detail below.
 *
 * A Constraint structure also has an optional subelement called \'message\'.
 * This can contain a message in XHTML format that may be displayed to the
 * user when the condition of the formula in the \'math\' subelement
 * evaluates to a value of @c false.  Software tools are not required to
 * display the message, but it is recommended that they do so as a matter
 * of best practice.  The XHTML content within a \'message\' subelement must
 * follow the same restrictions as for the \'notes\' element on SBase
 * described in in the SBML Level&nbsp;2 specification; please consult the
 * <a target=\'_blank\' href=\'http://sbml.org/Documents/Specifications\'>SBML
 * specification document</a> corresponding to the SBML Level and Version
 * of your model for more information about the requirements for \'notes\'
 * content.
 *
 * Constraint was introduced in SBML Level&nbsp;2 Version&nbsp;2.  It is
 * not available in earlier versions of Level&nbsp;2 nor in any version of
 * Level&nbsp;1.
 *
 * @section constraint-semantics Semantics of Constraints
 * 
 * In the context of a simulation, a Constraint has effect at all times
 * <em>t >= 0</em>.  Each Constraint\'s \'math\' subelement is first
 * evaluated after any InitialAssignment definitions in a model at <em>t =
 * 0</em> and can conceivably trigger at that point.  (In other words, a
 * simulation could fail a constraint immediately.)
 *
 * Constraint structures <em>cannot and should not</em> be used to compute
 * the dynamical behavior of a model as part of, for example, simulation.
 * Constraints may be used as input to non-dynamical analysis, for instance
 * by expressing flux constraints for flux balance analysis.
 *
 * The results of a simulation of a model containing a constraint are
 * invalid from any simulation time at and after a point when the function
 * given by the \'math\' subelement returns a value of @c false.  Invalid
 * simulation results do not make a prediction of the behavior of the
 * biochemical reaction network represented by the model.  The precise
 * behavior of simulation tools is left undefined with respect to
 * constraints.  If invalid results are detected with respect to a given
 * constraint, the \'message\' subelement may optionally be displayed to the
 * user.  The simulation tool may also halt the simulation or clearly
 * delimit in output data the simulation time point at which the simulation
 * results become invalid.
 *
 * SBML does not impose restrictions on duplicate Constraint definitions or
 * the order of evaluation of Constraint objects in a model.  It is
 * possible for a model to define multiple constraints all with the same
 * mathematical expression.  Since the failure of any constraint indicates
 * that the model simulation has entered an invalid state, a system is not
 * required to attempt to detect whether other constraints in the model
 * have failed once any one constraint has failed.
 *
 * 
 *
 */
"


%typemap(csimports) ListOfConstraints "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Implementation of SBML\'s %ListOfConstraints construct.
 * 
 * *
 * 
 * The various ListOf___ classes in SBML are merely containers used for
 * organizing the main components of an SBML model.  All are derived from
 * the abstract class SBase, and inherit the various attributes and
 * subelements of SBase, such as \'metaid\' as and \'annotation\'.  The
 * ListOf___ classes do not add any attributes of their own.
 *
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 *
 * @htmlinclude listof-illustration.html
 *
 * Readers may wonder about the motivations for using the ListOf___
 * containers.  A simpler approach in XML might be to place the components
 * all directly at the top level of the model definition.  The choice made
 * in SBML is to group them within XML elements named after
 * ListOf<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from SBase means that software tools can add information @em about
 * the lists themselves into each list container\'s \'annotation\'.
 * 
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 *
 *
 */
"


%csmethodmodifiers Constraint::Constraint(unsigned int level, unsigned int version) "
/**
   * Creates a new Constraint using the given SBML @p level and @p version
   * values.
   *
   * @param level a long integer, the SBML Level to assign to this Constraint
   *
   * @param version a long integer, the SBML Version to assign to this
   * Constraint
   *
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the given @p level and @p version combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent SBMLDocument object.
   * 
   * * 
 * @note Upon the addition of a Constraint object to an SBMLDocument
 * (e.g., using Model::addConstraint(@if java Constraint c@endif)), the
 * SBML Level, SBML Version and XML namespace of the document @em
 * override the values used when creating the Constraint object via this
 * constructor.  This is necessary to ensure that an SBML document is a
 * consistent structure.  Nevertheless, the ability to supply the values
 * at the time of creation of a Constraint is an important aid to
 * producing valid SBML.  Knowledge of the intented SBML Level and
 * Version determine whether it is valid to assign a particular value to
 * an attribute, or whether it is valid to add an object to an existing
 * SBMLDocument.
 *
   */ public
";


%csmethodmodifiers Constraint::Constraint(SBMLNamespaces* sbmlns) "
/**
   * Creates a new Constraint using the given SBMLNamespaces object
   * @p sbmlns.
   *
   * *
 *  
 * The SBMLNamespaces object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML\'s SBMLNamespaces facilities is to create an
 * SBMLNamespaces object somewhere in a program once, then hand that object
 * as needed to object constructors that accept SBMLNamespaces as arguments.
 *
 *
   *
   * @param sbmlns an SBMLNamespaces object.
   *
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the given @p level and @p version combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent SBMLDocument object.
   * 
   * * 
 * @note Upon the addition of a Constraint object to an SBMLDocument
 * (e.g., using Model::addConstraint(@if java Constraint c@endif)), the
 * SBML Level, SBML Version and XML namespace of the document @em
 * override the values used when creating the Constraint object via this
 * constructor.  This is necessary to ensure that an SBML document is a
 * consistent structure.  Nevertheless, the ability to supply the values
 * at the time of creation of a Constraint is an important aid to
 * producing valid SBML.  Knowledge of the intented SBML Level and
 * Version determine whether it is valid to assign a particular value to
 * an attribute, or whether it is valid to add an object to an existing
 * SBMLDocument.
 *
   */ public
";


%csmethodmodifiers Constraint::Constraint(const Constraint& orig) "
/**
   * Copy constructor; creates a copy of this Constraint.
   *
   * @param orig the object to copy.
   * 
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the argument @p orig is @c null.
   */ public
";


%csmethodmodifiers Constraint::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor for this instance of Constraint.
   *
   * @param v the SBMLVisitor instance to be used.
   *
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether the Visitor would like to visit the next Constraint in the
   * list of constraints within which this Constraint is embedded (i.e., in
   * the ListOfConstraints located in the enclosing Model instance).
   */ public
";


%csmethodmodifiers Constraint::clone() const "
/**
   * Creates and returns a deep copy of this Constraint.
   * 
   * @return a (deep) copy of this Constraint.
   */ public new
";


%csmethodmodifiers Constraint::getMessage() const "
/**
   * Get the message, if any, associated with this Constraint
   * 
   * @return the message for this Constraint, as an XMLNode.
   */ public
";


%csmethodmodifiers Constraint::getMessageString() const "
/**
   * Get the message string, if any, associated with this Constraint
   * 
   * @return the message for this Constraint, as a string.
   */ public
";


%csmethodmodifiers Constraint::getMath() const "
/**
   * Get the mathematical expression of this Constraint
   * 
   * @return the math for this Constraint, as an ASTNode.
   */ public
";


%csmethodmodifiers Constraint::isSetMessage() const "
/**
   * Predicate returning @c true if a
   * message is defined for this Constraint.
   *
   * @return @c true if the message of this Constraint is set,
   * @c false otherwise.
   */ public
";


%csmethodmodifiers Constraint::isSetMath() const "
/**
   * Predicate returning @c true if a
   * mathematical formula is defined for this Constraint.
   *
   * @return @c true if the \'math\' subelement for this Constraint is
   * set, @c false otherwise.
   */ public
";


%csmethodmodifiers Constraint::setMessage(const XMLNode* xhtml) "
/**
   * Sets the message of this Constraint.
   *
   * The XMLNode tree passed in @p xhtml is copied.
   *
   * @param xhtml an XML tree containing XHTML content.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   */ public
";


%csmethodmodifiers Constraint::setMath(const ASTNode* math) "
/**
   * Sets the mathematical expression of this Constraint to a copy of the
   * AST given as @p math.
   *
   * @param math an ASTNode expression to be assigned as the \'math\'
   * subelement of this Constraint
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   */ public
";


%csmethodmodifiers Constraint::unsetMessage "
/**
   * Unsets the \'message\' subelement of this Constraint.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers Constraint::renameSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames all the @c SIdRef attributes on this element, including any
   * found in MathML.
   *
   * *
 * 

 * In SBML, object identifiers are of a data type called <code>SId</code>.
 * In SBML Level&nbsp;3, an explicit data type called <code>SIdRef</code> was
 * introduced for attribute values that refer to <code>SId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to an identifier\', but the effective
 * data type was the same as <code>SIdRef</code>in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>SIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 *
 *
   * 
   * This method works by looking at all attributes and (if appropriate)
   * mathematical formulas, comparing the identifiers to the value of @p
   * oldid.  If any matches are found, the matching identifiers are replaced
   * with @p newid.  The method does @em not descend into child elements.
   *
   * @param oldid the old identifier
   * @param newid the new identifier
   */ public
";


%csmethodmodifiers Constraint::renameUnitSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames all the @c UnitSIdRef attributes on this element.
   *
   * *
 * 
 * In SBML, unit definitions have identifiers of type <code>UnitSId</code>.  In
 * SBML Level&nbsp;3, an explicit data type called <code>UnitSIdRef</code> was
 * introduced for attribute values that refer to <code>UnitSId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to a unit identifier\', but the effective
 * data type was the same as <code>UnitSIdRef</code> in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>UnitSIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 * 
 *
   *
   * This method works by looking at all unit identifier attribute values
   * (including, if appropriate, inside mathematical formulas), comparing the
   * unit identifiers to the value of @p oldid.  If any matches are found,
   * the matching identifiers are replaced with @p newid.  The method does
   * @em not descend into child elements.
   * 
   * @param oldid the old identifier
   * @param newid the new identifier
   */ public
";


%csmethodmodifiers Constraint::replaceSIDWithFunction(const std::string& id, const ASTNode* function) "
/**
   * Replace all nodes with the name \'id\' from the child \'math\' object with the provided function. 
   *
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Constraint::getTypeCode() const "
/**
   * Returns the libSBML type code for this SBML object.
   * 
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object:
   * @link libsbmlcs.libsbml.SBML_CONSTRAINT SBML_CONSTRAINT@endlink (default).
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see getElementName()
   * @see getPackageName()
   */ public new
";


%csmethodmodifiers Constraint::getElementName() const "
/**
   * Returns the XML element name of this object, which for Constraint, is
   * always @c \'constraint\'.
   * 
   * @return the name of this element, i.e., @c \'constraint\'.
   */ public new
";


%csmethodmodifiers Constraint::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Constraint::hasRequiredElements() const "
/**
   * Predicate returning @c true if
   * all the required elements for this Constraint object
   * have been set.
   *
   * @note The required elements for a Constraint object are:
   * @li \'math\'
   *
   * @return a bool value indicating whether all the required
   * elements for this object have been defined.
   */ public new
";


%csmethodmodifiers Constraint::readOtherXML(XMLInputStream& stream) "
/**
   * Subclasses should override this method to read (and store) XHTML,
   * MathML, etc. directly from the XMLInputStream.
   *
   * @return true if the subclass read from the stream, false otherwise.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Constraint::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Constraint::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Subclasses should override this method to read values from the given
   * XMLAttributes set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Constraint::readL2Attributes(const XMLAttributes& attributes) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Constraint::readL3Attributes(const XMLAttributes& attributes) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Constraint::writeAttributes(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfConstraints::ListOfConstraints(unsigned int level, unsigned int version) "
/**
   * Creates a new ListOfConstraints object.
   *
   * The object is constructed such that it is valid for the given SBML
   * Level and Version combination.
   *
   * @param level the SBML Level
   * 
   * @param version the Version within the SBML Level
   */ public
";


%csmethodmodifiers ListOfConstraints::ListOfConstraints(SBMLNamespaces* sbmlns) "
/**
   * Creates a new ListOfConstraints object.
   *
   * The object is constructed such that it is valid for the SBML Level and
   * Version combination determined by the SBMLNamespaces object in @p
   * sbmlns.
   *
   * @param sbmlns an SBMLNamespaces object that is used to determine the
   * characteristics of the ListOfConstraints object to be created.
   */ public
";


%csmethodmodifiers ListOfConstraints::clone() const "
/**
   * Creates and returns a deep copy of this ListOfConstraints instance.
   *
   * @return a (deep) copy of this ListOfConstraints.
   */ public new
";


%csmethodmodifiers ListOfConstraints::getItemTypeCode() const "
/**
   * Returns the libSBML type code for the objects contained in this ListOf
   * (i.e., Constraint objects, if the list is non-empty).
   *
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   * 
   * @return the SBML type code for the objects contained in this ListOf
   * instance: @link libsbmlcs.libsbml.SBML_CONSTRAINT SBML_CONSTRAINT@endlink (default).
   *
   * @see getElementName()
   * @see getPackageName()
   */ public new
";


%csmethodmodifiers ListOfConstraints::getElementName() const "
/**
   * Returns the XML element name of this object.
   *
   * For ListOfConstraints, the XML element name is @c \'listOfConstraints\'.
   * 
   * @return the name of this element, i.e., @c \'listOfConstraints\'.
   */ public new
";


%csmethodmodifiers ListOfConstraints::get(unsigned int n) "
/**
   * Get a Constraint from the ListOfConstraints.
   *
   * @param n the index number of the Constraint to get.
   * 
   * @return the nth Constraint in this ListOfConstraints.
   *
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfConstraints::get "
/**
   * Get a Constraint from the ListOfConstraints.
   *
   * @param n the index number of the Constraint to get.
   * 
   * @return the nth Constraint in this ListOfConstraints.
   *
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfConstraints::remove(unsigned int n) "
/**
   * Removes the nth item from this ListOfConstraints items and returns a
   * pointer to it.
   *
   * The caller owns the returned item and is responsible for deleting it.
   *
   * @param n the index of the item to remove
   *
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfConstraints::getElementPosition() const "
/**
   * Get the ordinal position of this element in the containing object
   * (which in this case is the Model object).
   *
   * The ordering of elements in the XML form of SBML is generally fixed
   * for most components in SBML.  So, for example, the ListOfConstraints
   * in a model is (in SBML Level&nbsp;2 Version 4) the tenth ListOf___.
   * (However, it differs for different Levels and Versions of SBML.)
   *
   * @return the ordinal position of the element with respect to its
   * siblings, or @c -1 (default) to indicate the position is not significant.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfConstraints::createObject(XMLInputStream& stream) "
/**
   * Create and return an SBML object of this class, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or @c null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%typemap(csimports) Reaction "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Implementation of SBML\'s %Reaction construct.
 *
 * A @em reaction represents any transformation, transport or binding
 * process, typically a chemical reaction, that can change the quantity of
 * one or more species.  In SBML, a reaction is defined primarily in terms
 * of the participating reactants and products (and their corresponding
 * stoichiometries), along with optional modifier species, an optional rate
 * at which the reaction takes place, and optional parameters.  
 * 
 * As with other major object in SBML, Reaction has a mandatory attribute,
 * \'id\', used to give the compartment type an identifier.  The identifier
 * must be a text string conforming to the identifer syntax permitted in
 * SBML.  In SBML Level&nbsp;2 and Level&nbsp;3, the reaction \'id\'
 * identifier can be used in mathematical formulas elsewhere in an SBML
 * model to represent the rate of that reaction; this usage is explained
 * below.  Reaction also has an optional \'name\' attribute, of type @c
 * string.  The \'id\' and \'name\' must be used according to the guidelines
 * described in the SBML specification.
 *
 * The species participating as reactants, products, and/or modifiers in a
 * reaction are declared using lists of SpeciesReference and/or
 * ModifierSpeciesReference instances stored in subelements
 * \'listOfReactants\', \'listOfProducts\' and \'listOfModifiers\'.  Certain
 * restrictions are placed on the appearance of species in reaction
 * definitions:
 * <ul>
 * <li> The ability of a species to appear as a reactant or product of any
 * reaction in a model is governed by certain flags in that species\'
 * definition; see the definition of Species for more information.
 *
 * <li> Any species appearing in the mathematical formula of the subelement
 * \'kineticLaw\' (described below) of a Reaction must be declared in at
 * least one of that Reaction\'s lists of reactants, products, and/or
 * modifiers.  Put another way, it is an error for a reaction\'s kinetic law
 * formula to refer to species that have not been declared for that
 * reaction.
 *
 * <li> A reaction definition can contain an empty list of reactants
 * <em>or</em> an empty list of products, but it must have at least one
 * reactant or product; in other words, a reaction without any reactant or
 * product species is not permitted.  (This restriction does not apply to
 * modifier species, which remain optional in all cases.)
 * </ul>
 * 
 * A reaction can contain up to one KineticLaw object in a subelement named
 * \'kineticLaw\'.  It defines the speed at which the process defined by the
 * reaction takes place.  The description of KineticLaw provides more
 * details about its use.  Note that although the inclusion of a KineticLaw
 * object in an instance of a Reaction component is optional, there is no
 * useful default that can be substituted in place of a missing rate
 * expression in a reaction.  Moreover, a reaction\'s rate cannot be defined
 * in any other way in SBML&mdash;InitialAssignment, AssignmentRule,
 * RateRule, AlgebraicRule, Event, and other constructs in SBML cannot be
 * used to set the reaction rate separately.  Nevertheless, for some
 * modeling applications, reactions without any defined rate can be
 * perfectly acceptable.
 *
 * Reaction also has a bool attribute named \'reversible\' for indicating
 * whether the reaction is reversible.  This attribute is optional in SBML
 * Level&nbsp;2, with a default of @c true; it is mandatory in SBML
 * Level&nbsp;3 (with no default value).  To say that a reaction is @em
 * reversible is to say it can proceed in either the forward or the reverse
 * direction.  Although the reversibility of a reaction can sometimes be
 * deduced by inspecting its rate expression, this is not always the case,
 * especially for complicated expressions.  Moreover, the need in SBML to
 * allow rate expressions (i.e., KineticLaw) to be optional leads to the
 * need for a separate flag indicating reversibility.  Note that labeling a
 * reaction as irreversible is an assertion that the reaction always
 * proceeds in the given forward direction.  (Why else would it be flagged
 * as irreversible?)  This implies the rate expression in the KineticLaw
 * always has a non-negative value during simulations.  Software tools
 * could provide a means of optionally testing that this condition holds.
 * The presence of reversibility information in two places (i.e., the rate
 * expression and the \'reversible\' attribute on Reaction) leaves open the
 * possibility that a model could contain contradictory information, but
 * the creation of such a model would be an error on the part of the
 * software generating it.
 *
 * The Reaction object class has another bool attribute called \'fast\'.
 * This attribute is optional in SBML Level&nbsp;2, with a default of @c
 * false; it is mandatory in SBML Level&nbsp;3 (with no default value).  It
 * is used to indicate that a reaction occurs on a vastly faster time scale
 * than others in a system.  Readers are directed to the SBML Level&nbsp;2
 * Version&nbsp;4 specification, which provides more detail about the
 * conditions under which a reaction can be considered to be fast in this
 * sense.  The attribute\'s default value is @c false.  SBML Level&nbsp;1
 * and Level&nbsp;2 Version&nbsp;1 incorrectly claimed that software tools
 * could ignore this attribute if they did not implement support for the
 * corresponding concept; however, further research in SBML has revealed
 * that this is not true, and \'fast\' <em>cannot be ignored</em> if it is
 * set to @c true.  SBML Level&nbsp;2 Versions&nbsp;2&ndash;4 therefore
 * stipulate that if a model has any reactions with \'fast\' set to @c true,
 * a software tool must be able to respect the attribute or else indicate
 * to the user that it does not have the capacity to do so.  Analysis
 * software cannot ignore the value of the \'fast\' attribute because doing
 * so may lead to different results as compared to a software system that
 * <em>does</em> make use of \'fast\'.
 *
 * In SBML Level&nbsp;3 Version&nbsp;1, the Reaction object has an
 * additional optional attribute named \'compartment\', whose value must be
 * the identifier of a compartment defined in the enclosing Model object.
 * The \'compartment\' attribute can be used to indicate the compartment in
 * which the reaction is assumed to take place.  If the attribute is
 * present, its value must be the identifier of a Compartment object
 * defined in the enclosing Model object.  Similar to the \'reversible\'
 * attribute, the value of the \'compartment\' attribute has no direct impact
 * on the construction of mathematical equations for the SBML model.  When
 * a kinetic law is given for a reaction, the compartment location may
 * already be implicit in the kinetic law (although this cannot always be
 * guaranteed).  Nevertheless, software tools may find the \'compartment\'
 * attribute value useful for such purposes as analyzing the structure of
 * the model, guiding the modeler in constructing correct rate formulas,
 * and visualization purposes.
 *
 * Readers are urged to read the SBML specification for more details about
 * the proper use of Reaction.
 * 
 * 
 * 
 */
"


%typemap(csimports) ListOfReactions "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Implementation of SBML\'s %ListOfReactions construct.
 * 
 * *
 * 
 * The various ListOf___ classes in SBML are merely containers used for
 * organizing the main components of an SBML model.  All are derived from
 * the abstract class SBase, and inherit the various attributes and
 * subelements of SBase, such as \'metaid\' as and \'annotation\'.  The
 * ListOf___ classes do not add any attributes of their own.
 *
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 *
 * @htmlinclude listof-illustration.html
 *
 * Readers may wonder about the motivations for using the ListOf___
 * containers.  A simpler approach in XML might be to place the components
 * all directly at the top level of the model definition.  The choice made
 * in SBML is to group them within XML elements named after
 * ListOf<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from SBase means that software tools can add information @em about
 * the lists themselves into each list container\'s \'annotation\'.
 * 
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 *
 *
 */
"


%csmethodmodifiers Reaction::Reaction(unsigned int level, unsigned int version) "
/**
   * Creates a new Reaction using the given SBML @p level and @p version
   * values.
   *
   * @param level a long integer, the SBML Level to assign to this Reaction
   *
   * @param version a long integer, the SBML Version to assign to this
   * Reaction
   *
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the given @p level and @p version combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent SBMLDocument object.
   * 
   * * 
 * @note Upon the addition of a Reaction object to an SBMLDocument (e.g.,
 * using Model::addReaction(@if java Reaction r@endif)), the SBML Level, SBML Version and
 * XML namespace of the document @em override the values used when
 * creating the Reaction object via this constructor.  This is necessary
 * to ensure that an SBML document is a consistent structure.
 * Nevertheless, the ability to supply the values at the time of creation
 * of a Reaction is an important aid to producing valid SBML.  Knowledge
 * of the intented SBML Level and Version determine whether it is valid
 * to assign a particular value to an attribute, or whether it is valid
 * to add an object to an existing SBMLDocument.
 *
   */ public
";


%csmethodmodifiers Reaction::Reaction(SBMLNamespaces* sbmlns) "
/**
   * Creates a new Reaction using the given SBMLNamespaces object
   * @p  sbmlns.
   *
   * *
 *  
 * The SBMLNamespaces object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML\'s SBMLNamespaces facilities is to create an
 * SBMLNamespaces object somewhere in a program once, then hand that object
 * as needed to object constructors that accept SBMLNamespaces as arguments.
 *
 * 
   *
   * @param sbmlns an SBMLNamespaces object.
   *
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the given @p level and @p version combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent SBMLDocument object.
   *
   * * 
 * @note Upon the addition of a Reaction object to an SBMLDocument (e.g.,
 * using Model::addReaction(@if java Reaction r@endif)), the SBML Level, SBML Version and
 * XML namespace of the document @em override the values used when
 * creating the Reaction object via this constructor.  This is necessary
 * to ensure that an SBML document is a consistent structure.
 * Nevertheless, the ability to supply the values at the time of creation
 * of a Reaction is an important aid to producing valid SBML.  Knowledge
 * of the intented SBML Level and Version determine whether it is valid
 * to assign a particular value to an attribute, or whether it is valid
 * to add an object to an existing SBMLDocument.
 *
   */ public
";


%csmethodmodifiers Reaction::Reaction(const Reaction& orig) "
/**
   * Copy constructor; creates a copy of this Reaction.
   *
   * @param orig the object to copy.
   * 
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the argument @p orig is @c null.
   */ public
";


%csmethodmodifiers Reaction::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor for this instance of Reaction.
   *
   * @param v the SBMLVisitor instance to be used.
   *
   * @return the result of calling <code>v.visit()</code>.
   */ public
";


%csmethodmodifiers Reaction::clone() const "
/**
   * Creates and returns a deep copy of this Reaction.
   * 
   * @return a (deep) copy of this Reaction.
   */ public new
";


%csmethodmodifiers Reaction::getElementBySId(const std::string& id) "
/**
   * Returns the first child element found that has the given @p id in the
   * model-wide SId namespace, or @c null if no such object is found.
   *
   * @param id string representing the id of objects to find.
   *
   * @return pointer to the first element found with the given @p id.
   */ public
";


%csmethodmodifiers Reaction::getElementByMetaId(const std::string& metaid) "
/**
   * Returns the first child element it can find with the given @p metaid, or
   * @c null if no such object is found.
   *
   * @param metaid string representing the metaid of objects to find
   *
   * @return pointer to the first element found with the given @p metaid.
   */ public
";


%csmethodmodifiers Reaction::getAllElements(ElementFilter* filter=NULL) "
/**
   * Returns a List of all child SBase objects, including those nested to an
   * arbitrary depth
   *
   * @return a List of pointers to all children objects.
   */ public
";


%csmethodmodifiers Reaction::renameSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames all the @c SIdRef attributes on this element, including any
   * found in MathML.
   *
   * *
 * 

 * In SBML, object identifiers are of a data type called <code>SId</code>.
 * In SBML Level&nbsp;3, an explicit data type called <code>SIdRef</code> was
 * introduced for attribute values that refer to <code>SId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to an identifier\', but the effective
 * data type was the same as <code>SIdRef</code>in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>SIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 *
 *
   * 
   * This method works by looking at all attributes and (if appropriate)
   * mathematical formulas, comparing the identifiers to the value of @p
   * oldid.  If any matches are found, the matching identifiers are replaced
   * with @p newid.  The method does @em not descend into child elements.
   *
   * @param oldid the old identifier
   * @param newid the new identifier
   */ public
";


%csmethodmodifiers Reaction::initDefaults "
/**
   * Initializes the fields of this Reaction object to \'typical\' default
   * values.
   *
   * The SBML Reaction component has slightly different aspects and
   * default attribute values in different SBML Levels and Versions.
   * This method sets the values to certain common defaults, based
   * mostly on what they are in SBML Level&nbsp;2.  Specifically:
   * 
   * @li Sets the \'reversible\' attribute to @c true
   * @li Sets the \'fast\' attribute to @c false
   * @li Marks the \'fast\' attribute as @em not having been set
   *
   * * 
 * @warning <span class=\'warning\'>SBML definitions before SBML Level&nbsp;2
 * Version&nbsp;2 incorrectly indicated that software tools could ignore the
 * \'fast\' attribute if they did not implement support for the corresponding
 * concept; however, further research in SBML has revealed that this is not
 * true, and \'fast\' <em>cannot be ignored</em> if it is set to @c true.
 * Beginning with SBML Level&nbsp;2 Versions&nbsp;2, the SBML specifications
 * therefore stipulate that if a model has any reactions with \'fast\' set to
 * @c true, a software tool must be able to respect the attribute or else
 * indicate to the user that it does not have the capacity to do so.  Readers
 * are directed to the SBML specifications, which provides more detail about
 * the conditions under which a reaction can be considered to be fast in this
 * sense.</span>
 *
   */ public
";


%csmethodmodifiers Reaction::getId() const "
/**
   * Returns the value of the \'id\' attribute of this Reaction.
   * 
   * @return the id of this Reaction.
   */ public new
";


%csmethodmodifiers Reaction::getName() const "
/**
   * Returns the value of the \'name\' attribute of this Reaction.
   * 
   * @return the name of this Reaction.
   */ public new
";


%csmethodmodifiers Reaction::getKineticLaw() const "
/**
   * Returns the KineticLaw object contained in this Reaction.
   * 
   * @return the KineticLaw instance.
   */ public
";


%csmethodmodifiers Reaction::getKineticLaw "
/**
   * Returns the KineticLaw object contained in this Reaction.
   * 
   * @return the KineticLaw instance.
   */ public
";


%csmethodmodifiers Reaction::getReversible() const "
/**
   * Returns the value of the \'reversible\' attribute on the Reaction as a
   * bool value.
   * 
   * @return the reversibility status of this Reaction.
   */ public
";


%csmethodmodifiers Reaction::getFast() const "
/**
   * Returns the value of the \'fast\' attribute of this Reaction.
   * 
   * @return the \'fast\' status of this Reaction.
   *
   * * 
 * @warning <span class=\'warning\'>SBML definitions before SBML Level&nbsp;2
 * Version&nbsp;2 incorrectly indicated that software tools could ignore the
 * \'fast\' attribute if they did not implement support for the corresponding
 * concept; however, further research in SBML has revealed that this is not
 * true, and \'fast\' <em>cannot be ignored</em> if it is set to @c true.
 * Beginning with SBML Level&nbsp;2 Versions&nbsp;2, the SBML specifications
 * therefore stipulate that if a model has any reactions with \'fast\' set to
 * @c true, a software tool must be able to respect the attribute or else
 * indicate to the user that it does not have the capacity to do so.  Readers
 * are directed to the SBML specifications, which provides more detail about
 * the conditions under which a reaction can be considered to be fast in this
 * sense.</span>
 *
   */ public
";


%csmethodmodifiers Reaction::getCompartment() const "
/**
   * (SBML Level&nbsp;3 only) Returns the value of the \'compartment\'
   * attribute on the Reaction.
   * 
   * @return the compartment of this Reaction.
   *
   * @note The \'compartment\' attribute is available in SBML Level&nbsp;3
   * Version&nbsp;1 Core, but is not present on Reaction in lower Levels of
   * SBML.
   */ public
";


%csmethodmodifiers Reaction::isSetId() const "
/**
   * Predicate returning @c true if this
   * Reaction\'s \'id\' attribute is set.
   *
   * @return @c true if the \'id\' attribute of this Reaction is
   * set, @c false otherwise.
   */ public new
";


%csmethodmodifiers Reaction::isSetName() const "
/**
   * Predicate returning @c true if this
   * Reaction\'s \'name\' attribute is set.
   *
   * @return @c true if the \'name\' attribute of this Reaction is
   * set, @c false otherwise.
   */ public new
";


%csmethodmodifiers Reaction::isSetKineticLaw() const "
/**
   * Predicate returning @c true if this
   * Reaction contains a kinetic law object.
   *
   * @return @c true if a KineticLaw is present in this Reaction,, @c false
   * otherwise.
   */ public
";


%csmethodmodifiers Reaction::isSetFast() const "
/**
   * Predicate returning @c true if the value of
   * the \'fast\' attribute on this Reaction.
   *
   * @return @c true if the \'fast\' attribute is true, @c false otherwise.
   *
   * * 
 * @warning <span class=\'warning\'>SBML definitions before SBML Level&nbsp;2
 * Version&nbsp;2 incorrectly indicated that software tools could ignore the
 * \'fast\' attribute if they did not implement support for the corresponding
 * concept; however, further research in SBML has revealed that this is not
 * true, and \'fast\' <em>cannot be ignored</em> if it is set to @c true.
 * Beginning with SBML Level&nbsp;2 Versions&nbsp;2, the SBML specifications
 * therefore stipulate that if a model has any reactions with \'fast\' set to
 * @c true, a software tool must be able to respect the attribute or else
 * indicate to the user that it does not have the capacity to do so.  Readers
 * are directed to the SBML specifications, which provides more detail about
 * the conditions under which a reaction can be considered to be fast in this
 * sense.</span>
 *
   */ public
";


%csmethodmodifiers Reaction::isSetCompartment() const "
/**
   * Predicate returning @c true if this
   * Reaction\'s \'compartment\' attribute is set.
   *
   * @return @c true if the \'compartment\' attribute of this Reaction is
   * set, @c false otherwise.
   *
   * @note The \'compartment\' attribute is available in SBML
   * Level&nbsp;3 Version&nbsp;1 Core, but is not present on Reaction in
   * lower Levels of SBML.
   */ public
";


%csmethodmodifiers Reaction::isSetReversible() const "
/**
   * Predicate returning @c true if this
   * Reaction\'s \'reversible\' attribute is set.
   *
   * @return @c true if the \'reversible\' attribute of this Reaction is
   * set, @c false otherwise.
   */ public
";


%csmethodmodifiers Reaction::setId(const std::string& sid) "
/**
   * Sets the value of the \'id\' attribute of this Reaction.
   *
   * The string @p sid is copied.
   *
   * *
 * 
 * SBML has strict requirements for the syntax of identifiers, that is, the
 * values of the \'id\' attribute present on most types of SBML objects.
 * The following is a summary of the definition of the SBML identifier type 
 * <code>SId</code>, which defines the permitted syntax of identifiers.  We
 * express the syntax using an extended form of BNF notation: 
 * <pre style=\'margin-left: 2em; border: none; font-weight: bold; font-size: 13px; color: black\'>
 * letter ::= \'a\'..\'z\',\'A\'..\'Z\'
 * digit  ::= \'0\'..\'9\'
 * idChar ::= letter | digit | \'_\'
 * SId    ::= ( letter | \'_\' ) idChar*
 * </pre>
 * The characters <code>(</code> and <code>)</code> are used for grouping, the
 * character <code>*</code> \'zero or more times\', and the character
 * <code>|</code> indicates logical \'or\'.  The equality of SBML identifiers is
 * determined by an exact character sequence match; i.e., comparisons must be
 * performed in a case-sensitive manner.  In addition, there are a few
 * conditions for the uniqueness of identifiers in an SBML model.  Please
 * consult the SBML specifications for the exact details of the uniqueness
 * requirements.
 * 
 *
   *
   * @param sid the string to use as the identifier of this Reaction
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public new
";


%csmethodmodifiers Reaction::setName(const std::string& name) "
/**
   * Sets the value of the \'name\' attribute of this Reaction.
   *
   * The string in @p name is copied.
   *
   * @param name the new name for the Reaction
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public new
";


%csmethodmodifiers Reaction::setKineticLaw(const KineticLaw* kl) "
/**
   * Sets the \'kineticLaw\' subelement of this Reaction to a copy of the
   * given KineticLaw object.
   *
   * @param kl the KineticLaw object to use.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH @endlink
  */ public
";


%csmethodmodifiers Reaction::setReversible(bool value) "
/**
   * Sets the value of the \'reversible\' attribute of this Reaction.
   *
   * @param value the value of the \'reversible\' attribute.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   */ public
";


%csmethodmodifiers Reaction::setFast(bool value) "
/**
   * Sets the value of the \'fast\' attribute of this Reaction.
   *
   * @param value the value of the \'fast\' attribute.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * 
   * * 
 * @warning <span class=\'warning\'>SBML definitions before SBML Level&nbsp;2
 * Version&nbsp;2 incorrectly indicated that software tools could ignore the
 * \'fast\' attribute if they did not implement support for the corresponding
 * concept; however, further research in SBML has revealed that this is not
 * true, and \'fast\' <em>cannot be ignored</em> if it is set to @c true.
 * Beginning with SBML Level&nbsp;2 Versions&nbsp;2, the SBML specifications
 * therefore stipulate that if a model has any reactions with \'fast\' set to
 * @c true, a software tool must be able to respect the attribute or else
 * indicate to the user that it does not have the capacity to do so.  Readers
 * are directed to the SBML specifications, which provides more detail about
 * the conditions under which a reaction can be considered to be fast in this
 * sense.</span>
 *
   */ public
";


%csmethodmodifiers Reaction::setCompartment(const std::string& sid) "
/**
   * Sets the value of the \'compartment\' attribute of this Reaction.
   *
   * The string @p sid is copied.  
   *
   * @param sid the string to use as the compartment of this Reaction
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   *
   * @note The \'compartment\' attribute is available in SBML
   * Level&nbsp;3 Version&nbsp;1 Core, but is not present on Reaction in
   * lower Levels of SBML.
   */ public
";


%csmethodmodifiers Reaction::unsetName "
/**
   * Unsets the value of the \'name\' attribute of this Reaction.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public new
";


%csmethodmodifiers Reaction::unsetKineticLaw "
/**
   * Unsets the \'kineticLaw\' subelement of this Reaction.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers Reaction::unsetFast "
/**
   * Unsets the value of the \'fast\' attribute of this Reaction.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   *
   * * 
 * @warning <span class=\'warning\'>SBML definitions before SBML Level&nbsp;2
 * Version&nbsp;2 incorrectly indicated that software tools could ignore the
 * \'fast\' attribute if they did not implement support for the corresponding
 * concept; however, further research in SBML has revealed that this is not
 * true, and \'fast\' <em>cannot be ignored</em> if it is set to @c true.
 * Beginning with SBML Level&nbsp;2 Versions&nbsp;2, the SBML specifications
 * therefore stipulate that if a model has any reactions with \'fast\' set to
 * @c true, a software tool must be able to respect the attribute or else
 * indicate to the user that it does not have the capacity to do so.  Readers
 * are directed to the SBML specifications, which provides more detail about
 * the conditions under which a reaction can be considered to be fast in this
 * sense.</span>
 *
   */ public
";


%csmethodmodifiers Reaction::unsetCompartment "
/**
   * Unsets the value of the \'compartment\' attribute of this Reaction.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   *
   * @note The \'compartment\' attribute is available in SBML
   * Level&nbsp;3 Version&nbsp;1 Core, but is not present on Reaction in
   * lower Levels of SBML.
   */ public
";


%csmethodmodifiers Reaction::addReactant(const SpeciesReference* sr) "
/**
   * Adds a given SpeciesReference object as a reactant in this Reaction.
   *
   * The SpeciesReference instance in @p sr is copied.
   *
   * @param sr a SpeciesReference object referring to a Species in the
   * enclosing Model
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_DUPLICATE_OBJECT_ID LIBSBML_DUPLICATE_OBJECT_ID @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   *
   * * 
 * @note This method should be used with some caution.  The fact that this
 * method @em copies the object passed to it means that the caller will be
 * left holding a physically different object instance than the one contained
 * inside this object.  Changes made to the original object instance (such as
 * resetting attribute values) will <em>not affect the instance in this
 * object</em>.  In addition, the caller should make sure to free the
 * original object if it is no longer being used, or else a memory leak will
 * result.  Please see other methods on this class (particularly a
 * corresponding method whose name begins with the word <code>create</code>)
 * for alternatives that do not lead to these issues.
 *
 * 
   *
   * @see createReactant()
   */ public
";


%csmethodmodifiers Reaction::addProduct(const SpeciesReference* sr) "
/**
   * Adds a given SpeciesReference object as a product in this Reaction.
   *
   * The SpeciesReference instance in @p sr is copied.
   *
   * @param sr a SpeciesReference object referring to a Species in the
   * enclosing Model
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   *
   * * 
 * @note This method should be used with some caution.  The fact that this
 * method @em copies the object passed to it means that the caller will be
 * left holding a physically different object instance than the one contained
 * inside this object.  Changes made to the original object instance (such as
 * resetting attribute values) will <em>not affect the instance in this
 * object</em>.  In addition, the caller should make sure to free the
 * original object if it is no longer being used, or else a memory leak will
 * result.  Please see other methods on this class (particularly a
 * corresponding method whose name begins with the word <code>create</code>)
 * for alternatives that do not lead to these issues.
 *
 * 
   *
   * @see createProduct()
   */ public
";


%csmethodmodifiers Reaction::addModifier(const ModifierSpeciesReference* msr) "
/**
   * Adds a given ModifierSpeciesReference object as a product in this
   * Reaction.
   *
   * The ModifierSpeciesReference instance in @p msr is copied.
   *
   * @param msr a ModifierSpeciesReference object referring to a Species in
   * the enclosing Model
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_DUPLICATE_OBJECT_ID LIBSBML_DUPLICATE_OBJECT_ID @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   *
   * * 
 * @note This method should be used with some caution.  The fact that this
 * method @em copies the object passed to it means that the caller will be
 * left holding a physically different object instance than the one contained
 * inside this object.  Changes made to the original object instance (such as
 * resetting attribute values) will <em>not affect the instance in this
 * object</em>.  In addition, the caller should make sure to free the
 * original object if it is no longer being used, or else a memory leak will
 * result.  Please see other methods on this class (particularly a
 * corresponding method whose name begins with the word <code>create</code>)
 * for alternatives that do not lead to these issues.
 *
 * 
   *
   * @see createModifier()
   */ public
";


%csmethodmodifiers Reaction::createReactant "
/**
   * Creates a new SpeciesReference, adds it to this Reaction\'s list of
   * reactants, and returns it.
   *
   * @return a new SpeciesReference object.
   */ public
";


%csmethodmodifiers Reaction::createProduct "
/**
   * Creates a new SpeciesReference, adds it to this Reaction\'s list of
   * products, and returns it.
   *
   * @return a new SpeciesReference object.
   */ public
";


%csmethodmodifiers Reaction::createModifier "
/**
   * Creates a new ModifierSpeciesReference, adds it to this Reaction\'s
   * list of modifiers and returns it.
   *
   * @return a new ModifierSpeciesReference object.
   */ public
";


%csmethodmodifiers Reaction::createKineticLaw "
/**
   * Creates a new KineticLaw object, installs it as this Reaction\'s
   * \'kineticLaw\' subelement, and returns it.
   *
   * If this Reaction had a previous KineticLaw, it will be destroyed.
   *
   * @return the new KineticLaw object
   */ public
";


%csmethodmodifiers Reaction::getListOfReactants() const "
/**
   * Returns the list of reactants in this Reaction object.
   * 
   * @return the ListOfSpeciesReferences containing the references to the
   * species acting as reactants in this reaction
   */ public
";


%csmethodmodifiers Reaction::getListOfReactants "
/**
   * Returns the list of reactants in this Reaction object.
   * 
   * @return the ListOfSpeciesReferences containing the references to the
   * species acting as reactants in this reaction
   */ public
";


%csmethodmodifiers Reaction::getListOfProducts() const "
/**
   * Returns the list of products in this Reaction object.
   * 
   * @return the ListOfSpeciesReferences containing the references to the
   * species acting as products in this reaction
   */ public
";


%csmethodmodifiers Reaction::getListOfProducts "
/**
   * Returns the list of products in this Reaction object.
   * 
   * @return the ListOfSpeciesReferences containing the references to the
   * species acting as products in this reaction
   */ public
";


%csmethodmodifiers Reaction::getListOfModifiers() const "
/**
   * Returns the list of modifiers in this Reaction object.
   * 
   * @return the ListOfSpeciesReferences containing the references to the
   * species acting as modifiers in this reaction
   */ public
";


%csmethodmodifiers Reaction::getListOfModifiers "
/**
   * Returns the list of modifiers in this Reaction object.
   * 
   * @return the ListOfSpeciesReferences containing the references to the
   * species acting as modifiers in this reaction
   */ public
";


%csmethodmodifiers Reaction::getReactant "
/**
   * Returns the nth reactant species (as a SpeciesReference object) in 
   * the list of reactants in this Reaction.
   *
   * Callers should first call getNumReactants() to find out how many
   * reactants there are, to avoid using an invalid index number.
   *
   * @param n the index of the reactant sought.
   * 
   * @return the nth reactant (as a SpeciesReference object) of this
   * Reaction.
   */ public
";


%csmethodmodifiers Reaction::getReactant(unsigned int n) "
/**
   * Returns the nth reactant species (as a SpeciesReference object) 
   * in the list of reactants in this Reaction.
   *
   * Callers should first call getNumReactants() to find out how many
   * reactants there are, to avoid using an invalid index number.
   *
   * @param n the index of the reactant sought.
   * 
   * @return the nth reactant (as a SpeciesReference object) of this
   * Reaction.
   */ public
";


%csmethodmodifiers Reaction::getReactant(const std::string& species) const "
/**
   * Returns the reactant species (as a SpeciesReference object) having 
   * a specific identifier in this Reaction.
   *
   * @param species the identifier of the reactant Species (\'species\' 
   * attribute of the reactant SpeciesReference object)
   *
   * @return a SpeciesReference object, or @c null if no species with the
   * given identifier @p species appears as a reactant in this Reaction.
   */ public
";


%csmethodmodifiers Reaction::getReactant(const std::string& species) "
/**
   * Returns the reactant species (as a SpeciesReference object) having 
   * a specific identifier in this Reaction.
   *
   * @param species the identifier of the reactant Species (\'species\' 
   * attribute of the reactant SpeciesReference object)
   *
   * @return a SpeciesReference object, or @c null if no species with the
   * given identifier @p species appears as a reactant in this Reaction.
   */ public
";


%csmethodmodifiers Reaction::getProduct "
/**
   * Returns the nth product species (as a SpeciesReference object) in 
   * the list of products in this Reaction.
   *
   * Callers should first call getNumProducts() to find out how many
   * products there are, to avoid using an invalid index number.
   *
   * @param n the index of the product sought.
   * 
   * @return the nth product (as a SpeciesReference object) of this
   * Reaction.
   */ public
";


%csmethodmodifiers Reaction::getProduct(unsigned int n) "
/**
   * Returns the nth product species (as a SpeciesReference object) 
   * in the list of products in this Reaction.
   *
   * Callers should first call getNumProducts() to find out how many
   * products there are, to avoid using an invalid index number.
   *
   * @param n the index of the product sought.
   * 
   * @return the nth product (as a SpeciesReference object) of this
   * Reaction.
   */ public
";


%csmethodmodifiers Reaction::getProduct(const std::string& species) const "
/**
   * Returns the product species (as a SpeciesReference object) having 
   * a specific identifier in this Reaction.
   *
   * @param species the identifier of the product Species (\'species\'
   * attribute of the product SpeciesReference object)
   *
   * @return a SpeciesReference object, or @c null if no species with the
   * given identifier @p species appears as a product in this Reaction.
   */ public
";


%csmethodmodifiers Reaction::getProduct(const std::string& species) "
/**
   * Returns the product species (as a SpeciesReference object) having 
   * a specific identifier in this Reaction.
   *
   * @param species the identifier of the product Species (\'species\'
   * attribute of the product SpeciesReference object)
   *
   * @return a SpeciesReference object, or @c null if no species with the
   * given identifier @p species appears as a product in this Reaction.
   */ public
";


%csmethodmodifiers Reaction::getModifier "
/**
   * Returns the nth modifier species (as a ModifierSpeciesReference object) 
   * in the list of modifiers of this Reaction.
   *
   * Callers should first call getNumModifiers() to find out how many
   * modifiers there are, to avoid using an invalid index number.
   *
   * @param n the index of the modifier species sought
   * 
   * @return the nth modifier (as a ModifierSpeciesReference object) of
   * this Reaction.
   */ public
";


%csmethodmodifiers Reaction::getModifier(unsigned int n) "
/**
   * Returns the nth modifier species (as a ModifierSpeciesReference object) 
   * in the list of modifiers of this Reaction.
   *
   * Callers should first call getNumModifiers() to find out how many
   * modifiers there are, to avoid using an invalid index number.
   *
   * @param n the index of the modifier species sought
   * 
   * @return the nth modifier (as a ModifierSpeciesReference object) of
   * this Reaction.
   */ public
";


%csmethodmodifiers Reaction::getModifier(const std::string& species) const "
/**
   * Returns the modifier species (as a ModifierSpeciesReference object) 
   * having a specific identifier in this Reaction.
   *
   * @param species the identifier of the modifier Species (\'species\' 
   * attribute of the ModifierSpeciesReference object)
   *
   * @return a ModifierSpeciesReference object, or @c null if no species with
   * the given identifier @p species appears as a modifier in this
   * Reaction.
   */ public
";


%csmethodmodifiers Reaction::getModifier(const std::string& species) "
/**
   * Returns the modifier species (as a ModifierSpeciesReference object) 
   * having a specific identifier in this Reaction.
   *
   * @param species the identifier of the modifier Species (\'species\' 
   * attribute of the ModifierSpeciesReference object)
   *
   * @return a ModifierSpeciesReference object, or @c null if no species with
   * the given identifier @p species appears as a modifier in this
   * Reaction.
   */ public
";


%csmethodmodifiers Reaction::getNumReactants() const "
/**
   * Returns the number of reactant species in this Reaction.
   * 
   * @return the number of reactants in this Reaction.
   */ public
";


%csmethodmodifiers Reaction::getNumProducts() const "
/**
   * Returns the number of product species in this Reaction.
   * 
   * @return the number of products in this Reaction.
   */ public
";


%csmethodmodifiers Reaction::getNumModifiers() const "
/**
   * Returns the number of modifier species in this Reaction.
   * 
   * @return the number of modifiers in this Reaction.
   */ public
";


%csmethodmodifiers Reaction::removeReactant(unsigned int n) "
/**
   * Removes the nth reactant species (SpeciesReference object) in the list of 
   * reactants in this Reaction and returns a pointer to it.
   *
   * The caller owns the returned object and is responsible for deleting it.
   * The caller should first call getNumReactants() to find out how many
   * reactants there are, to avoid using an invalid index number.
   *
   * @param n the index of the reactant SpeciesReference object to remove
   *
   * @return the removed reactant SpeciesReference object, or @c null if the 
   * given index is out of range.
   */ public
";


%csmethodmodifiers Reaction::removeReactant(const std::string& species) "
/**
   * Removes the reactant species (SpeciesReference object) having the given  
   * \'species\' attribute in this Reaction and returns a pointer to it.
   *
   * The caller owns the returned object and is responsible for deleting it.
   *
   * @param species the \'species\' attribute of the reactant SpeciesReference 
   * object
   *
   * @return the removed reactant SpeciesReference object, or @c null if no 
   * reactant SpeciesReference object with the given \'species\' attribute 
   * @p species exists in this Reaction.
   */ public
";


%csmethodmodifiers Reaction::removeProduct(unsigned int n) "
/**
   * Removes the nth product species (SpeciesReference object) in the list of 
   * products in this Reaction and returns a pointer to it.
   *
   * The caller owns the returned object and is responsible for deleting it.
   * The caller should first call getNumProducts() to find out how many
   * products there are, to avoid using an invalid index number.
   *
   * @param n the index of the product SpeciesReference object to remove
   *
   * @return the removed product SpeciesReference object, or @c null if the 
   * given index is out of range.
   */ public
";


%csmethodmodifiers Reaction::removeProduct(const std::string& species) "
/**
   * Removes the product species (SpeciesReference object) having the given  
   * \'species\' attribute in this Reaction and returns a pointer to it.
   *
   * The caller owns the returned object and is responsible for deleting it.
   *
   * @param species the \'species\' attribute of the product SpeciesReference 
   * object
   *
   * @return the removed product SpeciesReference object, or @c null if no 
   * product SpeciesReference object with the given \'species\' attribute 
   * @p species exists in this Reaction.
   */ public
";


%csmethodmodifiers Reaction::removeModifier(unsigned int n) "
/**
   * Removes the nth modifier species (ModifierSpeciesReference object) in 
   * the list of  modifiers in this Reaction and returns a pointer to it.
   *
   * The caller owns the returned object and is responsible for deleting it.
   * The caller should first call getNumModifiers() to find out how many
   * modifiers there are, to avoid using an invalid index number.
   *
   * @param n the index of the ModifierSpeciesReference object to remove
   *
   * @return the removed ModifierSpeciesReference object, or @c null if the 
   * given index is out of range.
   */ public
";


%csmethodmodifiers Reaction::removeModifier(const std::string& species) "
/**
   * Removes the modifier species (ModifierSpeciesReference object) having 
   * the given \'species\' attribute in this Reaction and returns a pointer to it.
   *
   * The caller owns the returned object and is responsible for deleting it.
   *
   * @param species the \'species\' attribute of the ModifierSpeciesReference 
   * object
   *
   * @return the removed ModifierSpeciesReference object, or @c null if no 
   * ModifierSpeciesReference object with the given \'species\' attribute @p 
   * species exists in this Reaction.
   */ public
";


%csmethodmodifiers Reaction::setSBMLDocument(SBMLDocument* d) "
/**
   * Sets the parent SBMLDocument of this SBML object.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Reaction::connectToChild "
/**
   * Sets this SBML object to child SBML objects (if any).
   * (Creates a child-parent relationship by the parent)
   *
   * Subclasses must override this function if they define
   * one ore more child elements.
   * Basically, this function needs to be called in
   * constructor, copy constructor and assignment operator.
   *
   * @see setSBMLDocument
   * @see enablePackageInternal
   */ /* libsbml-internal */ public new
";


%csmethodmodifiers Reaction::enablePackageInternal(const std::string& pkgURI, const std::string& pkgPrefix, bool flag) "
/**
   * Enables/Disables the given package with this element and child
   * elements (if any).
   * (This is an internal implementation for enablePackage function)
   *
   * @note Subclasses of the SBML Core package in which one or more child
   * elements are defined must override this function.
   */ /* libsbml-internal */ public new
";


%csmethodmodifiers Reaction::getTypeCode() const "
/**
   * Returns the libSBML type code for this SBML object.
   * 
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object:
   * @link libsbmlcs.libsbml.SBML_REACTION SBML_REACTION@endlink (default).
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see getElementName()
   * @see getPackageName()
   */ public new
";


%csmethodmodifiers Reaction::getElementName() const "
/**
   * Returns the XML element name of this object, which for Reaction, is
   * always @c \'reaction\'.
   * 
   * @return the name of this element, i.e., @c \'reaction\'.
   */ public new
";


%csmethodmodifiers Reaction::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Reaction::hasRequiredAttributes() const "
/**
   * Predicate returning @c true if all the required attributes for this
   * Reaction object have been set.
   *
   * @note The required attributes for a Reaction object are:
   * @li \'id\' (or \'name\' in SBML Level&nbsp;1)
   * @li \'fast\' (in Level&nbsp;3 only, where it is defined as a required attribute)
   * @li \'reversible\' (in Level&nbsp;3 only, where it is defined as a required attribute)
   *
   * @return a bool value indicating whether all the required
   * attributes for this object have been defined.
   */ public new
";


%csmethodmodifiers Reaction::createObject(XMLInputStream& stream) "
/**
   * Create and return an SBML object of this class, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or @c null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Reaction::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Reaction::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Subclasses should override this method to read values from the given
   * XMLAttributes set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Reaction::readL1Attributes(const XMLAttributes& attributes) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Reaction::readL2Attributes(const XMLAttributes& attributes) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Reaction::readL3Attributes(const XMLAttributes& attributes) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Reaction::writeAttributes(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Reaction::isExplicitlySetReversible() const "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Reaction::isExplicitlySetFast() const "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfReactions::ListOfReactions(unsigned int level, unsigned int version) "
/**
   * Creates a new ListOfReactions object.
   *
   * The object is constructed such that it is valid for the given SBML
   * Level and Version combination.
   *
   * @param level the SBML Level
   * 
   * @param version the Version within the SBML Level
   */ public
";


%csmethodmodifiers ListOfReactions::ListOfReactions(SBMLNamespaces* sbmlns) "
/**
   * Creates a new ListOfReactions object.
   *
   * The object is constructed such that it is valid for the SBML Level and
   * Version combination determined by the SBMLNamespaces object in @p
   * sbmlns.
   *
   * @param sbmlns an SBMLNamespaces object that is used to determine the
   * characteristics of the ListOfReactions object to be created.
   */ public
";


%csmethodmodifiers ListOfReactions::clone() const "
/**
   * Creates and returns a deep copy of this ListOfReactions instance.
   *
   * @return a (deep) copy of this ListOfReactions.
   */ public new
";


%csmethodmodifiers ListOfReactions::getItemTypeCode() const "
/**
   * Returns the libSBML type code for the objects contained in this ListOf
   * (i.e., Reaction objects, if the list is non-empty).
   * 
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for objects contained in this list:
   * @link libsbmlcs.libsbml.SBML_REACTION SBML_REACTION@endlink (default).
   *
   * @see getElementName()
   * @see getPackageName()
   */ public new
";


%csmethodmodifiers ListOfReactions::getElementName() const "
/**
   * Returns the XML element name of this object
   *
   * For ListOfReactions, the XML element name is @c \'listOfReactions\'.
   * 
   * @return the name of this element, i.e., @c \'listOfReactions\'.
   */ public new
";


%csmethodmodifiers ListOfReactions::get(unsigned int n) "
/**
   * Get a Reaction from the ListOfReactions.
   *
   * @param n the index number of the Reaction to get.
   * 
   * @return the nth Reaction in this ListOfReactions.
   *
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfReactions::get "
/**
   * Get a Reaction from the ListOfReactions.
   *
   * @param n the index number of the Reaction to get.
   * 
   * @return the nth Reaction in this ListOfReactions.
   *
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfReactions::get(const std::string& sid) "
/**
   * Get a Reaction from the ListOfReactions based on its identifier.
   *
   * @param sid a string representing the identifier of the Reaction to get.
   * 
   * @return Reaction in this ListOfReactions with the given @p sid or @c
   * null if no such Reaction exists.
   *
   * @see get(long n)
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfReactions::get(const std::string& sid) const "
/**
   * Get a Reaction from the ListOfReactions based on its identifier.
   *
   * @param sid a string representing the identifier of the Reaction to get.
   * 
   * @return Reaction in this ListOfReactions with the given @p sid or @c
   * null if no such Reaction exists.
   *
   * @see get(long n)
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfReactions::remove(unsigned int n) "
/**
   * Removes the nth item from this ListOfReactions items and returns a
   * pointer to it.
   *
   * The caller owns the returned item and is responsible for deleting it.
   *
   * @param n the index of the item to remove
   *
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfReactions::remove(const std::string& sid) "
/**
   * Removes item in this ListOfReactions items with the given identifier.
   *
   * The caller owns the returned item and is responsible for deleting it.
   * If none of the items in this list have the identifier @p sid, then
   * null is returned.
   *
   * @param sid the identifier of the item to remove
   *
   * @return the item removed.  As mentioned above, the caller owns the
   * returned item.
   */ public new
";


%csmethodmodifiers ListOfReactions::getElementPosition() const "
/**
   * Return the position of this element.
   *
   * @return the ordinal position of the element with respect to its
   * siblings or -1 (default) to indicate the position is not significant.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfReactions::createObject(XMLInputStream& stream) "
/**
   * Create and return an SBML object of this class, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or @c null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%typemap(csimports) KineticLaw "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Implementation of %SBML\'s %KineticLaw construct.
 *
 * An object of class KineticLaw is used to describe the rate at which the
 * process defined by a given Reaction takes place.  KineticLaw has
 * subelements called \'math\' (for MathML content) and \'listOfParameters\'
 * (of class ListOfParameters), in addition to the attributes and
 * subelements it inherits from SBase.
 *
 * KineticLaw\'s \'math\' subelement for holding a MathML formula defines the
 * rate of the reaction.  The formula may refer to other entities in a
 * model as well as local parameter definitions within the scope of the
 * Reaction (see below).  It is important to keep in mind, however, that
 * the only Species identifiers that can be used in this formula are those
 * declared in the lists of reactants, products and modifiers in the
 * Reaction structure.  (In other words, before a species can be referenced
 * in the KineticLaw, it must be declared in one of those lists.)
 *
 * KineticLaw provides a way to define @em local parameters whose
 * identifiers can be used in the \'math\' formula of that KineticLaw
 * instance.  Prior to SBML Level&nbsp;3, these parameter definitions are
 * stored inside a \'listOfParameters\' subelement containing Parameter
 * objects; in SBML Level&nbsp;3, this is achieved using a specialized
 * object class called LocalParameter and the containing subelement is
 * called \'listOfLocalParameters\'.  In both cases, the parameters so
 * defined are only visible within the KineticLaw; they cannot be accessed
 * outside.  A local parameter within one reaction is not visible from
 * within another reaction, nor is it visible to any other construct
 * outside of the KineticLaw in which it is defined.  In addition, another
 * important feature is that if such a Parameter (or in Level&nbsp;3,
 * LocalParameter) object has the same identifier as another object in the
 * scope of the enclosing Model, the definition inside the KineticLaw takes
 * precedence.  In other words, within the KineticLaw\'s \'math\' formula,
 * references to local parameter identifiers <strong>shadow any identical
 * global identifiers</strong>.
 *
 * The values of local parameters defined within KineticLaw objects cannot
 * change.  In SBML Level&nbsp;3, this quality is built into the
 * LocalParameter construct.  In Level&nbsp;2, where the same kind of
 * Parameter object class is used as for global parameters, the Parameter
 * objects\' \'constant\' attribute must always have a value of @c true
 * (either explicitly or left to its default value).
 *
 * 
 * @section shadowing-warning A warning about identifier shadowing
 *
 * A common misconception is that different classes of objects (e.g.,
 * species, compartments, parameters) in SBML have different identifier
 * scopes.  They do not.  The implication is that if a KineticLaw\'s local
 * parameter definition uses an identifier identical to @em any other
 * identifier defined in the model outside the KineticLaw, even if the
 * other identifier does @em not belong to a parameter type of object, the
 * local parameter\'s identifier takes precedence within that KineticLaw\'s
 * \'math\' formula.  It is not an error in SBML for identifiers to shadow
 * each other this way, but can lead to confusing and subtle errors.
 *
 * 
 * @section version-diffs SBML Level/Version differences
 *
 * In SBML Level&nbsp;2 Version&nbsp;1, the SBML specification
 * included two additional attributes on KineticLaw called \'substanceUnits\'
 * and \'timeUnits\'.  They were removed beginning with SBML Level&nbsp;2
 * Version&nbsp;2 because further research determined they introduced many
 * problems.  The most significant problem was that their use could easily
 * lead to the creation of valid models whose reactions nevertheless could
 * not be integrated into a system of equations without outside knowledge
 * for converting the quantities used.  Examination of real-life models
 * revealed that a common reason for using \'substanceUnits\' on KineticLaw
 * was to set the units of all reactions to the same set of substance
 * units, something that is better achieved by using UnitDefinition to
 * redefine @c \'substance\' for the whole Model.
 *
 * As mentioned above, in SBML Level&nbsp;2 Versions 2&ndash;4, local
 * parameters are of class Parameter.  In SBML Level&nbsp;3, the class of
 * object is LocalParameter.
 */
"


%csmethodmodifiers KineticLaw::KineticLaw(unsigned int level, unsigned int version) "
/**
   * Creates a new KineticLaw using the given SBML @p level and @p version
   * values.
   *
   * @param level a long integer, the SBML Level to assign to this KineticLaw
   *
   * @param version a long integer, the SBML Version to assign to this
   * KineticLaw
   *
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the given @p level and @p version combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent SBMLDocument object.
   *
   * * 
 * @note Upon the addition of a KineticLaw object to an SBMLDocument (e.g.,
 * using Reaction::setKineticLaw(@if java KineticLaw kl@endif)), the SBML
 * Level, SBML Version and XML namespace of the document @em override the
 * values used when creating the KineticLaw object via this constructor.
 * This is necessary to ensure that an SBML document is a consistent
 * structure.  Nevertheless, the ability to supply the values at the time of
 * creation of a KineticLaw is an important aid to producing valid SBML.
 * Knowledge of the intented SBML Level and Version determine whether it is
 * valid to assign a particular value to an attribute, or whether it is valid
 * to add an object to an existing SBMLDocument.
 *
   */ public
";


%csmethodmodifiers KineticLaw::KineticLaw(SBMLNamespaces* sbmlns) "
/**
   * Creates a new KineticLaw using the given SBMLNamespaces object
   * @p sbmlns.
   *
   * *
 *  
 * The SBMLNamespaces object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML\'s SBMLNamespaces facilities is to create an
 * SBMLNamespaces object somewhere in a program once, then hand that object
 * as needed to object constructors that accept SBMLNamespaces as arguments.
 *
 *
   *
   * @param sbmlns an SBMLNamespaces object.
   *
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the given @p level and @p version combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent SBMLDocument object.
   *
   * * 
 * @note Upon the addition of a KineticLaw object to an SBMLDocument (e.g.,
 * using Reaction::setKineticLaw(@if java KineticLaw kl@endif)), the SBML
 * Level, SBML Version and XML namespace of the document @em override the
 * values used when creating the KineticLaw object via this constructor.
 * This is necessary to ensure that an SBML document is a consistent
 * structure.  Nevertheless, the ability to supply the values at the time of
 * creation of a KineticLaw is an important aid to producing valid SBML.
 * Knowledge of the intented SBML Level and Version determine whether it is
 * valid to assign a particular value to an attribute, or whether it is valid
 * to add an object to an existing SBMLDocument.
 *
   */ public
";


%csmethodmodifiers KineticLaw::KineticLaw(const KineticLaw& orig) "
/**
   * Copy constructor; creates a copy of this KineticLaw.
   *
   * @param orig the object to copy.
   * 
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the argument @p orig is @c null.
   */ public
";


%csmethodmodifiers KineticLaw::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor for this instance of KineticLaw.
   *
   * @param v the SBMLVisitor instance to be used.
   *
   * @return the result of calling <code>v.visit()</code>.
   */ public
";


%csmethodmodifiers KineticLaw::clone() const "
/**
   * Creates and returns a deep copy of this KineticLaw object.
   *
   * @return a (deep) copy of this KineticLaw.
   */ public new
";


%csmethodmodifiers KineticLaw::getElementBySId(const std::string& id) "
/**
   * Returns the first child element found that has the given @p id in the
   * model-wide SId namespace, or @c null if no such object is found.
   *
   * @param id string representing the id of objects to find.
   *
   * @return pointer to the first element found with the given @p id.
   */ public
";


%csmethodmodifiers KineticLaw::getElementByMetaId(const std::string& metaid) "
/**
   * Returns the first child element it can find with the given @p metaid, or
   * @c null if no such object is found.
   *
   * @param metaid string representing the metaid of objects to find
   *
   * @return pointer to the first element found with the given @p metaid.
   */ public
";


%csmethodmodifiers KineticLaw::getAllElements(ElementFilter* filter=NULL) "
/**
   * Returns a List of all child SBase objects, including those nested to an
   * arbitrary depth
   *
   * @return a List of pointers to all children objects.
   */ public
";


%csmethodmodifiers KineticLaw::getFormula() const "
/**
   * Returns the mathematical formula for this KineticLaw object and return
   * it as as a text string.
   *
   * This is fundamentally equivalent to
   * @if java KineticLaw::getMath()@else getMath()@endif.
   * This variant is provided principally for compatibility compatibility
   * with SBML Level&nbsp;1.
   * 
   * @return a string representing the formula of this KineticLaw.
   *
   * @note @htmlinclude level-1-uses-text-string-math.html
   *
   * @see getMath()
   */ public
";


%csmethodmodifiers KineticLaw::getMath() const "
/**
   * Returns the mathematical formula for this KineticLaw object and return
   * it as as an AST.
   *
   * This is fundamentally equivalent to
   * @if java KineticLaw::getFormula()@else getFormula()@endif.
   * The latter is provided principally for compatibility compatibility
   * with SBML Level&nbsp;1, which represented mathematical formulas in
   * text-string form.
   * 
   * @return the ASTNode representation of the mathematical formula.
   *
   * @see getFormula()
   */ public
";


%csmethodmodifiers KineticLaw::getTimeUnits() const "
/**
   * (SBML Level&nbsp;2 Version&nbsp;1 only) Returns the value of the
   * \'timeUnits\' attribute of this KineticLaw object.
   *
   * @return the \'timeUnits\' attribute value.
   *
   * *
 * @note The attributes \'timeUnits\' and \'substanceUnits\' are present only
 * in SBML Level&nbsp;2 Version&nbsp;1.  In SBML Level&nbsp;2
 * Version&nbsp;2, the \'timeUnits\' and \'substanceUnits\' attributes were
 * removed.  For compatibility with new versions of SBML, users are
 * cautioned to avoid these attributes.
 * 
   */ public
";


%csmethodmodifiers KineticLaw::getSubstanceUnits() const "
/**
   * (SBML Level&nbsp;2 Version&nbsp;1 only) Returns the value of the
   * \'substanceUnits\' attribute of this KineticLaw object.
   *
   * @return the \'substanceUnits\' attribute value.
   *
   * *
 * @note The attributes \'timeUnits\' and \'substanceUnits\' are present only
 * in SBML Level&nbsp;2 Version&nbsp;1.  In SBML Level&nbsp;2
 * Version&nbsp;2, the \'timeUnits\' and \'substanceUnits\' attributes were
 * removed.  For compatibility with new versions of SBML, users are
 * cautioned to avoid these attributes.
 * 
   */ public
";


%csmethodmodifiers KineticLaw::isSetFormula() const "
/**
   * Predicate returning @c true if this KineticLaw\'s \'formula\' attribute is
   * set.
   *
   * This is functionally identical to the method
   * @if java KineticLaw::isSetMath()@else isSetMath()@endif.  It is
   * provided in order to mirror the parallel between
   * @if java KineticLaw::getFormula()@else getFormula()@endif and
   * @if java KineticLaw::getMath()@else getMath()@endif.
   *
   * @return @c true if the formula (meaning the @c math subelement) of
   * this KineticLaw is set, @c false otherwise.
   *
   * @note @htmlinclude level-1-uses-text-string-math.html
   *
   * @see isSetMath()
   */ public
";


%csmethodmodifiers KineticLaw::isSetMath() const "
/**
   * Predicate returning @c true if this Kinetic\'s \'math\' subelement is set.
   *
   * This is identical to the method
   * @if java KineticLaw::isSetFormula()@else isSetFormula()@endif.
   * It is provided in order to mirror the parallel between
   * @if java KineticLaw::getFormula()@else getFormula()@endif and
   * @if java KineticLaw::getMath()@else getMath()@endif.
   * 
   * @return @c true if the formula (meaning the @c math subelement) of
   * this KineticLaw is set, @c false otherwise.
   * 
   * @see isSetFormula()
   */ public
";


%csmethodmodifiers KineticLaw::isSetTimeUnits() const "
/**
   * (SBML Level&nbsp;2 Version&nbsp;1 only) Predicate returning @c true if
   * this SpeciesReference\'s \'timeUnits\' attribute is set.
   *
   * @return @c true if the \'timeUnits\' attribute of this KineticLaw object
   * is set, @c false otherwise.
   *
   * *
 * @note The attributes \'timeUnits\' and \'substanceUnits\' are present only
 * in SBML Level&nbsp;2 Version&nbsp;1.  In SBML Level&nbsp;2
 * Version&nbsp;2, the \'timeUnits\' and \'substanceUnits\' attributes were
 * removed.  For compatibility with new versions of SBML, users are
 * cautioned to avoid these attributes.
 * 
   */ public
";


%csmethodmodifiers KineticLaw::isSetSubstanceUnits() const "
/**
   * (SBML Level&nbsp;2 Version&nbsp;1 only) Predicate returning @c true if
   * this SpeciesReference\'s \'substanceUnits\' attribute is set.
   *
   * @return @c true if the \'substanceUnits\' attribute of this KineticLaw
   * object is set, @c false otherwise.
   *
   * *
 * @note The attributes \'timeUnits\' and \'substanceUnits\' are present only
 * in SBML Level&nbsp;2 Version&nbsp;1.  In SBML Level&nbsp;2
 * Version&nbsp;2, the \'timeUnits\' and \'substanceUnits\' attributes were
 * removed.  For compatibility with new versions of SBML, users are
 * cautioned to avoid these attributes.
 * 
   */ public
";


%csmethodmodifiers KineticLaw::setFormula(const std::string& formula) "
/**
   * Sets the mathematical expression of this KineticLaw instance to the
   * given @p formula.
   *
   * The given @p formula string is copied.  Internally, libSBML stores the
   * mathematical expression as an ASTNode.
   *
   * @param formula the mathematical expression to use, represented in
   * text-string form.
   *
   * @return integer value indicating success/failure of the
   * function. The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   *
   * @note @htmlinclude level-1-uses-text-string-math.html
   *
   * @see setMath(ASTNode math)
   */ public
";


%csmethodmodifiers KineticLaw::setMath(const ASTNode* math) "
/**
   * Sets the mathematical expression of this KineticLaw instance to a copy
   * of the given ASTNode.
   *
   * This is fundamentally identical to
   * @if java KineticLaw::setFormula(String formula)@else getFormula()@endif.
   * The latter is provided principally for compatibility compatibility with
   * SBML Level&nbsp;1, which represented mathematical formulas in text-string
   * form.
   *
   * @param math an ASTNode representing a formula tree.
   *
   * @return integer value indicating success/failure of the
   * function. The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   *
   * @see setFormula(string formula)
   */ public
";


%csmethodmodifiers KineticLaw::setTimeUnits(const std::string& sid) "
/**
   * (SBML Level&nbsp;2 Version&nbsp;1 only) Sets the \'timeUnits\' attribute
   * of this KineticLaw object to a copy of the identifier in @p sid.
   *
   * @param sid the identifier of the units to use.
   *
   * @return integer value indicating success/failure of the
   * function. The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   *
   * *
 * @note The attributes \'timeUnits\' and \'substanceUnits\' are present only
 * in SBML Level&nbsp;2 Version&nbsp;1.  In SBML Level&nbsp;2
 * Version&nbsp;2, the \'timeUnits\' and \'substanceUnits\' attributes were
 * removed.  For compatibility with new versions of SBML, users are
 * cautioned to avoid these attributes.
 * 
   */ public
";


%csmethodmodifiers KineticLaw::setSubstanceUnits(const std::string& sid) "
/**
   * (SBML Level&nbsp;2 Version&nbsp;1 only) Sets the \'substanceUnits\'
   * attribute of this KineticLaw object to a copy of the identifier given
   * in @p sid.
   *
   * @param sid the identifier of the units to use.
   *
   * @return integer value indicating success/failure of the
   * function. The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   *
   * *
 * @note The attributes \'timeUnits\' and \'substanceUnits\' are present only
 * in SBML Level&nbsp;2 Version&nbsp;1.  In SBML Level&nbsp;2
 * Version&nbsp;2, the \'timeUnits\' and \'substanceUnits\' attributes were
 * removed.  For compatibility with new versions of SBML, users are
 * cautioned to avoid these attributes.
 * 
   */ public
";


%csmethodmodifiers KineticLaw::unsetTimeUnits "
/**
   * (SBML Level&nbsp;2 Version&nbsp;1 only) Unsets the \'timeUnits\'
   * attribugte of this KineticLaw object.
   *
   * @return integer value indicating success/failure of the
   * function. The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   *
   * *
 * @note The attributes \'timeUnits\' and \'substanceUnits\' are present only
 * in SBML Level&nbsp;2 Version&nbsp;1.  In SBML Level&nbsp;2
 * Version&nbsp;2, the \'timeUnits\' and \'substanceUnits\' attributes were
 * removed.  For compatibility with new versions of SBML, users are
 * cautioned to avoid these attributes.
 * 
   */ public
";


%csmethodmodifiers KineticLaw::unsetSubstanceUnits "
/**
   * (SBML Level&nbsp;2 Version&nbsp;1 only) Unsets the \'substanceUnits\'
   * attribute of this KineticLaw object.
   *
   * @return integer value indicating success/failure of the
   * function. The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   *
   * *
 * @note The attributes \'timeUnits\' and \'substanceUnits\' are present only
 * in SBML Level&nbsp;2 Version&nbsp;1.  In SBML Level&nbsp;2
 * Version&nbsp;2, the \'timeUnits\' and \'substanceUnits\' attributes were
 * removed.  For compatibility with new versions of SBML, users are
 * cautioned to avoid these attributes.
 * 
   */ public
";


%csmethodmodifiers KineticLaw::addParameter(const Parameter* p) "
/**
   * Adds a copy of the given Parameter object to the list of local
   * parameters in this KineticLaw.
   *
   * @param p the Parameter to add
   *
   * @return integer value indicating success/failure of the
   * function. The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_DUPLICATE_OBJECT_ID LIBSBML_DUPLICATE_OBJECT_ID @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   *
   * * 
 * @note This method should be used with some caution.  The fact that this
 * method @em copies the object passed to it means that the caller will be
 * left holding a physically different object instance than the one contained
 * inside this object.  Changes made to the original object instance (such as
 * resetting attribute values) will <em>not affect the instance in this
 * object</em>.  In addition, the caller should make sure to free the
 * original object if it is no longer being used, or else a memory leak will
 * result.  Please see other methods on this class (particularly a
 * corresponding method whose name begins with the word <code>create</code>)
 * for alternatives that do not lead to these issues.
 *
 * 
   *
   * @see createParameter()
   */ public
";


%csmethodmodifiers KineticLaw::addLocalParameter(const LocalParameter* p) "
/**
   * Adds a copy of the given LocalParameter object to the list of local
   * parameters in this KineticLaw.
   *
   * @param p the LocalParameter to add
   *
   * @return integer value indicating success/failure of the
   * function. The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_DUPLICATE_OBJECT_ID LIBSBML_DUPLICATE_OBJECT_ID @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   *
   * * 
 * @note This method should be used with some caution.  The fact that this
 * method @em copies the object passed to it means that the caller will be
 * left holding a physically different object instance than the one contained
 * inside this object.  Changes made to the original object instance (such as
 * resetting attribute values) will <em>not affect the instance in this
 * object</em>.  In addition, the caller should make sure to free the
 * original object if it is no longer being used, or else a memory leak will
 * result.  Please see other methods on this class (particularly a
 * corresponding method whose name begins with the word <code>create</code>)
 * for alternatives that do not lead to these issues.
 *
 * 
   *
   * @see createLocalParameter()
   */ public
";


%csmethodmodifiers KineticLaw::createParameter "
/**
   * Creates a new Parameter object, adds it to this KineticLaw\'s list of
   * local parameters, and returns the Parameter object created.
   *
   * @return a new Parameter object instance
   *
   * @see addParameter(Parameter p)
   */ public
";


%csmethodmodifiers KineticLaw::createLocalParameter "
/**
   * Creates a new LocalParameter object, adds it to this KineticLaw\'s list
   * of local parameters, and returns the LocalParameter object created.
   *
   * @return a new LocalParameter object instance
   *
   * @see addLocalParameter(LocalParameter p)
   */ public
";


%csmethodmodifiers KineticLaw::getListOfParameters() const "
/**
   * Returns the list of local parameters in this KineticLaw object.
   * 
   * @return the list of Parameters for this KineticLaw.
   */ public
";


%csmethodmodifiers KineticLaw::getListOfParameters "
/**
   * Returns the list of local parameters in this KineticLaw object.
   * 
   * @return the list of Parameters for this KineticLaw.
   */ public
";


%csmethodmodifiers KineticLaw::getListOfLocalParameters() const "
/**
   * Returns the list of local parameters in this KineticLaw object.
   * 
   * @return the list of LocalParameters for this KineticLaw.
   */ public
";


%csmethodmodifiers KineticLaw::getListOfLocalParameters "
/**
   * Returns the list of local parameters in this KineticLaw object.
   * 
   * @return the list of LocalParameters for this KineticLaw.
   */ public
";


%csmethodmodifiers KineticLaw::getParameter "
/**
   * Returns the nth Parameter object in the list of local parameters in
   * this KineticLaw instance.
   *
   * @param n the index of the Parameter object sought
   * 
   * @return the nth Parameter of this KineticLaw.
   */ public
";


%csmethodmodifiers KineticLaw::getParameter(unsigned int n) "
/**
   * Returns the nth Parameter object in the list of local parameters in
   * this KineticLaw instance.
   *
   * @param n the index of the Parameter object sought
   * 
   * @return the nth Parameter of this KineticLaw.
   */ public
";


%csmethodmodifiers KineticLaw::getLocalParameter "
/**
   * Returns the nth LocalParameter object in the list of local parameters in
   * this KineticLaw instance.
   *
   * @param n the index of the LocalParameter object sought
   * 
   * @return the nth LocalParameter of this KineticLaw.
   */ public
";


%csmethodmodifiers KineticLaw::getLocalParameter(unsigned int n) "
/**
   * Returns the nth LocalParameter object in the list of local parameters in
   * this KineticLaw instance.
   *
   * @param n the index of the LocalParameter object sought
   * 
   * @return the nth LocalParameter of this KineticLaw.
   */ public
";


%csmethodmodifiers KineticLaw::getParameter(const std::string& sid) const "
/**
   * Returns a local parameter based on its identifier.
   *
   * @param sid the identifier of the Parameter being sought.
   * 
   * @return the Parameter object in this KineticLaw instace having the
   * given \'id\', or @c null if no such Parameter exists.
   */ public
";


%csmethodmodifiers KineticLaw::getParameter(const std::string& sid) "
/**
   * Returns a local parameter based on its identifier.
   *
   * @param sid the identifier of the Parameter being sought.
   * 
   * @return the Parameter object in this KineticLaw instace having the
   * given \'id\', or @c null if no such Parameter exists.
   */ public
";


%csmethodmodifiers KineticLaw::getLocalParameter(const std::string& sid) const "
/**
   * Returns a local parameter based on its identifier.
   *
   * @param sid the identifier of the LocalParameter being sought.
   * 
   * @return the LocalParameter object in this KineticLaw instace having the
   * given \'id\', or @c null if no such LocalParameter exists.
   */ public
";


%csmethodmodifiers KineticLaw::getLocalParameter(const std::string& sid) "
/**
   * Returns a local parameter based on its identifier.
   *
   * @param sid the identifier of the LocalParameter being sought.
   * 
   * @return the LocalParameter object in this KineticLaw instace having the
   * given \'id\', or @c null if no such LocalParameter exists.
   */ public
";


%csmethodmodifiers KineticLaw::getNumParameters() const "
/**
   * Returns the number of local parameters in this KineticLaw instance.
   * 
   * @return the number of Parameters in this KineticLaw.
   */ public
";


%csmethodmodifiers KineticLaw::getNumLocalParameters() const "
/**
   * Returns the number of local parameters in this KineticLaw instance.
   * 
   * @return the number of LocalParameters in this KineticLaw.
   */ public
";


%csmethodmodifiers KineticLaw::getDerivedUnitDefinition "
/**
   * Calculates and returns a UnitDefinition that expresses the units of
   * measurement assumed for the \'math\' expression of this KineticLaw.
   *
   * *
 * 
 * The units are calculated based on the mathematical expression in the
 * KineticLaw and the model quantities referenced by <code>&lt;ci&gt;</code>
 * elements used within that expression.  The
 * @if java KineticLaw::getDerivedUnitDefinition()@else getDerivedUnitDefinition()@endif
 * method returns the calculated units.
 * 
   *
   * * 
 * @note The functionality that facilitates unit analysis depends on the
 * model as a whole.  Thus, in cases where the object has not been added to
 * a model or the model itself is incomplete, unit analysis is not possible
 * and this method will return @c null.
 *
 * 
   *
   * *
 * @warning <span class=\'warning\'>Note that it is possible the \'math\'
 * expression in the KineticLaw contains pure numbers or parameters with
 * undeclared units.  In those cases, it is not possible to calculate the
 * units of the overall expression without making assumptions.  LibSBML does
 * not make assumptions about the units, and
 * KineticLaw::getDerivedUnitDefinition() returns the units as far as it is
 * able to determine them.  For example, in an expression <em>X + Y</em>, if
 * <em>X</em> has unambiguously-defined units and <em>Y</em> does not, it
 * will return the units of <em>X</em>.  <strong>It is important that callers
 * also invoke the method</strong>
 * KineticLaw::containsUndeclaredUnits()<strong>to determine whether this
 * situation holds</strong>.  Callers may wish to take suitable actions in
 * those scenarios.</span>
 *
   * 
   * @return a UnitDefinition that expresses the units of the math 
   * expression of this KineticLaw, or @c null if one cannot be constructed.
   *
   * @see containsUndeclaredUnits()
   */ public
";


%csmethodmodifiers KineticLaw::getDerivedUnitDefinition() const "
/**
   * Calculates and returns a UnitDefinition that expresses the units of
   * measurement assumed for the \'math\' expression of this KineticLaw.
   *
   * *
 * 
 * The units are calculated based on the mathematical expression in the
 * KineticLaw and the model quantities referenced by <code>&lt;ci&gt;</code>
 * elements used within that expression.  The
 * @if java KineticLaw::getDerivedUnitDefinition()@else getDerivedUnitDefinition()@endif
 * method returns the calculated units.
 * 
   *
   * * 
 * @note The functionality that facilitates unit analysis depends on the
 * model as a whole.  Thus, in cases where the object has not been added to
 * a model or the model itself is incomplete, unit analysis is not possible
 * and this method will return @c null.
 *
 * 
   *
   * *
 * @warning <span class=\'warning\'>Note that it is possible the \'math\'
 * expression in the KineticLaw contains pure numbers or parameters with
 * undeclared units.  In those cases, it is not possible to calculate the
 * units of the overall expression without making assumptions.  LibSBML does
 * not make assumptions about the units, and
 * KineticLaw::getDerivedUnitDefinition() returns the units as far as it is
 * able to determine them.  For example, in an expression <em>X + Y</em>, if
 * <em>X</em> has unambiguously-defined units and <em>Y</em> does not, it
 * will return the units of <em>X</em>.  <strong>It is important that callers
 * also invoke the method</strong>
 * KineticLaw::containsUndeclaredUnits()<strong>to determine whether this
 * situation holds</strong>.  Callers may wish to take suitable actions in
 * those scenarios.</span>
 *
   *
   * @return a UnitDefinition that expresses the units of the math 
   * expression of this KineticLaw, or @c null if one cannot be constructed.
   *
   * @see containsUndeclaredUnits()
   */ public
";


%csmethodmodifiers KineticLaw::containsUndeclaredUnits "
/**
   * Predicate returning @c true if the math expression of this KineticLaw
   * contains parameters/numbers with undeclared units.
   * 
   * @return @c true if the math expression of this KineticLaw
   * includes parameters/numbers 
   * with undeclared units, @c false otherwise.
   *
   * @note A return value of @c true indicates that the UnitDefinition
   * returned by
   * @if java KineticLaw::getDerivedUnitDefinition()@else getDerivedUnitDefinition()@endif
   * may not accurately represent the units of the expression.
   *
   * @see getDerivedUnitDefinition()
   */ public
";


%csmethodmodifiers KineticLaw::containsUndeclaredUnits() const "
/**
   * Predicate returning @c true if the math expression of this KineticLaw
   * contains parameters/numbers with undeclared units.
   * 
   * @return @c true if the math expression of this KineticLaw
   * includes parameters/numbers 
   * with undeclared units, @c false otherwise.
   *
   * @note A return value of @c true indicates that the UnitDefinition
   * returned by
   * @if java KineticLaw::getDerivedUnitDefinition()@else getDerivedUnitDefinition()@endif
   * may not accurately represent the units of the expression.
   *
   * @see getDerivedUnitDefinition()
   */ public
";


%csmethodmodifiers KineticLaw::removeParameter(unsigned int n) "
/**
   * Removes the nth Parameter object in the list of local parameters 
   * in this KineticLaw instance and returns a pointer to it.
   *
   * The caller owns the returned object and is responsible for deleting it.
   *
   * @param n the index of the Parameter object to remove
   * 
   * @return the Parameter object removed.  As mentioned above, 
   * the caller owns the returned item. @c null is returned if the given index 
   * is out of range.
   */ public
";


%csmethodmodifiers KineticLaw::removeLocalParameter(unsigned int n) "
/**
   * Removes the nth LocalParameter object in the list of local parameters 
   * in this KineticLaw instance and returns a pointer to it.
   *
   * The caller owns the returned object and is responsible for deleting it.
   *
   * @param n the index of the LocalParameter object to remove
   * 
   * @return the LocalParameter object removed.  As mentioned above, 
   * the caller owns the returned item. @c null is returned if the given index 
   * is out of range.
   */ public
";


%csmethodmodifiers KineticLaw::removeParameter(const std::string& sid) "
/**
   * Removes a Parameter object with the given identifier in the list of
   * local parameters in this KineticLaw instance and returns a pointer to it.
   *
   * The caller owns the returned object and is responsible for deleting it.
   *
   * @param sid the identifier of the Parameter to remove
   * 
   * @return the Parameter object removed.  As mentioned above, the 
   * caller owns the returned object. @c null is returned if no Parameter
   * object with the identifier exists in this KineticLaw instance.
   */ public
";


%csmethodmodifiers KineticLaw::removeLocalParameter(const std::string& sid) "
/**
   * Removes a LocalParameter object with the given identifier in the list of
   * local parameters in this KineticLaw instance and returns a pointer to it.
   *
   * The caller owns the returned object and is responsible for deleting it.
   *
   * @param sid the identifier of the LocalParameter to remove
   * 
   * @return the LocalParameter object removed.  As mentioned above, the 
   * caller owns the returned object. @c null is returned if no LocalParameter
   * object with the identifier exists in this KineticLaw instance.
   */ public
";


%csmethodmodifiers KineticLaw::setSBMLDocument(SBMLDocument* d) "
/**
   * Sets the parent SBMLDocument of this SBML object.
   *
   * @param d the SBMLDocument to use.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers KineticLaw::connectToChild "
/**
   * Sets this SBML object to child SBML objects (if any).
   * (Creates a child-parent relationship by the parent)
   *
   * Subclasses must override this function if they define one ore more child
   * elements.  Basically, this function needs to be called in constructor,
   * copy constructor and assignment operator.
   *
   * @see setSBMLDocument
   * @see enablePackageInternal
   */ /* libsbml-internal */ public new
";


%csmethodmodifiers KineticLaw::enablePackageInternal(const std::string& pkgURI, const std::string& pkgPrefix, bool flag) "
/**
   * Enables/Disables the given package with this element and child
   * elements (if any).
   * (This is an internal implementation for enablePackage function)
   *
   * @note Subclasses of the SBML Core package in which one or more child
   * elements are defined must override this function.
   */ /* libsbml-internal */ public new
";


%csmethodmodifiers KineticLaw::getTypeCode() const "
/**
   * Returns the libSBML type code for this %SBML object.
   * 
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object:
   * @link libsbmlcs.libsbml.SBML_KINETIC_LAW SBML_KINETIC_LAW@endlink (default).
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see getElementName()
   * @see getPackageName()
   */ public new
";


%csmethodmodifiers KineticLaw::getElementName() const "
/**
   * Returns the XML element name of this object, which for Species, is
   * always @c \'kineticLaw\'.
   * 
   * @return the name of this element, i.e., @c \'kineticLaw\'.
   */ public new
";


%csmethodmodifiers KineticLaw::getElementPosition() const "
/**
   * Return the position of this element.
   *
   * @return the ordinal position of the element with respect to its
   * siblings or -1 (default) to indicate the position is not significant.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers KineticLaw::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers KineticLaw::hasRequiredAttributes() const "
/**
   * Predicate returning @c true if all the required attributes for this
   * KineticLaw object have been set.
   *
   * @note The required attributes for a KineticLaw object are:
   * @li \'formula\' (SBML Level&nbsp;1 only)
   *
   * @return a bool value indicating whether all the required
   * attributes for this object have been defined.
   */ public new
";


%csmethodmodifiers KineticLaw::hasRequiredElements() const "
/**
   * Predicate returning @c true if all the required elements for this
   * KineticLaw object have been set.
   *
   * @note The required elements for a KineticLaw object are:
   * @li \'math\'
   *
   * @return a bool value indicating whether all the required
   * elements for this object have been defined.
   */ public new
";


%csmethodmodifiers KineticLaw::removeFromParentAndDelete "
/**
   * Finds this KineticLaw\'s Reaction parent and calls unsetKineticLaw() on
   * it, indirectly deleting itself.
   *
   * Overridden from the SBase function since the parent is not a ListOf.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers KineticLaw::renameSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames all the @c SIdRef attributes on this element, including any
   * found in MathML.
   *
   * *
 * 

 * In SBML, object identifiers are of a data type called <code>SId</code>.
 * In SBML Level&nbsp;3, an explicit data type called <code>SIdRef</code> was
 * introduced for attribute values that refer to <code>SId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to an identifier\', but the effective
 * data type was the same as <code>SIdRef</code>in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>SIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 *
 *
   * 
   * This method works by looking at all attributes and (if appropriate)
   * mathematical formulas, comparing the identifiers to the value of @p
   * oldid.  If any matches are found, the matching identifiers are replaced
   * with @p newid.  The method does @em not descend into child elements.
   *
   * @param oldid the old identifier
   * @param newid the new identifier
   */ public
";


%csmethodmodifiers KineticLaw::renameUnitSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames all the @c UnitSIdRef attributes on this element
   *
   * *
 * 
 * In SBML, unit definitions have identifiers of type <code>UnitSId</code>.  In
 * SBML Level&nbsp;3, an explicit data type called <code>UnitSIdRef</code> was
 * introduced for attribute values that refer to <code>UnitSId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to a unit identifier\', but the effective
 * data type was the same as <code>UnitSIdRef</code> in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>UnitSIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 * 
 *
   *
   * This method works by looking at all unit identifier attribute values
   * (including, if appropriate, inside mathematical formulas), comparing the
   * unit identifiers to the value of @p oldid.  If any matches are found,
   * the matching identifiers are replaced with @p newid.  The method does
   * @em not descend into child elements.
   * 
   * @param oldid the old identifier
   * @param newid the new identifier
   */ public
";


%csmethodmodifiers KineticLaw::getInternalId() const "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers KineticLaw::setInternalId(std::string id) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers KineticLaw::replaceSIDWithFunction(const std::string& id, const ASTNode* function) "
/**
   * Replace all nodes with the name \'id\' from the child \'math\' object with the provided function. 
   *
   */ /* libsbml-internal */ public
";


%csmethodmodifiers KineticLaw::divideAssignmentsToSIdByFunction(const std::string& id, const ASTNode* function) "
/**
   * If this reaction id matches the provided \'id\' string, replace the \'math\' object with the function (existing/function). 
   */ /* libsbml-internal */ public
";


%csmethodmodifiers KineticLaw::multiplyAssignmentsToSIdByFunction(const std::string& id, const ASTNode* function) "
/**
   * If this assignment assigns a value to the \'id\' element, replace the \'math\' object with the function (existing*function). 
   */ /* libsbml-internal */ public
";


%csmethodmodifiers KineticLaw::createObject(XMLInputStream& stream) "
/**
   * Create and return an SBML object of this class, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or @c null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers KineticLaw::readOtherXML(XMLInputStream& stream) "
/**
   * Subclasses should override this method to read (and store) XHTML,
   * MathML, etc. directly from the XMLInputStream.
   *
   * @return true if the subclass read from the stream, false otherwise.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers KineticLaw::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers KineticLaw::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Subclasses should override this method to read values from the given
   * XMLAttributes set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers KineticLaw::readL1Attributes(const XMLAttributes& attributes) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers KineticLaw::readL2Attributes(const XMLAttributes& attributes) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers KineticLaw::readL3Attributes(const XMLAttributes& attributes) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers KineticLaw::writeAttributes(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   */ /* libsbml-internal */ public
";


%typemap(csimports) SimpleSpeciesReference "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Implementation of %SBML\'s %SimpleSpeciesReference
 * construct.
 *
 * As mentioned in the description of Reaction, every species that enters
 * into a given reaction must appear in that reaction\'s lists of reactants,
 * products and/or modifiers.  In an SBML model, all species that may
 * participate in any reaction are listed in the \'listOfSpecies\' element of
 * the top-level Model object.  Lists of products, reactants and modifiers
 * in Reaction objects do not introduce new species, but rather, they refer
 * back to those listed in the model\'s top-level \'listOfSpecies\'.  For
 * reactants and products, the connection is made using SpeciesReference
 * objects; for modifiers, it is made using ModifierSpeciesReference
 * objects.  SimpleSpeciesReference is an abstract type that serves as the
 * parent class of both SpeciesReference and ModifierSpeciesReference.  It
 * is used simply to hold the attributes and elements that are common to
 * the latter two structures.
 *
 * The SimpleSpeciesReference structure has a mandatory attribute,
 * \'species\', which must be a text string conforming to the identifer
 * syntax permitted in %SBML.  This attribute is inherited by the
 * SpeciesReference and ModifierSpeciesReference subclasses derived from
 * SimpleSpeciesReference.  The value of the \'species\' attribute must be
 * the identifier of a species defined in the enclosing Model.  The species
 * is thereby declared as participating in the reaction being defined.  The
 * precise role of that species as a reactant, product, or modifier in the
 * reaction is determined by the subclass of SimpleSpeciesReference (i.e.,
 * either SpeciesReference or ModifierSpeciesReference) in which the
 * identifier appears.
 * 
 * SimpleSpeciesReference also contains an optional attribute, \'id\',
 * allowing instances to be referenced from other structures.  No SBML
 * structures currently do this; however, such structures are anticipated
 * in future SBML Levels.
 *  
 */
"


%csmethodmodifiers SimpleSpeciesReference::SimpleSpeciesReference(unsigned int level, unsigned int version) "
/**
   * Creates a new SimpleSpeciesReference using the given SBML @p level and @p version
   * values.
   *
   * @param level a long integer, the SBML Level to assign to this SimpleSpeciesReference
   *
   * @param version a long integer, the SBML Version to assign to this
   * SimpleSpeciesReference
   *
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the given @p level and @p version combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent SBMLDocument object.
   */ public
";


%csmethodmodifiers SimpleSpeciesReference::SimpleSpeciesReference(const SimpleSpeciesReference& orig) "
/**
   * Copy constructor; creates a copy of this SimpleSpeciesReference.
   *
   * @param orig the object to copy.
   * 
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the argument @p orig is @c null.
   */ public
";


%csmethodmodifiers SimpleSpeciesReference::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor.
   *
   * @param v the SBMLVisitor instance to be used.
   *
   * @return the result of calling <code>v.visit()</code>.
   */ public
";


%csmethodmodifiers SimpleSpeciesReference::getId() const "
/**
   * Returns the value of the \'id\' attribute of this SimpleSpeciesReference.
   * 
   * @return the id of this SimpleSpeciesReference.
   */ public new
";


%csmethodmodifiers SimpleSpeciesReference::getName() const "
/**
   * Returns the value of the \'name\' attribute of this SimpleSpeciesReference.
   * 
   * @return the name of this SimpleSpeciesReference.
   */ public new
";


%csmethodmodifiers SimpleSpeciesReference::getSpecies() const "
/**
   * Get the value of the \'species\' attribute.
   * 
   * @return the value of the attribute \'species\' for this
   * SimpleSpeciesReference.
   */ public
";


%csmethodmodifiers SimpleSpeciesReference::isSetId() const "
/**
   * Predicate returning @c true if this
   * SimpleSpeciesReference\'s \'id\' attribute is set.
   *
   * @return @c true if the \'id\' attribute of this SimpleSpeciesReference is
   * set, @c false otherwise.
   */ public new
";


%csmethodmodifiers SimpleSpeciesReference::isSetName() const "
/**
   * Predicate returning @c true if this
   * SimpleSpeciesReference\'s \'name\' attribute is set.
   *
   * @return @c true if the \'name\' attribute of this SimpleSpeciesReference is
   * set, @c false otherwise.
   */ public new
";


%csmethodmodifiers SimpleSpeciesReference::isSetSpecies() const "
/**
   * Predicate returning @c true if this
   * SimpleSpeciesReference\'s \'species\' attribute is set.
   * 
   * @return @c true if the \'species\' attribute of this
   * SimpleSpeciesReference is set, @c false otherwise.
   */ public
";


%csmethodmodifiers SimpleSpeciesReference::setSpecies(const std::string& sid) "
/**
   * Sets the \'species\' attribute of this SimpleSpeciesReference.
   *
   * The identifier string passed in @p sid is copied.
   *
   * @param sid the identifier of a species defined in the enclosing
   * Model\'s ListOfSpecies.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers SimpleSpeciesReference::setId(const std::string& sid) "
/**
   * Sets the value of the \'id\' attribute of this SimpleSpeciesReference.
   *
   * The string @p sid is copied.
   *
   * *
 * 
 * SBML has strict requirements for the syntax of identifiers, that is, the
 * values of the \'id\' attribute present on most types of SBML objects.
 * The following is a summary of the definition of the SBML identifier type 
 * <code>SId</code>, which defines the permitted syntax of identifiers.  We
 * express the syntax using an extended form of BNF notation: 
 * <pre style=\'margin-left: 2em; border: none; font-weight: bold; font-size: 13px; color: black\'>
 * letter ::= \'a\'..\'z\',\'A\'..\'Z\'
 * digit  ::= \'0\'..\'9\'
 * idChar ::= letter | digit | \'_\'
 * SId    ::= ( letter | \'_\' ) idChar*
 * </pre>
 * The characters <code>(</code> and <code>)</code> are used for grouping, the
 * character <code>*</code> \'zero or more times\', and the character
 * <code>|</code> indicates logical \'or\'.  The equality of SBML identifiers is
 * determined by an exact character sequence match; i.e., comparisons must be
 * performed in a case-sensitive manner.  In addition, there are a few
 * conditions for the uniqueness of identifiers in an SBML model.  Please
 * consult the SBML specifications for the exact details of the uniqueness
 * requirements.
 * 
 *
   *
   * @param sid the string to use as the identifier of this SimpleSpeciesReference
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   */ public new
";


%csmethodmodifiers SimpleSpeciesReference::setName(const std::string& name) "
/**
   * Sets the value of the \'name\' attribute of this SimpleSpeciesReference.
   *
   * The string in @p name is copied.
   *
   * @param name the new name for the SimpleSpeciesReference
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   */ public new
";


%csmethodmodifiers SimpleSpeciesReference::unsetId "
/**
   * Unsets the value of the \'id\' attribute of this SimpleSpeciesReference.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public new
";


%csmethodmodifiers SimpleSpeciesReference::unsetName "
/**
   * Unsets the value of the \'name\' attribute of this SimpleSpeciesReference.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public new
";


%csmethodmodifiers SimpleSpeciesReference::isModifier() const "
/**
   * Predicate returning @c true if this
   * is a ModifierSpeciesReference.
   * 
   * @return @c true if this SimpleSpeciesReference\'s subclass is
   * ModiferSpeciesReference, @c false if it is a plain SpeciesReference.
   */ public
";


%csmethodmodifiers SimpleSpeciesReference::renameSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames all the @c SIdRef attributes on this element, including any
   * found in MathML.
   *
   * *
 * 

 * In SBML, object identifiers are of a data type called <code>SId</code>.
 * In SBML Level&nbsp;3, an explicit data type called <code>SIdRef</code> was
 * introduced for attribute values that refer to <code>SId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to an identifier\', but the effective
 * data type was the same as <code>SIdRef</code>in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>SIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 *
 *
   * 
   * This method works by looking at all attributes and (if appropriate)
   * mathematical formulas, comparing the identifiers to the value of @p
   * oldid.  If any matches are found, the matching identifiers are replaced
   * with @p newid.  The method does @em not descend into child elements.
   *
   * @param oldid the old identifier
   * @param newid the new identifier
   */ public
";


%csmethodmodifiers SimpleSpeciesReference::hasRequiredAttributes() const "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers SimpleSpeciesReference::SimpleSpeciesReference(SBMLNamespaces* sbmlns) "
/**
   * Creates a new SimpleSpeciesReference using the given SBMLNamespaces object
   * @p sbmlns.
   *
   * *
 *  
 * The SBMLNamespaces object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML\'s SBMLNamespaces facilities is to create an
 * SBMLNamespaces object somewhere in a program once, then hand that object
 * as needed to object constructors that accept SBMLNamespaces as arguments.
 *
 * 
   *
   * @param sbmlns an SBMLNamespaces object.
   *
   * @note Upon the addition of a SimpleSpeciesReference object to an
   * SBMLDocument (e.g., using Model::addSimpleSpeciesReference()), the
   * SBML XML namespace of the document @em overrides the value used when
   * creating the SimpleSpeciesReference object via this constructor.  This
   * is necessary to ensure that an SBML document is a consistent
   * structure.  Nevertheless, the ability to supply the values at the time
   * of creation of a SimpleSpeciesReference is an important aid to
   * producing valid SBML.  Knowledge of the intented SBML Level and
   * Version determine whether it is valid to assign a particular value to
   * an attribute, or whether it is valid to add an object to an existing
   * SBMLDocument.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SimpleSpeciesReference::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SimpleSpeciesReference::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Subclasses should override this method to read values from the given
   * XMLAttributes set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SimpleSpeciesReference::readL1Attributes(const XMLAttributes& attributes) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers SimpleSpeciesReference::readL2Attributes(const XMLAttributes& attributes) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers SimpleSpeciesReference::readL3Attributes(const XMLAttributes& attributes) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers SimpleSpeciesReference::writeAttributes(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   */ /* libsbml-internal */ public
";


%typemap(csimports) SpeciesReference "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Implementation of %SBML\'s %SpeciesReference construct.
 *
 * The Reaction structure provides a way to express which species act as
 * reactants and which species act as products in a reaction.  In a given
 * reaction, references to those species acting as reactants and/or
 * products are made using instances of SpeciesReference structures in a
 * Reaction object\'s lists of reactants and products.
 *
 * A species can occur more than once in the lists of reactants and
 * products of a given Reaction instance.  The effective stoichiometry for
 * a species in a reaction is the sum of the stoichiometry values given on
 * the SpeciesReference object in the list of products minus the sum of
 * stoichiometry values given on the SpeciesReference objects in the list
 * of reactants.  A positive value indicates the species is effectively a
 * product and a negative value indicates the species is effectively a
 * reactant.  SBML places no restrictions on the effective stoichiometry of
 * a species in a reaction; for example, it can be zero.  In the following
 * SBML fragment, the two reactions have the same effective stoichiometry
 * for all their species:
 * @verbatim
 <reaction id=\'x\'>
     <listOfReactants>
         <speciesReference species=\'a\'/>
         <speciesReference species=\'a\'/>
         <speciesReference species=\'b\'/>
     </listOfReactants>
     <listOfProducts>
         <speciesReference species=\'c\'/>
         <speciesReference species=\'b\'/>
     </listProducts>
 </reaction>
 <reaction id=\'y\'>
     <listOfReactants>
         <speciesReference species=\'a\' stoichiometry=\'2\'/>
     </listOfReactants>
     <listOfProducts>
         <speciesReference species=\'c\'/>
     </listProducts>
 </reaction>
 @endverbatim
 *
 * The precise structure of SpeciesReference differs between SBML
 * Level&nbsp;2 and Level&nbsp;3.  We discuss the two variants in separate
 * sections below.
 * 
 * @section spr-l2 SpeciesReference in SBML Level 2
 *
 * The mandatory \'species\' attribute of SpeciesReference must have as its
 * value the identifier of an existing species defined in the enclosing
 * Model.  The species is thereby designated as a reactant or product in
 * the reaction.  Which one it is (i.e., reactant or product) is indicated
 * by whether the SpeciesReference appears in the Reaction\'s \'reactant\' or
 * \'product\' lists.
 * 
 * Product and reactant stoichiometries can be specified using
 * <em>either</em> \'stoichiometry\' or \'stoichiometryMath\' in a
 * SpeciesReference object.  The \'stoichiometry\' attribute is of type
 * double and should contain values greater than zero (0).  The
 * \'stoichiometryMath\' element is implemented as an element containing a
 * MathML expression.  These two are mutually exclusive; only one of
 * \'stoichiometry\' or \'stoichiometryMath\' should be defined in a given
 * SpeciesReference instance.  When neither the attribute nor the element
 * is present, the value of \'stoichiometry\' in the SpeciesReference
 * instance defaults to @c 1.
 *
 * For maximum interoperability, the \'stoichiometry\' attribute should be
 * used in preference to \'stoichiometryMath\' when a species\' stoichiometry
 * is a simple scalar number (integer or decimal).  When the stoichiometry
 * is a rational number, or when it is a more complicated formula,
 * \'stoichiometryMath\' must be used.  The MathML expression in
 * \'stoichiometryMath\' may also refer to identifiers of entities in a model
 * (except reaction identifiers).  However, the only species identifiers
 * that can be used in \'stoichiometryMath\' are those referenced in the
 * Reaction list of reactants, products and modifiers.
 *
 * The following is a simple example of a species reference for species @c
 * X0, with stoichiometry @c 2, in a list of reactants within a reaction
 * having the identifier @c J1:
 * @verbatim
 <model>
     ...
     <listOfReactions>
         <reaction id=\'J1\'>
             <listOfReactants>
                 <speciesReference species=\'X0\' stoichiometry=\'2\'>
             </listOfReactants>
             ...
         </reaction>
         ...
     </listOfReactions>
     ...
 </model>
 @endverbatim
 *
 * The following is a more complex example of a species reference for
 * species X0, with a stoichiometry formula consisting of the parameter
 * @c x:
 * @verbatim
 <model>
     ...
     <listOfReactions>
         <reaction id=\'J1\'>
             <listOfReactants>
                 <speciesReference species=\'X0\'>
                     <stoichiometryMath>
                         <math xmlns=\'http://www.w3.org/1998/Math/MathML\'>
                             <ci>x</ci>
                         </math>
                     </stoichiometryMath>
                 </speciesReference>
             </listOfReactants>
             ...
         </reaction>
         ...
     </listOfReactions>
     ...
 </model>
 @endverbatim
 *
 *
 * @section spr-l3 SpeciesReference in SBML Level 3
 *
 * In Level 2\'s definition of a reaction, the stoichiometry attribute of a
 * SpeciesReference is actually a combination of two factors, the standard
 * biochemical stoichiometry and a conversion factor that may be needed to
 * translate the units of the species quantity to the units of the reaction
 * rate. Unfortunately, Level&nbsp;2 offers no direct way of decoupling
 * these two factors, or for explicitly indicating the units. The only way
 * to do it in Level&nbsp;2 is to use the StoichiometryMath object
 * associated with SpeciesReferences, and to reference SBML Parameter
 * objects from within the StoichiometryMath formula. This works because
 * Parameter offers a way to attach units to a numerical value, but the
 * solution is indirect and awkward for something that should be a simple
 * matter.  Moreover, the question of how to properly encode
 * stoichiometries in SBML reactions has caused much confusion among
 * implementors of SBML software.
 *
 * SBML Level&nbsp;3 approaches this problem differently.  It (1) extends
 * the the use of the SpeciesReference identifier to represent the value of
 * the \'stoichiometry\' attribute, (2) makes the \'stoichiometry\' attribute
 * optional, (3) removes StoichiometryMath, and (4) adds a new \'constant\'
 * bool attribute on SpeciesReference.
 *
 * As in Level&nbsp;2, the \'stoichiometry\' attribute is of type
 * @c double and should contain values greater than zero (@c 0).  A
 * missing \'stoichiometry\' implies that the stoichiometry is either
 * unknown, or to be obtained from an external source, or determined by an
 * InitialAssignment object or other SBML construct elsewhere in the model.
 *
 * A species reference\'s stoichiometry is set by its \'stoichiometry\'
 * attribute exactly once.  If the SpeciesReference object\'s \'constant\'
 * attribute has the value @c true, then the stoichiometry is fixed and
 * cannot be changed except by an InitialAssignment object.  These two
 * methods of setting the stoichiometry (i.e., using \'stoichiometry\'
 * directly, or using InitialAssignment) differ in that the \'stoichiometry\'
 * attribute can only be set to a literal floating-point number, whereas
 * InitialAssignment allows the value to be set using an arbitrary
 * mathematical expression.  (As an example, the approach could be used to
 * set the stoichiometry to a rational number of the form @em p/@em q,
 * where @em p and @em q are integers, something that is occasionally
 * useful in the context of biochemical reaction networks.)  If the species
 * reference\'s \'constant\' attribute has the value @c false, the species
 * reference\'s value may be overridden by an InitialAssignment or changed
 * by AssignmentRule or AlgebraicRule, and in addition, for simulation time
 * <em>t &gt; 0</em>, it may also be changed by a RateRule or Event
 * objects.  (However, some of these constructs are mutually exclusive; see
 * the SBML Level&nbsp;3 Version&nbsp;1 Core specifiation for more
 * details.)  It is not an error to define \'stoichiometry\' on a species
 * reference and also redefine the stoichiometry using an
 * InitialAssignment, but the \'stoichiometry\' attribute in that case is
 * ignored.
 *
 * The value of the \'id\' attribute of a SpeciesReference can be used as the
 * content of a <code>&lt;ci&gt;</code> element in MathML formulas
 * elsewhere in the model.  When the identifier appears in a MathML
 * <code>&lt;ci&gt;</code> element, it represents the stoichiometry of the
 * corresponding species in the reaction where the SpeciesReference object
 * instance appears.  More specifically, it represents the value of the
 * \'stoichiometry\' attribute on the SpeciesReference object.
 *
 * In SBML Level 3, the unit of measurement associated with the value of a
 * species\' stoichiometry is always considered to be @c dimensionless.
 * This has the following implications:
 * <ul>
 *
 * <li> When a species reference\'s identifier appears in mathematical
 * formulas elsewhere in the model, the unit associated with that value is
 * @c dimensionless.
 *
 * <li> The units of the \'math\' elements of AssignmentRule,
 * InitialAssignment and EventAssignment objects setting the stoichiometry
 * of the species reference should be @c dimensionless.
 *
 * <li> If a species reference\'s identifier is the subject of a RateRule,
 * the unit associated with the RateRule object\'s value should be
 * <code>dimensionless</code>/<em>time</em>, where <em>time</em> is the
 * model-wide unit of time set on the Model object.
 *
 * </ul>
 * 
 * 
 */
"


%typemap(csimports) ListOfSpeciesReferences "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Implementation of SBML\'s %ListOfSpeciesReferences
 * construct.
 *
 * *
 * 
 * The various ListOf___ classes in SBML are merely containers used for
 * organizing the main components of an SBML model.  All are derived from
 * the abstract class SBase, and inherit the various attributes and
 * subelements of SBase, such as \'metaid\' as and \'annotation\'.  The
 * ListOf___ classes do not add any attributes of their own.
 *
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 *
 * @htmlinclude listof-illustration.html
 *
 * Readers may wonder about the motivations for using the ListOf___
 * containers.  A simpler approach in XML might be to place the components
 * all directly at the top level of the model definition.  The choice made
 * in SBML is to group them within XML elements named after
 * ListOf<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from SBase means that software tools can add information @em about
 * the lists themselves into each list container\'s \'annotation\'.
 * 
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 *
 * 
 */
"


%csmethodmodifiers SpeciesReference::SpeciesReference(unsigned int level, unsigned int version) "
/**
   * Creates a new SpeciesReference using the given SBML @p level and @p version
   * values.
   *
   * @param level a long integer, the SBML Level to assign to this SpeciesReference
   *
   * @param version a long integer, the SBML Version to assign to this
   * SpeciesReference
   *
   * * 
 * @note Upon the addition of a SpeciesReference object to a Model (e.g.,
 * using Reaction::addReactant(SpeciesReference sr) or
 * Reaction::addProduct(SpeciesReference sr)), the SBML Level,
 * SBML Version and XML namespace of the document @em override the values
 * used when creating the SpeciesReference object via this constructor.
 * This is necessary to ensure that an SBML document is a consistent
 * structure.  Nevertheless, the ability to supply the values at the time
 * of creation of a SpeciesReference is an important aid to producing
 * valid SBML.  Knowledge of the intented SBML Level and Version
 * determine whether it is valid to assign a particular value to an
 * attribute, or whether it is valid to add an object to an existing
 * SBMLDocument.
   */ public
";


%csmethodmodifiers SpeciesReference::SpeciesReference(SBMLNamespaces* sbmlns) "
/**
   * Creates a new SpeciesReference using the given SBMLNamespaces object
   * @p sbmlns.
   *
   * @param sbmlns an SBMLNamespaces object.
   *
   * * 
 * @note Upon the addition of a SpeciesReference object to a Model (e.g.,
 * using Reaction::addReactant(SpeciesReference sr) or
 * Reaction::addProduct(SpeciesReference sr)), the SBML Level,
 * SBML Version and XML namespace of the document @em override the values
 * used when creating the SpeciesReference object via this constructor.
 * This is necessary to ensure that an SBML document is a consistent
 * structure.  Nevertheless, the ability to supply the values at the time
 * of creation of a SpeciesReference is an important aid to producing
 * valid SBML.  Knowledge of the intented SBML Level and Version
 * determine whether it is valid to assign a particular value to an
 * attribute, or whether it is valid to add an object to an existing
 * SBMLDocument.
   */ public
";


%csmethodmodifiers SpeciesReference::SpeciesReference(const SpeciesReference& orig) "
/**
   * Copy constructor; creates a copy of this SpeciesReference.
   * 
   * @param orig the SpeciesReference instance to copy.
   *
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the argument @p orig is @c null.
   */ public
";


%csmethodmodifiers SpeciesReference::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor.
   *
   * @param v the SBMLVisitor instance to be used.
   *
   * @return the result of calling <code>v.visit()</code>.
   */ public
";


%csmethodmodifiers SpeciesReference::clone() const "
/**
   * Creates and returns a deep copy of this SpeciesReference instance.
   *
   * @return a (deep) copy of this SpeciesReference.
   */ public new
";


%csmethodmodifiers SpeciesReference::initDefaults "
/**
   * Initializes the fields of this SpeciesReference object to \'typical\'
   * default values.
   *
   * The SBML SpeciesReference component has slightly different aspects and
   * default attribute values in different SBML Levels and Versions.
   * This method sets the values to certain common defaults, based
   * mostly on what they are in SBML Level&nbsp;2.  Specifically:
   * <ul>
   * <li> Sets attribute \'stoichiometry\' to @c 1.0
   * <li> (Applies to Level&nbsp;1 models only) Sets attribute \'denominator\' to @c 1
   * </ul>
   *
   * @see getDenominator()
   * @see setDenominator(int value)
   * @see getStoichiometry()
   * @see setStoichiometry(double value)
   * @see getStoichiometryMath()
   * @see setStoichiometryMath(StoichiometryMath math)
   */ public
";


%csmethodmodifiers SpeciesReference::getStoichiometry() const "
/**
   * Get the value of the \'stoichiometry\' attribute.
   *
   * In SBML Level 2, product and reactant stoichiometries can be specified
   * using <em>either</em> \'stoichiometry\' or \'stoichiometryMath\' in a
   * SpeciesReference object.  The former is to be used when a
   * stoichiometry is simply a scalar number, while the latter is for
   * occasions when it needs to be a rational number or it needs to
   * reference other mathematical expressions.  The \'stoichiometry\'
   * attribute is of type @c double and should contain values greater than
   * zero (@c 0).  The \'stoichiometryMath\' element is implemented as an
   * element containing a MathML expression.  These two are mutually
   * exclusive; only one of \'stoichiometry\' or \'stoichiometryMath\' should
   * be defined in a given SpeciesReference instance.  When neither the
   * attribute nor the element is present, the value of \'stoichiometry\' in
   * the SpeciesReference instance defaults to @c 1.  For maximum
   * interoperability between different software tools, the \'stoichiometry\'
   * attribute should be used in preference to \'stoichiometryMath\' when a
   * species\' stoichiometry is a simple scalar number (integer or
   * decimal).
   *
   * In SBML Level 3, there is no StoichiometryMath, and SpeciesReference
   * objects have only the \'stoichiometry\' attribute.
   * 
   * @return the value of the (scalar) \'stoichiometry\' attribute of this
   * SpeciesReference.
   *
   * @see getStoichiometryMath()
   */ public
";


%csmethodmodifiers SpeciesReference::getStoichiometryMath() const "
/**
   * Get the content of the \'stoichiometryMath\' subelement as an ASTNode
   * tree.
   *
   * The \'stoichiometryMath\' element exists only in SBML Level 2.  There,
   * product and reactant stoichiometries can be specified using
   * <em>either</em> \'stoichiometry\' or \'stoichiometryMath\' in a
   * SpeciesReference object.  The former is to be used when a
   * stoichiometry is simply a scalar number, while the latter is for
   * occasions when it needs to be a rational number or it needs to
   * reference other mathematical expressions.  The \'stoichiometry\'
   * attribute is of type @c double and should contain values greater than
   * zero (@c 0).  The \'stoichiometryMath\' element is implemented as an
   * element containing a MathML expression.  These two are mutually
   * exclusive; only one of \'stoichiometry\' or \'stoichiometryMath\' should
   * be defined in a given SpeciesReference instance.  When neither the
   * attribute nor the element is present, the value of \'stoichiometry\' in
   * the SpeciesReference instance defaults to @c 1.  For maximum
   * interoperability between different software tools, the \'stoichiometry\'
   * attribute should be used in preference to \'stoichiometryMath\' when a
   * species\' stoichiometry is a simple scalar number (integer or decimal).
   * 
   * @return the content of the \'stoichiometryMath\' subelement of this
   * SpeciesReference.
   */ public
";


%csmethodmodifiers SpeciesReference::getStoichiometryMath "
/**
   * Get the content of the \'stoichiometryMath\' subelement as an ASTNode
   * tree.
   *
   * The \'stoichiometryMath\' element exists only in SBML Level 2.  There,
   * product and reactant stoichiometries can be specified using
   * <em>either</em> \'stoichiometry\' or \'stoichiometryMath\' in a
   * SpeciesReference object.  The former is to be used when a
   * stoichiometry is simply a scalar number, while the latter is for
   * occasions when it needs to be a rational number or it needs to
   * reference other mathematical expressions.  The \'stoichiometry\'
   * attribute is of type @c double and should contain values greater than
   * zero (@c 0).  The \'stoichiometryMath\' element is implemented as an
   * element containing a MathML expression.  These two are mutually
   * exclusive; only one of \'stoichiometry\' or \'stoichiometryMath\' should
   * be defined in a given SpeciesReference instance.  When neither the
   * attribute nor the element is present, the value of \'stoichiometry\' in
   * the SpeciesReference instance defaults to @c 1.  For maximum
   * interoperability between different software tools, the \'stoichiometry\'
   * attribute should be used in preference to \'stoichiometryMath\' when a
   * species\' stoichiometry is a simple scalar number (integer or decimal).
   * 
   * @return the content of the \'stoichiometryMath\' subelement of this
   * SpeciesReference.
   *
   * @see getStoichiometry()
   */ public
";


%csmethodmodifiers SpeciesReference::getDenominator() const "
/**
   * Get the value of the \'denominator\' attribute, for the case of a
   * rational-numbered stoichiometry or a model in SBML Level&nbsp;1.
   *
   * The \'denominator\' attribute is only actually written out in the case
   * of an SBML Level&nbsp;1 model.  In SBML Level&nbsp;2, rational-number
   * stoichiometries are written as MathML elements in the
   * \'stoichiometryMath\' subelement.  However, as a convenience to users,
   * libSBML allows the creation and manipulation of rational-number
   * stoichiometries by supplying the numerator and denominator directly
   * rather than having to manually create an ASTNode structure.  LibSBML
   * will write out the appropriate constructs (either a combination of
   * \'stoichiometry\' and \'denominator\' in the case of SBML Level&nbsp;1, or a
   * \'stoichiometryMath\' subelement in the case of SBML Level&nbsp;2).
   * 
   * @return the value of the \'denominator\' attribute of this
   * SpeciesReference.
   */ public
";


%csmethodmodifiers SpeciesReference::getConstant() const "
/**
   * Get the value of the \'constant\' attribute.
   * 
   * @return the value of the \'constant\' attribute of this
   * SpeciesReference.
   */ public
";


%csmethodmodifiers SpeciesReference::isSetStoichiometryMath() const "
/**
   * Predicate returning @c true if this
   * SpeciesReference\'s \'stoichiometryMath\' subelement is set
   * 
   * @return @c true if the \'stoichiometryMath\' subelement of this
   * SpeciesReference is set, @c false otherwise.
   */ public
";


%csmethodmodifiers SpeciesReference::isSetConstant() const "
/**
   * Predicate returning @c true if this
   * SpeciesReference\'s \'constant\' attribute is set
   * 
   * @return @c true if the \'constant\' attribute of this
   * SpeciesReference is set, @c false otherwise.
   */ public
";


%csmethodmodifiers SpeciesReference::isSetStoichiometry() const "
/**
   * Predicate returning @c true if this
   * SpeciesReference\'s \'stoichiometry\' attribute is set.
   * 
   * @return @c true if the \'stoichiometry\' attribute of this
   * SpeciesReference is set, @c false otherwise.
   */ public
";


%csmethodmodifiers SpeciesReference::setStoichiometry(double value) "
/**
   * Sets the value of the \'stoichiometry\' attribute of this
   * SpeciesReference.
   *
   * In SBML Level 2, product and reactant stoichiometries can be specified
   * using <em>either</em> \'stoichiometry\' or \'stoichiometryMath\' in a
   * SpeciesReference object.  The former is to be used when a
   * stoichiometry is simply a scalar number, while the latter is for
   * occasions when it needs to be a rational number or it needs to
   * reference other mathematical expressions.  The \'stoichiometry\'
   * attribute is of type @c double and should contain values greater than
   * zero (@c 0).  The \'stoichiometryMath\' element is implemented as an
   * element containing a MathML expression.  These two are mutually
   * exclusive; only one of \'stoichiometry\' or \'stoichiometryMath\' should
   * be defined in a given SpeciesReference instance.  When neither the
   * attribute nor the element is present, the value of \'stoichiometry\' in
   * the SpeciesReference instance defaults to @c 1.  For maximum
   * interoperability between different software tools, the \'stoichiometry\'
   * attribute should be used in preference to \'stoichiometryMath\' when a
   * species\' stoichiometry is a simple scalar number (integer or
   * decimal).
   *
   * In SBML Level 3, there is no StoichiometryMath, and SpeciesReference
   * objects have only the \'stoichiometry\' attribute.
   * 
   * @param value the new value of the \'stoichiometry\' attribute
   *
   * @note In SBML Level&nbsp;2, the \'stoichiometryMath\' subelement of this
   * SpeciesReference object will be unset because the \'stoichiometry\'
   * attribute and the stoichiometryMath\' subelement are mutually
   * exclusive.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   */ public
";


%csmethodmodifiers SpeciesReference::setStoichiometryMath(const StoichiometryMath* math) "
/**
   * Sets the \'stoichiometryMath\' subelement of this SpeciesReference.
   *
   * The Abstract Syntax Tree in @p math is copied.
   *
   * In SBML Level 2, product and reactant stoichiometries can be specified
   * using <em>either</em> \'stoichiometry\' or \'stoichiometryMath\' in a
   * SpeciesReference object.  The former is to be used when a
   * stoichiometry is simply a scalar number, while the latter is for
   * occasions when it needs to be a rational number or it needs to
   * reference other mathematical expressions.  The \'stoichiometry\'
   * attribute is of type @c double and should contain values greater than
   * zero (@c 0).  The \'stoichiometryMath\' element is implemented as an
   * element containing a MathML expression.  These two are mutually
   * exclusive; only one of \'stoichiometry\' or \'stoichiometryMath\' should
   * be defined in a given SpeciesReference instance.  When neither the
   * attribute nor the element is present, the value of \'stoichiometry\' in
   * the SpeciesReference instance defaults to @c 1.  For maximum
   * interoperability between different software tools, the \'stoichiometry\'
   * attribute should be used in preference to \'stoichiometryMath\' when a
   * species\' stoichiometry is a simple scalar number (integer or
   * decimal).
   *
   * In SBML Level 3, there is no StoichiometryMath, and SpeciesReference
   * objects have only the \'stoichiometry\' attribute.
   * 
   * @param math the StoichiometryMath expression that is to be copied as the
   * content of the \'stoichiometryMath\' subelement.
   *
   * @note In SBML Level&nbsp;2, the \'stoichiometry\' attribute of this
   * SpeciesReference object will be unset (isSetStoichiometry() will
   * return @c false although getStoichiometry() will return @c 1.0) if the
   * given math is not null because the \'stoichiometry\' attribute and the
   * stoichiometryMath\' subelement are mutually exclusive.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH @endlink
   */ public
";


%csmethodmodifiers SpeciesReference::setDenominator(int value) "
/**
   * Set the value of the \'denominator\' attribute, for the case of a
   * rational-numbered stoichiometry or a model in SBML Level&nbsp;1.
   *
   * The \'denominator\' attribute is only actually written out in the case
   * of an SBML Level&nbsp;1 model.  In SBML Level&nbsp;2, rational-number
   * stoichiometries are written as MathML elements in the
   * \'stoichiometryMath\' subelement.  However, as a convenience to users,
   * libSBML allows the creation and manipulation of rational-number
   * stoichiometries by supplying the numerator and denominator directly
   * rather than having to manually create an ASTNode structure.  LibSBML
   * will write out the appropriate constructs (either a combination of
   * \'stoichiometry\' and \'denominator\' in the case of SBML Level&nbsp;1, or
   * a \'stoichiometryMath\' subelement in the case of SBML Level&nbsp;2).
   *
   * @param value the scalar value 
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   */ public
";


%csmethodmodifiers SpeciesReference::setConstant(bool flag) "
/**
   * Sets the \'constant\' attribute of this SpeciesReference to the given bool
   * @p flag.
   *
   * @param flag a bool, the value for the \'constant\' attribute of this
   * SpeciesReference instance
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   */ public
";


%csmethodmodifiers SpeciesReference::unsetStoichiometryMath "
/**
   * Unsets the \'stoichiometryMath\' subelement of this SpeciesReference.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   *
   * In SBML Level 2, product and reactant stoichiometries can be specified
   * using <em>either</em> \'stoichiometry\' or \'stoichiometryMath\' in a
   * SpeciesReference object.  The former is to be used when a
   * stoichiometry is simply a scalar number, while the latter is for
   * occasions when it needs to be a rational number or it needs to
   * reference other mathematical expressions.  The \'stoichiometry\'
   * attribute is of type @c double and should contain values greater than
   * zero (@c 0).  The \'stoichiometryMath\' element is implemented as an
   * element containing a MathML expression.  These two are mutually
   * exclusive; only one of \'stoichiometry\' or \'stoichiometryMath\' should
   * be defined in a given SpeciesReference instance.  When neither the
   * attribute nor the element is present, the value of \'stoichiometry\' in
   * the SpeciesReference instance defaults to @c 1.  For maximum
   * interoperability between different software tools, the \'stoichiometry\'
   * attribute should be used in preference to \'stoichiometryMath\' when a
   * species\' stoichiometry is a simple scalar number (integer or
   * decimal).
   *
   * In SBML Level 3, there is no StoichiometryMath, and SpeciesReference
   * objects have only the \'stoichiometry\' attribute.
   *
   * @note In SBML Level&nbsp;2, the \'stoichiometry\' attribute of this
   * SpeciesReference object will be reset to a default value (@c 1.0) if
   * the \'stoichiometry\' attribute has not been set.
   */ public
";


%csmethodmodifiers SpeciesReference::unsetStoichiometry "
/**
   * Unsets the \'stoichiometry\' attribute of this SpeciesReference.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   *
   * @note In SBML Level&nbsp;1, the \'stoichiometry\' attribute of this
   * SpeciesReference object will be just reset to a default value (@c 1.0)
   * and isSetStoichiometry() will still return @c true.  In SBML
   * Level&nbsp;2, the \'stoichiometry\' attribute of this object will be
   * unset (which will result in isSetStoichiometry() returning @c false,
   * although getStoichiometry() will return @c 1.0) if the
   * \'stoichiometryMath\' subelement is set, otherwise the attribute
   * will be just reset to the default value (@c 1.0) (and
   * isSetStoichiometry() will still return @c true).  In SBML
   * Level&nbsp;3, the \'stoichiometry\' attribute of this object will be set
   * to @c NaN and isSetStoichiometry() will return @c false.
   */ public
";


%csmethodmodifiers SpeciesReference::createStoichiometryMath "
/**
   * Creates a new, empty StoichiometryMath object, adds it to this
   * SpeciesReference, and returns it.
   *
   * @return the newly created StoichiometryMath object instance
   *
   * @see Reaction::addReactant(SpeciesReference sr)
   * @see Reaction::addProduct(SpeciesReference sr)
   */ public
";


%csmethodmodifiers SpeciesReference::setAnnotation(const XMLNode* annotation) "
/**
   * Sets the value of the \'annotation\' subelement of this SBML object to a
   * copy of @p annotation.
   *
   * Any existing content of the \'annotation\' subelement is discarded.
   * Unless you have taken steps to first copy and reconstitute any
   * existing annotations into the @p annotation that is about to be
   * assigned, it is likely that performing such wholesale replacement is
   * unfriendly towards other software applications whose annotations are
   * discarded.  An alternative may be to use appendAnnotation().
   *
   * @param annotation an XML structure that is to be used as the content
   * of the \'annotation\' subelement of this object
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   *
   * @see appendAnnotation(XMLNode annotation)
   * @see appendAnnotation(string annotation)
   */ public new
";


%csmethodmodifiers SpeciesReference::setAnnotation(const std::string& annotation) "
/**
   * Sets the value of the \'annotation\' subelement of this SBML object to a
   * copy of @p annotation.
   *
   * Any existing content of the \'annotation\' subelement is discarded.
   * Unless you have taken steps to first copy and reconstitute any
   * existing annotations into the @p annotation that is about to be
   * assigned, it is likely that performing such wholesale replacement is
   * unfriendly towards other software applications whose annotations are
   * discarded.  An alternative may be to use appendAnnotation().
   *
   * @param annotation an XML string that is to be used as the content
   * of the \'annotation\' subelement of this object
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   *
   * @see appendAnnotation(XMLNode annotation)
   * @see appendAnnotation(string annotation)
   */ public new
";


%csmethodmodifiers SpeciesReference::appendAnnotation(const XMLNode* annotation) "
/**
   * Appends annotation content to any existing content in the \'annotation\'
   * subelement of this object.
   *
   * The content in @p annotation is copied.  Unlike
   * SpeciesReference::setAnnotation(@if java String annotation@endif),
   * this method allows other annotations to be preserved when an application
   * adds its own data.
   *
   * @param annotation an XML structure that is to be copied and appended
   * to the content of the \'annotation\' subelement of this object
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   *
   * @see setAnnotation(string annotation)
   * @see setAnnotation(XMLNode annotation)
   */ public new
";


%csmethodmodifiers SpeciesReference::appendAnnotation(const std::string& annotation) "
/**
   * Appends annotation content to any existing content in the \'annotation\'
   * subelement of this object.
   *
   * The content in @p annotation is copied.  Unlike
   * SpeciesReference::setAnnotation(@if java String annotation@endif), this
   * method allows other annotations to be preserved when an application
   * adds its own data.
   *
   * @param annotation an XML string that is to be copied and appended
   * to the content of the \'annotation\' subelement of this object
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   *
   * @see setAnnotation(string annotation)
   * @see setAnnotation(XMLNode annotation)
   */ public new
";


%csmethodmodifiers SpeciesReference::getTypeCode() const "
/**
   * Returns the libSBML type code for this %SBML object.
   * 
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object:
   * @link libsbmlcs.libsbml.SBML_SPECIES_REFERENCE SBML_SPECIES_REFERENCE@endlink (default).
   *
   * @see getElementName()
   * @see getPackageName()
   */ public new
";


%csmethodmodifiers SpeciesReference::getElementName() const "
/**
   * Returns the XML element name of this object, which for
   * SpeciesReference, is always @c \'speciesReference\'.
   * 
   * @return the name of this element, i.e., @c \'speciesReference\'.
   */ public new
";


%csmethodmodifiers SpeciesReference::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SpeciesReference::sortMath "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers SpeciesReference::hasRequiredAttributes() const "
/**
   * Predicate returning @c true if
   * all the required attributes for this SpeciesReference object
   * have been set.
   *
   * @note The required attributes for a SpeciesReference object are:
   * @li \'species\'
   * @li \'constant\' (only available SBML Level&nbsp;3)
   *
   * @return a bool value indicating whether all the required
   * attributes for this object have been defined.
   */ public new
";


%csmethodmodifiers SpeciesReference::createObject(XMLInputStream& stream) "
/**
   * Create and return a speciesReference object, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or @c null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SpeciesReference::readOtherXML(XMLInputStream& stream) "
/**
   * Subclasses should override this method to read (and store) XHTML,
   * MathML, etc. directly from the XMLInputStream.
   *
   * @return true if the subclass read from the stream, false otherwise.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SpeciesReference::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SpeciesReference::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Subclasses should override this method to read values from the given
   * XMLAttributes set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SpeciesReference::readL1Attributes(const XMLAttributes& attributes) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers SpeciesReference::readL2Attributes(const XMLAttributes& attributes) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers SpeciesReference::readL3Attributes(const XMLAttributes& attributes) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers SpeciesReference::writeAttributes(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SpeciesReference::syncAnnotation "
/**
   *
   * Synchronizes the annotation of this SBML object.
   *
   * Annotation element (XMLNode mAnnotation) is synchronized with the
   * current CVTerm objects (List* mCVTerm) and id string (string mId)
   * Currently, this method is called in getAnnotation(), isSetAnnotation(),
   * and writeElements() methods.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SpeciesReference::isExplicitlySetStoichiometry() const "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers SpeciesReference::isExplicitlySetDenominator() const "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfSpeciesReferences::ListOfSpeciesReferences(unsigned int level, unsigned int version) "
/**
   * Creates a new, empty ListOfSpeciesReferences object.
   *
   * The object is constructed such that it is valid for the given SBML
   * Level and Version combination.
   *
   * @param level the SBML Level
   * 
   * @param version the Version within the SBML Level
   */ public
";


%csmethodmodifiers ListOfSpeciesReferences::ListOfSpeciesReferences(SBMLNamespaces* sbmlns) "
/**
   * Creates a new ListOfSpeciesReferences object.
   *
   * The object is constructed such that it is valid for the SBML Level and
   * Version combination determined by the SBMLNamespaces object in @p
   * sbmlns.
   *
   * @param sbmlns an SBMLNamespaces object that is used to determine the
   * characteristics of the ListOfSpeciesReferences object to be created.
   */ public
";


%csmethodmodifiers ListOfSpeciesReferences::clone() const "
/**
   * Creates and returns a deep copy of this ListOfSpeciesReferences
   * instance.
   *
   * @return a (deep) copy of this ListOfSpeciesReferences.
   */ public new
";


%csmethodmodifiers ListOfSpeciesReferences::getItemTypeCode() const "
/**
   * Returns the libSBML type code for the objects contained in this ListOf
   * (i.e., SpeciesReference objects, if the list is non-empty).
   *
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for objects contained in this list:
   * @link libsbmlcs.libsbml.SBML_SPECIES_REFERENCE SBML_SPECIES_REFERENCE@endlink (default).
   *
   * @see getElementName()
   * @see getPackageName()
   */ public new
";


%csmethodmodifiers ListOfSpeciesReferences::getElementName() const "
/**
   * Returns the XML element name of this object.
   *
   * For ListOfSpeciesReferences, the XML element name is @c
   * \'listOfSpeciesReferences\'.
   * 
   * @return the name of this element, i.e., @c \'listOfSpeciesReferences\'.
   */ public new
";


%csmethodmodifiers ListOfSpeciesReferences::get(unsigned int n) "
/**
   * Get a SpeciesReference from the ListOfSpeciesReferences.
   *
   * @param n the index number of the SpeciesReference to get.
   * 
   * @return the nth SpeciesReference in this ListOfSpeciesReferences.
   *
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfSpeciesReferences::get "
/**
   * Get a SpeciesReference from the ListOfSpeciesReferences.
   *
   * @param n the index number of the SpeciesReference to get.
   * 
   * @return the nth SpeciesReference in this ListOfSpeciesReferences.
   *
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfSpeciesReferences::get(const std::string& sid) "
/**
   * Get a SpeciesReference from the ListOfSpeciesReferences
   * based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the SpeciesReference to get.
   * 
   * @return SpeciesReference in this ListOfSpeciesReferences
   * with the given @p sid or @c null if no such
   * SpeciesReference exists.
   *
   * @see get(long n)
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfSpeciesReferences::get(const std::string& sid) const "
/**
   * Get a SpeciesReference from the ListOfSpeciesReferences
   * based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the SpeciesReference to get.
   * 
   * @return SpeciesReference in this ListOfSpeciesReferences
   * with the given @p sid or @c null if no such
   * SpeciesReference exists.
   *
   * @see get(long n)
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfSpeciesReferences::remove(unsigned int n) "
/**
   * Removes the nth item from this ListOfSpeciesReferences items and returns a pointer to
   * it.
   *
   * The caller owns the returned item and is responsible for deleting it.
   *
   * @param n the index of the item to remove
   *
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfSpeciesReferences::remove(const std::string& sid) "
/**
   * Removes item in this ListOfSpeciesReferences items with the given identifier.
   *
   * The caller owns the returned item and is responsible for deleting it.
   * If none of the items in this list have the identifier @p sid, then @c
   * null is returned.
   *
   * @param sid the identifier of the item to remove
   *
   * @return the item removed.  As mentioned above, the caller owns the
   * returned item.
   */ public new
";


%csmethodmodifiers ListOfSpeciesReferences::getElementPosition() const "
/**
   * Get the ordinal position of this element in the containing object
   * (which in this case is the Model object).
   *
   * @return the ordinal position of the element with respect to its
   * siblings, or @c -1 (default) to indicate the position is not significant.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfSpeciesReferences::setType(SpeciesType type) "
/**
   * Sets type of this ListOfSpeciesReferences.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfSpeciesReferences::createObject(XMLInputStream& stream) "
/**
   * Create and return a listOfSpeciesReferences object, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or @c null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%typemap(csimports) ModifierSpeciesReference "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Implementation of %SBML\'s %ModifierSpeciesReference
 * construct.
 *
 * Sometimes a species appears in the kinetic rate formula of a reaction
 * but is itself neither created nor destroyed in that reaction (for
 * example, because it acts as a catalyst or inhibitor).  In SBML, all such
 * species are simply called @em modifiers without regard to the detailed
 * role of those species in the model.  The Reaction structure provides a
 * way to express which species act as modifiers in a given reaction.  This
 * is the purpose of the list of modifiers available in Reaction.  The list
 * contains instances of ModifierSpeciesReference structures.
 *
 * The ModifierSpeciesReference structure inherits the mandatory attribute
 * \'species\' and optional attributes \'id\' and \'name\' from the parent class
 * SimpleSpeciesReference.  See the description of SimpleSpeciesReference
 * for more information about these.
 *
 * The value of the \'species\' attribute must be the identifier of a species
 * defined in the enclosing Model; this species is designated as a modifier
 * for the current reaction.  A reaction may have any number of modifiers.
 * It is permissible for a modifier species to appear simultaneously in the
 * list of reactants and products of the same reaction where it is
 * designated as a modifier, as well as to appear in the list of reactants,
 * products and modifiers of other reactions in the model.
 *
 * 
 */
"


%csmethodmodifiers ModifierSpeciesReference::ModifierSpeciesReference(unsigned int level, unsigned int version) "
/**
   * Creates a new ModifierSpeciesReference using the given SBML @p level and
   * @p version values.
   *
   * @param level a long integer, the SBML Level to assign to this
   * ModifierSpeciesReference
   *
   * @param version a long integer, the SBML Version to assign to this
   * ModifierSpeciesReference
   *
   * * 
 * @note Upon the addition of a ModifierSpeciesReference object to an
 * SBMLDocument (e.g., using Reaction::addModifier(@if java ModifierSpeciesReference msr@endif)), the
 * SBML Level, SBML Version and XML namespace of the document @em
 * override the values used when creating the ModifierSpeciesReference
 * object via this constructor.  This is necessary to ensure that an SBML
 * document is a consistent structure.  Nevertheless, the ability to
 * supply the values at the time of creation of a
 * ModifierSpeciesReference is an important aid to producing valid SBML.
 * Knowledge of the intented SBML Level and Version determine whether it
 * is valid to assign a particular value to an attribute, or whether it
 * is valid to add an object to an existing SBMLDocument.
 *
   */ public
";


%csmethodmodifiers ModifierSpeciesReference::ModifierSpeciesReference(SBMLNamespaces* sbmlns) "
/**
   * Creates a new ModifierSpeciesReference using the given SBMLNamespaces
   * object @p sbmlns.
   *
   * @param sbmlns an SBMLNamespaces object.
   *
   * * 
 * @note Upon the addition of a ModifierSpeciesReference object to an
 * SBMLDocument (e.g., using Reaction::addModifier(@if java ModifierSpeciesReference msr@endif)), the
 * SBML Level, SBML Version and XML namespace of the document @em
 * override the values used when creating the ModifierSpeciesReference
 * object via this constructor.  This is necessary to ensure that an SBML
 * document is a consistent structure.  Nevertheless, the ability to
 * supply the values at the time of creation of a
 * ModifierSpeciesReference is an important aid to producing valid SBML.
 * Knowledge of the intented SBML Level and Version determine whether it
 * is valid to assign a particular value to an attribute, or whether it
 * is valid to add an object to an existing SBMLDocument.
 *
   */ public
";


%csmethodmodifiers ModifierSpeciesReference::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor.
   *
   * @param v the SBMLVisitor instance to be used.
   *
   * @return the result of calling <code>v.visit()</code>.
   */ public
";


%csmethodmodifiers ModifierSpeciesReference::clone() const "
/**
   * Creates and returns a deep copy of this ModifierSpeciesReference
   * instance.
   *
   * @return a (deep) copy of this ModifierSpeciesReference.
   */ public new
";


%csmethodmodifiers ModifierSpeciesReference::getTypeCode() const "
/**
   * Returns the libSBML type code for this %SBML object.
   * 
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object:
   * @link libsbmlcs.libsbml.SBML_MODIFIER_SPECIES_REFERENCE SBML_MODIFIER_SPECIES_REFERENCE@endlink (default).
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see getElementName()
   * @see getPackageName()
   */ public new
";


%csmethodmodifiers ModifierSpeciesReference::getElementName() const "
/**
   * Returns the XML element name of this object, which for Species, is
   * always @c \'modifierSpeciesReference\'.
   * 
   * @return the name of this element, i.e., @c \'modifierSpeciesReference\'.
   */ public new
";


%csmethodmodifiers ModifierSpeciesReference::hasRequiredAttributes() const "
/**
   * Predicate returning @c true if
   * all the required attributes for this ModifierSpeciesReference object
   * have been set.
   *
   * @note The required attributes for a ModifierSpeciesReference object are:
   * species
   */ public new
";


%typemap(csimports) Event "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Implementation of SBML\'s %Event construct.
 * 
 * An SBML Event object defines when the event can occur, the variables
 * that are affected by it, how the variables are affected, and the event\'s
 * relationship to other events.  The effect of the event can optionally be
 * delayed after the occurrence of the condition which invokes it.
 *
 * The operation of Event is divided into two phases (even when the event
 * is not delayed): one when the event is @em triggered, and the other when
 * the event is @em executed.  Trigger objects define the conditions for
 * triggering an event, Delay objects define when the event is actually
 * executed, EventAssignment objects define the effects of executing the
 * event, and (in SBML Level&nbsp;3) Priority objects influence the order
 * of EventAssignment performance in cases of simultaneous events.  Please
 * consult the descriptions of Trigger, Delay, EventAssignment and Priority
 * for more information.
 *
 * @section version-diffs SBML Level/Version differences
 * 
 * @subsection sbml-l3 SBML Level 3
 *
 * SBML Level 3 introduces several changes to the structure and components
 * of Events compared to SBML Level&nbsp;2.  These changes fall into two
 * main categories: changes to what is optional or required, and additions
 * of new attributes and elements.
 * <ul>
 * <li> The attribute \'useValuesFromTriggerTime\' on Event is mandatory (it
 * was optional in Level&nbsp;2);
 * <li> Event\'s \'listOfEventAssignments\' element (of class
 * ListOfEventAssignments) is optional (it was mandatory in Level&nbsp;2);
 * <li> Event\'s \'priority\' element (of class Priority) is new in
 * Level&nbsp;3; and
 * <li> The Trigger object gains new mandatory attributes (described as part
 * of the definition of Trigger).
 * </ul>
 *
 * The changes to the attributes of Event are described below; the changes
 * to Trigger and Priority are described in their respective sections.
 *
 * @subsection sbml-l2 SBML Level 2
 * 
 * In SBML Level&nbsp;2 versions before Version&nbsp;4, the semantics of
 * Event time delays were defined such that the expressions in the event\'s
 * assignments were always evaluated at the time the event was
 * <em>triggered</em>.  This definition made it difficult to define an event
 * whose assignment formulas were meant to be evaluated at the time the
 * event was <em>executed</em> (i.e., after the time period defined by the
 * value of the Delay element).  In SBML Level&nbsp;2 Version&nbsp;4 and in
 * Level&nbsp;3, the attribute \'useValuesFromTriggerTime\' on Event allows a
 * model to indicate the time at which the event\'s assignments are intended
 * the values of the assignment formulas are computed at the moment the
 * event is triggered, not after the delay.  If \'useValuesFromTriggerTime\'=@c
 * false, it means that the formulas in the event\'s assignments are to be
 * computed @em after the delay, at the time the event is executed.
 *
 * The definition of Event in SBML Level&nbsp;2 Versions 1 and 2 includes
 * an additional attribute called \'timeUnits\', which allowed the time units
 * of the Delay to be set explicitly.  Later Versions of SBML Level&nbsp;2
 * as well as SBML Level&nbsp;3 do not define this attribute.  LibSBML
 * supports this attribute for compatibility with previous versions of SBML
 * Level&nbsp;2; however, if a model in SBML Level&nbsp;3 or Level&nbsp;2
 * Versions&nbsp;3&ndash;4 format sets the attribute, the
 * consistency-checking method SBMLDocument::checkConsistency() will report
 * an error.
 *
 * The attribute \'useValuesFromTriggerTime\' was introduced in SBML
 * Level&nbsp;2 Version&nbsp;4.  Models defined in prior Versions of SBML
 * Level&nbsp;2 cannot use this attribute, and
 * SBMLDocument::checkConsistency() will report an error if they do.
 *
 * @section semantics Semantics of events in SBML Level 3 Version&nbsp;1
 *
 * The detailed semantics of events are described in the specification
 * documents for each SBML Level/Version.  Here we include the description
 * from the SBML Level&nbsp;1 Version&nbsp;1.
 * Any transition of a Trigger object\'s \'math\' formula from the value @c
 * false to @c true will cause the enclosing Event object to
 * <em>trigger</em>.  Such a transition is not possible at the very start
 * of a simulation (i.e., at time <em>t = 0</em>) unless the Trigger
 * object\'s \'initialValue\' attribute has a value of @c false; this defines
 * the value of the trigger formula to be @c false immediately prior to the
 * start of simulation, thereby giving it the potential to change in value
 * from @c false to @c true when the formula is evaluated at <em>t =
 * 0</em>.  If \'initialValue\'=@c true, then the trigger expression cannot
 * transition from @c false to @c true at <em>t = 0</em> but may do so at
 * some time <em>t > 0</em>.
 * 
 * Consider an Event object definition <EM>E</EM> with delay <em>d</em> in
 * which the Trigger object\'s \'math\' formula makes a transition in value
 * from @c false to @c true at times <em>t<sub>1</sub></em> and
 * <em>t<sub>2</sub></em>.  The EventAssignment within the Event object
 * will have effect at <em>t<sub>1</sub> + d</em> and
 * <em>t<sub>2</sub> + d</em> irrespective of the relative times of
 * <em>t<sub>1</sub></em> and <em>t<sub>2</sub></em>.  For example, events
 * can \'overlap\' so that <em>t<sub>1</sub> < t<sub>2</sub> <
 * t<sub>1</sub> + d</em> still causes an event assignments to occur at
 * <em>t<sub>1</sub> + d</em> and <em>t<sub>2</sub> + d</em>.
 * 
 * It is entirely possible for two events to be executed simultaneously,
 * and it is possible for events to trigger other events (i.e., an event
 * assignment can cause an event to trigger).  This leads to several
 * points:
 * <ul>
 * 
 * <li> A software package should retest all event triggers after executing
 * an event assignment in order to account for the possibility that the
 * assignment causes another event trigger to transition from @c false to
 * @c true.  This check should be made after each individual Event object\'s
 * execution, even when several events are to be executed simultaneously.
 * 
 * <li> Any Event object whose Trigger \'persistent\' attribute has the value
 * @c false must have its trigger expression reevaluated continuously
 * between when the event is triggered and when it is executed.  If
 * its trigger expression ever evaluates to @c false, it must be removed
 * from the queue of events pending execution and treated as any other
 * event whose trigger expression evaluates to @c false.
 * 
 * <li> Although the precise time at which events are executed is not
 * resolved beyond the given execution point in simulated time, it is
 * assumed that the order in which the events occur <em>is</em> resolved.
 * This order can be significant in determining the overall outcome of a
 * given simulation.  When an event <EM>X</EM> <em>triggers</em> another
 * event <EM>Y</EM> and event <EM>Y</EM> has zero delay, then event
 * <EM>Y</EM> is added to the existing set of simultaneous events that are
 * pending <em>execution</em>.  Events <EM>X</EM> and <EM>Y</EM> form a
 * cascade of events at the same point in simulation time.  An event such
 * as <EM>Y</EM> may have a special priority if it contains a Priority
 * subobject.
 * 
 * <li> All events in a model are open to being in a cascade.  The position
 * of an event in the event queue does not affect whether it can be in the
 * cascade: event <EM>Y</EM> can be triggered whether it is before or after
 * <EM>X</EM> in the queue of events pending execution.  A cascade of
 * events can be potentially infinite (never terminate); when this occurs a
 * simulator should indicate this has occurred&mdash;it is incorrect for a
 * simulator to break a cascade arbitrarily and continue the simulation
 * without at least indicating that the infinite cascade occurred.
 * 
 * <li> Simultaneous events having no defined priorities are executed in an
 * undefined order.  This does not mean that the behavior of the simulation
 * is completely undefined; merely that the <em>order</em> of execution of
 * these particular events is undefined.  A given simulator may use any
 * algorithm to choose an order as long as every event is executed exactly
 * once.
 * 
 * <li> Events with defined priorities are executed in the order implied by
 * their Priority \'math\' formula values, with events having higher
 * priorities being executed ahead of events with lower priorities, and
 * events with identical priorities being executed in a random order with
 * respect to one another (as determined at run-time by some random
 * algorithm equivalent to coin-flipping).  Newly-triggered events that are
 * to be executed immediately (i.e., if they define no delays) should be
 * inserted into the queue of events pending execution according to their
 * priorities: events with higher priority values value must be inserted
 * ahead of events with lower priority values and after any pending events
 * with even higher priorities, and inserted randomly among pending events
 * with the same priority values.  Events without Priority objects must be
 * inserted into the queue in some fashion, but the algorithm used to place
 * it in the queue is undefined.  Similarly, there is no restriction on the
 * order of a newly-inserted event with a defined Priority with respect to
 * any other pending Event without a defined Priority.
 * 
 * <li> A model variable that is the target of one or more event
 * assignments can change more than once when simultaneous events are
 * processed at some time point <em>t</em>.  The model\'s behavior (output)
 * for such a variable is the value of the variable at the end of
 * processing all the simultaneous events at time <em>t</em>.
 * 
 * </ul>
 *
 * @see Trigger
 * @see Priority
 * @see Delay
 * @see EventAssignment
 * 
 *
 * 
 */
"


%typemap(csimports) ListOfEvents "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Implementation of SBML\'s %ListOfEvents construct.
 * 
 * *
 * 
 * The various ListOf___ classes in SBML are merely containers used for
 * organizing the main components of an SBML model.  All are derived from
 * the abstract class SBase, and inherit the various attributes and
 * subelements of SBase, such as \'metaid\' as and \'annotation\'.  The
 * ListOf___ classes do not add any attributes of their own.
 *
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 *
 * @htmlinclude listof-illustration.html
 *
 * Readers may wonder about the motivations for using the ListOf___
 * containers.  A simpler approach in XML might be to place the components
 * all directly at the top level of the model definition.  The choice made
 * in SBML is to group them within XML elements named after
 * ListOf<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from SBase means that software tools can add information @em about
 * the lists themselves into each list container\'s \'annotation\'.
 * 
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 *
 *
 */
"


%csmethodmodifiers Event::Event(unsigned int level, unsigned int version) "
/**
   * Creates a new Event using the given SBML @p level and @p version
   * values.
   *
   * @param level a long integer, the SBML Level to assign to this Event
   *
   * @param version a long integer, the SBML Version to assign to this
   * Event
   *
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the given @p level and @p version combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent SBMLDocument object.
   * 
   * *
 * @note Upon the addition of an Event object to an SBMLDocument (e.g., using
 * Model::addEvent(@if java Event e@endif)), the SBML Level, SBML Version and
 * XML namespace of the document @em override the values used when creating
 * the Event object via this constructor.  This is necessary to ensure that
 * an SBML document is a consistent structure.  Nevertheless, the ability to
 * supply the values at the time of creation of an Event is an important aid
 * to producing valid SBML.  Knowledge of the intented SBML Level and Version
 * determine whether it is valid to assign a particular value to an
 * attribute, or whether it is valid to add an object to an existing
 * SBMLDocument.
 *
   */ public
";


%csmethodmodifiers Event::Event(SBMLNamespaces* sbmlns) "
/**
   * Creates a new Event using the given SBMLNamespaces object
   * @p sbmlns.
   *
   * *
 *  
 * The SBMLNamespaces object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML\'s SBMLNamespaces facilities is to create an
 * SBMLNamespaces object somewhere in a program once, then hand that object
 * as needed to object constructors that accept SBMLNamespaces as arguments.
 *
 * 
   * 
   * @param sbmlns an SBMLNamespaces object.
   *
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the given @p level and @p version combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent SBMLDocument object.
   *
   * *
 * @note Upon the addition of an Event object to an SBMLDocument (e.g., using
 * Model::addEvent(@if java Event e@endif)), the SBML Level, SBML Version and
 * XML namespace of the document @em override the values used when creating
 * the Event object via this constructor.  This is necessary to ensure that
 * an SBML document is a consistent structure.  Nevertheless, the ability to
 * supply the values at the time of creation of an Event is an important aid
 * to producing valid SBML.  Knowledge of the intented SBML Level and Version
 * determine whether it is valid to assign a particular value to an
 * attribute, or whether it is valid to add an object to an existing
 * SBMLDocument.
 *
   */ public
";


%csmethodmodifiers Event::Event(const Event& orig) "
/**
   * Copy constructor; creates a copy of this Event.
   *
   * @param orig the object to copy.
   * 
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the argument @p orig is @c null.
   */ public
";


%csmethodmodifiers Event::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor for this instance of Event.
   *
   * @param v the SBMLVisitor instance to be used.
   *
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether the Visitor would like to visit the next Event in the list
   * of events within which this Event is embedded.
   */ public
";


%csmethodmodifiers Event::clone() const "
/**
   * Creates and returns a deep copy of this Event.
   * 
   * @return a (deep) copy of this Event.
   */ public new
";


%csmethodmodifiers Event::getElementBySId(const std::string& id) "
/**
   * Returns the first child element found that has the given @p id in the
   * model-wide SId namespace, or @c null if no such object is found.
   *
   * @param id string representing the id of objects to find
   *
   * @return pointer to the first element found with the given @p id.
   */ public
";


%csmethodmodifiers Event::getElementByMetaId(const std::string& metaid) "
/**
   * Returns the first child element it can find with the given @p metaid, or
   * @c null if no such object is found.
   *
   * @param metaid string representing the metaid of objects to find
   *
   * @return pointer to the first element found with the given @p metaid.
   */ public
";


%csmethodmodifiers Event::getAllElements(ElementFilter* filter=NULL) "
/**
   * Returns a List of all child SBase objects, including those nested to an
   * arbitrary depth.
   *
   * @return a List of pointers to all children objects.
   */ public
";


%csmethodmodifiers Event::getId() const "
/**
   * Returns the value of the \'id\' attribute of this Event.
   * 
   * @return the id of this Event.
   */ public new
";


%csmethodmodifiers Event::getName() const "
/**
   * Returns the value of the \'name\' attribute of this Event.
   * 
   * @return the name of this Event.
   */ public new
";


%csmethodmodifiers Event::getTrigger() const "
/**
   * Get the event trigger portion of this Event.
   * 
   * @return the Trigger object of this Event.
   */ public
";


%csmethodmodifiers Event::getTrigger "
/**
   * Get the event trigger portion of this Event.
   * 
   * @return the Trigger object of this Event.
   */ public
";


%csmethodmodifiers Event::getDelay() const "
/**
   * Get the assignment delay portion of this Event, if there is one.
   * 
   * @return the delay of this Event if one is defined, or @c null if none
   * is defined.
   */ public
";


%csmethodmodifiers Event::getDelay "
/**
   * Get the assignment delay portion of this Event, if there is one.
   * 
   * @return the delay of this Event if one is defined, or @c null if none
   * is defined.
   */ public
";


%csmethodmodifiers Event::getPriority() const "
/**
   * (SBML Level&nbsp;3 only) Get the event priority portion of this
   * Event.
   * 
   * @return the Priority object of this Event.
   * 
   * @note The element \'priority\' is available in SBML Level&nbsp;3
   * Version&nbsp;1 Core, but is not present in lower Levels of SBML.
   */ public
";


%csmethodmodifiers Event::getPriority "
/**
   * (SBML Level&nbsp;3 only) Get the event priority portion of this
   * Event.
   * 
   * @return the Priority object of this Event.
   * 
   * @note The element \'priority\' is available in SBML Level&nbsp;3
   * Version&nbsp;1 Core, but is not present in lower Levels of SBML.
   */ public
";


%csmethodmodifiers Event::getTimeUnits() const "
/**
   * Get the value of the \'timeUnits\' attribute of this Event, if it has one.
   * 
   * @return the value of the attribute \'timeUnits\' as a string.
   *
   * *
 * @warning <span class=\'warning\'>Definitions of Event in SBML Level 2
 * Versions&nbsp;1 and&nbsp;2 included the additional attribute called
 * \'timeUnits\', but it was removed in SBML Level&nbsp;2 Version&nbsp;3.
 * LibSBML supports this attribute for compatibility with previous versions
 * of SBML Level&nbsp;2, but its use is discouraged since models in
 * Level&nbsp;2 Versions&nbsp;3 and&nbsp;4 cannot contain it.  If a
 * Version&nbsp;3 or&nbsp;4 model sets the attribute, the
 * consistency-checking method SBMLDocument::checkConsistency() will report
 * an error.</span>
 *
   */ public
";


%csmethodmodifiers Event::getUseValuesFromTriggerTime() const "
/**
   * Get the value of the \'useValuesFromTriggerTime\' attribute of this Event.
   *
   * *
 * 
 * The optional Delay on Event means there are two times to consider when
 * computing the results of an event: the time at which the event is
 * <em>triggered</em>, and the time at which assignments are
 * <em>executed</em>.  It is also possible to distinguish between the
 * time at which the EventAssignment\'s expression is calculated, and the
 * time at which the assignment is made: the expression could be
 * evaluated at the same time the assignments are performed, i.e., when
 * the event is <em>executed</em>, but it could also be defined to be
 * evaluated at the time the event is <em>triggered</em>.
 * 
 * In SBML Level&nbsp;2 versions prior to Version&nbsp;4, the semantics
 * of Event time delays were defined such that the expressions in the
 * event\'s assignments were always evaluated at the time the event was
 * <em>triggered</em>.  This definition made it difficult to define an
 * event whose assignment formulas were meant to be evaluated at the time
 * the event was <em>executed</em> (i.e., after the time period defined
 * by the value of the Delay element).  In SBML Level&nbsp;2
 * Version&nbsp;4, the attribute \'useValuesFromTriggerTime\' on Event
 * allows a model to indicate the time at which the event\'s assignments
 * are intended to be evaluated.  In SBML Level&nbsp;2, the attribute has
 * a default value of @c true, which corresponds to the interpretation of
 * event assignments prior to Version&nbsp;4: the values of the
 * assignment formulas are computed at the moment the event is triggered,
 * not after the delay.  If \'useValuesFromTriggerTime\'=@c false, it means
 * that the formulas in the event\'s assignments are to be computed after
 * the delay, at the time the event is executed.  In SBML Level&nbsp;3,
 * the attribute is mandatory, not optional, and all events must specify
 * a value for it.
 *
   * 
   * @return the value of the attribute \'useValuesFromTriggerTime\' as a bool.
   *
   * *
 * @warning <span class=\'warning\'>The attribute \'useValuesFromTriggerTime\'
 * was introduced in SBML Level&nbsp;2 Version&nbsp;4.  It is not valid in
 * models defined using SBML Level&nbsp;2 versions prior to Version&nbsp;4.
 * If a Level&nbsp;2 Version&nbsp;1&ndash;3 model sets the attribute, the
 * consistency-checking method SBMLDocument::checkConsistency() will report
 * an error.</span>
 * 
   */ public
";


%csmethodmodifiers Event::isSetId() const "
/**
   * Predicate returning @c true if this
   * Event\'s \'id\' attribute is set.
   *
   * @return @c true if the \'id\' attribute of this Event is
   * set, @c false otherwise.
   */ public new
";


%csmethodmodifiers Event::isSetName() const "
/**
   * Predicate returning @c true if this
   * Event\'s \'name\' attribute is set.
   *
   * @return @c true if the \'name\' attribute of this Event is
   * set, @c false otherwise.
   */ public new
";


%csmethodmodifiers Event::isSetTrigger() const "
/**
   * Predicate for testing whether the trigger for this Event is set.
   *
   * @return @c true if the trigger of this Event is set, @c false
   * otherwise.
   */ public
";


%csmethodmodifiers Event::isSetDelay() const "
/**
   * Predicate for testing whether the delay for this Event is set.
   *
   * @return @c true if the delay of this Event is set, @c false
   * otherwise.
   */ public
";


%csmethodmodifiers Event::isSetPriority() const "
/**
   * (SBML Level&nbsp;3 only) Predicate for testing whether the priority
   * for this Event is set.
   *
   * @return @c true if the priority of this Event is set, @c false
   * otherwise.
   * 
   * @note The element \'priority\' is available in SBML Level&nbsp;3
   * Version&nbsp;1 Core, but is not present in lower Levels of SBML.
   */ public
";


%csmethodmodifiers Event::isSetTimeUnits() const "
/**
   * Predicate for testing whether the \'timeUnits\' attribute of this Event
   * is set.
   *
   * @return @c true if the \'timeUnits\' attribute of this Event is
   * set, @c false otherwise.
   *
   * *
 * @warning <span class=\'warning\'>Definitions of Event in SBML Level 2
 * Versions&nbsp;1 and&nbsp;2 included the additional attribute called
 * \'timeUnits\', but it was removed in SBML Level&nbsp;2 Version&nbsp;3.
 * LibSBML supports this attribute for compatibility with previous versions
 * of SBML Level&nbsp;2, but its use is discouraged since models in
 * Level&nbsp;2 Versions&nbsp;3 and&nbsp;4 cannot contain it.  If a
 * Version&nbsp;3 or&nbsp;4 model sets the attribute, the
 * consistency-checking method SBMLDocument::checkConsistency() will report
 * an error.</span>
 *
   */ public
";


%csmethodmodifiers Event::isSetUseValuesFromTriggerTime() const "
/**
   * Predicate for testing whether the \'useValuesFromTriggerTime\' attribute of this Event
   * is set.
   *
   * @return @c true if the \'useValuesFromTriggerTime\' attribute of this Event is
   * set, @c false otherwise.
   *
   * @note In SBML Level&nbsp;2, this attribute is optional and has a default value of
   * @c true, whereas in Level&nbsp;3 Version&nbsp;1, this optional is mandatory and
   * has no default value.
   */ public
";


%csmethodmodifiers Event::setId(const std::string& sid) "
/**
   * Sets the value of the \'id\' attribute of this Event.
   *
   * The string @p sid is copied.
   *
   * *
 * 
 * SBML has strict requirements for the syntax of identifiers, that is, the
 * values of the \'id\' attribute present on most types of SBML objects.
 * The following is a summary of the definition of the SBML identifier type 
 * <code>SId</code>, which defines the permitted syntax of identifiers.  We
 * express the syntax using an extended form of BNF notation: 
 * <pre style=\'margin-left: 2em; border: none; font-weight: bold; font-size: 13px; color: black\'>
 * letter ::= \'a\'..\'z\',\'A\'..\'Z\'
 * digit  ::= \'0\'..\'9\'
 * idChar ::= letter | digit | \'_\'
 * SId    ::= ( letter | \'_\' ) idChar*
 * </pre>
 * The characters <code>(</code> and <code>)</code> are used for grouping, the
 * character <code>*</code> \'zero or more times\', and the character
 * <code>|</code> indicates logical \'or\'.  The equality of SBML identifiers is
 * determined by an exact character sequence match; i.e., comparisons must be
 * performed in a case-sensitive manner.  In addition, there are a few
 * conditions for the uniqueness of identifiers in an SBML model.  Please
 * consult the SBML specifications for the exact details of the uniqueness
 * requirements.
 * 
 *
   *
   * @param sid the string to use as the identifier of this Event
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public new
";


%csmethodmodifiers Event::setName(const std::string& name) "
/**
   * Sets the value of the \'name\' attribute of this Event.
   *
   * The string in @p name is copied.
   *
   * @param name the new name for the Event
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public new
";


%csmethodmodifiers Event::setTrigger(const Trigger* trigger) "
/**
   * Sets the trigger definition of this Event to a copy of the given
   * Trigger object instance.
   *
   * @param trigger the Trigger object instance to use.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH @endlink
   */ public
";


%csmethodmodifiers Event::setDelay(const Delay* delay) "
/**
   * Sets the delay definition of this Event to a copy of the given Delay
   * object instance.
   *
   * @param delay the Delay object instance to use
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH @endlink
   */ public
";


%csmethodmodifiers Event::setPriority(const Priority* priority) "
/**
   * (SBML Level&nbsp;3 only) Sets the priority definition of this Event
   * to a copy of the given Priority object instance.
   *
   * @param priority the Priority object instance to use
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   * 
   * @note The element \'priority\' is available in SBML Level&nbsp;3
   * Version&nbsp;1 Core, but is not present in lower Levels of SBML.
   */ public
";


%csmethodmodifiers Event::setTimeUnits(const std::string& sid) "
/**
   * Sets the \'timeUnits\' attribute of this Event to a copy of @p sid.
   *
   * @param sid the identifier of the time units to use.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   *
   * *
 * @warning <span class=\'warning\'>Definitions of Event in SBML Level 2
 * Versions&nbsp;1 and&nbsp;2 included the additional attribute called
 * \'timeUnits\', but it was removed in SBML Level&nbsp;2 Version&nbsp;3.
 * LibSBML supports this attribute for compatibility with previous versions
 * of SBML Level&nbsp;2, but its use is discouraged since models in
 * Level&nbsp;2 Versions&nbsp;3 and&nbsp;4 cannot contain it.  If a
 * Version&nbsp;3 or&nbsp;4 model sets the attribute, the
 * consistency-checking method SBMLDocument::checkConsistency() will report
 * an error.</span>
 *
   *
   */ public
";


%csmethodmodifiers Event::setUseValuesFromTriggerTime(bool value) "
/**
   * Sets the \'useValuesFromTriggerTime\' attribute of this Event to a @p value.
   * 
   * *
 * 
 * The optional Delay on Event means there are two times to consider when
 * computing the results of an event: the time at which the event is
 * <em>triggered</em>, and the time at which assignments are
 * <em>executed</em>.  It is also possible to distinguish between the
 * time at which the EventAssignment\'s expression is calculated, and the
 * time at which the assignment is made: the expression could be
 * evaluated at the same time the assignments are performed, i.e., when
 * the event is <em>executed</em>, but it could also be defined to be
 * evaluated at the time the event is <em>triggered</em>.
 * 
 * In SBML Level&nbsp;2 versions prior to Version&nbsp;4, the semantics
 * of Event time delays were defined such that the expressions in the
 * event\'s assignments were always evaluated at the time the event was
 * <em>triggered</em>.  This definition made it difficult to define an
 * event whose assignment formulas were meant to be evaluated at the time
 * the event was <em>executed</em> (i.e., after the time period defined
 * by the value of the Delay element).  In SBML Level&nbsp;2
 * Version&nbsp;4, the attribute \'useValuesFromTriggerTime\' on Event
 * allows a model to indicate the time at which the event\'s assignments
 * are intended to be evaluated.  In SBML Level&nbsp;2, the attribute has
 * a default value of @c true, which corresponds to the interpretation of
 * event assignments prior to Version&nbsp;4: the values of the
 * assignment formulas are computed at the moment the event is triggered,
 * not after the delay.  If \'useValuesFromTriggerTime\'=@c false, it means
 * that the formulas in the event\'s assignments are to be computed after
 * the delay, at the time the event is executed.  In SBML Level&nbsp;3,
 * the attribute is mandatory, not optional, and all events must specify
 * a value for it.
 *
   *
   * @param value the value of useValuesFromTriggerTime to use.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   *
   * *
 * @warning <span class=\'warning\'>The attribute \'useValuesFromTriggerTime\'
 * was introduced in SBML Level&nbsp;2 Version&nbsp;4.  It is not valid in
 * models defined using SBML Level&nbsp;2 versions prior to Version&nbsp;4.
 * If a Level&nbsp;2 Version&nbsp;1&ndash;3 model sets the attribute, the
 * consistency-checking method SBMLDocument::checkConsistency() will report
 * an error.</span>
 *
   */ public
";


%csmethodmodifiers Event::unsetId "
/**
   * Unsets the value of the \'id\' attribute of this Event.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public new
";


%csmethodmodifiers Event::unsetName "
/**
   * Unsets the value of the \'name\' attribute of this Event.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public new
";


%csmethodmodifiers Event::unsetDelay "
/**
   * Unsets the Delay of this Event.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers Event::unsetPriority "
/**
   * (SBML Level&nbsp;3 only) Unsets the Priority of this Event.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   * 
   * @note The element \'priority\' is available in SBML Level&nbsp;3
   * Version&nbsp;1 Core, but is not present in lower Levels of SBML.
   */ public
";


%csmethodmodifiers Event::unsetTrigger "
/**
   * Unsets the Trigger of this Event.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   * 
   * @note The element \'priority\' is available in SBML Level&nbsp;3
   * Version&nbsp;1 Core, but is not present in lower Levels of SBML.
   */ public
";


%csmethodmodifiers Event::unsetTimeUnits "
/**
   * Unsets the \'timeUnits\' attribute of this Event.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   *
   * *
 * @warning <span class=\'warning\'>Definitions of Event in SBML Level 2
 * Versions&nbsp;1 and&nbsp;2 included the additional attribute called
 * \'timeUnits\', but it was removed in SBML Level&nbsp;2 Version&nbsp;3.
 * LibSBML supports this attribute for compatibility with previous versions
 * of SBML Level&nbsp;2, but its use is discouraged since models in
 * Level&nbsp;2 Versions&nbsp;3 and&nbsp;4 cannot contain it.  If a
 * Version&nbsp;3 or&nbsp;4 model sets the attribute, the
 * consistency-checking method SBMLDocument::checkConsistency() will report
 * an error.</span>
 *
   */ public
";


%csmethodmodifiers Event::addEventAssignment(const EventAssignment* ea) "
/**
   * Appends a copy of the given EventAssignment to this Event.
   *
   * @param ea the EventAssignment object to add.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_DUPLICATE_OBJECT_ID LIBSBML_DUPLICATE_OBJECT_ID @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   *
   * * 
 * @note This method should be used with some caution.  The fact that this
 * method @em copies the object passed to it means that the caller will be
 * left holding a physically different object instance than the one contained
 * inside this object.  Changes made to the original object instance (such as
 * resetting attribute values) will <em>not affect the instance in this
 * object</em>.  In addition, the caller should make sure to free the
 * original object if it is no longer being used, or else a memory leak will
 * result.  Please see other methods on this class (particularly a
 * corresponding method whose name begins with the word <code>create</code>)
 * for alternatives that do not lead to these issues.
 *
 * 
   *
   * @see createEventAssignment()
   */ public
";


%csmethodmodifiers Event::createEventAssignment "
/**
   * Creates a new, empty EventAssignment, adds it to this Event\'s list of
   * event assignments and returns the EventAssignment.
   *
   * @return the newly created EventAssignment object instance
   *
   * @see addEventAssignment(EventAssignment ea)
   */ public
";


%csmethodmodifiers Event::createTrigger "
/**
   * Creates a new, empty Trigger, adds it to this Event and 
   * returns the Trigger.
   *
   * @return the newly created Trigger object instance
   */ public
";


%csmethodmodifiers Event::createDelay "
/**
   * Creates a new, empty Delay, adds it to this Event and 
   * returns the Delay.
   *
   * @return the newly created Delay object instance
   */ public
";


%csmethodmodifiers Event::createPriority "
/**
   * (SBML Level&nbsp;3 only) Creates a new, empty Priority, adds it to this
   * Event and returns the Priority.
   *
   * @return the newly created Priority object instance
   * 
   * @note The element \'priority\' is available in SBML Level&nbsp;3
   * Version&nbsp;1 Core, but is not present in lower Levels of SBML.
   */ public
";


%csmethodmodifiers Event::getListOfEventAssignments() const "
/**
   * Returns the list of event assignments for this Event.
   * 
   * @return the list of EventAssignments for this Event.
   */ public
";


%csmethodmodifiers Event::getListOfEventAssignments "
/**
   * Returns the list of event assignments for this Event.
   * 
   * @return the list of EventAssignments for this Event.
   */ public
";


%csmethodmodifiers Event::getEventAssignment "
/**
   * Return a specific EventAssignment object of this Event.
   *
   * @param n an integer, the index of the EventAssignment object to return
   * 
   * @return the <code>n</code>th EventAssignment of this Event.
   */ public
";


%csmethodmodifiers Event::getEventAssignment(unsigned int n) "
/**
   * Return a specific EventAssignment object of this Event.
   *
   * @param n an integer, the index of the EventAssignment object to return
   * 
   * @return the <code>n</code>th EventAssignment of this Event.
   */ public
";


%csmethodmodifiers Event::getEventAssignment(const std::string& variable) const "
/**
   * Return the event assignment indicated by the given @p variable.
   *
   * @param variable a string, the identifier of the variable whose
   * EventAssignment is being sought.
   *
   * @return the EventAssignment for the given @p variable, or @c null if
   * no such EventAssignment exits.
   */ public
";


%csmethodmodifiers Event::getEventAssignment(const std::string& variable) "
/**
   * Return the event assignment indicated by the given @p variable.
   *
   * @param variable a string, the identifier of the variable whose
   * EventAssignment is being sought.
   *
   * @return the EventAssignment for the given @p variable, or @c null if
   * no such EventAssignment exits.
   */ public
";


%csmethodmodifiers Event::getNumEventAssignments() const "
/**
   * Returns the number of EventAssignment objects attached to this
   * Event.
   * 
   * @return the number of EventAssignments in this Event.
   */ public
";


%csmethodmodifiers Event::removeEventAssignment(unsigned int n) "
/**
   * Removes the nth EventAssignment object from this Event object and
   * returns a pointer to it.
   *
   * The caller owns the returned object and is responsible for deleting it.
   *
   * @param n the index of the EventAssignment object to remove
   *
   * @return the EventAssignment object removed.  As mentioned above, 
   * the caller owns the returned item. @c null is returned if the given index 
   * is out of range.
   *
   */ public
";


%csmethodmodifiers Event::removeEventAssignment(const std::string& variable) "
/**
   * Removes the EventAssignment object with the given \'variable\' attribute 
   * from this Event object and returns a pointer to it.
   *
   * The caller owns the returned object and is responsible for deleting it.
   * If none of the EventAssignment objects in this Event object have the 
   * \'variable\' attribute @p variable, then @c null is returned.
   *
   * @param variable the \'variable\' attribute of the EventAssignment object 
   * to remove
   *
   * @return the EventAssignment object removed.  As mentioned above, the 
   * caller owns the returned object. @c null is returned if no EventAssignment
   * object with the \'variable\' attribute exists in this Event object.
   */ public
";


%csmethodmodifiers Event::setSBMLDocument(SBMLDocument* d) "
/**
   * Sets the parent SBMLDocument of this SBML object.
   *
   * @param d the SBMLDocument to use
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Event::connectToChild "
/**
   * Sets this SBML object to child SBML objects (if any).
   * (Creates a child-parent relationship by the parent)
   *
   * Subclasses must override this function if they define
   * one ore more child elements.
   * Basically, this function needs to be called in
   * constructor, copy constructor and assignment operator.
   *
   * @see setSBMLDocument
   * @see enablePackageInternal
   */ /* libsbml-internal */ public new
";


%csmethodmodifiers Event::enablePackageInternal(const std::string& pkgURI, const std::string& pkgPrefix, bool flag) "
/**
   * Enables/Disables the given package with this element and child
   * elements (if any).
   * (This is an internal implementation for enablePackage function)
   *
   * @note Subclasses of the SBML Core package in which one or more child
   * elements are defined must override this function.
   */ /* libsbml-internal */ public new
";


%csmethodmodifiers Event::getTypeCode() const "
/**
   * Returns the libSBML type code of this object instance.
   *
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object:
   * @link libsbmlcs.libsbml.SBML_EVENT SBML_EVENT@endlink (default).
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see getElementName()
   * @see getPackageName()
   */ public new
";


%csmethodmodifiers Event::getElementName() const "
/**
   * Returns the XML element name of this object, which for Event, is
   * always @c \'event\'.
   * 
   * @return the name of this element, i.e., @c \'event\'. 
   */ public new
";


%csmethodmodifiers Event::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Event::setInternalIdOnly "
/**
   * sets the mInternalIdOnly flag
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Event::hasRequiredAttributes() const "
/**
   * Predicate returning @c true if all the required attributes for this
   * Event object have been set.
   *
   * @note The required attributes for a Event object are:
   * @li \'useValuesfromTriggerTime\' (required in SBML Level&nbsp;3)
   */ public new
";


%csmethodmodifiers Event::hasRequiredElements() const "
/**
   * Predicate returning @c true if
   * all the required elements for this Event object
   * have been set.
   *
   * @note The required elements for a Event object are:
   * @li \'trigger\'
   * @li \'listOfEventAssignments\' (required in SBML Level&nbsp;2, optional in Level&nbsp;3)
   */ public new
";


%csmethodmodifiers Event::createObject(XMLInputStream& stream) "
/**
   * Create and return an SBML object of this class, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or @c null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Event::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Event::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Subclasses should override this method to read values from the given
   * XMLAttributes set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Event::readL2Attributes(const XMLAttributes& attributes) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Event::readL3Attributes(const XMLAttributes& attributes) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Event::writeAttributes(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Event::isExplicitlySetUVFTT() const "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfEvents::ListOfEvents(unsigned int level, unsigned int version) "
/**
   * Creates a new ListOfEvents object.
   *
   * The object is constructed such that it is valid for the given SBML
   * Level and Version combination.
   *
   * @param level the SBML Level
   * 
   * @param version the Version within the SBML Level
   */ public
";


%csmethodmodifiers ListOfEvents::ListOfEvents(SBMLNamespaces* sbmlns) "
/**
   * Creates a new ListOfEvents object.
   *
   * The object is constructed such that it is valid for the SBML Level and
   * Version combination determined by the SBMLNamespaces object in @p
   * sbmlns.
   *
   * @param sbmlns an SBMLNamespaces object that is used to determine the
   * characteristics of the ListOfEvents object to be created.
   */ public
";


%csmethodmodifiers ListOfEvents::clone() const "
/**
   * Creates and returns a deep copy of this ListOfEvents.
   *
   * @return a (deep) copy of this ListOfEvents.
   */ public new
";


%csmethodmodifiers ListOfEvents::getItemTypeCode() const "
/**
   * Returns the libSBML type code for the objects contained in this ListOf
   * (i.e., Event objects, if the list is non-empty).
   *
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for the objects contained in this ListOf:
   * @link libsbmlcs.libsbml.SBML_EVENT SBML_EVENT@endlink (default).
   *
   * @see getElementName()
   * @see getPackageName()
   */ public new
";


%csmethodmodifiers ListOfEvents::getElementName() const "
/**
   * Returns the XML element name of this object.
   *
   * For ListOfEvents, the XML element name is @c \'listOfEvents\'.
   * 
   * @return the name of this element, i.e., @c \'listOfEvents\'.
   */ public new
";


%csmethodmodifiers ListOfEvents::get(unsigned int n) "
/**
   * Get a Event from the ListOfEvents.
   *
   * @param n the index number of the Event to get.
   * 
   * @return the <code>n</code>th Event in this ListOfEvents.
   *
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfEvents::get "
/**
   * Get a Event from the ListOfEvents.
   *
   * @param n the index number of the Event to get.
   * 
   * @return the <code>n</code>th Event in this ListOfEvents.
   *
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfEvents::get(const std::string& sid) "
/**
   * Get a Event from the ListOfEvents
   * based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the Event to get.
   * 
   * @return Event in this ListOfEvents
   * with the given @p sid or @c null if no such
   * Event exists.
   *
   * @see get(long n)
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfEvents::get(const std::string& sid) const "
/**
   * Get a Event from the ListOfEvents
   * based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the Event to get.
   * 
   * @return Event in this ListOfEvents
   * with the given @p sid or @c null if no such
   * Event exists.
   *
   * @see get(long n)
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfEvents::remove(unsigned int n) "
/**
   * Removes the nth item from this ListOfEvents items and returns a pointer to
   * it.
   *
   * The caller owns the returned item and is responsible for deleting it.
   *
   * @param n the index of the item to remove
   *
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfEvents::remove(const std::string& sid) "
/**
   * Removes item in this ListOfEvents items with the given identifier.
   *
   * The caller owns the returned item and is responsible for deleting it.
   * If none of the items in this list have the identifier @p sid, then
   * @c null is returned.
   *
   * @param sid the identifier of the item to remove
   *
   * @return the item removed.  As mentioned above, the caller owns the
   * returned item.
   */ public new
";


%csmethodmodifiers ListOfEvents::getElementPosition() const "
/**
   * Get the ordinal position of this element in the containing object
   * (which in this case is the Model object).
   *
   * The ordering of elements in the XML form of SBML is generally fixed
   * for most components in SBML.  So, for example, the ListOfEvents in a
   * model is (in SBML Level&nbsp;2 Version&nbsp;4) the twelfth ListOf___.
   * (However, it differs for different Levels and Versions of SBML, so
   * calling code should not hardwire this number.)
   *
   * @return the ordinal position of the element with respect to its
   * siblings, or @c -1 (default) to indicate the position is not significant.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfEvents::createObject(XMLInputStream& stream) "
/**
   * Create and return an SBML object of this class, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or @c null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%typemap(csimports) EventAssignment "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Implementation of %SBML\'s %EventAssignment construct for
 * %Event.
 *
 * Event contains an optional element called \'listOfEventAssignments\', of
 * class ListOfEventAssignments.  In every instance of an event definition
 * in a model, the object\'s \'listOfEventAssignments\' element must have a
 * non-empty list of one or more \'eventAssignment\' elements of class
 * EventAssignment.  The object class EventAssignment has one required
 * attribute, \'variable\', and a required element, \'math\'.  Being derived
 * from SBase, it also has all the usual attributes and elements of its
 * parent class.
 *
 * An Event object defines when the event can occur, the variables that are
 * affected by the event, and how the variables are affected.  The purpose
 * of the EventAssignment object class is to define how variables are
 * affected by an Event.  In SBML Level&nbsp;2, every Event object instance
 * must have a nonempty list of event assignments; in SBML Level&nbsp;3,
 * the list of assignments is optional.
 *
 * The operation of an Event is divided into two phases (regardless of
 * whether a delay is involved): one phase when the event is @em triggered,
 * and the other when the event is @em executed.   EventAssignment objects
 * are interpreted when an event is executed.  The effects are described
 * below.
 *
 * @section event-variable The attribute \'variable\'
 * 
 * The EventAssignment attribute \'variable\' must be the identifier of an
 * existing Compartment, Species, SpeciesReference, or Parameter
 * instance defined in the model.  When the event is executed, the value of
 * the model component identified by \'variable\' is changed by the
 * EventAssignment to the value computed by the \'math\' element; that is, a
 * species\' quantity, species reference\'s stoichiometry, compartment\'s size
 * or parameter\'s value are reset to the value computed by \'math\'.
 *
 * Certain restrictions are placed on what can appear in \'variable\':
 * <ul>
 * <li> The object identified by the value of the EventAssignment attribute
 * \'variable\' must not have its \'constant\' attribute set to or default to
 * @c true.  (Constants cannot be affected by events.)
 *
 * <li> The \'variable\' attribute must not contain the identifier of a
 * reaction; only species, species references, compartment and parameter
 * values may be set by an Event.
 *
 * <li> The value of every \'variable\' attribute must be unique among the set
 * of EventAssignment structures within a given Event structure.  In other
 * words, a single event cannot have multiple EventAssignment objects
 * assigning the same variable.  (All of them would be performed at the
 * same time when that particular Event triggers, resulting in
 * indeterminacy.)  However, @em separate Event instances can refer to the
 * same variable.
 *  
 * <li> A variable cannot be assigned a value in an EventAssignment object
 * instance and also be assigned a value by an AssignmentRule; i.e., the
 * value of an EventAssignment\'s \'variable\' attribute cannot be the same as
 * the value of a AssignmentRule\' \'variable\' attribute.  (Assignment rules
 * hold at all times, therefore it would be inconsistent to also define an
 * event that reassigns the value of the same variable.)
 * </ul>
 *
 * Note that the time of assignment of the object identified by the
 * value of the \'variable\' attribute is always the time at which the Event
 * is <em>executed</em>, not when it is <em>triggered</em>.  The timing is
 * controlled by the optional Delay in an Event.  The time of
 * assignment is not affected by the \'useValuesFromTriggerTime\'
 * attribute on Eventmdash;that attribute affects the time at which the
 * EventAssignment\'s \'math\' expression is @em evaluated.  In other
 * words, SBML allows decoupling the time at which the
 * \'variable\' is assigned from the time at which its value
 * expression is calculated.
 *
 * @section event-math The \'math\' subelement in an EventAssignment
 * 
 * The MathML expression contained in an EventAssignment defines the new
 * value of the variable being assigned by the Event.
 * 
 * As mentioned above, the time at which the expression in \'math\' is
 * evaluated is determined by the attribute \'useValuesFromTriggerTime\' on
 * Event.  If the attribute value is @c true, the expression must be
 * evaluated when the event is @em triggered; more precisely, the values of
 * identifiers occurring in MathML <code>&lt;ci&gt;</code> elements in the
 * EventAssignment\'s \'math\' expression are the values they have at the
 * point when the event @em triggered.  If, instead,
 * \'useValuesFromTriggerTime\'\'s value is @c false, it means the values at
 * @em execution time should be used; that is, the values of identifiers
 * occurring in MathML <code>&lt;ci&gt;</code> elements in the
 * EventAssignment\'s \'math\' expression are the values they have at the
 * point when the event @em executed.
 *
 * @section version-diffs SBML Level/Version differences
 * 
 * Between Version&nbsp;4 and previous versions of SBML Level&nbsp;2, the
 * requirements regarding the matching of units between an
 * EvengAssignment\'s formula and the units of the object identified by the
 * \'variable\' attribute changed.  Previous versions required consistency,
 * but in SBML Level&nbsp;2 Version&nbsp;4 and in SBML Level&nbsp;3, unit
 * consistency is only @em recommended.  More precisely:
 * <ul>
 *
 * <li> In the case of a species, an EventAssignment sets the referenced
 * species\' quantity (concentration or amount of substance) to the value
 * determined by the formula in the EventAssignment\'s \'math\' subelement.
 * The units of the \'math\' formula should (in SBML Level&nbsp;2
 * Version&nbsp;4 and in Level&nbsp;3) or must (in previous Versions of
 * Level&nbsp;2) be identical to the units of the species.
 *
 * <li> (SBML Level&nbsp;3 only.) In the case of a species reference, an
 * EventAssignment sets the stoichiometry of the reactant or product
 * referenced by the SpeciesReference object to the value determined by the
 * formula in the \'math\' element.  The unit associated with the value
 * produced by the \'math\' formula should be @c dimensionless, because
 * reactant and product stoichiometries in reactions are dimensionless
 * quantities.
 *
 * <li> In the case of a compartment, an EventAssignment sets the
 * referenced compartment\'s size to the size determined by the formula in
 * the \'math\' subelement of the EventAssignment.  The overall units of the
 * formula should (in SBML Level&nbsp;2 Version&nbsp;4 and in Level&nbsp;3)
 * or must (in previous Versions of Level&nbsp;2) be identical to the units
 * specified for the size of the compartment identified by the
 * EventAssignment\'s \'variable\' attribute.
 *
 * <li> In the case of a parameter, an EventAssignment sets the referenced
 * parameter\'s value to that determined by the formula in \'math\'.  The
 * overall units of the formula should (in SBML Level&nbsp;2 Version&nbsp;4
 * and Level&nbsp;3) or must (in previous Versions of Level&nbsp;2) be
 * identical to the units defined for the parameter.
 * </ul>
 * 
 * Note that the formula placed in the \'math\' element <em>has no assumed
 * units</em>.  The consistency of the units of the formula, and the units
 * of the entity which the assignment affects, must be explicitly
 * established just as in the case of the value of the Delay subelement.
 * An approach similar to the one discussed in the context of Delay may be
 * used for the formula of an EventAssignment.
 *
 * @see Event
 *
 * 
 * 
 */
"


%typemap(csimports) ListOfEventAssignments "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Implementation of SBML\'s %ListOfEventAssignments
 * construct.
 * 
 * *
 * 
 * The various ListOf___ classes in SBML are merely containers used for
 * organizing the main components of an SBML model.  All are derived from
 * the abstract class SBase, and inherit the various attributes and
 * subelements of SBase, such as \'metaid\' as and \'annotation\'.  The
 * ListOf___ classes do not add any attributes of their own.
 *
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 *
 * @htmlinclude listof-illustration.html
 *
 * Readers may wonder about the motivations for using the ListOf___
 * containers.  A simpler approach in XML might be to place the components
 * all directly at the top level of the model definition.  The choice made
 * in SBML is to group them within XML elements named after
 * ListOf<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from SBase means that software tools can add information @em about
 * the lists themselves into each list container\'s \'annotation\'.
 * 
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 *
 *
 */
"


%csmethodmodifiers EventAssignment::EventAssignment(unsigned int level, unsigned int version) "
/**
   * Creates a new EventAssignment using the given SBML @p level and @p version
   * values.
   *
   * @param level a long integer, the SBML Level to assign to this EventAssignment
   *
   * @param version a long integer, the SBML Version to assign to this
   * EventAssignment
   *
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the given @p level and @p version combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent SBMLDocument object.
   *
   * * 
 * @note Upon the addition of a EventAssignment object to an SBMLDocument
 * (e.g., using Event::addEventAssignment(@if java EventAssignment ea@endif)), 
 * the SBML Level, SBML Version and XML namespace of the document @em
 * override the values used when creating the EventAssignment object via
 * this constructor.  This is necessary to ensure that an SBML document
 * is a consistent structure.  Nevertheless, the ability to supply the
 * values at the time of creation of a EventAssignment is an important
 * aid to producing valid SBML.  Knowledge of the intented SBML Level and
 * Version determine whether it is valid to assign a particular value to
 * an attribute, or whether it is valid to add an object to an existing
 * SBMLDocument.
 *
   */ public
";


%csmethodmodifiers EventAssignment::EventAssignment(SBMLNamespaces* sbmlns) "
/**
   * Creates a new EventAssignment using the given SBMLNamespaces object
   * @p sbmlns.
   *
   * *
 *  
 * The SBMLNamespaces object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML\'s SBMLNamespaces facilities is to create an
 * SBMLNamespaces object somewhere in a program once, then hand that object
 * as needed to object constructors that accept SBMLNamespaces as arguments.
 *
 * 
   *
   * @param sbmlns an SBMLNamespaces object.
   *
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the given @p level and @p version combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent SBMLDocument object.
   *
   * * 
 * @note Upon the addition of a EventAssignment object to an SBMLDocument
 * (e.g., using Event::addEventAssignment(@if java EventAssignment ea@endif)), 
 * the SBML Level, SBML Version and XML namespace of the document @em
 * override the values used when creating the EventAssignment object via
 * this constructor.  This is necessary to ensure that an SBML document
 * is a consistent structure.  Nevertheless, the ability to supply the
 * values at the time of creation of a EventAssignment is an important
 * aid to producing valid SBML.  Knowledge of the intented SBML Level and
 * Version determine whether it is valid to assign a particular value to
 * an attribute, or whether it is valid to add an object to an existing
 * SBMLDocument.
 *
   */ public
";


%csmethodmodifiers EventAssignment::EventAssignment(const EventAssignment& orig) "
/**
   * Copy constructor; creates a copy of this EventAssignment.
   *
   * @param orig the object to copy.
   * 
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the argument @p orig is @c null.
   */ public
";


%csmethodmodifiers EventAssignment::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor for this instance of EventAssignment.
   *
   * @param v the SBMLVisitor instance to be used.
   *
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether the Visitor would like to visit the next EventAssignment in
   * the list within which this EventAssignment is embedded (i.e., in the
   * ListOfEventAssignments located in the enclosing Event instance).
   */ public
";


%csmethodmodifiers EventAssignment::clone() const "
/**
   * Creates and returns a deep copy of this EventAssignment.
   * 
   * @return a (deep) copy of this EventAssignment.
   */ public new
";


%csmethodmodifiers EventAssignment::getVariable() const "
/**
   * Get the value of this EventAssignment\'s \'variable\' attribute.
   * 
   * @return the identifier stored in the \'variable\' attribute of this
   * EventAssignment.
   */ public
";


%csmethodmodifiers EventAssignment::getMath() const "
/**
   * Get the mathematical expression in this EventAssignment\'s \'math\'
   * subelement.
   * 
   * @return the top ASTNode of an abstract syntax tree representing the
   * mathematical formula in this EventAssignment.
   */ public
";


%csmethodmodifiers EventAssignment::isSetVariable() const "
/**
   * Predicate for testing whether the attribute \'variable\' of this
   * EventAssignment is set.
   * 
   * @return @c true if the \'variable\' attribute of this EventAssignment
   * is set, @c false otherwise.
   */ public
";


%csmethodmodifiers EventAssignment::isSetMath() const "
/**
   * Predicate for testing whether the \'math\' subelement of this
   * EventAssignment is set.
   * 
   * @return @c true if this EventAssignment has a \'math\' subelement,
   * @c false otherwise.
   */ public
";


%csmethodmodifiers EventAssignment::setVariable(const std::string& sid) "
/**
   * Sets the attribute \'variable\' of this EventAssignment to a copy of
   * the given identifier string.
   *
   * @param sid the identifier of a Compartment, Species or (global)
   * Parameter defined in this model.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers EventAssignment::setMath(const ASTNode* math) "
/**
   * Sets the \'math\' subelement of this EventAssignment to a copy of the
   * given ASTNode.
   *
   * @param math an ASTNode that will be copied and stored as the
   * mathematical formula for this EventAssignment.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   */ public
";


%csmethodmodifiers EventAssignment::getDerivedUnitDefinition "
/**
   * Calculates and returns a UnitDefinition that expresses the units of
   * measurement assumed for the \'math\' expression of this EventAssignment.
   *
   * *
 * 
 * The units are calculated based on the mathematical expression in the
 * EventAssignment and the model quantities referenced by
 * <code>&lt;ci&gt;</code> elements used within that expression.  The method
 * EventAssignment::getDerivedUnitDefinition() returns the calculated units,
 * to the extent that libSBML can compute them.
 * 
   *
   * * 
 * @note The functionality that facilitates unit analysis depends on the
 * model as a whole.  Thus, in cases where the object has not been added to
 * a model or the model itself is incomplete, unit analysis is not possible
 * and this method will return @c null.
 *
 * 
   *
   * * 
 * @warning <span class=\'warning\'>Note that it is possible the \'math\'
 * expression in the EventAssignment contains literal numbers or parameters
 * with undeclared units.  In those cases, it is not possible to calculate
 * the units of the overall expression without making assumptions.  LibSBML
 * does not make assumptions about the units, and
 * EventAssignment::getDerivedUnitDefinition() only returns the units as far
 * as it is able to determine them.  For example, in an expression <em>X +
 * Y</em>, if <em>X</em> has unambiguously-defined units and <em>Y</em> does
 * not, it will return the units of <em>X</em>.  When using this method,
 * <strong>it is critical that callers also invoke the method</strong>
 * EventAssignment::containsUndeclaredUnits() <strong>to determine whether
 * this situation holds</strong>.  Callers should take suitable action in
 * those situations.</span>
 *
   * 
   * @return a UnitDefinition that expresses the units of the math 
   * expression of this EventAssignment, or @c null if one cannot be constructed.
   *
   * @see containsUndeclaredUnits()
   */ public
";


%csmethodmodifiers EventAssignment::getDerivedUnitDefinition() const "
/**
   * Calculates and returns a UnitDefinition that expresses the units of
   * measurement assumed for the \'math\' expression of this EventAssignment.
   *
   * *
 * 
 * The units are calculated based on the mathematical expression in the
 * EventAssignment and the model quantities referenced by
 * <code>&lt;ci&gt;</code> elements used within that expression.  The method
 * EventAssignment::getDerivedUnitDefinition() returns the calculated units,
 * to the extent that libSBML can compute them.
 * 
   *
   * * 
 * @note The functionality that facilitates unit analysis depends on the
 * model as a whole.  Thus, in cases where the object has not been added to
 * a model or the model itself is incomplete, unit analysis is not possible
 * and this method will return @c null.
 *
 * 
   *
   * * 
 * @warning <span class=\'warning\'>Note that it is possible the \'math\'
 * expression in the EventAssignment contains literal numbers or parameters
 * with undeclared units.  In those cases, it is not possible to calculate
 * the units of the overall expression without making assumptions.  LibSBML
 * does not make assumptions about the units, and
 * EventAssignment::getDerivedUnitDefinition() only returns the units as far
 * as it is able to determine them.  For example, in an expression <em>X +
 * Y</em>, if <em>X</em> has unambiguously-defined units and <em>Y</em> does
 * not, it will return the units of <em>X</em>.  When using this method,
 * <strong>it is critical that callers also invoke the method</strong>
 * EventAssignment::containsUndeclaredUnits() <strong>to determine whether
 * this situation holds</strong>.  Callers should take suitable action in
 * those situations.</span>
 *
   * 
   * @return a UnitDefinition that expresses the units of the math 
   * expression of this EventAssignment, or @c null if one cannot be constructed.
   *
   * @see containsUndeclaredUnits()
   */ public
";


%csmethodmodifiers EventAssignment::containsUndeclaredUnits "
/**
   * Predicate returning @c true if the math expression of this
   * EventAssignment contains literal numbers or parameters with undeclared
   * units.
   *
   * *
 * 
 * The units are calculated based on the mathematical expression in the
 * EventAssignment and the model quantities referenced by
 * <code>&lt;ci&gt;</code> elements used within that expression.  The method
 * EventAssignment::getDerivedUnitDefinition() returns the calculated units,
 * to the extent that libSBML can compute them.
 *
   *
   * If the expression contains literal numbers or parameters with undeclared
   * units, libSBML may not be able to compute the full units of the
   * expression and will only return what it can compute.  Callers should
   * always use EventAssignment::containsUndeclaredUnits() when using
   * EventAssignment::getDerivedUnitDefinition() to decide whether the
   * returned units may be incomplete.
   * 
   * @return @c true if the math expression of this EventAssignment
   * includes parameters/numbers 
   * with undeclared units, @c false otherwise.
   *
   * @note A return value of @c true indicates that the UnitDefinition
   * returned by EventAssignment::getDerivedUnitDefinition() may not
   * accurately represent the units of the expression.
   *
   * @see getDerivedUnitDefinition()
   */ public
";


%csmethodmodifiers EventAssignment::containsUndeclaredUnits() const "
/**
   * Predicate returning @c true if the math expression of this
   * EventAssignment contains literal numbers or parameters with undeclared
   * units.
   *
   * *
 * 
 * The units are calculated based on the mathematical expression in the
 * EventAssignment and the model quantities referenced by
 * <code>&lt;ci&gt;</code> elements used within that expression.  The method
 * EventAssignment::getDerivedUnitDefinition() returns the calculated units,
 * to the extent that libSBML can compute them.
 *
   *
   * If the expression contains literal numbers or parameters with undeclared
   * units, libSBML may not be able to compute the full units of the
   * expression and will only return what it can compute.  Callers should
   * always use EventAssignment::containsUndeclaredUnits() when using
   * EventAssignment::getDerivedUnitDefinition() to decide whether the
   * returned units may be incomplete.
   * 
   * @return @c true if the math expression of this EventAssignment
   * includes parameters/numbers 
   * with undeclared units, @c false otherwise.
   *
   * @note A return value of @c true indicates that the UnitDefinition
   * returned by EventAssignment::getDerivedUnitDefinition() may not
   * accurately represent the units of the expression.
   *
   * @see getDerivedUnitDefinition()
   */ public
";


%csmethodmodifiers EventAssignment::getTypeCode() const "
/**
   * Returns the libSBML type code of this object instance.
   *
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object:
   * @link libsbmlcs.libsbml.SBML_EVENT_ASSIGNMENT SBML_EVENT_ASSIGNMENT@endlink (default).
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see getElementName()
   * @see getPackageName()
   */ public new
";


%csmethodmodifiers EventAssignment::getElementName() const "
/**
   * Returns the XML element name of this object, which for
   * EventAssignment, is always @c \'eventAssignment\'.
   * 
   * @return the name of this element, i.e., @c \'eventAssignment\'. 
   */ public new
";


%csmethodmodifiers EventAssignment::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers EventAssignment::hasRequiredAttributes() const "
/**
   * Predicate returning @c true if all the required attributes for this
   * EventAssignment object have been set.
   *
   * @note The required attributes for a EventAssignment object are:
   * @li \'variable\'
   *
   * @return a bool value indicating whether all the required
   * attributes for this object have been defined.
   */ public new
";


%csmethodmodifiers EventAssignment::hasRequiredElements() const "
/**
   * Predicate returning @c true if all the required elements for this
   * EventAssignment object have been set.
   *
   * @note The required elements for a EventAssignment object are:
   * @li \'math\'
   *
   * @return a bool value indicating whether all the required
   * elements for this object have been defined.
   */ public new
";


%csmethodmodifiers EventAssignment::getId() const "
/** */ /* libsbml-internal */ public new
";


%csmethodmodifiers EventAssignment::renameSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames all the @c SIdRef attributes on this element, including any
   * found in MathML.
   *
   * *
 * 

 * In SBML, object identifiers are of a data type called <code>SId</code>.
 * In SBML Level&nbsp;3, an explicit data type called <code>SIdRef</code> was
 * introduced for attribute values that refer to <code>SId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to an identifier\', but the effective
 * data type was the same as <code>SIdRef</code>in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>SIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 *
 *
   * 
   * This method works by looking at all attributes and (if appropriate)
   * mathematical formulas, comparing the identifiers to the value of @p
   * oldid.  If any matches are found, the matching identifiers are replaced
   * with @p newid.  The method does @em not descend into child elements.
   *
   * @param oldid the old identifier
   * @param newid the new identifier
   */ public
";


%csmethodmodifiers EventAssignment::renameUnitSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames all the @c UnitSIdRef attributes on this element.
   *
   * *
 * 
 * In SBML, unit definitions have identifiers of type <code>UnitSId</code>.  In
 * SBML Level&nbsp;3, an explicit data type called <code>UnitSIdRef</code> was
 * introduced for attribute values that refer to <code>UnitSId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to a unit identifier\', but the effective
 * data type was the same as <code>UnitSIdRef</code> in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>UnitSIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 * 
 *
   *
   * This method works by looking at all unit identifier attribute values
   * (including, if appropriate, inside mathematical formulas), comparing the
   * unit identifiers to the value of @p oldid.  If any matches are found,
   * the matching identifiers are replaced with @p newid.  The method does
   * @em not descend into child elements.
   * 
   * @param oldid the old identifier
   * @param newid the new identifier
   */ public
";


%csmethodmodifiers EventAssignment::replaceSIDWithFunction(const std::string& id, const ASTNode* function) "
/**
   * Replace all nodes with the name \'id\' from the child \'math\' object with the provided function. 
   */ /* libsbml-internal */ public
";


%csmethodmodifiers EventAssignment::divideAssignmentsToSIdByFunction(const std::string& id, const ASTNode* function) "
/**
   * If this assignment assigns a value to the \'id\' element, replace the \'math\' object with the function (existing/function). 
   */ /* libsbml-internal */ public
";


%csmethodmodifiers EventAssignment::multiplyAssignmentsToSIdByFunction(const std::string& id, const ASTNode* function) "
/**
   * If this assignment assigns a value to the \'id\' element, replace the \'math\' object with the function (existing*function). 
   */ /* libsbml-internal */ public
";


%csmethodmodifiers EventAssignment::readOtherXML(XMLInputStream& stream) "
/**
   * Subclasses should override this method to read (and store) XHTML,
   * MathML, etc. directly from the XMLInputStream.
   *
   * @return true if the subclass read from the stream, false otherwise.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers EventAssignment::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers EventAssignment::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Subclasses should override this method to read values from the given
   * XMLAttributes set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers EventAssignment::readL2Attributes(const XMLAttributes& attributes) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers EventAssignment::readL3Attributes(const XMLAttributes& attributes) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers EventAssignment::writeAttributes(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfEventAssignments::ListOfEventAssignments(unsigned int level, unsigned int version) "
/**
   * Creates a new ListOfEventAssignments object.
   *
   * The object is constructed such that it is valid for the given SBML
   * Level and Version combination.
   *
   * @param level the SBML Level
   * 
   * @param version the Version within the SBML Level
   */ public
";


%csmethodmodifiers ListOfEventAssignments::ListOfEventAssignments(SBMLNamespaces* sbmlns) "
/**
   * Creates a new ListOfEventAssignments object.
   *
   * The object is constructed such that it is valid for the SBML Level and
   * Version combination determined by the SBMLNamespaces object in @p
   * sbmlns.
   *
   * @param sbmlns an SBMLNamespaces object that is used to determine the
   * characteristics of the ListOfEventAssignments object to be created.
   */ public
";


%csmethodmodifiers ListOfEventAssignments::clone() const "
/**
   * Creates and returns a deep copy of this ListOfEventAssignments.
   *
   * @return a (deep) copy of this ListOfEventAssignments.
   */ public new
";


%csmethodmodifiers ListOfEventAssignments::getItemTypeCode() const "
/**
   * Returns the libSBML type code for the objects contained in this ListOf
   * (i.e., EventAssignment objects, if the list is non-empty).
   *
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for the objects contained in this ListOf:
   * @link libsbmlcs.libsbml.SBML_EVENT_ASSIGNMENT SBML_EVENT_ASSIGNMENT@endlink (default).
   *
   * @see getElementName()
   * @see getPackageName()
   */ public new
";


%csmethodmodifiers ListOfEventAssignments::getElementName() const "
/**
   * Returns the XML element name of this object.
   *
   * For ListOfEventAssignments, the XML element name is @c
   * \'listOfEventAssignments\'.
   * 
   * @return the name of this element, i.e., @c \'listOfEventAssignments\'.
   */ public new
";


%csmethodmodifiers ListOfEventAssignments::get(unsigned int n) "
/**
   * Get a EventAssignment from the ListOfEventAssignments.
   *
   * @param n the index number of the EventAssignment to get.
   * 
   * @return the nth EventAssignment in this ListOfEventAssignments.
   *
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfEventAssignments::get "
/**
   * Get a EventAssignment from the ListOfEventAssignments.
   *
   * @param n the index number of the EventAssignment to get.
   * 
   * @return the nth EventAssignment in this ListOfEventAssignments.
   *
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfEventAssignments::get(const std::string& sid) "
/**
   * Get a EventAssignment from the ListOfEventAssignments
   * based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the EventAssignment to get.
   * 
   * @return EventAssignment in this ListOfEventAssignments
   * with the given @p sid or @c null if no such
   * EventAssignment exists.
   *
   * @see get(long n)
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfEventAssignments::get(const std::string& sid) const "
/**
   * Get a EventAssignment from the ListOfEventAssignments
   * based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the EventAssignment to get.
   * 
   * @return EventAssignment in this ListOfEventAssignments
   * with the given @p sid or @c null if no such
   * EventAssignment exists.
   *
   * @see get(long n)
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfEventAssignments::remove(unsigned int n) "
/**
   * Removes the nth item from this ListOfEventAssignments items and returns
   * a pointer to it.
   *
   * The caller owns the returned item and is responsible for deleting it.
   *
   * @param n the index of the item to remove
   *
   * @see size()
   */ public new
";


%csmethodmodifiers ListOfEventAssignments::remove(const std::string& sid) "
/**
   * Removes item in this ListOfEventAssignments items with the given
   * identifier.
   *
   * The caller owns the returned item and is responsible for deleting it.
   * If none of the items in this list have the identifier @p sid, then @c
   * null is returned.
   *
   * @param sid the identifier of the item to remove
   *
   * @return the item removed.  As mentioned above, the caller owns the
   * returned item.
   */ public new
";


%csmethodmodifiers ListOfEventAssignments::getElementBySId(const std::string& id) "
/**
   * Returns the first child element found that has the given @p id in the
   * model-wide SId namespace, or @c null if no such object is found.
   *
   * Note that EventAssignments do not actually have IDs, but the libsbml
   * interface pretends that they do: no event assignment is returned by this
   * function.
   *
   * @param id string representing the id of objects to find
   *
   * @return pointer to the first element found with the given @p id.
   */ public
";


%csmethodmodifiers ListOfEventAssignments::getElementPosition() const "
/**
   * Get the ordinal position of this element in the containing object
   * (which in this case is the Model object).
   * 
   * @return the ordinal position of the element with respect to its
   * siblings, or @c -1 (default) to indicate the position is not significant.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfEventAssignments::createObject(XMLInputStream& stream) "
/**
   * Create and return an SBML object of this class, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or @c null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%typemap(csimports) Trigger "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Implementation of %SBML\'s %Trigger construct for %Event.
 *
 * An Event object defines when the event can occur, the variables that are
 * affected by the event, and how the variables are affected.  The Trigger
 * construct in SBML is used to define a mathematical expression that
 * determines when an Event is @em triggered.
 *
 * A Trigger object in SBML Level&nbsp;2 and Level&nbsp;3 contains one
 * subelement named \'math\' containing a MathML expression.  The expression
 * must evaluate to a value of type @c bool.  The exact moment at which
 * the expression evaluates to @c true is the time point when the Event is
 * @em triggered.  In SBML Level&nbsp;3, Trigger has additional attributes
 * that must be assigned values; they are discussed in a separate section
 * below.
 * 
 * An event only @em triggers when its Trigger expression makes the
 * transition in value from @c false to @c true.  The event will also
 * trigger at any subsequent time points when the trigger makes this
 * transition; in other words, an event can be triggered multiple times
 * during a simulation if its trigger condition makes the transition from
 * @c false to @c true more than once.  In SBML Level&nbsp;3, the behavior
 * at the very start of simulation (i.e., at <em>t = 0</em>, where
 * <em>t</em> stands for time) is determined in part by the bool flag
 * \'initialValue\'.  This and other additional features introduced in SBML
 * Level&nbsp;3 are discussed further below.
 *
 * @section version-diffs Version differences
 *
 * SBML Level&nbsp;3 Version&nbsp;1 introduces two required attributes
 * on the Trigger object: \'persistent\' and \'initialValue\'.  The rest of
 * this introduction describes these two attributes.
 *
 * @subsection trigger-persistent The \'persistent\' attribute on Trigger
 *
 * In the interval between when an Event object <em>triggers</em> (i.e.,
 * its Trigger object expression transitions in value from @c false to
 * @c true) and when its assignments are to be <em>executed</em>, conditions
 * in the model may change such that the trigger expression transitions
 * back from @c true to @c false.  Should the event\'s assignments still be
 * made if this happens?  Answering this question is the purpose of the
 * \'persistent\' attribute on Trigger.
 * 
 * If the bool attribute \'persistent\' has a value of @c true, then once
 * the event is triggered, all of its assignments are always performed when
 * the time of execution is reached.  The name @em persistent is meant to
 * evoke the idea that the trigger expression does not have to be
 * re-checked after it triggers if \'persistent\'=@c true.  Conversely, if
 * the attribute value is @c false, then the trigger expression is not
 * assumed to persist: if the expression transitions in value back to @c
 * false at any time between when the event triggered and when it is to be
 * executed, the event is no longer considered to have triggered and its
 * assignments are not executed.  (If the trigger expression transitions
 * once more to @c true after that point, then the event is triggered, but
 * this then constitutes a whole new event trigger-and-execute sequence.)
 * 
 * The \'persistent\' attribute can be especially useful when Event objects
 * contain Delay objects, but it is relevant even in a model without delays
 * if the model contains two or more events.  As explained in the
 * introduction to this section, the operation of all events in SBML
 * (delayed or not) is conceptually divided into two phases,
 * <em>triggering</em> and <em>execution</em>; however, unless events have
 * priorities associated with them, SBML does not mandate a particular
 * ordering of event execution in the case of simultaneous events.  Models
 * with multiple events can lead to situations where the execution of one
 * event affects another event\'s trigger expression value.  If that other
 * event has \'persistent\'=@c false, and its trigger expression evaluates to
 * @c false before it is to be executed, the event must not be executed
 * after all.
 * 
 * @subsection trigger-initialvalue The \'initialValue\' attribute on Trigger
 * 
 * As mentioned above, an event <em>triggers</em> when the mathematical
 * expression in its Trigger object transitions in value from @c false to
 * @c true.  An unanswered question concerns what happens at the start of a
 * simulation: can event triggers make this transition at <em>t = 0</em>,
 * where <em>t</em> stands for time?
 * 
 * In order to determine whether an event may trigger at <em>t = 0</em>, it
 * is necessary to know what value the Trigger object\'s \'math\' expression
 * had immediately prior to <em>t = 0</em>.  This starting value of the
 * trigger expression is determined by the value of the bool attribute
 * \'initialValue\'.  A value of @c true means the trigger expression is
 * taken to have the value @c true immediately prior to <em>t = 0</em>.  In
 * that case, the trigger cannot transition in value from @c false to @c
 * true at the moment simulation begins (because it has the value @c true
 * both before and after <em>t = 0</em>), and can only make the transition
 * from @c false to @c true sometime <em>after</em> <em>t = 0</em>.  (To do
 * that, it would also first have to transition to @c false before it could
 * make the transition from @c false back to @c true.)  Conversely, if
 * \'initialValue\'=@c false, then the trigger expression is assumed to start
 * with the value @c false, and therefore may trigger at <em>t = 0</em> if
 * the expression evaluates to @c true at that moment.
 * 
 *
 * @see Event
 * @see Delay
 * @see EventAssignment
 */
"


%csmethodmodifiers Trigger::Trigger(unsigned int level, unsigned int version) "
/**
   * Creates a new Trigger using the given SBML @p level and @p version
   * values.
   *
   * @param level a long integer, the SBML Level to assign to this Trigger
   *
   * @param version a long integer, the SBML Version to assign to this
   * Trigger
   *
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the given @p level and @p version combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent SBMLDocument object.
   */ public
";


%csmethodmodifiers Trigger::Trigger(SBMLNamespaces* sbmlns) "
/**
   * Creates a new Trigger using the given SBMLNamespaces object
   * @p sbmlns.
   *
   * *
 *  
 * The SBMLNamespaces object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML\'s SBMLNamespaces facilities is to create an
 * SBMLNamespaces object somewhere in a program once, then hand that object
 * as needed to object constructors that accept SBMLNamespaces as arguments.
 *
 * 
   *
   * @param sbmlns an SBMLNamespaces object.
   *
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the given @p level and @p version combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent SBMLDocument object.
   */ public
";


%csmethodmodifiers Trigger::Trigger(const Trigger& orig) "
/**
   * Copy constructor; creates a copy of this Trigger.
   *
   * @param orig the object to copy.
   * 
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the argument @p orig is @c null.
   */ public
";


%csmethodmodifiers Trigger::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor for this instance of Trigger.
   *
   * @param v the SBMLVisitor instance to be used.
   *
   * @return the result of calling <code>v.visit()</code>.
   */ public
";


%csmethodmodifiers Trigger::clone() const "
/**
   * Creates and returns a deep copy of this Trigger.
   *
   * @return a (deep) copy of this Trigger.
   */ public new
";


%csmethodmodifiers Trigger::getMath() const "
/**
   * Get the mathematical formula for the trigger and return it
   * as an AST.
   * 
   * @return the math of this Trigger.
   */ public
";


%csmethodmodifiers Trigger::getInitialValue() const "
/**
   * (SBML Level&nbsp;3 only) Get the value of the \'initialValue\' attribute
   * of this Trigger.
   * 
   * @return the bool value stored as the \'initialValue\' attribute value
   * in this Trigger.
   * 
   * @note The attribute \'initialValue\' is available in SBML Level&nbsp;3
   * Version&nbsp;1 Core, but is not present in lower Levels of SBML.
   */ public
";


%csmethodmodifiers Trigger::getPersistent() const "
/**
   * (SBML Level&nbsp;3 only) Get the value of the \'persistent\' attribute
   * of this Trigger.
   * 
   * @return the bool value stored as the \'persistent\' attribute value
   * in this Trigger.
   * 
   * @note The attribute \'persistent\' is available in SBML Level&nbsp;3
   * Version&nbsp;1 Core, but is not present in lower Levels of SBML.
   */ public
";


%csmethodmodifiers Trigger::isSetMath() const "
/**
   * Predicate to test whether the math for this trigger is set.
   *
   * @return @c true if the formula (meaning the \'math\' subelement) of
   * this Trigger is set, @c false otherwise.
   */ public
";


%csmethodmodifiers Trigger::isSetInitialValue() const "
/**
   * (SBML Level&nbsp;3 only) Predicate to test whether the \'initialValue\'
   * attribute for this trigger is set.
   *
   * @return @c true if the initialValue attribute of
   * this Trigger is set, @c false otherwise.
   * 
   * @note The attribute \'initialValue\' is available in SBML Level&nbsp;3
   * Version&nbsp;1 Core, but is not present in lower Levels of SBML.
   */ public
";


%csmethodmodifiers Trigger::isSetPersistent() const "
/**
   * (SBML Level&nbsp;3 only) Predicate to test whether the \'persistent\'
   * attribute for this trigger is set.
   *
   * @return @c true if the persistent attribute of
   * this Trigger is set, @c false otherwise.
   * 
   * @note The attribute \'persistent\' is available in SBML Level&nbsp;3
   * Version&nbsp;1 Core, but is not present in lower Levels of SBML.
   */ public
";


%csmethodmodifiers Trigger::setMath(const ASTNode* math) "
/**
   * Sets the trigger expression of this Trigger instance to a copy of the given
   * ASTNode.
   *
   * @param math an ASTNode representing a formula tree.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   */ public
";


%csmethodmodifiers Trigger::setInitialValue(bool initialValue) "
/**
   * (SBML Level&nbsp;3 only) Sets the \'initialValue\' attribute of this Trigger instance.
   *
   * @param initialValue a bool representing the initialValue to be set.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   * 
   * @note The attribute \'initialValue\' is available in SBML Level&nbsp;3
   * Version&nbsp;1 Core, but is not present in lower Levels of SBML.
   */ public
";


%csmethodmodifiers Trigger::setPersistent(bool persistent) "
/**
   * (SBML Level&nbsp;3 only) Sets the \'persistent\' attribute of this Trigger instance.
   *
   * @param persistent a bool representing the persistent value to be set.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   * 
   * @note The attribute \'persistent\' is available in SBML Level&nbsp;3
   * Version&nbsp;1 Core, but is not present in lower Levels of SBML.
   */ public
";


%csmethodmodifiers Trigger::setSBMLDocument(SBMLDocument* d) "
/**
   * Sets the parent SBMLDocument of this SBML object.
   *
   * @param d the SBMLDocument to use.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Trigger::setParentSBMLObject(SBase* sb) "
/**
   * Sets the parent SBML object of this SBML object.
   *
   * @param sb the SBML object to use
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Trigger::getTypeCode() const "
/**
   * Returns the libSBML type code of this object instance.
   *
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object:
   * @link libsbmlcs.libsbml.SBML_TRIGGER SBML_TRIGGER@endlink (default).
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see getElementName()
   * @see getPackageName()
   */ public new
";


%csmethodmodifiers Trigger::getElementName() const "
/**
   * Returns the XML element name of this object, which for Trigger, is
   * always @c \'trigger\'.
   * 
   * @return the name of this element, i.e., @c \'trigger\'. 
   */ public new
";


%csmethodmodifiers Trigger::renameSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames all the @c SIdRef attributes on this element, including any
   * found in MathML.
   *
   * *
 * 

 * In SBML, object identifiers are of a data type called <code>SId</code>.
 * In SBML Level&nbsp;3, an explicit data type called <code>SIdRef</code> was
 * introduced for attribute values that refer to <code>SId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to an identifier\', but the effective
 * data type was the same as <code>SIdRef</code>in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>SIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 *
 *
   * 
   * This method works by looking at all attributes and (if appropriate)
   * mathematical formulas, comparing the identifiers to the value of @p
   * oldid.  If any matches are found, the matching identifiers are replaced
   * with @p newid.  The method does @em not descend into child elements.
   *
   * @param oldid the old identifier
   * @param newid the new identifier
   */ public
";


%csmethodmodifiers Trigger::renameUnitSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames all the @c UnitSIdRef attributes on this element.
   *
   * *
 * 
 * In SBML, unit definitions have identifiers of type <code>UnitSId</code>.  In
 * SBML Level&nbsp;3, an explicit data type called <code>UnitSIdRef</code> was
 * introduced for attribute values that refer to <code>UnitSId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to a unit identifier\', but the effective
 * data type was the same as <code>UnitSIdRef</code> in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>UnitSIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 * 
 *
   *
   * This method works by looking at all unit identifier attribute values
   * (including, if appropriate, inside mathematical formulas), comparing the
   * unit identifiers to the value of @p oldid.  If any matches are found,
   * the matching identifiers are replaced with @p newid.  The method does
   * @em not descend into child elements.
   * 
   * @param oldid the old identifier
   * @param newid the new identifier
   */ public
";


%csmethodmodifiers Trigger::replaceSIDWithFunction(const std::string& id, const ASTNode* function) "
/**
   * Replace all nodes with the name \'id\' from the child \'math\' object with the provided function. 
   *
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Trigger::getElementPosition() const "
/**
   * Returns the position of this element.
   * 
   * @return the ordinal position of the element with respect to its
   * siblings or -1 (default) to indicate the position is not significant.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Trigger::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Trigger::hasRequiredElements() const "
/**
   * Predicate returning @c true if
   * all the required elements for this Trigger object
   * have been set.
   *
   * @note The required elements for a Trigger object are:
   * @li \'math\'
   *
   * @return a bool value indicating whether all the required
   * elements for this object have been defined.
   */ public new
";


%csmethodmodifiers Trigger::hasRequiredAttributes() const "
/**
   * Predicate returning @c true if
   * all the required attributes for this Trigger object
   * have been set.
   *
   * @note The required attributes for a Trigger object are:
   * @li \'persistent\' (required in SBML Level&nbsp;3)
   * @li \'initialValue\' (required in SBML Level&nbsp;3)
   *
   * @return a bool value indicating whether all the required
   * attributes for this object have been defined.
   */ public new
";


%csmethodmodifiers Trigger::removeFromParentAndDelete "
/**
   * Finds this Trigger\'s Event parent and calls unsetTrigger() on it, indirectly deleting itself.  Overridden from the SBase function since the parent is not a ListOf.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers Trigger::readOtherXML(XMLInputStream& stream) "
/**
   * Subclasses should override this method to read (and store) XHTML,
   * MathML, etc. directly from the XMLInputStream.
   *
   * @return true if the subclass read from the stream, false otherwise.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Trigger::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Trigger::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Subclasses should override this method to read values from the given
   * XMLAttributes set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Trigger::readL2Attributes(const XMLAttributes& attributes) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Trigger::readL3Attributes(const XMLAttributes& attributes) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Trigger::writeAttributes(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   */ /* libsbml-internal */ public
";


%typemap(csimports) Delay "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Implementation of %SBML\'s %Delay construct for %Event.
 *
 * An Event object defines when the event can occur, the variables that
 * are affected by the event, and how the variables are affected.  The
 * effect of the event can optionally be delayed after the occurrence of
 * the condition which invokes it.  An event delay is defined using an
 * object of class Delay.
 *
 * The object class Delay is derived from SBase and adds a single
 * subelement called \'math\'.  This subelement is used to hold MathML
 * content.  The mathematical formula represented by \'math\' must evaluate
 * to a numerical value.  It is used as the length of time between when the
 * event is @em triggered and when the event\'s assignments are
 * actually @em executed.  If no delay is present on a given Event, a time
 * delay of zero is assumed.
 *
 * The expression in \'math\' must be evaluated at the time the event is @em
 * triggered.  The expression must always evaluate to a nonnegative number
 * (otherwise, a nonsensical situation could arise where an event is
 * defined to execute before it is triggered!).
 *
 * @section delay-units The units of the mathematical expression in a Delay
 *
 * In SBML Level&nbsp;2 versions before Version&nbsp;4, the units of the
 * numerical value computed by the Delay\'s \'math\' expression are @em
 * required to be in units of time, or the model is considered to have a
 * unit consistency error.  In Level&nbsp;2 Version&nbsp;4 as well as SBML
 * Level&nbsp;3 Version&nbsp;1 Core, this requirement is relaxed; these
 * specifications only stipulate that the units of the numerical value
 * computed by a Delay instance\'s \'math\' expression @em should match the
 * model\'s units of time (meaning the definition of the @c time units in
 * the model).  LibSBML respects these requirements, and depending on
 * whether an earlier Version of SBML Level&nbsp;2 is in use, libSBML may
 * or may not flag unit inconsistencies as errors or merely warnings.
 *
 * Note that <em>units are not predefined or assumed</em> for the contents
 * of \'math\' in a Delay object; rather, they must be defined explicitly for
 * each instance of a Delay object in a model.  This is an important point
 * to bear in mind when literal numbers are used in delay expressions.  For
 * example, the following Event instance would result in a warning logged
 * by SBMLDocument::checkConsistency() about the fact that libSBML cannot
 * verify the consistency of the units of the expression.  The reason is
 * that the formula inside the \'math\' element does not have any declared
 * units, whereas what is expected in this context is units of time:
 * @verbatim
<model>
    ...
    <listOfEvents>
        <event useValuesFromTriggerTime=\'true\'>
            ...
            <delay>
                <math xmlns=\'http://www.w3.org/1998/Math/MathML\'>
                    <cn> 1 </cn>
                </math>
            </delay>
            ...
        </event>
    </listOfEvents>
    ...
</model>
@endverbatim
 * 
 * The <code>&lt;cn&gt; 1 &lt;/cn&gt;</code> within the mathematical formula
 * of the @c delay above has <em>no units declared</em>.  To make the
 * expression have the needed units of time, literal numbers should be
 * avoided in favor of defining Parameter objects for each quantity, and
 * declaring units for the Parameter values.  The following fragment of
 * SBML illustrates this approach:
 * @verbatim
<model>
    ...
    <listOfParameters>
        <parameter id=\'transcriptionDelay\' value=\'10\' units=\'second\'/>
    </listOfParameters>
    ...
    <listOfEvents>
        <event useValuesFromTriggerTime=\'true\'>
            ...
            <delay>
                <math xmlns=\'http://www.w3.org/1998/Math/MathML\'>
                    <ci> transcriptionDelay </ci>
                </math>
            </delay>
            ...
        </event>
    </listOfEvents>
    ...
</model>
@endverbatim
 *
 * In SBML Level&nbsp;3, an alternative approach is available in the form
 * of the @c units attribute, which SBML Level&nbsp;3 allows to appear on
 * MathML @c cn elements.  The value of this attribute can be used to
 * indicate the unit of measurement to be associated with the number in the
 * content of a @c cn element.  The attribute is named @c units but,
 * because it appears inside MathML element (which is in the XML namespace
 * for MathML and not the namespace for SBML), it must always be prefixed
 * with an XML namespace prefix for the SBML Level&nbsp;3 Version&nbsp;1
 * namespace.  The following is an example of this approach:
 * @verbatim
<model timeUnits=\'second\' ...>
    ...
    <listOfEvents>
        <event useValuesFromTriggerTime=\'true\'>
            ...
            <delay>
                <math xmlns=\'http://www.w3.org/1998/Math/MathML\'
                      xmlns:sbml=\'http://www.sbml.org/sbml/level3/version1/core\'>
                    <cn sbml:units=\'second\'> 10 </cn>
                </math>
            </delay>
            ...
        </event>
    </listOfEvents>
    ...
</model>
@endverbatim
 */
"


%csmethodmodifiers Delay::Delay(unsigned int level, unsigned int version) "
/**
   * Creates a new Delay using the given SBML @p level and @p version
   * values.
   *
   * @param level a long integer, the SBML Level to assign to this Delay
   *
   * @param version a long integer, the SBML Version to assign to this
   * Delay
   *
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the given @p level and @p version combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent SBMLDocument object.
   *
   * * 
 * @note Upon the addition of a Delay object to an Event (e.g., using
 * Event::setDelay(@if java Delay d@endif)), the SBML Level, SBML Version
 * and XML namespace of the document @em override the values used when
 * creating the Delay object via this constructor.  This is necessary to
 * ensure that an SBML document is a consistent structure.  Nevertheless,
 * the ability to supply the values at the time of creation of a Delay is
 * an important aid to producing valid SBML.  Knowledge of the intented
 * SBML Level and Version determine whether it is valid to assign a
 * particular value to an attribute, or whether it is valid to add a
 * particular Delay object to an existing Event.
 *
 *
   */ public
";


%csmethodmodifiers Delay::Delay(SBMLNamespaces* sbmlns) "
/**
   * Creates a new Delay using the given SBMLNamespaces object
   * @p sbmlns.
   *
   * *
 *  
 * The SBMLNamespaces object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML\'s SBMLNamespaces facilities is to create an
 * SBMLNamespaces object somewhere in a program once, then hand that object
 * as needed to object constructors that accept SBMLNamespaces as arguments.
 *
 *
   *
   * @param sbmlns an SBMLNamespaces object.
   *
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the given @p level and @p version combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent SBMLDocument object.
   *
   * * 
 * @note Upon the addition of a Delay object to an Event (e.g., using
 * Event::setDelay(@if java Delay d@endif)), the SBML Level, SBML Version
 * and XML namespace of the document @em override the values used when
 * creating the Delay object via this constructor.  This is necessary to
 * ensure that an SBML document is a consistent structure.  Nevertheless,
 * the ability to supply the values at the time of creation of a Delay is
 * an important aid to producing valid SBML.  Knowledge of the intented
 * SBML Level and Version determine whether it is valid to assign a
 * particular value to an attribute, or whether it is valid to add a
 * particular Delay object to an existing Event.
 *
 *
   */ public
";


%csmethodmodifiers Delay::Delay(const Delay& orig) "
/**
   * Copy constructor; creates a copy of this Delay.
   *
   * @param orig the object to copy.
   * 
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the argument @p orig is @c null.
   */ public
";


%csmethodmodifiers Delay::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor for this instance of Delay.
   *
   * @param v the SBMLVisitor instance to be used.
   *
   * @return the result of calling <code>v.visit()</code>.
   */ public
";


%csmethodmodifiers Delay::clone() const "
/**
   * Creates and returns a deep copy of this Delay.
   *
   * @return a (deep) copy of this Delay.
   */ public new
";


%csmethodmodifiers Delay::getMath() const "
/**
   * Get the mathematical formula for the delay and return it
   * as an AST.
   * 
   * @return the math of this Delay.
   */ public
";


%csmethodmodifiers Delay::isSetMath() const "
/**
   * Predicate to test whether the formula for this delay is set.
   *
   * @return @c true if the formula (meaning the @c math subelement) of
   * this Delay is set, @c false otherwise.
   */ public
";


%csmethodmodifiers Delay::setMath(const ASTNode* math) "
/**
   * Sets the delay expression of this Delay instance to a copy of the given
   * ASTNode.
   *
   * @param math an ASTNode representing a formula tree.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t.  @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   */ public
";


%csmethodmodifiers Delay::getDerivedUnitDefinition "
/**
   * Calculates and returns a UnitDefinition that expresses the units
   * of measurement assumed for the \'math\' expression of this Delay.
   *
   * *
 * 
 * Delay elements in SBML express a time delay for an Event.  Beginning
 * with SBML Level&nbsp;2 Version&nbsp;2, the units of that time are
 * calculated based on the mathematical expression and the model quantities
 * referenced by <code>&lt;ci&gt;</code> elements used within that
 * expression.  (In SBML Level &nbsp;2 Version&nbsp;1, there exists an
 * attribute on Event called \'timeUnits\'.  This attribute can be used to set
 * the units of the Delay expression explicitly.)  The method
 * Delay::getDerivedUnitDefinition() returns what libSBML computes the units
 * to be, to the extent that libSBML can compute them.
 *
 *
   *
   * * 
 * @note The functionality that facilitates unit analysis depends on the
 * model as a whole.  Thus, in cases where the object has not been added to
 * a model or the model itself is incomplete, unit analysis is not possible
 * and this method will return @c null.
 *
 * 
   *
   * *
 * @warning <span class=\'warning\'>Note that it is possible the \'math\'
 * expression in the Delay contains literal numbers or parameters with
 * undeclared units.  In those cases, it is not possible to calculate the
 * units of the overall expression without making assumptions.  LibSBML does
 * not make assumptions about the units, and
 * Delay::getDerivedUnitDefinition() only returns the units as far as it is
 * able to determine them.  For example, in an expression <em>X + Y</em>, if
 * <em>X</em> has unambiguously-defined units and <em>Y</em> does not, it
 * will return the units of <em>X</em>.  When using this method, <strong>it
 * is critical that callers also invoke the method</strong>
 * Delay::containsUndeclaredUnits() <strong>to determine whether this
 * situation holds</strong>.  Callers should take suitable action in those
 * situations.</span>
 *
   * 
   * @return a UnitDefinition that expresses the units of the math 
   * expression of this Delay, or @c null if one cannot be constructed.
   *
   * @see containsUndeclaredUnits()
   */ public
";


%csmethodmodifiers Delay::getDerivedUnitDefinition() const "
/**
   * Calculates and returns a UnitDefinition that expresses the units
   * of measurement assumed for the \'math\' expression of this Delay.
   *
   * *
 * 
 * Delay elements in SBML express a time delay for an Event.  Beginning
 * with SBML Level&nbsp;2 Version&nbsp;2, the units of that time are
 * calculated based on the mathematical expression and the model quantities
 * referenced by <code>&lt;ci&gt;</code> elements used within that
 * expression.  (In SBML Level &nbsp;2 Version&nbsp;1, there exists an
 * attribute on Event called \'timeUnits\'.  This attribute can be used to set
 * the units of the Delay expression explicitly.)  The method
 * Delay::getDerivedUnitDefinition() returns what libSBML computes the units
 * to be, to the extent that libSBML can compute them.
 *
 *
   *
   * * 
 * @note The functionality that facilitates unit analysis depends on the
 * model as a whole.  Thus, in cases where the object has not been added to
 * a model or the model itself is incomplete, unit analysis is not possible
 * and this method will return @c null.
 *
 * 
   *
   * *
 * @warning <span class=\'warning\'>Note that it is possible the \'math\'
 * expression in the Delay contains literal numbers or parameters with
 * undeclared units.  In those cases, it is not possible to calculate the
 * units of the overall expression without making assumptions.  LibSBML does
 * not make assumptions about the units, and
 * Delay::getDerivedUnitDefinition() only returns the units as far as it is
 * able to determine them.  For example, in an expression <em>X + Y</em>, if
 * <em>X</em> has unambiguously-defined units and <em>Y</em> does not, it
 * will return the units of <em>X</em>.  When using this method, <strong>it
 * is critical that callers also invoke the method</strong>
 * Delay::containsUndeclaredUnits() <strong>to determine whether this
 * situation holds</strong>.  Callers should take suitable action in those
 * situations.</span>
 *
   * 
   * @return a UnitDefinition that expresses the units of the math 
   * expression of this Delay, or @c null if one cannot be constructed.
   *
   * @see containsUndeclaredUnits()
   */ public
";


%csmethodmodifiers Delay::containsUndeclaredUnits "
/**
   * Predicate returning @c true if the \'math\' expression in this Delay
   * instance contains parameters with undeclared units or literal numbers.
   * 
   * *
 * 
 * Delay elements in SBML express a time delay for an Event.  Beginning
 * with SBML Level&nbsp;2 Version&nbsp;2, the units of that time are
 * calculated based on the mathematical expression and the model quantities
 * referenced by <code>&lt;ci&gt;</code> elements used within that
 * expression.  (In SBML Level &nbsp;2 Version&nbsp;1, there exists an
 * attribute on Event called \'timeUnits\'.  This attribute can be used to set
 * the units of the Delay expression explicitly.)  The method
 * Delay::getDerivedUnitDefinition() returns what libSBML computes the units
 * to be, to the extent that libSBML can compute them.
 *
 *
   *
   * If the expression contains literal numbers or parameters with undeclared
   * units, <strong>libSBML may not be able to compute the full units of the
   * expression</strong> and will only return what it can compute.  Callers
   * should always use Delay::containsUndeclaredUnits() when using
   * Delay::getDerivedUnitDefinition() to decide whether the returned units
   * may be incomplete.
   * 
   * @return @c true if the math expression of this Delay includes
   * numbers/parameters with undeclared units, @c false otherwise.
   *
   * @note A return value of @c true indicates that the UnitDefinition
   * returned by Delay::getDerivedUnitDefinition() may not accurately
   * represent the units of the expression.
   *
   * @see getDerivedUnitDefinition()
   */ public
";


%csmethodmodifiers Delay::containsUndeclaredUnits() const "
/**
   * Predicate returning @c true if the \'math\' expression in this Delay
   * instance contains parameters with undeclared units or literal numbers.
   * 
   * *
 * 
 * Delay elements in SBML express a time delay for an Event.  Beginning
 * with SBML Level&nbsp;2 Version&nbsp;2, the units of that time are
 * calculated based on the mathematical expression and the model quantities
 * referenced by <code>&lt;ci&gt;</code> elements used within that
 * expression.  (In SBML Level &nbsp;2 Version&nbsp;1, there exists an
 * attribute on Event called \'timeUnits\'.  This attribute can be used to set
 * the units of the Delay expression explicitly.)  The method
 * Delay::getDerivedUnitDefinition() returns what libSBML computes the units
 * to be, to the extent that libSBML can compute them.
 *
 *
   *
   * If the expression contains literal numbers or parameters with undeclared
   * units, <strong>libSBML may not be able to compute the full units of the
   * expression</strong> and will only return what it can compute.  Callers
   * should always use Delay::containsUndeclaredUnits() when using
   * Delay::getDerivedUnitDefinition() to decide whether the returned units
   * may be incomplete.
   *
   * @return @c true if the math expression of this Delay includes
   * numbers/parameters with undeclared units, @c false otherwise.
   *
   * @note A return value of @c true indicates that the UnitDefinition
   * returned by Delay::getDerivedUnitDefinition() may not accurately
   * represent the units of the expression.
   *
   * @see getDerivedUnitDefinition()
   */ public
";


%csmethodmodifiers Delay::getTypeCode() const "
/**
   * Returns the libSBML type code of this object instance.
   *
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object:
   * @link libsbmlcs.libsbml.SBML_DELAY SBML_DELAY@endlink (default).
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see getElementName()
   * @see getPackageName()
   */ public new
";


%csmethodmodifiers Delay::getElementName() const "
/**
   * Returns the XML element name of this object, which for Delay, is
   * always @c \'delay\'.
   * 
   * @return the name of this element, i.e., @c \'delay\'.
   *
   * @see getTypeCode()
   */ public new
";


%csmethodmodifiers Delay::getElementPosition() const "
/**
   * Returns the position of this element.
   * 
   * @return the ordinal position of the element with respect to its
   * siblings or -1 (default) to indicate the position is not significant.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Delay::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Delay::hasRequiredElements() const "
/**
   * Predicate returning @c true if
   * all the required elements for this Delay object
   * have been set.
   *
   * @note The required elements for a Delay object are:
   * @li \'math\'
   *
   * @return a bool value indicating whether all the required
   * elements for this object have been defined.
   */ public new
";


%csmethodmodifiers Delay::removeFromParentAndDelete "
/**
   * Finds this Delay\'s Event parent and calls unsetDelay() on it, indirectly
   * deleting itself.
   *
   * Overridden from the SBase function since the parent is not a ListOf.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers Delay::renameSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames all the @c SIdRef attributes on this element, including any
   * found in MathML.
   *
   * *
 * 

 * In SBML, object identifiers are of a data type called <code>SId</code>.
 * In SBML Level&nbsp;3, an explicit data type called <code>SIdRef</code> was
 * introduced for attribute values that refer to <code>SId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to an identifier\', but the effective
 * data type was the same as <code>SIdRef</code>in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>SIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 *
 *
   * 
   * This method works by looking at all attributes and (if appropriate)
   * mathematical formulas, comparing the identifiers to the value of @p
   * oldid.  If any matches are found, the matching identifiers are replaced
   * with @p newid.  The method does @em not descend into child elements.
   *
   * @param oldid the old identifier
   * @param newid the new identifier
   */ public
";


%csmethodmodifiers Delay::renameUnitSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames all the @c UnitSIdRef attributes on this element
   *
   * *
 * 
 * In SBML, unit definitions have identifiers of type <code>UnitSId</code>.  In
 * SBML Level&nbsp;3, an explicit data type called <code>UnitSIdRef</code> was
 * introduced for attribute values that refer to <code>UnitSId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to a unit identifier\', but the effective
 * data type was the same as <code>UnitSIdRef</code> in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>UnitSIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 * 
 *
   *
   * This method works by looking at all unit identifier attribute values
   * (including, if appropriate, inside mathematical formulas), comparing the
   * unit identifiers to the value of @p oldid.  If any matches are found,
   * the matching identifiers are replaced with @p newid.  The method does
   * @em not descend into child elements.
   * 
   * @param oldid the old identifier
   * @param newid the new identifier
   */ public
";


%csmethodmodifiers Delay::replaceSIDWithFunction(const std::string& id, const ASTNode* function) "
/**
   * Replace all nodes with the name \'id\' from the child \'math\' object with the provided function. 
   *
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Delay::getInternalId() const "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Delay::setInternalId(std::string id) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Delay::readOtherXML(XMLInputStream& stream) "
/**
   * Subclasses should override this method to read (and store) XHTML,
   * MathML, etc. directly from the XMLInputStream.
   *
   * @return true if the subclass read from the stream, false otherwise.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Delay::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Delay::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Subclasses should override this method to read values from the given
   * XMLAttributes set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Delay::readL2Attributes(const XMLAttributes& attributes) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Delay::readL3Attributes(const XMLAttributes& attributes) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Delay::writeAttributes(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   */ /* libsbml-internal */ public
";


%typemap(csimports) Priority "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Implementation of %SBML Level 3\'s %Priority construct for
 * Event.
 *
 * The Priority object class (which was introduced in SBML Level&nbsp;3
 * Version&nbsp;1), like Delay, is derived from SBase and contains a MathML
 * formula stored in the element \'math\'.  This formula is used to compute a
 * dimensionless numerical value that influences the order in which a
 * simulator is to perform the assignments of two or more events that
 * happen to be executed simultaneously.  The formula may evaluate to any
 * @c double value (and thus may be a positive or negative number, or
 * zero), with positive numbers taken to signifying a higher priority than
 * zero or negative numbers.  If no Priority object is present on a given
 * Event object, no priority is defined for that event.
 * 
 * @section priority-interp The interpretation of priorities on events in a model
 * 
 * For the purposes of SBML, <em>simultaneous event execution</em> is
 * defined as the situation in which multiple events have identical
 * times of execution.  The time of execution is calculated as the
 * sum of the time at which a given event\'s Trigger is <em>triggered</em>
 * plus its Delay duration, if any.  Here, <em>identical times</em> means
 * <em>mathematically equal</em> instants in time.  (In practice,
 * simulation software adhering to this specification may have to
 * rely on numerical equality instead of strict mathematical
 * equality; robust models will ensure that this difference will not
 * cause significant discrepancies from expected behavior.)
 * 
 * If no Priority subobjects are defined for two or more Event objects,
 * then those events are still executed simultaneously but their order of
 * execution is <em>undefined by the SBML Level&nbsp;3 Version&nbsp;1
 * specification</em>.  A software implementation may choose to execute
 * such simultaneous events in any order, as long as each event is executed
 * only once and the requirements of checking the \'persistent\' attribute
 * (and acting accordingly) are satisfied.
 * 
 * If Priority subobjects are defined for two or more
 * simultaneously-triggered events, the order in which those particular
 * events must be executed is dictated by their Priority objects,
 * as follows.  If the values calculated using the two Priority
 * objects\' \'math\' expressions differ, then the event having
 * the higher priority value must be executed before the event with
 * the lower value.  If, instead, the two priority values are
 * mathematically equal, then the two events must be triggered in a
 * <em>random</em> order.  It is important to note that a <em>random
 *   order is not the same as an undefined order</em>: given multiple
 * runs of the same model with identical conditions, an undefined
 * ordering would permit a system to execute the events in (for
 * example) the same order every time (according to whatever scheme
 * may have been implemented by the system), whereas the explicit
 * requirement for random ordering means that the order of execution
 * in different simulation runs depends on random chance.  In other
 * words, given two events <em>A</em> and <em>B</em>, a randomly-determined
 * order must lead to an equal chance of executing <em>A</em> first or
 * <em>B</em> first, every time those two events are executed
 * simultaneously.
 * 
 * A model may contain a mixture of events, some of which have
 * Priority subobjects and some do not.  Should a combination of
 * simultaneous events arise in which some events have priorities
 * defined and others do not, the set of events with defined
 * priorities must trigger in the order determined by their Priority
 * objects, and the set of events without Priority objects must be
 * executed in an <em>undefined</em> order with respect to each other
 * and with respect to the events with Priority subobjects.  (Note
 * that <em>undefined order</em> does not necessarily mean random
 * order, although a random ordering would be a valid implementation
 * of this requirement.)
 * 
 * The following example may help further clarify these points.
 * Suppose a model contains four events that should be executed
 * simultaneously, with two of the events having Priority objects
 * with the same value and the other two events having Priority
 * objects with the same, but different, value.  The two events with
 * the higher priorities must be executed first, in a random order
 * with respect to each other, and the remaining two events must be
 * executed after them, again in a random order, for a total of four
 * possible and equally-likely event executions: A-B-C-D, A-B-D-C,
 * B-A-C-D, and B-A-D-C.  If, instead, the model contains four events
 * all having the same Priority values, there are 4! or 24
 * possible orderings, each of which must be equally likely to be
 * chosen.  Finally, if none of the four events has a Priority
 * subobject defined, or even if exactly one of the four events has a
 * defined Priority, there are again 24 possible orderings, but the
 * likelihood of choosing any particular ordering is undefined; the
 * simulator can choose between events as it wishes.  (The SBML
 * specification only defines the effects of priorities on Event
 * objects with respect to <em>other</em> Event objects with
 * priorities.  Putting a priority on a <em>single</em> Event object
 * in a model does not cause it to fall within that scope.)
 * 
 * @section priority-eval Evaluation of Priority expressions
 * 
 * An event\'s Priority object \'math\' expression must be
 * evaluated at the time the Event is to be <em>executed</em>.  During
 * a simulation, all simultaneous events have their Priority values
 * calculated, and the event with the highest priority is selected for
 * next execution.  Note that it is possible for the execution of one
 * Event object to cause the Priority value of another
 * simultaneously-executing Event object to change (as well as to
 * trigger other events, as already noted).  Thus, after executing
 * one event, and checking whether any other events in the model have
 * been triggered, all remaining simultaneous events that
 * <em>either</em> (i) have Trigger objects with attributes
 * \'persistent\'=@c false <em>or</em> (ii) have Trigger
 * expressions that did not transition from @c true to
 * @c false, must have their Priority expression reevaluated.
 * The highest-priority remaining event must then be selected for 
 * execution next.
 * 
 * @section priority-units Units of Priority object\'s mathematical expressions
 * 
 * The unit associated with the value of a Priority object\'s
 * \'math\' expression should be @c dimensionless.  This is
 * because the priority expression only serves to provide a relative
 * ordering between different events, and only has meaning with
 * respect to other Priority object expressions.  The value of
 * Priority objects is not comparable to any other kind of object in
 * an SBML model.
 *
 * @note The Priority construct exists only in SBML Level&nbsp;3; it cannot
 * be used in SBML Level&nbsp;2 or Level&nbsp;1 models.
 *
 * @see Event
 * @see Delay
 * @see EventAssignment
 */
"


%csmethodmodifiers Priority::Priority(unsigned int level, unsigned int version) "
/**
   * Creates a new Priority object using the given SBML @p level and @p
   * version values.
   *
   * @param level a long integer, the SBML Level to assign to this Priority
   *
   * @param version a long integer, the SBML Version to assign to this
   * Priority
   *
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the given @p level and @p version combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent SBMLDocument object.
   *
   * * 
 * @note Upon the addition of a Priority object to an Event (e.g., using
 * Event::setPriority(@if java Priority d@endif)), the SBML Level, SBML Version
 * and XML namespace of the document @em override the values used when
 * creating the Priority object via this constructor.  This is necessary to
 * ensure that an SBML document is a consistent structure.  Nevertheless,
 * the ability to supply the values at the time of creation of a Priority is
 * an important aid to producing valid SBML.  Knowledge of the intented
 * SBML Level and Version determine whether it is valid to assign a
 * particular value to an attribute, or whether it is valid to add a
 * particular Priority object to an existing Event.<br><br>
 *
   *
   * *
 * @note The Priority construct exists only in SBML Level&nbsp;3; it
 * cannot be used in SBML Level&nbsp;2 or Level&nbsp;1 models.
 *
   *
   */ public
";


%csmethodmodifiers Priority::Priority(SBMLNamespaces* sbmlns) "
/**
   * Creates a new Priority object using the given SBMLNamespaces object
   * @p sbmlns.
   *
   * *
 *  
 * The SBMLNamespaces object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML\'s SBMLNamespaces facilities is to create an
 * SBMLNamespaces object somewhere in a program once, then hand that object
 * as needed to object constructors that accept SBMLNamespaces as arguments.
 *
 * 
   *
   * @param sbmlns an SBMLNamespaces object.
   *
   * @throws @if python ValueError @else SBMLConstructorException @endif 
   * Thrown if the given @p level and @p version combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent SBMLDocument object.
   *
   * * 
 * @note Upon the addition of a Priority object to an Event (e.g., using
 * Event::setPriority(@if java Priority d@endif)), the SBML Level, SBML Version
 * and XML namespace of the document @em override the values used when
 * creating the Priority object via this constructor.  This is necessary to
 * ensure that an SBML document is a consistent structure.  Nevertheless,
 * the ability to supply the values at the time of creation of a Priority is
 * an important aid to producing valid SBML.  Knowledge of the intented
 * SBML Level and Version determine whether it is valid to assign a
 * particular value to an attribute, or whether it is valid to add a
 * particular Priority object to an existing Event.<br><br>
 *
   *
   * *
 * @note The Priority construct exists only in SBML Level&nbsp;3; it
 * cannot be used in SBML Level&nbsp;2 or Level&nbsp;1 models.
 *
   */ public
";


%csmethodmodifiers Priority::Priority(const Priority& orig) "
/**
   * Copy constructor; creates a copy of this Priority.
   *
   * @param orig the object to copy.
   * 
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the argument @p orig is @c null.
   */ public
";


%csmethodmodifiers Priority::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor for this instance of Priority.
   *
   * @param v the SBMLVisitor instance to be used.
   *
   * @return the result of calling <code>v.visit()</code>.
   */ public
";


%csmethodmodifiers Priority::clone() const "
/**
   * Creates and returns a deep copy of this Priority.
   *
   * @return a (deep) copy of this Priority.
   */ public new
";


%csmethodmodifiers Priority::getMath() const "
/**
   * Get the mathematical formula for the priority and return it
   * as an AST.
   * 
   * @return the math of this Priority.
   */ public
";


%csmethodmodifiers Priority::isSetMath() const "
/**
   * Predicate to test whether the formula for this delay is set.
   *
   * @return @c true if the formula (meaning the @c math subelement) of
   * this Priority is set, @c false otherwise.
   */ public
";


%csmethodmodifiers Priority::setMath(const ASTNode* math) "
/**
   * Sets the math expression of this Priority instance to a copy of the given
   * ASTNode.
   *
   * @param math an ASTNode representing a formula tree.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t.  @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   */ public
";


%csmethodmodifiers Priority::getTypeCode() const "
/**
   * Returns the libSBML type code of this object instance.
   *
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object:
   * @link libsbmlcs.libsbml.SBML_PRIORITY SBML_PRIORITY@endlink (default).\
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see getElementName()
   * @see getPackageName()
   */ public new
";


%csmethodmodifiers Priority::getElementName() const "
/**
   * Returns the XML element name of this object, which for Priority, is
   * always @c \'priority\'.
   * 
   * @return the name of this element, i.e., @c \'priority\'.
   *
   * @see getTypeCode()
   */ public new
";


%csmethodmodifiers Priority::getElementPosition() const "
/**
   * Returns the position of this element.
   * 
   * @return the ordinal position of the element with respect to its
   * siblings or -1 (default) to indicate the position is not significant.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Priority::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Priority::hasRequiredElements() const "
/**
   * Predicate returning @c true if all the required elements for this
   * Priority object have been set.
   *
   * @note The required elements for a Priority object are:
   * @li \'math\'
   *
   * @return a bool value indicating whether all the required
   * elements for this object have been defined.
   */ public new
";


%csmethodmodifiers Priority::removeFromParentAndDelete "
/**
   * Finds this Priority\'s Event parent and calls unsetPriority() on it,
   * indirectly deleting itself.
   *
   * Overridden from the SBase function since the parent is not a ListOf.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers Priority::renameSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames all the @c SIdRef attributes on this element, including any
   * found in MathML.
   *
   * *
 * 

 * In SBML, object identifiers are of a data type called <code>SId</code>.
 * In SBML Level&nbsp;3, an explicit data type called <code>SIdRef</code> was
 * introduced for attribute values that refer to <code>SId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to an identifier\', but the effective
 * data type was the same as <code>SIdRef</code>in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>SIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 *
 *
   * 
   * This method works by looking at all attributes and (if appropriate)
   * mathematical formulas, comparing the identifiers to the value of @p
   * oldid.  If any matches are found, the matching identifiers are replaced
   * with @p newid.  The method does @em not descend into child elements.
   *
   * @param oldid the old identifier
   * @param newid the new identifier
   */ public
";


%csmethodmodifiers Priority::renameUnitSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames all the @c UnitSIdRef attributes on this element.
   *
   * *
 * 
 * In SBML, unit definitions have identifiers of type <code>UnitSId</code>.  In
 * SBML Level&nbsp;3, an explicit data type called <code>UnitSIdRef</code> was
 * introduced for attribute values that refer to <code>UnitSId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to a unit identifier\', but the effective
 * data type was the same as <code>UnitSIdRef</code> in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>UnitSIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 * 
 *
   *
   * This method works by looking at all unit identifier attribute values
   * (including, if appropriate, inside mathematical formulas), comparing the
   * unit identifiers to the value of @p oldid.  If any matches are found,
   * the matching identifiers are replaced with @p newid.  The method does
   * @em not descend into child elements.
   * 
   * @param oldid the old identifier
   * @param newid the new identifier
   */ public
";


%csmethodmodifiers Priority::replaceSIDWithFunction(const std::string& id, const ASTNode* function) "
/**
   * Replace all nodes with the name \'id\' from the child \'math\' object with the provided function. 
   *
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Priority::getInternalId() const "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Priority::setInternalId(std::string id) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Priority::readOtherXML(XMLInputStream& stream) "
/**
   * Subclasses should override this method to read (and store) XHTML,
   * MathML, etc. directly from the XMLInputStream.
   *
   * @return true if the subclass read from the stream, false otherwise.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Priority::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Priority::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Subclasses should override this method to read values from the given
   * XMLAttributes set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Priority::readL3Attributes(const XMLAttributes& attributes) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Priority::writeAttributes(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   */ /* libsbml-internal */ public
";


%typemap(csimports) SBO "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Methods for interacting with Systems Biology Ontology
 * terms.
 *
 * @htmlinclude not-sbml-warning.html
 *
 * The values of \'id\' attributes on SBML components allow the components to
 * be cross-referenced within a model. The values of \'name\' attributes on
 * SBML components provide the opportunity to assign them meaningful labels
 * suitable for display to humans.  The specific identifiers and labels
 * used in a model necessarily must be unrestricted by SBML, so that
 * software and users are free to pick whatever they need.  However, this
 * freedom makes it more difficult for software tools to determine, without
 * additional human intervention, the semantics of models more precisely
 * than the semantics provided by the SBML object classes defined in other
 * sections of this document.  For example, there is nothing inherent in a
 * parameter with identifier <code>k</code> that would indicate to a
 * software tool it is a first-order rate constant (if that\'s what
 * <code>k</code> happened to be in some given model).  However, one may
 * need to convert a model between different representations (e.g.,
 * Henri-Michaelis-Menten versus elementary steps), or to use it with
 * different modeling approaches (discrete or continuous).  One may also
 * need to relate the model components with other description formats such
 * as SBGN (<a target=\'_blank\'
 * href=\'http://www.sbgn.org/\'>http://www.sbgn.org/</a>) using deeper
 * semantics.  Although an advanced software tool <em>might</em> be able to
 * deduce the semantics of some model components through detailed analysis
 * of the kinetic rate expressions and other parts of the model, this
 * quickly becomes infeasible for any but the simplest of models.
 *
 * An approach to solving this problem is to associate model components
 * with terms from carefully curated controlled vocabularies (CVs).  This
 * is the purpose of the optional \'sboTerm\' attribute provided on the SBML
 * class SBase.  The \'sboTerm\' attribute always refers to terms belonging
 * to the Systems Biology Ontology (SBO).
 * 
 * @section use Use of SBO
 * 
 * Labeling model components with terms from shared controlled vocabularies
 * allows a software tool to identify each component using identifiers that
 * are not tool-specific.  An example of where this is useful is the desire
 * by many software developers to provide users with meaningful names for
 * reaction rate equations.  Software tools with editing interfaces
 * frequently provide these names in menus or lists of choices for users.
 * However, without a standardized set of names or identifiers shared
 * between developers, a given software package cannot reliably interpret
 * the names or identifiers of reactions used in models written by other
 * tools.
 * 
 * The first solution that might come to mind is to stipulate that certain
 * common reactions always have the same name (e.g., \'Michaelis-Menten\'), but
 * this is simply impossible to do: not only do humans often disagree on
 * the names themselves, but it would not allow for correction of errors or
 * updates to the list of predefined names except by issuing new releases
 * of the SBML specification&mdash;to say nothing of many other limitations
 * with this approach.  Moreover, the parameters and variables that appear
 * in rate expressions also need to be identified in a way that software
 * tools can interpret mechanically, implying that the names of these
 * entities would also need to be regulated.
 * 
 * The Systems Biology Ontology (SBO) provides terms for identifying most
 * elements of SBML. The relationship implied by an \'sboTerm\' on an SBML
 * model component is <em>is-a</em> between the characteristic of the
 * component meant to be described by %SBO on this element and the %SBO
 * term identified by the value of the \'sboTerm\'. By adding %SBO term
 * references on the components of a model, a software tool can provide
 * additional details using independent, shared vocabularies that can
 * enable <em>other</em> software tools to recognize precisely what the
 * component is meant to be.  Those tools can then act on that information.
 * For example, if the %SBO identifier @c \'SBO:0000049\' is assigned
 * to the concept of \'first-order irreversible mass-action kinetics,
 * continuous framework\', and a given KineticLaw object in a model has an
 * \'sboTerm\' attribute with this value, then regardless of the identifier
 * and name given to the reaction itself, a software tool could use this to
 * inform users that the reaction is a first-order irreversible mass-action
 * reaction.  This kind of reverse engineering of the meaning of reactions
 * in a model would be difficult to do otherwise, especially for more
 * complex reaction types.
 * 
 * The presence of %SBO labels on Compartment, Species, and Reaction
 * objects in SBML can help map those entities to equivalent concepts in
 * other standards, such as (but not limited to) BioPAX (<a target=\'_blank\'
 * href=\'http://www.biopax.org/\'>http://www.biopax.org/</a>), PSI-MI (<a
 * target=\'_blank\'
 * href=\'http://www.psidev.info/index.php?q=node/60\'>http://www.psidev.info</a>),
 * or the Systems Biology Graphical Notation (SBGN, <a target=\'_blank\'
 * href=\'http://www.sbgn.org/\'>http://www.sbgn.org/</a>).  Such mappings
 * can be used in conversion procedures, or to build interfaces, with %SBO
 * becoming a kind of \'glue\' between standards of representation.
 * 
 * The presence of the label on a kinetic expression can also allow
 * software tools to make more intelligent decisions about reaction rate
 * expressions.  For example, an application could recognize certain types
 * of reaction formulas as being ones it knows how to solve with optimized
 * procedures.  The application could then use internal, optimized code
 * implementing the rate formula indexed by identifiers such as
 * @c \'SBO:0000049\' appearing in SBML models.
 * 
 * Finally, %SBO labels may be very valuable when it comes to model
 * integration, by helping identify interfaces, convert mathematical
 * expressions and parameters etc.
 * 
 * Although the use of %SBO can be beneficial, it is critical to keep in
 * mind that the presence of an \'sboTerm\' value on an object <em>must not
 * change the fundamental mathematical meaning</em> of the model.  An SBML
 * model must be defined such that it stands on its own and does not depend
 * on additional information added by %SBO terms for a correct mathematical
 * interpretation.  %SBO term definitions will not imply any alternative
 * mathematical semantics for any SBML object labeled with that term.  Two
 * important reasons motivate this principle.  First, it would be too
 * limiting to require all software tools to be able to understand the %SBO
 * vocabularies in addition to understanding SBML.  Supporting %SBO is not
 * only additional work for the software developer; for some kinds of
 * applications, it may not make sense.  If %SBO terms on a model are
 * optional, it follows that the SBML model <em>must</em> remain
 * unambiguous and fully interpretable without them, because an application
 * reading the model may ignore the terms.  Second, we believe allowing the
 * use of \'sboTerm\' to alter the mathematical meaning of a model would
 * allow too much leeway to shoehorn inconsistent concepts into SBML
 * objects, ultimately reducing the interoperability of the models.
 *
 * @section relationship Relationships between SBO and SBML
 *
 * The goal of %SBO labeling for SBML is to clarify to the fullest extent
 * possible the nature of each element in a model.  The approach taken in
 * %SBO begins with a hierarchically-structured set of controlled
 * vocabularies with six main divisions: (1) entity, (2) participant role,
 * (3) quantitative parameter, (4) modeling framework, (5) mathematical
 * expression, and (6) interaction.  The web site for %SBO (<a
 * target=\'_blank\'
 * href=\'http://biomodels.net/sbo\'>http://biomodels.net</a>) should be
 * consulted for the current version of the ontology.
 * 
 * The Systems Biology Ontology (SBO) is not part of SBML; it is being
 * developed separately, to allow the modeling community to evolve the
 * ontology independently of SBML.  However, the terms in the ontology are
 * being designed keeping SBML components in mind, and are classified into
 * subsets that can be directly related with SBML components such as
 * reaction rate expressions, parameters, and others.  The use of \'sboTerm\'
 * attributes is optional, and the presence of \'sboTerm\' on an element does
 * not change the way the model is <em>interpreted</em>.  Annotating SBML
 * elements with %SBO terms adds additional semantic information that may
 * be used to <em>convert</em> the model into another model, or another
 * format.  Although %SBO support provides an important source of
 * information to understand the meaning of a model, software does not need
 * to support \'sboTerm\' to be considered SBML-compliant.
 *
 */
"


%csmethodmodifiers SBO::readTerm(const XMLAttributes& attributes, SBMLErrorLog* log, unsigned int level = SBML_DEFAULT_LEVEL, unsigned int version = SBML_DEFAULT_VERSION, unsigned int line = 0, unsigned int column = 0) "
/**
   * Reads (and checks) sboTerm from the given XMLAttributes set.
   *
   * @return the sboTerm as an integer or -1 if the sboTerm was not in the
   * correct format or not found.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBO::writeTerm(XMLOutputStream& stream, int sboTerm, const std::string& prefix = "") "
/**
   * Writes sboTerm as an XMLAttribute with the given prefix to the given XMLOutputStream.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBO::isQuantitativeParameter(unsigned int term) "
/**
   * Returns @c true if the given term identifier comes from the stated branch of %SBO.
   *
   * @return @c true if @p term is-a %SBO <em>\'quantiative parameter\'</em>, @c false
   * otherwise.
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., SBO), and the other will
   * be a standalone top-level function with the name
   * SBO_isQuantitativeParameter(). They are functionally identical. @endif
   */ public
";


%csmethodmodifiers SBO::isParticipantRole(unsigned int term) "
/**
   * Returns @c true if the given term identifier comes from the stated branch of %SBO.
   *
   * @return @c true if @p term is-a %SBO <em>\'participant role\'</em>, @c false otherwise.
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., SBO), and the other will
   * be a standalone top-level function with the name
   * SBO_isParticipantRole(). They are functionally identical. @endif
   */ public
";


%csmethodmodifiers SBO::isModellingFramework(unsigned int term) "
/**
   * Returns @c true if the given term identifier comes from the stated branch of %SBO.
   *
   * @return @c true if @p term is-a %SBO <em>\'modeling framework\'</em>, @c false otherwise.
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., SBO), and the other will
   * be a standalone top-level function with the name
   * SBO_isModellingFramework(). They are functionally identical. @endif
   */ public
";


%csmethodmodifiers SBO::isMathematicalExpression(unsigned int term) "
/**
   * Returns @c true if the given term identifier comes from the stated branch of %SBO.
   *
   * @return @c true if @p term is-a %SBO <em>\'mathematical expression\'</em>, @c false otherwise.
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., SBO), and the other will
   * be a standalone top-level function with the name
   * SBO_isMathematicalExpression(). They are functionally identical. @endif
   */ public
";


%csmethodmodifiers SBO::isKineticConstant(unsigned int term) "
/**
   * Returns @c true if the given term identifier comes from the stated branch of %SBO.
   *
   * @return @c true if @p term is-a %SBO <em>\'kinetic constant\'</em>, @c false otherwise.
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., SBO), and the other will
   * be a standalone top-level function with the name
   * SBO_isKineticConstant(). They are functionally identical. @endif
   */ public
";


%csmethodmodifiers SBO::isReactant(unsigned int term) "
/**
   * Returns @c true if the given term identifier comes from the stated branch of %SBO.
   *
   * @return @c true if @p term is-a %SBO <em>\'reactant\'</em>, @c false otherwise.
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., SBO), and the other will
   * be a standalone top-level function with the name
   * SBO_isReactant(). They are functionally identical. @endif
   */ public
";


%csmethodmodifiers SBO::isProduct(unsigned int term) "
/**
   * Returns @c true if the given term identifier comes from the stated branch of %SBO.
   *
   * @return @c true if @p term is-a %SBO <em>\'product\'</em>, @c false otherwise.
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., SBO), and the other will
   * be a standalone top-level function with the name
   * SBO_isProduct(). They are functionally identical. @endif
   */ public
";


%csmethodmodifiers SBO::isModifier(unsigned int term) "
/**
   * Returns @c true if the given term identifier comes from the stated branch of %SBO.
   *
   * @return @c true if @p term is-a %SBO <em>\'modifier\'</em>, @c false otherwise.
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., SBO), and the other will
   * be a standalone top-level function with the name
   * SBO_isModifier(). They are functionally identical. @endif
   */ public
";


%csmethodmodifiers SBO::isRateLaw(unsigned int term) "
/**
   * Returns @c true if the given term identifier comes from the stated branch of %SBO.
   *
   * @return @c true if @p term is-a %SBO <em>\'rate law\'</em>, @c false otherwise.
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., SBO), and the other will
   * be a standalone top-level function with the name
   * SBO_isRateLaw(). They are functionally identical. @endif
   */ public
";


%csmethodmodifiers SBO::isEvent(unsigned int term) "
/**
   * Returns @c true if the given term identifier comes from the stated branch of %SBO.
   *
   * @return @c true if @p term is-a %SBO <em>\'event\'</em>, @c false otherwise.
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., SBO), and the other will
   * be a standalone top-level function with the name
   * SBO_isEvent(). They are functionally identical. @endif
   */ public
";


%csmethodmodifiers SBO::isPhysicalParticipant(unsigned int term) "
/**
    * Returns @c true if the given term identifier comes from the stated branch of %SBO.
    *
    * @return @c true if @p term is-a %SBO <em>\'physical participant</em>, @c false otherwise.
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., SBO), and the other will
   * be a standalone top-level function with the name
   * SBO_isPhysicalParticipant(). They are functionally identical. @endif
    */ public
";


%csmethodmodifiers SBO::isParticipant(unsigned int term) "
/**
    * Returns @c true if the given term identifier comes from the stated branch of %SBO.
    *
    * @return @c true if @p term is-a %SBO <em>\'participant\'</em>, @c false otherwise.
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., SBO), and the other will
   * be a standalone top-level function with the name
   * SBO_isParticipant(). They are functionally identical. @endif
    */ public
";


%csmethodmodifiers SBO::isInteraction(unsigned int term) "
/**
   * Returns @c true if the given term identifier comes from the stated branch of %SBO.
   *
   * @return @c true if @p term is-a %SBO <em>\'interaction\'</em>, @c false otherwise.
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., SBO), and the other will
   * be a standalone top-level function with the name
   * SBO_isInteraction(). They are functionally identical. @endif
   */ public
";


%csmethodmodifiers SBO::isEntity(unsigned int term) "
/**
   * Returns @c true if the given term identifier comes from the stated branch of %SBO.
   *
   * @return @c true if @p term is-a %SBO <em>\'entity\'</em>, @c false otherwise.
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., SBO), and the other will
   * be a standalone top-level function with the name
   * SBO_isEntity(). They are functionally identical. @endif
   */ public
";


%csmethodmodifiers SBO::isFunctionalEntity(unsigned int term) "
/**
   * Returns @c true if the given term identifier comes from the stated branch of %SBO.
   *
   * @return @c true if @p term is-a %SBO <em>\'functional entity\'</em>, @c false otherwise.
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., SBO), and the other will
   * be a standalone top-level function with the name
   * SBO_isFunctionalEntity(). They are functionally identical. @endif
   */ public
";


%csmethodmodifiers SBO::isMaterialEntity(unsigned int term) "
/**
   * Returns @c true if the given term identifier comes from the stated branch of %SBO.
   *
   * @return @c true if @p term is-a %SBO <em>\'material entity\'</em>, @c false otherwise.
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., SBO), and the other will
   * be a standalone top-level function with the name
   * SBO_isMaterialEntity(). They are functionally identical. @endif
   */ public
";


%csmethodmodifiers SBO::isConservationLaw(unsigned int term) "
/**
   * Returns @c true if the given term identifier comes from the stated branch of %SBO.
   *
   * @return @c true if @p term is-a %SBO <em>\'conservation law\'</em>, @c false otherwise.
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., SBO), and the other will
   * be a standalone top-level function with the name
   * SBO_isConservationLaw(). They are functionally identical. @endif
   */ public
";


%csmethodmodifiers SBO::isSteadyStateExpression(unsigned int term) "
/**
   * Returns @c true if the given term identifier comes from the stated branch of %SBO.
   *
   * @return @c true if @p term is-a %SBO <em>\'steady state expression\'</em>, @c false otherwise.
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., SBO), and the other will
   * be a standalone top-level function with the name
   * SBO_isSteadyStateExpression(). They are functionally identical. @endif
   */ public
";


%csmethodmodifiers SBO::isFunctionalCompartment(unsigned int term) "
/**
   * Returns @c true if the given term identifier comes from the stated branch of %SBO.
   *
   * @return @c true if @p term is-a %SBO <em>\'functional compartment\'</em>, @c false otherwise.
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., SBO), and the other will
   * be a standalone top-level function with the name
   * SBO_isFunctionalCompartment(). They are functionally identical. @endif
   */ public
";


%csmethodmodifiers SBO::isContinuousFramework(unsigned int term) "
/**
   * Returns @c true if the given term identifier comes from the stated branch of %SBO.
   *
   * @return @c true if @p term is-a %SBO <em>\'continuous framework\'</em>, @c false otherwise.
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., SBO), and the other will
   * be a standalone top-level function with the name
   * SBO_isContinuousFramework(). They are functionally identical. @endif
   */ public
";


%csmethodmodifiers SBO::isDiscreteFramework(unsigned int term) "
/**
   * Returns @c true if the given term identifier comes from the stated branch of %SBO.
   *
   * @return @c true if @p term is-a %SBO <em>\'discrete framework\'</em>, @c false otherwise.
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., SBO), and the other will
   * be a standalone top-level function with the name
   * SBO_isDiscreteFramework(). They are functionally identical. @endif
   */ public
";


%csmethodmodifiers SBO::isLogicalFramework(unsigned int term) "
/**
   * Returns @c true if the given term identifier comes from the stated branch of %SBO.
   *
   * @return @c true if @p term is-a %SBO <em>\'logical framework\'</em>, @c false otherwise.
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., SBO), and the other will
   * be a standalone top-level function with the name
   * SBO_isLogicalFramework(). They are functionally identical. @endif
   */ public
";


%csmethodmodifiers SBO::isMetadataRepresentation(unsigned int term) "
/**
   * Returns @c true if the given term identifier comes from the stated branch of %SBO.
   *
   * @return @c true if @p term is-a %SBO <em>\'metadata representation\'</em>, @c false otherwise.
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., SBO), and the other will
   * be a standalone top-level function with the name
   * SBO_isMetadataRepresentation(). They are functionally identical. @endif
   */ public
";


%csmethodmodifiers SBO::isOccurringEntityRepresentation(unsigned int term) "
/**
   * Returns @c true if the given term identifier comes from the stated branch of %SBO.
   *
   * @return @c true if @p term is-a %SBO <em>\'occurring entity representation\'</em>, @c false otherwise.
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., SBO), and the other will
   * be a standalone top-level function with the name
   * SBO_isOccurringEntityRepresentation(). They are functionally identical. @endif
   */ public
";


%csmethodmodifiers SBO::isPhysicalEntityRepresentation(unsigned int term) "
/**
   * Returns @c true if the given term identifier comes from the stated branch of %SBO.
   *
   * @return @c true if @p term is-a %SBO <em>\'physical entity representation\'</em>, @c false otherwise.
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., SBO), and the other will
   * be a standalone top-level function with the name
   * SBO_isPhysicalEntityRepresentation(). They are functionally identical. @endif
   */ public
";


%csmethodmodifiers SBO::isSystemsDescriptionParameter(unsigned int term) "
/**
   * Returns @c true if the given term identifier comes from the stated branch of %SBO.
   *
   * @return @c true if @p term is-a %SBO <em>\'systems description parameter\'</em>, @c false otherwise.
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., SBO), and the other will
   * be a standalone top-level function with the name
   * SBO_isSystemsDescriptionParameter(). They are functionally identical. @endif
   */ public
";


%csmethodmodifiers SBO::isObselete(unsigned int term) "
/**
   * Predicate for checking whether the given term is obsolete.
   *
   * @return @c true if @p term is-a %SBO <em>\'obsolete\'</em> term, @c false otherwise.
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., SBO), and the other will
   * be a standalone top-level function with the name
   * SBO_isObselete(). They are functionally identical. @endif
   */ public
";


%csmethodmodifiers SBO::intToString(int sboTerm) "
/**
   * Returns the integer as a correctly formatted %SBO identifier string.
   *
   * @return the given integer sboTerm as a zero-padded seven digit string.
   *
   * @note If the sboTerm is not in the correct range
   * (0000000&ndash;9999999), an empty string is returned.
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., SBO), and the other will
   * be a standalone top-level function with the name
   * SBO_intToString(). They are functionally identical. @endif
   */ public
";


%csmethodmodifiers SBO::stringToInt(const std::string& sboTerm) "
/**
   * Returns the string as a correctly formatted %SBO integer portion.
   *
   * @return the given string sboTerm as an integer.  If the sboTerm is not
   * in the correct format (a zero-padded, seven digit string), <code>-1</code> is
   * returned.
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., SBO), and the other will
   * be a standalone top-level function with the name
   * SBO_stringToInt(). They are functionally identical. @endif
   */ public
";


%csmethodmodifiers SBO::checkTerm(const std::string& sboTerm) "
/**
   * Checks the format of the given %SBO identifier string.
   *
   * @return @c true if sboTerm is in the correct format (a zero-padded, seven
   * digit string), @c false otherwise.
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., SBO), and the other will
   * be a standalone top-level function with the name
   * SBO_checkTerm(). They are functionally identical. @endif
   */ public
";


%csmethodmodifiers SBO::checkTerm(int sboTerm) "
/**
   * Checks the format of the given %SBO identifier, given in the form of
   * the integer portion alone.
   *
   * @return @c true if sboTerm is in the range (0000000&ndash;9999999), @c false
   * otherwise.
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., SBO), and the other will
   * be a standalone top-level function with the name
   * SBO_checkTerm(). They are functionally identical. @endif
   */ public
";


%csmethodmodifiers SBO::isChildOf(unsigned int term, unsigned int parent) "
/**
   * Returns @c true if the given term identifier comes from the stated branch of %SBO.
   * * @return true if the term is-a parent, false otherwise
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBO::populateSBOTree "
/**
   * Returns @c true if the given term identifier comes from the stated branch of %SBO.
   * populates the parent-child map
   */ /* libsbml-internal */ public
";


%typemap(csimports) SyntaxChecker "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Methods for checking syntax of SBML identifiers and other
 * strings.
 * 
 * @htmlinclude not-sbml-warning.html
 * 
 * This utility class provides static methods for checking the syntax of
 * identifiers and other text used in an SBML model.  The methods allow
 * callers to verify that strings such as SBML identifiers and XHTML notes
 * text conform to the SBML specifications.
 */
"


%csmethodmodifiers SyntaxChecker::isValidSBMLSId(std::string sid) "
/**
   * Returns true @c true or @c false depending on whether the argument
   * string conforms to the syntax of SBML identifiers.
   *
   * *
 * 
 * In SBML, identifiers that are the values of \'id\' attributes on objects
 * must conform to a data type called <code>SId</code> in the SBML
 * specifications.  LibSBML does not provide an explicit <code>SId</code>
 * data type; it uses ordinary character strings, which is easier for
 * applications to support.  (LibSBML does, however, test for identifier
 * validity at various times, such as when reading in models from files
 * and data streams.)
 *
 *
 * 
   *
   * This method provides programs with the ability to test explicitly that
   * the identifier strings they create conform to the SBML identifier
   * syntax.
   *
   * @param sid string to be checked for conformance to SBML identifier
   * syntax.
   *
   * @return @c true if the string conforms to type SBML data type
   * <code>SId</code>, @c false otherwise.
   *
   * *
 * 
 * SBML has strict requirements for the syntax of identifiers, that is, the
 * values of the \'id\' attribute present on most types of SBML objects.
 * The following is a summary of the definition of the SBML identifier type 
 * <code>SId</code>, which defines the permitted syntax of identifiers.  We
 * express the syntax using an extended form of BNF notation: 
 * <pre style=\'margin-left: 2em; border: none; font-weight: bold; font-size: 13px; color: black\'>
 * letter ::= \'a\'..\'z\',\'A\'..\'Z\'
 * digit  ::= \'0\'..\'9\'
 * idChar ::= letter | digit | \'_\'
 * SId    ::= ( letter | \'_\' ) idChar*
 * </pre>
 * The characters <code>(</code> and <code>)</code> are used for grouping, the
 * character <code>*</code> \'zero or more times\', and the character
 * <code>|</code> indicates logical \'or\'.  The equality of SBML identifiers is
 * determined by an exact character sequence match; i.e., comparisons must be
 * performed in a case-sensitive manner.  In addition, there are a few
 * conditions for the uniqueness of identifiers in an SBML model.  Please
 * consult the SBML specifications for the exact details of the uniqueness
 * requirements.
 * 
 *
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., SyntaxChecker), and the
   * other will be a standalone top-level function with the name
   * SyntaxChecker_isValidSBMLSId(). They are functionally
   * identical. @endif
   *
   * @see @if clike isValidUnitSId(string sid) @else SyntaxChecker::isValidUnitSId(string sid) @endif
   * @see @if clike isValidXMLID(string sid) @else SyntaxChecker::isValidXMLID(string sid) @endif
   */ public
";


%csmethodmodifiers SyntaxChecker::isValidXMLID(std::string id) "
/**
   * Returns @c true or @c false depending on whether the argument string
   * conforms to the XML data type <code>ID</code>.
   *
   * *
 * 
 * The optional attribute named \'metaid\', present on every major SBML
 * component type, is for supporting metadata annotations using RDF (<a
 * href=\'http://www.w3.org/RDF/\'>Resource Description Format</a>).  The
 * attribute value has the data type <a
 * href=\'http://www.w3.org/TR/REC-xml/#id\'>XML <code>ID</code></a>, the XML
 * identifier type, which means each \'metaid\' value must be globally unique
 * within an SBML file.  The latter point is important, because the
 * uniqueness criterion applies across <em>any</em> attribute with type
 * <code>ID</code> anywhere in the file, not just the \'metaid\' attribute used
 * by SBML&mdash;something to be aware of if your application-specific XML
 * content inside the \'annotation\' subelement happens to use the XML
 * <code>ID</code> type.  Although SBML itself specifies the use of <a
 * href=\'http://www.w3.org/TR/REC-xml/#id\'>XML <code>ID</code></a> only for
 * the \'metaid\' attribute, SBML-compatible applications should be careful if
 * they use XML <code>ID</code>\'s in XML portions of a model that are not
 * defined by SBML, such as in the application-specific content of the
 * \'annotation\' subelement.  Finally, note that LibSBML does not provide an
 * explicit XML <code>ID</code> data type; it uses ordinary character
 * strings, which is easier for applications to support.
 * 
 * 
   *
   * This method provides programs with the ability to test explicitly that
   * the identifier strings they create conform to the SBML identifier
   * syntax.
   *
   * @param id string to be checked for conformance to the syntax of
   * <a target=\'_blank\' href=\'http://www.w3.org/TR/REC-xml/#id\'>XML ID</a>.
   *
   * @return @c true if the string is a syntactically-valid value for the
   * XML type <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/REC-xml/#id\'>ID</a>, @c false otherwise.
   *
   * @note @htmlinclude xmlid-syntax.html
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., SyntaxChecker), and the
   * other will be a standalone top-level function with the name
   * SyntaxChecker_isValidXMLID(). They are functionally
   * identical. @endif
   * 
   * @see @if clike isValidSBMLSId(string sid) @else SyntaxChecker::isValidSBMLSId(string sid) @endif
   * @see @if clike isValidUnitSId(string sid) @else SyntaxChecker::isValidUnitSId(string sid) @endif
   */ public
";


%csmethodmodifiers SyntaxChecker::isValidXMLanyURI(std::string uri) "
/**
   * Returns @c true or @c false depending on whether the @p uri argument string
   * conforms to the XML data type <code>anyURI</code>.
   *
   * Type anyURI is defined by XML Schema 1.0. It is a character string 
   * data type whose values are interpretable as URIs (Universal Resource 
   * Identifiers) as described by the W3C document RFC 3986.  LibSBML
   * does not provide an explicit XML <code>anyURI</code> data type; it uses
   * ordinary character strings, which is easier for applications to
   * support.  LibSBML does, however, test for anyURI validity at
   * various times, such as when reading in models from files and data
   * streams.
   *
   * This method provides programs with the ability to test explicitly that
   * the strings they create conform to the XML anyURI syntax.
   *
   * @param uri string to be checked for conformance to the syntax of
   * <a target=\'_blank\' 
   * href=\'http://www.w3.org/TR/xmlschema-2/#anyURI\'>anyURI</a>.
   *
   * @return @c true if the string is a syntactically-valid value for the
   * XML type <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/xmlschema-2/#anyURI\'>anyURI</a>, 
   * @c false otherwise.
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., SyntaxChecker), and the
   * other will be a standalone top-level function with the name
   * SyntaxChecker_isValidXMLanyURI(). They are functionally
   * identical. @endif
   */ public
";


%csmethodmodifiers SyntaxChecker::isValidUnitSId(std::string units) "
/**
   * Returns @c true or @c false depending on whether the argument string
   * conforms to the syntax of SBML unit identifiers.
   *
   * In SBML, the identifiers of units (of both the predefined units and
   * user-defined units) must conform to a data type called
   * <code>UnitSId</code> in the SBML specifications.  LibSBML does not
   * provide an explicit <code>UnitSId</code> data type; it uses ordinary
   * character strings, which is easier for applications to support.
   * LibSBML does, however, test for identifier validity at various times,
   * such as when reading in models from files and data streams.
   *
   * This method provides programs with the ability to test explicitly that
   * the identifier strings they create conform to the SBML identifier
   * syntax.
   *
   * @param units string to be checked for conformance to SBML unit
   * identifier syntax.
   *
   * @return @c true if the string conforms to type SBML data type
   * <code>UnitSId</code>, @c false otherwise.
   *
   * @note @htmlinclude unitid-syntax.html
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., SyntaxChecker), and the
   * other will be a standalone top-level function with the name
   * SyntaxChecker_isValidUnitSId(). They are functionally
   * identical. @endif
   *
   * @see @if clike isValidSBMLSId(string sid) @else SyntaxChecker::isValidSBMLSId(string sid) @endif
   * @see @if clike isValidXMLID(string sid) @else SyntaxChecker::isValidXMLID(string sid) @endif
   */ public
";


%csmethodmodifiers SyntaxChecker::hasExpectedXHTMLSyntax(const XMLNode * xhtml, SBMLNamespaces * sbmlns = NULL) "
/**
   * Returns @c true or @c false depending on whether the given XMLNode
   * object contains valid XHTML content.
   *
   * *
 * 
 * The optional SBML element named \'notes\', present on every major SBML
 * component type (and in SBML Level&nbsp;3, the \'message\' subelement of
 * Constraint), is intended as a place for storing optional information
 * intended to be seen by humans.  An example use of the \'notes\' element
 * would be to contain formatted user comments about the model element in
 * which the \'notes\' element is enclosed.  Every object derived directly or
 * indirectly from type SBase can have a separate value for \'notes\', allowing
 * users considerable freedom when adding comments to their models.
 *
 * The format of \'notes\' elements conform to the definition of <a
 * target=\'_blank\' href=\'http://www.w3.org/TR/xhtml1/\'>XHTML&nbsp;1.0</a>.
 * However, the content cannot be @em entirely free-form; it must satisfy
 * certain requirements defined in the <a target=\'_blank\'
 * href=\'http://sbml.org/Documents/Specifications\'>SBML specifications</a>
 * for specific SBML Levels.  To help verify the formatting of \'notes\'
 * content, libSBML provides the static utility method
 * SyntaxChecker::hasExpectedXHTMLSyntax(@if java XMLNode xhtml@endif); The
 * method implements a verification process that lets callers check whether
 * the content of a given XMLNode object conforms to the SBML requirements
 * for \'notes\' and \'message\' structure.  Developers are urged to consult the
 * appropriate <a target=\'_blank\'
 * href=\'http://sbml.org/Documents/Specifications\'>SBML specification
 * document</a> for the Level and Version of their model for more in-depth
 * explanations of using \'notes\' in SBML.  The SBML Level&nbsp;2 and &nbsp;3
 * specifications have considerable detail about how \'notes\' element content
 * must be structured.
 *
 *
   *
   * An aspect of XHTML validity is that the content is declared to be in
   * the XML namespace for XHTML&nbsp;1.0.  There is more than one way in
   * which this can be done in XML.  In particular, a model might not
   * contain the declaration within the \'notes\' or \'message\' subelement
   * itself, but might instead place the declaration on an enclosing
   * element and use an XML namespace prefix within the \'notes\' element to
   * refer to it.  In other words, the following is valid:
   * @verbatim
<sbml xmlns=\'http://www.sbml.org/sbml/level2/version3\' level=\'2\' version=\'3\'
      xmlns:xhtml=\'http://www.w3.org/1999/xhtml\'>
  <model>
    <notes>
      <xhtml:body>
        <xhtml:center><xhtml:h2>A Simple Mitotic Oscillator</xhtml:h2></xhtml:center>
        <xhtml:p>A minimal cascade model for the mitotic oscillator.</xhtml:p>
      </xhtml:body>
    </notes>
  ... rest of model ...
</sbml>
@endverbatim
   * Contrast the above with the following, self-contained version, which
   * places the XML namespace declaration within the <code>&lt;notes&gt;</code>
   * element itself:
   * @verbatim
<sbml xmlns=\'http://www.sbml.org/sbml/level2/version3\' level=\'2\' version=\'3\'>
  <model>
    <notes>
      <html xmlns=\'http://www.w3.org/1999/xhtml\'>
        <head>
          <title/>
        </head>
        <body>
          <center><h2>A Simple Mitotic Oscillator</h2></center>
          <p>A minimal cascade model for the mitotic oscillator.</p>
        </body>
      </html>
    </notes>
  ... rest of model ...
</sbml>
@endverbatim
   *
   * Both of the above are valid XML.  The purpose of the @p sbmlns
   * argument to this method is to allow callers to check the validity of
   * \'notes\' and \'message\' subelements whose XML namespace declarations
   * have been put elsewhere in the manner illustrated above.  Callers can
   * can pass in the SBMLNamespaces object of a higher-level model
   * component if the XMLNode object does not itself have the XML namespace
   * declaration for XHTML&nbsp;1.0.
   * 
   * @param xhtml the XMLNode to be checked for conformance.
   * @param sbmlns the SBMLNamespaces associated with the object.
   *
   * @return @c true if the XMLNode content conforms, @c false otherwise.
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., SyntaxChecker), and the
   * other will be a standalone top-level function with the name
   * SyntaxChecker_hasExpectedXHTMLSyntax(). They are functionally
   * identical. @endif
   *
   * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
   */ public
";


%csmethodmodifiers SyntaxChecker::isValidInternalSId(std::string sid) "
/**
   * Returns true @c true or @c false depending on whether the argument
   * string conforms to the syntax of SBML identifiers or is empty.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SyntaxChecker::isValidInternalUnitSId(std::string sid) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers SyntaxChecker::isAllowedElement(const XMLNode &node) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers SyntaxChecker::hasDeclaredNS(const XMLNode &node, const XMLNamespaces* toplevelNS) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers SyntaxChecker::isCorrectHTMLNode(const XMLNode &node) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers SyntaxChecker::isUnicodeLetter(std::string::iterator, unsigned int) "
/**
   * Checks if a character is part of the Unicode Letter set.
   * @return true if the character is a part of the set, false otherwise.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SyntaxChecker::isUnicodeDigit(std::string::iterator, unsigned int) "
/**
   * Checks if a character is part of the Unicode Digit set.
   * @return true if the character is a part of the set, false otherwise.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SyntaxChecker::isCombiningChar(std::string::iterator, unsigned int) "
/**
   * Checks if a character is part of the Unicode CombiningChar set.
   * @return true if the character is a part of the set, false otherwise.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SyntaxChecker::isExtender(std::string::iterator, unsigned int) "
/**
   * Checks if a character is part of the Unicode Extender set.
   * @return true if the character is a part of the set, false otherwise.
   */ /* libsbml-internal */ public
";


%typemap(csimports) StoichiometryMath "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Implementation of SBML Level&nbsp;2\'s %StoichiometryMath
 * construct.
 *
 * @section l2-stoichiometries Stoichiometries in SBML Level 2
 *
 * In SBML Level 2, product and reactant stoichiometries can be specified
 * using @em either the \'stoichiometry\' attribute or a \'stoichiometryMath\'
 * element in a SpeciesReference object.  The \'stoichiometry\' attribute is
 * of type @c double and should contain values greater than zero (0).  The
 * \'stoichiometryMath\' element is implemented as an element containing a
 * MathML expression.  These two are mutually exclusive; only one of
 * \'stoichiometry\' or \'stoichiometryMath\' should be defined in a given
 * SpeciesReference instance.  When neither the attribute nor the element
 * is present, the value of \'stoichiometry\' in the enclosing
 * SpeciesReference instance defaults to @c 1.
 * 
 * For maximum interoperability, SpeciesReference\'s \'stoichiometry\'
 * attribute should be used in preference to \'stoichiometryMath\' when a
 * species\' stoichiometry is a simple scalar number (integer or decimal).
 * When the stoichiometry is a rational number, or when it is a more
 * complicated formula, \'stoichiometryMath\' must be used.  The MathML
 * expression in \'stoichiometryMath\' may also refer to identifiers of
 * entities in a model (except reaction identifiers).  However, the only
 * species identifiers that can be used in \'stoichiometryMath\' are those
 * referenced in the enclosing Reaction\'s list of reactants, products and
 * modifiers.
 * 
 * The \'stoichiometry\' attribute and the \'stoichiometryMath\' element, when
 * either is used, is each interpreted as a factor applied to the reaction
 * rate to produce the rate of change of the species identified by the
 * \'species\' attribute in the enclosing SpeciesReference.  This is the
 * normal interpretation of a stoichiometry, but in SBML, one additional
 * consideration has to be taken into account.  The reaction rate, which is
 * the result of the KineticLaw\'s \'math\' element, is always in the model\'s
 * @em substance per @em time units.  However, the rate of change of the
 * species will involve the species\' @em substance units (i.e., the units
 * identified by the Species object\'s \'substanceUnits\' attribute), and
 * these units may be different from the model\'s default @em substance
 * units.  If the units @em are different, the stoichiometry must
 * incorporate a conversion factor for converting the model\'s @em substance
 * units to the species\' @em substance units.  The conversion factor is
 * assumed to be included in the scalar value of the \'stoichiometry\'
 * attribute if \'stoichiometry\' is used.  If instead \'stoichiometryMath\' is
 * used, then the product of the model\'s \'substance\' units times the
 * \'stoichiometryMath\' units must match the @em substance units of the
 * species.  Note that in either case, if the species\' units and the
 * model\'s default @em substance units are the same, the stoichiometry ends
 * up being a dimensionless number and equivalent to the standard chemical
 * stoichiometry found in textbooks.  Examples and more explanations of
 * this are given in the SBML specification.
 * 
 * The following is a simple example of a species reference for species @c
 * \'X0\', with stoichiometry @c 2, in a list of reactants within a reaction
 * having the identifier @c \'J1\':
 * @verbatim
 <model>
     ...
     <listOfReactions>
         <reaction id=\'J1\'>
             <listOfReactants>
                 <speciesReference species=\'X0\' stoichiometry=\'2\'>
             </listOfReactants>
             ...
         </reaction>
         ...
     </listOfReactions>
     ...
 </model>
 @endverbatim
 * 
 * The following is a more complex example of a species reference for
 * species @c \'X0\', with a stoichiometry formula consisting of
 * a rational number:
 * @verbatim
 <model>
     ...
     <listOfReactions>
         <reaction id=\'J1\'>
             <listOfReactants>
                 <speciesReference species=\'X0\'>
                     <stoichiometryMath>
                         <math xmlns=\'http://www.w3.org/1998/Math/MathML\'> 
                             <cn type=\'rational\'> 3 <sep/> 2 </cn>
                         </math>
                     </stoichiometryMath>
                 </speciesReference>
             </listOfReactants>
             ...
         </reaction>
         ...
     </listOfReactions>
     ...
 </model>
 @endverbatim
 *
 * Additional discussions of stoichiometries and implications for species
 * and reactions are included in the documentation of SpeciesReference
 * class.
 *
 * @section l3-stoichiometries Stoichiometries in SBML Level 3
 *
 * The StoichiometryMath construct is not defined in SBML Level&nbsp;3
 * Version&nbsp;1 Core.  Instead, Level&nbsp;3 defines the identifier of
 * SpeciesReference objects as a stand-in for the stoichiometry of the
 * reactant or product being referenced, and allows that identifier to be
 * used elsewhere in SBML models, including (for example) InitialAssignment
 * objects.  This makes it possible to achieve the same effect as
 * StoichiometryMath, but with other SBML objects.  For instance, to
 * produce a stoichiometry value that is a rational number, a model can use
 * InitialAssignment to assign the identifier of a SpeciesReference object
 * to a MathML expression evaluating to a rational number.  This is
 * analogous to the same way that, in Level&nbsp;2, the model would use
 * StoichiometryMath with a MathML expression evaluating to a rational
 * number.
 *
 * In SBML Level 2, the stoichiometry of a reactant or product is a
 * combination of both a <em>biochemical stoichiometry</em> (meaning, the
 * standard stoichiometry of a species in a reaction) and any necessary
 * unit conversion factors. The introduction of an explicit attribute on
 * the Species object for a conversion factor allows Level&nbsp;3 to avoid
 * having to overload the meaning of stoichiometry.  In Level&nbsp;3, the
 * stoichiometry given by a SpeciesReference object in a reaction is a
 * \'proper\' biochemical stoichiometry, meaning a dimensionless number free
 * of unit conversions.
 *
 * @see SpeciesReference
 * @see Reaction
 */
"


%csmethodmodifiers StoichiometryMath::StoichiometryMath(unsigned int level, unsigned int version) "
/**
   * Creates a new StoichiometryMath object using the given SBML @p level
   * values.
   *
   * @param level a long integer, the SBML Level to assign to this StoichiometryMath
   *
   * @param version a long integer, the SBML Version to assign to this
   * StoichiometryMath
   *
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the given @p level and @p version combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent SBMLDocument object.
   *
   * * 
 * @note The StoichiometryMath construct exists only in SBML Level&nbsp;2.
 * It is an optional construct available for defining the stoichiometries of
 * reactants and products in Reaction objects.  Note that a different
 * mechanism is used in SBML Level&nbsp;3, where StoichiometryMath is not
 * available.  Please consult the top of this libSBML StoichiometryMath
 * documentation for more information about the differences between SBML
 * Level&nbsp;2 and&nbsp;3 with respect to stoichiometries.
 *
   *
   * * 
 * @note Upon the addition of a StoichiometryMath object to an
 * SBMLDocument (e.g., using
 * SpeciesReference::createStoichiometryMath()), the SBML Level, SBML
 * Version and XML namespace of the document @em override the values used
 * when creating the StoichiometryMath object via this constructor.  This
 * is necessary to ensure that an SBML document is a consistent
 * structure.  Nevertheless, the ability to supply the values at the time
 * of creation of a StoichiometryMath is an important aid to producing
 * valid SBML.  Knowledge of the intented SBML Level and Version
 * determine whether it is valid to assign a particular value to an
 * attribute, or whether it is valid to add an object to an existing
 * SBMLDocument.
 *
   */ public
";


%csmethodmodifiers StoichiometryMath::StoichiometryMath(SBMLNamespaces* sbmlns) "
/**
   * Creates a new StoichiometryMath object using the given SBMLNamespaces object
   * @p sbmlns.
   *
   * *
 *  
 * The SBMLNamespaces object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML\'s SBMLNamespaces facilities is to create an
 * SBMLNamespaces object somewhere in a program once, then hand that object
 * as needed to object constructors that accept SBMLNamespaces as arguments.
 *
 * 
   *
   * @param sbmlns an SBMLNamespaces object.
   *
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the given @p level and @p version combination, or this kind
   * of SBML object, are either invalid or mismatched with respect to the
   * parent SBMLDocument object.
   *
   * * 
 * @note The StoichiometryMath construct exists only in SBML Level&nbsp;2.
 * It is an optional construct available for defining the stoichiometries of
 * reactants and products in Reaction objects.  Note that a different
 * mechanism is used in SBML Level&nbsp;3, where StoichiometryMath is not
 * available.  Please consult the top of this libSBML StoichiometryMath
 * documentation for more information about the differences between SBML
 * Level&nbsp;2 and&nbsp;3 with respect to stoichiometries.
 *
   *
   * * 
 * @note Upon the addition of a StoichiometryMath object to an
 * SBMLDocument (e.g., using
 * SpeciesReference::createStoichiometryMath()), the SBML Level, SBML
 * Version and XML namespace of the document @em override the values used
 * when creating the StoichiometryMath object via this constructor.  This
 * is necessary to ensure that an SBML document is a consistent
 * structure.  Nevertheless, the ability to supply the values at the time
 * of creation of a StoichiometryMath is an important aid to producing
 * valid SBML.  Knowledge of the intented SBML Level and Version
 * determine whether it is valid to assign a particular value to an
 * attribute, or whether it is valid to add an object to an existing
 * SBMLDocument.
 *
   */ public
";


%csmethodmodifiers StoichiometryMath::StoichiometryMath(const StoichiometryMath& orig) "
/**
   * Copy constructor; creates a copy of this StoichiometryMath.
   *
   * @param orig the object to copy.
   * 
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the argument @p orig is @c null.
   */ public
";


%csmethodmodifiers StoichiometryMath::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor for this instance of StoichiometryMath.
   *
   * @param v the SBMLVisitor instance to be used.
   *
   * @return the result of calling <code>v.visit()</code>.
   */ public
";


%csmethodmodifiers StoichiometryMath::clone() const "
/**
   * Creates and returns a deep copy of this StoichiometryMath object.
   *
   * @return a (deep) copy of this StoichiometryMath.
   */ public new
";


%csmethodmodifiers StoichiometryMath::getMath() const "
/**
   * Retrieves the mathematical formula within this StoichiometryMath and
   * return it as an AST.
   * 
   * @return the math of this StoichiometryMath.
   *
   * * 
 * @note The StoichiometryMath construct exists only in SBML Level&nbsp;2.
 * It is an optional construct available for defining the stoichiometries of
 * reactants and products in Reaction objects.  Note that a different
 * mechanism is used in SBML Level&nbsp;3, where StoichiometryMath is not
 * available.  Please consult the top of this libSBML StoichiometryMath
 * documentation for more information about the differences between SBML
 * Level&nbsp;2 and&nbsp;3 with respect to stoichiometries.
 *
   */ public
";


%csmethodmodifiers StoichiometryMath::isSetMath() const "
/**
   * Predicate to test whether the math for this StoichiometryMath object
   * is set.
   * 
   * @return @c true if the formula (meaning the @c math subelement) of
   * this StoichiometryMath is set, @c false otherwise.
   *
   * * 
 * @note The StoichiometryMath construct exists only in SBML Level&nbsp;2.
 * It is an optional construct available for defining the stoichiometries of
 * reactants and products in Reaction objects.  Note that a different
 * mechanism is used in SBML Level&nbsp;3, where StoichiometryMath is not
 * available.  Please consult the top of this libSBML StoichiometryMath
 * documentation for more information about the differences between SBML
 * Level&nbsp;2 and&nbsp;3 with respect to stoichiometries.
 *
   */ public
";


%csmethodmodifiers StoichiometryMath::setMath(const ASTNode* math) "
/**
   * Sets the \'math\' expression of this StoichiometryMath instance to a
   * copy of the given ASTNode.
   *
   * @param math an ASTNode representing a formula tree.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   *
   * * 
 * @note The StoichiometryMath construct exists only in SBML Level&nbsp;2.
 * It is an optional construct available for defining the stoichiometries of
 * reactants and products in Reaction objects.  Note that a different
 * mechanism is used in SBML Level&nbsp;3, where StoichiometryMath is not
 * available.  Please consult the top of this libSBML StoichiometryMath
 * documentation for more information about the differences between SBML
 * Level&nbsp;2 and&nbsp;3 with respect to stoichiometries.
 *
   */ public
";


%csmethodmodifiers StoichiometryMath::getDerivedUnitDefinition "
/**
   * Calculates and returns a UnitDefinition object that expresses the
   * units returned by the math expression in this StoichiometryMath
   * object.
   *
   * The units are calculated based on the mathematical expression in the
   * StoichiometryMath and the model quantities referenced by
   * <code>&lt;ci&gt;</code> elements used within that expression.  The
   * StoichiometryMath::getDerivedUnitDefinition() method returns the
   * calculated units.
   *
   * Note that the functionality that facilitates unit analysis depends 
   * on the model as a whole.  Thus, in cases where the object has not 
   * been added to a model or the model itself is incomplete,
   * unit analysis is not possible and this method will return @c null.
   * 
   * @return a UnitDefinition that expresses the units of the math, 
   * or @c null if one cannot be constructed.
   *
   * @warning <span class=\'warning\'>Note that it is possible the \'math\'
   * expression in the StoichiometryMath instance contains literal numbers or
   * parameters with undeclared units.  In those cases, it is not possible to
   * calculate the units of the overall expression without making
   * assumptions.  LibSBML does not make assumptions about the units, and
   * StoichiometryMath::getDerivedUnitDefinition() only returns the units as
   * far as it is able to determine them.  For example, in an expression
   * <em>X + Y</em>, if <em>X</em> has unambiguously-defined units and
   * <em>Y</em> does not, it will return the units of <em>X</em>.  When using
   * this method, <strong>it is critical that callers also invoke the
   * method</strong> StoichiometryMath::containsUndeclaredUnits() <strong>to
   * determine whether this situation holds</strong>.  Callers should take
   * suitable action in those situations.</span>
   *
   * @see containsUndeclaredUnits()
   */ public
";


%csmethodmodifiers StoichiometryMath::getDerivedUnitDefinition() const "
/**
   * Calculates and returns a UnitDefinition object that expresses the
   * units returned by the math expression in this StoichiometryMath
   * object.
   *
   * The units are calculated based on the mathematical expression in the
   * StoichiometryMath and the model quantities referenced by
   * <code>&lt;ci&gt;</code> elements used within that expression.  The
   * StoichiometryMath::getDerivedUnitDefinition() method returns the
   * calculated units.
   *
   * Note that the functionality that facilitates unit analysis depends 
   * on the model as a whole.  Thus, in cases where the object has not 
   * been added to a model or the model itself is incomplete,
   * unit analysis is not possible and this method will return @c null.
   * 
   * @return a UnitDefinition that expresses the units of the math,
   * or @c null if one cannot be constructed.
   *
   * @warning <span class=\'warning\'>Note that it is possible the \'math\'
   * expression in the StoichiometryMath instance contains literal numbers or
   * parameters with undeclared units.  In those cases, it is not possible to
   * calculate the units of the overall expression without making
   * assumptions.  LibSBML does not make assumptions about the units, and
   * StoichiometryMath::getDerivedUnitDefinition() only returns the units as
   * far as it is able to determine them.  For example, in an expression
   * <em>X + Y</em>, if <em>X</em> has unambiguously-defined units and
   * <em>Y</em> does not, it will return the units of <em>X</em>.  When using
   * this method, <strong>it is critical that callers also invoke the
   * method</strong> StoichiometryMath::containsUndeclaredUnits() <strong>to
   * determine whether this situation holds</strong>.  Callers should take
   * suitable action in those situations.</span>
   *
   * @see containsUndeclaredUnits()
   */ public
";


%csmethodmodifiers StoichiometryMath::containsUndeclaredUnits "
/**
   * Predicate returning @c true if the math
   * expression of this StoichiometryMath object contains literal numbers
   * or parameters with undeclared units.
   * 
   * The StoichiometryMath::getDerivedUnitDefinition() method returns what
   * libSBML computes the units of the Stoichiometry to be, to the extent
   * that libSBML can compute them.  However, if the expression contains
   * literal numbers or parameters with undeclared units, libSBML may not
   * be able to compute the full units of the expression and will only
   * return what it can compute.  Callers should always use
   * StoichiometryMath::containsUndeclaredUnits() when using
   * StoichiometryMath::getDerivedUnitDefinition() to decide whether the
   * returned units may be incomplete.
   *
   * @return @c true if the math expression of this StoichiometryMath
   * includes numbers/parameters with undeclared units, @c false otherwise.
   *
   * @note A return value of @c true indicates that the UnitDefinition
   * returned by StoichiometryMath::getDerivedUnitDefinition() may not
   * accurately represent the units of the expression.
   *
   * @see getDerivedUnitDefinition()
   */ public
";


%csmethodmodifiers StoichiometryMath::containsUndeclaredUnits() const "
/**
   * Predicate returning @c true if the math
   * expression of this StoichiometryMath object contains literal numbers
   * or parameters with undeclared units.
   * 
   * The StoichiometryMath::getDerivedUnitDefinition() method returns what
   * libSBML computes the units of the Stoichiometry to be, to the extent
   * that libSBML can compute them.  However, if the expression contains
   * literal numbers or parameters with undeclared units, libSBML may not
   * be able to compute the full units of the expression and will only
   * return what it can compute.  Callers should always use
   * StoichiometryMath::containsUndeclaredUnits() when using
   * StoichiometryMath::getDerivedUnitDefinition() to decide whether the
   * returned units may be incomplete.
   *
   * @return @c true if the math expression of this StoichiometryMath
   * includes numbers/parameters with undeclared units, @c false otherwise.
   *
   * @note A return value of @c true indicates that the UnitDefinition
   * returned by StoichiometryMath::getDerivedUnitDefinition() may not
   * accurately represent the units of the expression.
   *
   * @see getDerivedUnitDefinition()
   */ public
";


%csmethodmodifiers StoichiometryMath::getTypeCode() const "
/**
   * Returns the libSBML type code of this object instance.
   *
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object:
   * @link libsbmlcs.libsbml.SBML_STOICHIOMETRY_MATH SBML_STOICHIOMETRY_MATH@endlink (default).
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see getElementName()
   * @see getPackageName()
   */ public new
";


%csmethodmodifiers StoichiometryMath::getElementName() const "
/**
   * Returns the XML element name of this object, which for StoichiometryMath, is
   * always @c \'stoichiometryMath\'.
   * 
   * @return the name of this element, i.e., @c \'stoichiometryMath\'. 
   */ public new
";


%csmethodmodifiers StoichiometryMath::getElementPosition() const "
/**
   * Returns the position of this element.
   * 
   * @return the ordinal position of the element with respect to its
   * siblings or @c -1 (default) to indicate the position is not significant.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers StoichiometryMath::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers StoichiometryMath::hasRequiredElements() const "
/**
   * Predicate returning @c true if
   * all the required elements for this StoichiometryMath object
   * have been set.
   *
   * @note The required elements for a StoichiometryMath object are:
   * @li \'math\'
   *
   * @return a bool value indicating whether all the required
   * elements for this object have been defined.
   */ public new
";


%csmethodmodifiers StoichiometryMath::removeFromParentAndDelete "
/**
   * Finds this StoichiometryMath\'s SpeciesReference parent and calls
   * unsetStoichiometryMath() on it, indirectly deleting itself.
   *
   * Overridden from the SBase function since the parent is not a ListOf.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers StoichiometryMath::renameSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames all the @c SIdRef attributes on this element, including any
   * found in MathML.
   *
   * *
 * 

 * In SBML, object identifiers are of a data type called <code>SId</code>.
 * In SBML Level&nbsp;3, an explicit data type called <code>SIdRef</code> was
 * introduced for attribute values that refer to <code>SId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to an identifier\', but the effective
 * data type was the same as <code>SIdRef</code>in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>SIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 *
 *
   * 
   * This method works by looking at all attributes and (if appropriate)
   * mathematical formulas, comparing the identifiers to the value of @p
   * oldid.  If any matches are found, the matching identifiers are replaced
   * with @p newid.  The method does @em not descend into child elements.
   *
   * @param oldid the old identifier
   * @param newid the new identifier
   */ public
";


%csmethodmodifiers StoichiometryMath::renameUnitSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames all the @c UnitSIdRef attributes on this element.
   *
   * *
 * 
 * In SBML, unit definitions have identifiers of type <code>UnitSId</code>.  In
 * SBML Level&nbsp;3, an explicit data type called <code>UnitSIdRef</code> was
 * introduced for attribute values that refer to <code>UnitSId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as \'referring to a unit identifier\', but the effective
 * data type was the same as <code>UnitSIdRef</code> in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>UnitSIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 * 
 *
   *
   * This method works by looking at all unit identifier attribute values
   * (including, if appropriate, inside mathematical formulas), comparing the
   * unit identifiers to the value of @p oldid.  If any matches are found,
   * the matching identifiers are replaced with @p newid.  The method does
   * @em not descend into child elements.
   * 
   * @param oldid the old identifier
   * @param newid the new identifier
   */ public
";


%csmethodmodifiers StoichiometryMath::replaceSIDWithFunction(const std::string& id, const ASTNode* function) "
/**
   * Replace all nodes with the name \'id\' from the child \'math\' object with the provided function. 
   *
   */ /* libsbml-internal */ public
";


%csmethodmodifiers StoichiometryMath::getInternalId() const "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers StoichiometryMath::setInternalId(std::string id) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers StoichiometryMath::readOtherXML(XMLInputStream& stream) "
/**
   * Subclasses should override this method to read (and store) XHTML,
   * MathML, etc. directly from the XMLInputStream.
   *
   * @return true if the subclass read from the stream, false otherwise.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers StoichiometryMath::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers StoichiometryMath::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Subclasses should override this method to read values from the given
   * XMLAttributes set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers StoichiometryMath::readL2Attributes(const XMLAttributes& attributes) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers StoichiometryMath::writeAttributes(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   */ /* libsbml-internal */ public
";


%typemap(csimports) SBMLNamespaces "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Class to store SBML level, version and namespace
 * information.
 *
 * @htmlinclude not-sbml-warning.html
 *
 * There are differences in the definitions of components between different
 * SBML Levels, as well as Versions within Levels.  For example, the
 * \'sboTerm\' attribute was not introduced until Level&nbsp;2
 * Version&nbsp;2, and then only on certain component classes; the SBML
 * Level&nbsp;2 Version&nbsp;3 specification moved the \'sboTerm\' attribute
 * to the SBase class, thereby allowing nearly all components to have SBO
 * annotations.  As a result of differences such as those, libSBML needs to
 * track the SBML Level and Version of every object created.
 * 
 * The purpose of the SBMLNamespaces object class is to make it easier to
 * communicate SBML Level and Version data between libSBML constructors and
 * other methods.  The SBMLNamespaces object class tracks 3-tuples
 * (triples) consisting of SBML Level, Version, and the corresponding SBML
 * XML namespace.
 *
 * The plural name (SBMLNamespaces) is not a mistake, because in SBML
 * Level&nbsp;3, objects may have extensions added by Level&nbsp;3 packages
 * used by a given model and therefore may have multiple namespaces
 * associated with them; however, until the introduction of SBML
 * Level&nbsp;3, the SBMLNamespaces object only records one SBML
 * Level/Version/namespace combination at a time.  Most constructors for
 * SBML objects in libSBML take a SBMLNamespaces object as an argument,
 * thereby allowing the constructor to produce the proper combination of
 * attributes and other internal data structures for the given SBML Level
 * and Version.
 */
"


%csmethodmodifiers SBMLNamespaces::SBMLNamespaces(unsigned int level = SBML_DEFAULT_LEVEL, unsigned int version = SBML_DEFAULT_VERSION) "
/**
   * Creates a new SBMLNamespaces object corresponding to the given SBML
   * @p level and @p version.
   *
   * *
 * 
 * SBMLNamespaces objects are used in libSBML to communicate SBML Level and
 * Version data between constructors and other methods.  The SBMLNamespaces
 * object class holds triples consisting of SBML Level, Version, and the
 * corresponding SBML XML namespace.  Most constructors for SBML objects in
 * libSBML take a SBMLNamespaces object as an argument, thereby allowing
 * the constructor to produce the proper combination of attributes and
 * other internal data structures for the given SBML Level and Version.
 *
 * The plural name (SBMLNamespaces) is not a mistake, because in SBML
 * Level&nbsp;3, objects may have extensions added by Level&nbsp;3 packages
 * used by a given model and therefore may have multiple namespaces
 * associated with them.  In SBML Levels below Level&nbsp;3, the
 * SBMLNamespaces object only records one SBML Level/Version/namespace
 * combination at a time.  Most constructors for SBML objects in libSBML
 * take a SBMLNamespaces object as an argument, thereby allowing the
 * constructor to produce the proper combination of attributes and other
 * internal data structures for the given SBML Level and Version.
 * 
   *
   * @param level the SBML level
   * @param version the SBML version
   * 
   * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
   */ public
";


%csmethodmodifiers SBMLNamespaces::SBMLNamespaces(unsigned int level, unsigned int version, const std::string &pkgName, unsigned int pkgVersion, const std::string& pkgPrefix = "") "
/**
   * (For extensions) Creates a new SBMLNamespaces object corresponding to
   * the combination of (1) the given SBML @p level and @p version, and (2)
   * the given @p package with the @p package @p version.
   *
   * *
 * 
 * SBMLNamespaces objects are used in libSBML to communicate SBML Level and
 * Version data between constructors and other methods.  The SBMLNamespaces
 * object class holds triples consisting of SBML Level, Version, and the
 * corresponding SBML XML namespace.  Most constructors for SBML objects in
 * libSBML take a SBMLNamespaces object as an argument, thereby allowing
 * the constructor to produce the proper combination of attributes and
 * other internal data structures for the given SBML Level and Version.
 *
 * The plural name (SBMLNamespaces) is not a mistake, because in SBML
 * Level&nbsp;3, objects may have extensions added by Level&nbsp;3 packages
 * used by a given model and therefore may have multiple namespaces
 * associated with them.  In SBML Levels below Level&nbsp;3, the
 * SBMLNamespaces object only records one SBML Level/Version/namespace
 * combination at a time.  Most constructors for SBML objects in libSBML
 * take a SBMLNamespaces object as an argument, thereby allowing the
 * constructor to produce the proper combination of attributes and other
 * internal data structures for the given SBML Level and Version.
 * 
   *
   * @param level   the SBML Level
   * @param version the SBML Version
   * @param pkgName the string of package name (e.g. \'layout\', \'multi\')
   * @param pkgVersion the package version
   * @param pkgPrefix the prefix of the package namespace (e.g. \'layout\', \'multi\') to be added.
   *        The package\'s name will be used if the given string is empty (default).
   *
   * @throws SBMLExtensionException if the extension module that supports the
   * combination of the given SBML Level, SBML Version, package name, and
   * package version has not been registered with libSBML.
   */ public
";


%csmethodmodifiers SBMLNamespaces::SBMLNamespaces(const SBMLNamespaces& orig) "
/**
   * Copy constructor; creates a copy of a SBMLNamespaces.
   * 
   * @param orig the SBMLNamespaces instance to copy.
   *
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the argument @p orig is @c null.
   */ public
";


%csmethodmodifiers SBMLNamespaces::clone() const "
/**
   * Creates and returns a deep copy of this SBMLNamespaces.
   * 
   * @return a (deep) copy of this SBMLNamespaces.
   */ public
";


%csmethodmodifiers SBMLNamespaces::getSBMLNamespaceURI(unsigned int level, unsigned int version) "
/**
   * Returns a string representing the SBML XML namespace for the 
   * given @p level and @p version of SBML.
   *
   * @param level the SBML level
   * @param version the SBML version
   *
   * @return a string representing the SBML namespace that reflects the
   * SBML Level and Version specified.
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., SBMLNamespaces), and the
   * other will be a standalone top-level function with the name
   * SBMLNamespaces_getSBMLNamespaceURI(). They are functionally
   * identical. @endif
   */ public
";


%csmethodmodifiers SBMLNamespaces::getSupportedNamespaces "
/**
   * Returns a list of all supported SBMLNamespaces in this version of 
   * libsbml. 
   * 
   * @return a list with supported SBML namespaces. 
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., SBMLNamespaces), and the
   * other will be a standalone top-level function with the name
   * SBMLNamespaces_getSupportedNamespaces(). They are functionally
   * identical. @endif
   */ public
";


%csmethodmodifiers SBMLNamespaces::getURI() const "
/**
   * Returns a string representing the SBML XML namespace of this
   * object.
   *
   * @return a string representing the SBML namespace that reflects the
   * SBML Level and Version of this object.
   */ public
";


%csmethodmodifiers SBMLNamespaces::getLevel "
/**
   * Get the SBML Level of this SBMLNamespaces object.
   *
   * @return the SBML Level of this SBMLNamespaces object.
   */ public
";


%csmethodmodifiers SBMLNamespaces::getLevel() const "
/**
   * Get the SBML Level of this SBMLNamespaces object.
   *
   * @return the SBML Level of this SBMLNamespaces object.
   */ public
";


%csmethodmodifiers SBMLNamespaces::getVersion "
/**
   * Get the SBML Version of this SBMLNamespaces object.
   *
   * @return the SBML Version of this SBMLNamespaces object.
   */ public
";


%csmethodmodifiers SBMLNamespaces::getVersion() const "
/**
   * Get the SBML Version of this SBMLNamespaces object.
   *
   * @return the SBML Version of this SBMLNamespaces object.
   */ public
";


%csmethodmodifiers SBMLNamespaces::getNamespaces "
/**
   * Get the XML namespaces list for this SBMLNamespaces object.
   *
   * *
 * 
 * SBMLNamespaces objects are used in libSBML to communicate SBML Level and
 * Version data between constructors and other methods.  The SBMLNamespaces
 * object class holds triples consisting of SBML Level, Version, and the
 * corresponding SBML XML namespace.  Most constructors for SBML objects in
 * libSBML take a SBMLNamespaces object as an argument, thereby allowing
 * the constructor to produce the proper combination of attributes and
 * other internal data structures for the given SBML Level and Version.
 *
 * The plural name (SBMLNamespaces) is not a mistake, because in SBML
 * Level&nbsp;3, objects may have extensions added by Level&nbsp;3 packages
 * used by a given model and therefore may have multiple namespaces
 * associated with them.  In SBML Levels below Level&nbsp;3, the
 * SBMLNamespaces object only records one SBML Level/Version/namespace
 * combination at a time.  Most constructors for SBML objects in libSBML
 * take a SBMLNamespaces object as an argument, thereby allowing the
 * constructor to produce the proper combination of attributes and other
 * internal data structures for the given SBML Level and Version.
 *
   *
   * @return the XML namespaces of this SBMLNamespaces object.
   */ public
";


%csmethodmodifiers SBMLNamespaces::getNamespaces() const "
/**
   * Get the XML namespaces list for this SBMLNamespaces object.
   * 
   * *
 * 
 * SBMLNamespaces objects are used in libSBML to communicate SBML Level and
 * Version data between constructors and other methods.  The SBMLNamespaces
 * object class holds triples consisting of SBML Level, Version, and the
 * corresponding SBML XML namespace.  Most constructors for SBML objects in
 * libSBML take a SBMLNamespaces object as an argument, thereby allowing
 * the constructor to produce the proper combination of attributes and
 * other internal data structures for the given SBML Level and Version.
 *
 * The plural name (SBMLNamespaces) is not a mistake, because in SBML
 * Level&nbsp;3, objects may have extensions added by Level&nbsp;3 packages
 * used by a given model and therefore may have multiple namespaces
 * associated with them.  In SBML Levels below Level&nbsp;3, the
 * SBMLNamespaces object only records one SBML Level/Version/namespace
 * combination at a time.  Most constructors for SBML objects in libSBML
 * take a SBMLNamespaces object as an argument, thereby allowing the
 * constructor to produce the proper combination of attributes and other
 * internal data structures for the given SBML Level and Version.
 *
   *
   * @return the XML namespaces of this SBMLNamespaces object.
   */ public
";


%csmethodmodifiers SBMLNamespaces::addNamespaces(const XMLNamespaces * xmlns) "
/**
   * Add the given XML namespaces list to the set of namespaces within this
   * SBMLNamespaces object.
   *
   * The following code gives an example of how one could add the XHTML
   * namespace to the list of namespaces recorded by the top-level
   * <code>&lt;sbml&gt;</code> element of a model.  It gives the new
   * namespace a prefix of <code>html</code>.  @if clike
   * @verbatim
SBMLDocument sd;
try 
{
    sd = new SBMLDocument(3, 1);
} 
catch (SBMLConstructorException e)
{
    // Here, have code to handle a truly exceptional situation. Candidate
    // causes include invalid combinations of SBML Level and Version
    // (impossible if hardwired as given here), running out of memory, and
    // unknown system exceptions.
}

SBMLNamespaces sn = sd->getNamespaces();
if (sn != null)
{
    sn->add(\'http://www.w3.org/1999/xhtml\', \'html\');
}
else
{
    // Handle another truly exceptional situation.
}
@endverbatim
   * @endif@if java
@verbatim
SBMLDocument sd;
try 
{
    sd = new SBMLDocument(3, 1);
} 
catch (SBMLConstructorException e)
{
    // Here, have code to handle a truly exceptional situation. Candidate
    // causes include invalid combinations of SBML Level and Version
    // (impossible if hardwired as given here), running out of memory, and
    // unknown system exceptions.
}

SBMLNamespaces sn = sd.getNamespaces();
if (sn != null)
{
    sn.add(\'http://www.w3.org/1999/xhtml\', \'html\');
}
else
{
    // Handle another truly exceptional situation.
 }
@endverbatim
   * @endif@if python
@verbatim
sbmlDoc = None
try:
  sbmlDoc = SBMLDocument(3, 1)
except ValueError:
  # Do something to handle exceptional situation.  Candidate
  # causes include invalid combinations of SBML Level and Version
  # (impossible if hardwired as given here), running out of memory, and
  # unknown system exceptions.

namespaces = sbmlDoc.getNamespaces()
if namespaces == None:
  # Do something to handle case of no namespaces.

status = namespaces.add(\'http://www.w3.org/1999/xhtml\', \'html\')
if status != LIBSBML_OPERATION_SUCCESS:
  # Do something to handle failure.
@endverbatim
   * @endif@if csharp
@verbatim
SBMLDocument sd = null;
try
{
    sd = new SBMLDocument(3, 1);
}
catch (SBMLConstructorException e)
{
    // Here, have code to handle a truly exceptional situation.
    // Candidate causes include invalid combinations of SBML
    // Level and Version (impossible if hardwired as given here),
    // running out of memory, and unknown system exceptions.
}

XMLNamespaces sn = sd.getNamespaces();
if (sn != null)
{
    sn.add(\'http://www.w3.org/1999/xhtml\', \'html\');            
}
else
{
    // Handle another truly exceptional situation.
}
@endverbatim
   * @endif
   *
   * @param xmlns the XML namespaces to be added.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   */ public
";


%csmethodmodifiers SBMLNamespaces::addNamespace(const std::string& uri, const std::string &prefix) "
/**
   * Add an XML namespace (a pair of URI and prefix) to the set of namespaces
   * within this SBMLNamespaces object.
   * 
   * @param uri    the XML namespace to be added.
   * @param prefix the prefix of the namespace to be added.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   */ public
";


%csmethodmodifiers SBMLNamespaces::removeNamespace(const std::string& uri) "
/**
   * Removes an XML namespace from the set of namespaces within this 
   * SBMLNamespaces object.
   * 
   * @param uri    the XML namespace to be added.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INDEX_EXCEEDS_SIZE LIBSBML_INDEX_EXCEEDS_SIZE @endlink
   */ public
";


%csmethodmodifiers SBMLNamespaces::addPackageNamespace(const std::string &pkgName, unsigned int pkgVersion, const std::string &prefix = "") "
/**
   * Add an XML namespace (a pair of URI and prefix) of a package extension
   * to the set of namespaces within this SBMLNamespaces object.
   *
   * The SBML Level and SBML Version of this object is used.
   * 
   * @param pkgName the string of package name (e.g. \'layout\', \'multi\')
   * @param pkgVersion the package version
   * @param prefix the prefix of the package namespace to be added.
   *        The package\'s name will be used if the given string is empty (default).
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   *
   * @note An XML namespace of a non-registered package extension can\'t be
   * added by this function (@link
   * libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE@endlink 
   * will be returned).
   *
   * @see addNamespace(@if java String uri, String prefix@endif)
   */ public
";


%csmethodmodifiers SBMLNamespaces::addPackageNamespaces(const XMLNamespaces* xmlns) "
/**
   * Add the XML namespaces of package extensions in the given XMLNamespace
   * object to the set of namespaces within this SBMLNamespaces object
   * (Non-package XML namespaces are not added by this function).
   * 
   * @param xmlns the XML namespaces to be added.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   *
   * @note XML namespaces of a non-registered package extensions are not
   * added (just ignored) by this function. @link
   * libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE
   * LIBSBML_INVALID_ATTRIBUTE_VALUE@endlink will be returned if the given
   * xmlns is null.
   */ public
";


%csmethodmodifiers SBMLNamespaces::removePackageNamespace(unsigned int level, unsigned version, const std::string &pkgName, unsigned int pkgVersion) "
/**
   * Removes an XML namespace of a package extension from the set of namespaces 
   * within this SBMLNamespaces object.
   *
   * @param level   the SBML level
   * @param version the SBML version
   * @param pkgName the string of package name (e.g. \'layout\', \'multi\')
   * @param pkgVersion the package version
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INDEX_EXCEEDS_SIZE LIBSBML_INDEX_EXCEEDS_SIZE @endlink
   */ public
";


%csmethodmodifiers SBMLNamespaces::addPkgNamespace(const std::string &pkgName, unsigned int pkgVersion, const std::string &prefix = "") "
/**
   * Add an XML namespace (a pair of URI and prefix) of a package extension
   * to the set of namespaces within this SBMLNamespaces object.
   * 
   * The SBML Level and SBML Version of this object is used.
   * 
   * @param pkgName the string of package name (e.g. \'layout\', \'multi\')
   * @param pkgVersion the package version
   * @param prefix the prefix of the package namespace to be added.
   *        The package\'s name will be used if the given string is empty (default).
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   *
   * @note An XML namespace of a non-registered package extension can\'t be
   * added by this function (@link
   * libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE@endlink 
   * will be returned).
   *
   * @see addNamespace(@if java String uri, String prefix@endif)
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBMLNamespaces::addPkgNamespaces(const XMLNamespaces* xmlns) "
/**
   * Add the XML namespaces of package extensions in the given XMLNamespace
   * object to the set of namespaces within this SBMLNamespaces object.
   * 
   * Non-package XML namespaces are not added by this function.
   * 
   * @param xmlns the XML namespaces to be added.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   *
   * @note XML namespaces of a non-registered package extensions are not
   * added (just ignored) by this function. @link
   * libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE
   * LIBSBML_INVALID_ATTRIBUTE_VALUE@endlink will be returned if the given
   * xmlns is null.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBMLNamespaces::removePkgNamespace(unsigned int level, unsigned version, const std::string &pkgName, unsigned int pkgVersion) "
/**
   * Removes an XML namespace of a package extension from the set of
   * namespaces within this SBMLNamespaces object.
   *
   * @param level   the SBML level
   * @param version the SBML version
   * @param pkgName the string of package name (e.g. \'layout\', \'multi\')
   * @param pkgVersion the package version
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INDEX_EXCEEDS_SIZE LIBSBML_INDEX_EXCEEDS_SIZE @endlink
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBMLNamespaces::isSBMLNamespace(const std::string& uri) "
/**
   * Predicate returning @c true if the given URL is one of SBML XML
   * namespaces.
   *
   * @param uri the URI of namespace
   *
   * @return @c true if the \'uri\' is one of SBML namespaces, @c false otherwise.
   *
   * @if notclike @note Because this is a @em static method, the
   * non-C++ language interfaces for libSBML will contain two variants.  One
   * will be a static method on the class (i.e., SBMLNamespaces), and the
   * other will be a standalone top-level function with the name
   * SBMLNamespaces_isSBMLNamespace(). They are functionally
   * identical. @endif
   */ public
";


%csmethodmodifiers SBMLNamespaces::isValidCombination "
/**
   * Predicate returning @c true if the given set of namespaces represent a
   * valid set
   *
   * @return @c true if the set of namespaces is valid, @c false otherwise.
   */ public
";


%csmethodmodifiers SBMLNamespaces::setLevel(unsigned int level) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers SBMLNamespaces::setVersion(unsigned int version) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers SBMLNamespaces::setNamespaces(XMLNamespaces * xmlns) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers SBMLNamespaces::getPackageName() const "
/**
   * Returns the name of the main package for this namespace.
   *
   * @return the name of the main package for this namespace.
   * \'core\' will be returned if this namespace is defined in the SBML 
   * core. 
   */ public
";


%csmethodmodifiers SBMLNamespaces::initSBMLNamespace "
/** */ /* libsbml-internal */ public
";


%typemap(csimports) SBMLConstructorException "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Class of exceptions thrown by constructors of some
 * libSBML objects.
 *
 * In some situations, constructors for SBML objects may need to indicate to
 * callers that the creation of the object failed.  The failure may be for
 * different reasons, such as an attempt to use invalid parameters or a
 * system condition such as a memory error.  To communicate this to callers,
 * those classes will throw an SBMLConstructorException.
 *
 * In languages that don\'t have an exception mechanism (e.g., C), the
 * constructors generally try to return an error code instead of throwing
 * an exception.
 */
"


%csmethodmodifiers SBMLConstructorException::getSBMLErrMsg() const "
/**
   * Returns the message associated with this SBML exception.
   *
   * @return the message string.
   */ public
";


%typemap(csimports) ConversionOption "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Class of object that encapsulates a conversion option.
 * 
 * @htmlinclude libsbml-facility-only-warning.html
 *
 * LibSBML provides a number of converters that can perform transformations
 * on SBML documents.  These converters allow their behaviors to be
 * controlled by setting property values.  Converter properties are
 * communicated using objects of class ConversionProperties, and within
 * such objects, individual options are encapsulated using ConversionOption
 * objects.
 *
 * A ConversionOption object consists of four parts:
 * @li A @em key, acting as the name of the option;
 * @li A @em value of this option;
 * @li A @em type for the value; this is chosen from  the enumeration type
 * <a class=\'el\' href=\'#ConversionOptionType_t\'>ConversionOptionType_t</a>; and
 * @li A @em description consisting of a text string that describes the
 * option in some way.
 *
 * There are no constraints on the values of keys or descriptions;
 * authors of SBML converters are free to choose them as they see fit.
 *
 * @section ConversionOptionType_t Conversion option data types
 *
 * An option in ConversionOption must have a data type declared, to
 * indicate whether it is a string value, an integer, and so forth.  The
 * possible types of values are taken from the enumeration <a
 * class=\'el\' href=\'#ConversionOptionType_t\'>ConversionOptionType_t</a>.
 * The following are the possible values:
 * 
 * <p>
 * <center>
 * <table width=\'90%\' cellspacing=\'1\' cellpadding=\'1\' border=\'0\' class=\'normal-font\'>
 *  <tr style=\'background: lightgray\' class=\'normal-font\'>
 *      <td><strong>Enumerator</strong></td>
 *      <td><strong>Meaning</strong></td>
 *  </tr>
 * <tr>
 * <td><code>@link libsbmlcs.libsbml.CNV_TYPE_BOOL CNV_TYPE_BOOL@endlink</code></td>
 * <td>Indicates the value type is a Boolean.</td>
 * </tr>
 * <tr>
 * <td><code>@link libsbmlcs.libsbml.CNV_TYPE_DOUBLE CNV_TYPE_DOUBLE@endlink</code></td>
 * <td>Indicates the value type is a double-sized float.</td>
 * </tr>
 * <tr>
 * <td><code>@link libsbmlcs.libsbml.CNV_TYPE_INT CNV_TYPE_INT@endlink</code></td>
 * <td>Indicates the value type is an integer.</td>
 * </tr>
 * <tr>
 * <td><code>@link libsbmlcs.libsbml.CNV_TYPE_SINGLE CNV_TYPE_SINGLE@endlink</code></td>
 * <td>Indicates the value type is a float.</td>
 * </tr>
 * <tr>
 * <td><code>@link libsbmlcs.libsbml.CNV_TYPE_STRING CNV_TYPE_STRING@endlink</code></td>
 * <td>Indicates the value type is a string.</td>
 * </tr>
 * </table>
 * </center>
 *
 * @see ConversionProperties
 */
"


%csmethodmodifiers ConversionOption::ConversionOption(std::string key, std::string value="", ConversionOptionType_t type=CNV_TYPE_STRING, std::string description="") "
/**
   * Creates a new ConversionOption.
   *
   * This is the general constructor, taking arguments for all aspects of
   * an option.  Other constructors exist with different arguments.
   * 
   * @param key the key for this option
   * @param value an optional value for this option
   * @param type the type of this option
   * @param description the description for this option
   */ public
";


%csmethodmodifiers ConversionOption::ConversionOption(std::string key, const char* value, std::string description="") "
/**
   * Creates a new ConversionOption specialized for string-type options.
   * 
   * @param key the key for this option
   * @param value the value for this option
   * @param description an optional description
   */ public
";


%csmethodmodifiers ConversionOption::ConversionOption(std::string key, bool value, std::string description="") "
/**
   * Creates a new ConversionOption specialized for Boolean-type options.
   * 
   * @param key the key for this option
   * @param value the value for this option
   * @param description an optional description
   */ public
";


%csmethodmodifiers ConversionOption::ConversionOption(std::string key, double value, std::string description="") "
/**
   * Creates a new ConversionOption specialized for double-type options.
   * 
   * @param key the key for this option
   * @param value the value for this option
   * @param description an optional description
   */ public
";


%csmethodmodifiers ConversionOption::ConversionOption(std::string key, float value, std::string description="") "
/**
   * Creates a new ConversionOption specialized for float-type options.
   * 
   * @param key the key for this option
   * @param value the value for this option
   * @param description an optional description
   */ public
";


%csmethodmodifiers ConversionOption::ConversionOption(std::string key, int value, std::string description="") "
/**
   * Creates a new ConversionOption specialized for integer-type options.
   * 
   * @param key the key for this option
   * @param value the value for this option
   * @param description an optional description
   */ public
";


%csmethodmodifiers ConversionOption::ConversionOption(const ConversionOption& orig) "
/**
   * Copy constructor; creates a copy of an ConversionOption object.
   *
   * @param orig the ConversionOption object to copy.
   * 
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the argument @p orig is @c null.
   */ public
";


%csmethodmodifiers ConversionOption::clone() const "
/** 
   * Creates and returns a deep copy of this ConversionOption object.
   * 
   * @return a (deep) copy of this ConversionOption object.
   */ public
";


%csmethodmodifiers ConversionOption::getKey() const "
/**
   * Returns the key for this option.
   * 
   * @return the key, as a string.
   */ public
";


%csmethodmodifiers ConversionOption::setKey(std::string key) "
/**
   * Sets the key for this option.
   * 
   * @param key a string representing the key to set.
   */ public
";


%csmethodmodifiers ConversionOption::getValue() const "
/**
   * Returns the value of this option.
   * 
   * @return the value of this option, as a string.
   */ public
";


%csmethodmodifiers ConversionOption::setValue(std::string value) "
/**
   * Sets the value for this option.
   * 
   * @param value the value to set, as a string.
   */ public
";


%csmethodmodifiers ConversionOption::getDescription() const "
/**
   * Returns the description string for this option.
   * 
   * @return the description of this option.
   */ public
";


%csmethodmodifiers ConversionOption::setDescription(std::string description) "
/**
   * Sets the description text for this option.
   * 
   * @param description the description to set for this option.
   */ public
";


%csmethodmodifiers ConversionOption::getType() const "
/**
   * Returns the type of this option
   * 
   * @return the type of this option.
   */ public
";


%csmethodmodifiers ConversionOption::setType(ConversionOptionType_t type) "
/**
   * Sets the type of this option.
   * 
   * @param type the type value to use.
   */ public
";


%csmethodmodifiers ConversionOption::getBoolValue() const "
/**
   * Returns the value of this option as a Boolean.
   * 
   * @return the value of this option.
   */ public
";


%csmethodmodifiers ConversionOption::setBoolValue(bool value) "
/** 
   * Set the value of this option to a given Boolean value.
   *
   * Invoking this method will also set the type of the option to
   * @link libsbmlcs.libsbml.CNV_TYPE_BOOL CNV_TYPE_BOOL@endlink.
   * 
   * @param value the Boolean value to set
   */ public
";


%csmethodmodifiers ConversionOption::getDoubleValue() const "
/**
   * Returns the value of this option as a @c double.
   * 
   * @return the value of this option.
   */ public
";


%csmethodmodifiers ConversionOption::setDoubleValue(double value) "
/** 
   * Set the value of this option to a given @c double value.
   *
   * Invoking this method will also set the type of the option to
   * @link libsbmlcs.libsbml.CNV_TYPE_DOUBLE CNV_TYPE_DOUBLE@endlink.
   * 
   * @param value the value to set
   */ public
";


%csmethodmodifiers ConversionOption::getFloatValue() const "
/**
   * Returns the value of this option as a @c float.
   * 
   * @return the value of this option as a float
   */ public
";


%csmethodmodifiers ConversionOption::setFloatValue(float value) "
/** 
   * Set the value of this option to a given @c float value.
   *
   * Invoking this method will also set the type of the option to
   * @link libsbmlcs.libsbml.CNV_TYPE_SINGLE CNV_TYPE_SINGLE@endlink.
   * 
   * @param value the value to set
   */ public
";


%csmethodmodifiers ConversionOption::getIntValue() const "
/**
   * Returns the value of this option as an @c integer.
   * 
   * @return the value of this option, as an int
   */ public
";


%csmethodmodifiers ConversionOption::setIntValue(int value) "
/** 
   * Set the value of this option to a given @c int value.
   *
   * Invoking this method will also set the type of the option to
   * @link libsbmlcs.libsbml.CNV_TYPE_INT CNV_TYPE_INT@endlink.
   * 
   * @param value the value to set
   */ public
";


%typemap(csimports) ConversionProperties "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Class of object that encapsulates the properties of an
 * SBML converter.
 * 
 * @htmlinclude libsbml-facility-only-warning.html
 * 
 * The properties of SBML converters are communicated using objects of
 * class ConversionProperties, and within such objects, individual options
 * are encapsulated using ConversionOption objects.  The ConversionProperties
 * class provides numerous methods for setting and getting options.
 *
 * ConversionProperties objects are also used to determine the target SBML
 * namespace when an SBML converter\'s behavior depends on the intended
 * Level+Version combination of SBML.  In addition, it is conceivable that
 * conversions may be affected by SBML Level&nbsp;3 packages being used
 * by an SBML document.  These, too, are communicated by the values of
 * the SBML namespaces set on a ConversionProperties object.
 *
 * @see ConversionOption
 * @see SBMLNamespaces
 */
"


%csmethodmodifiers ConversionProperties::ConversionProperties(SBMLNamespaces* targetNS=NULL) "
/** 
   * Constructor that initializes the conversion properties
   * with a specific SBML target namespace.
   * 
   * @param targetNS the target namespace to convert to
   */ public
";


%csmethodmodifiers ConversionProperties::ConversionProperties(const ConversionProperties& orig) "
/** 
   * Copy constructor.
   *
   * @param orig the object to copy.
   * 
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the argument @p orig is @c null.
   */ public
";


%csmethodmodifiers ConversionProperties::clone() const "
/** 
   * Creates and returns a deep copy of this ConversionProperties object.
   * 
   * @return a (deep) copy of this ConversionProperties object.
   */ public
";


%csmethodmodifiers ConversionProperties::getTargetNamespaces() const "
/**
   * Returns the current target SBML namespace.
   *
   * @return the SBMLNamepaces object expressing the target namespace.
   */ public
";


%csmethodmodifiers ConversionProperties::hasTargetNamespaces() const "
/**
   * Returns @c true if the target SBML namespace has been set.
   * 
   * @return @c true if the target namespace has been set, @c false
   * otherwise.
   */ public
";


%csmethodmodifiers ConversionProperties::setTargetNamespaces(SBMLNamespaces *targetNS) "
/** 
   * Sets the target namespace.
   * 
   * @param targetNS the target namespace to use.
   */ public
";


%csmethodmodifiers ConversionProperties::getDescription(std::string key) const "
/**
   * Returns the description string for a given option in this properties
   * object.
   * 
   * @param key the key for the option.
   * 
   * @return the description text of the option with the given key.
   */ public
";


%csmethodmodifiers ConversionProperties::getType(std::string key) const "
/**
   * Returns the type of a given option in this properties object.
   * 
   * @param key the key for the option.
   * 
   * @return the type of the option with the given key.
   */ public
";


%csmethodmodifiers ConversionProperties::getOption(std::string key) const "
/**
   * Returns the ConversionOption object for a given key.
   * 
   * @param key the key for the option.
   * 
   * @return the option with the given key.
   */ public
";


%csmethodmodifiers ConversionProperties::addOption(const ConversionOption& option) "
/**
   * Adds a copy of the given option to this properties object.
   * 
   * @param option the option to add
   */ public
";


%csmethodmodifiers ConversionProperties::addOption(std::string key, std::string value="", ConversionOptionType_t type=CNV_TYPE_STRING, std::string description="") "
/**
   * Adds a new ConversionOption object with the given parameters.
   * 
   * @param key the key for the new option
   * @param value (optional) the value of that option
   * @param type (optional) the type of the option
   * @param description (optional) the description for the option
   */ public
";


%csmethodmodifiers ConversionProperties::addOption(std::string key, const char* value, std::string description="") "
/**
   * Adds a new ConversionOption object with the given parameters.
   * 
   * @param key the key for the new option
   * @param value the string value of that option
   * @param description (optional) the description for the option
   */ public
";


%csmethodmodifiers ConversionProperties::addOption(std::string key, bool value, std::string description="") "
/**
   * Adds a new ConversionOption object with the given parameters.
   * 
   * @param key the key for the new option
   * @param value the bool value of that option
   * @param description (optional) the description for the option
   */ public
";


%csmethodmodifiers ConversionProperties::addOption(std::string key, double value, std::string description="") "
/**
   * Adds a new ConversionOption object with the given parameters.
   * 
   * @param key the key for the new option
   * @param value the double value of that option
   * @param description (optional) the description for the option
   */ public
";


%csmethodmodifiers ConversionProperties::addOption(std::string key, float value, std::string description="") "
/**
   * Adds a new ConversionOption object with the given parameters.
   * 
   * @param key the key for the new option
   * @param value the float value of that option
   * @param description (optional) the description for the option
   */ public
";


%csmethodmodifiers ConversionProperties::addOption(std::string key, int value, std::string description="") "
/**
   * Adds a new ConversionOption object with the given parameters.
   * 
   * @param key the key for the new option
   * @param value the integer value of that option
   * @param description (optional) the description for the option
   */ public
";


%csmethodmodifiers ConversionProperties::removeOption(std::string key) "
/**
   * Removes the option with the given key from this properties object.
   * 
   * @param key the key for the new option to remove
   * @return the removed option
   */ public
";


%csmethodmodifiers ConversionProperties::hasOption(std::string key) const "
/** 
   * Returns @c true if this properties object contains an option with
   * the given key.
   * 
   * @param key the key of the option to find.
   * 
   * @return @c true if an option with the given @p key exists in
   * this properties object, @c false otherwise.
   */ public
";


%csmethodmodifiers ConversionProperties::getValue(std::string key) const "
/**
   * Returns the value of the given option as a string.
   * 
   * @param key the key for the option.
   * 
   * @return the string value of the option with the given key.
   */ public
";


%csmethodmodifiers ConversionProperties::setValue(std::string key, std::string value) "
/**
   * Sets the value of the given option to a string.
   * 
   * @param key the key for the option
   * @param value the new value
   */ public
";


%csmethodmodifiers ConversionProperties::getBoolValue(std::string key) const "
/**
   * Returns the value of the given option as a Boolean.
   * 
   * @param key the key for the option.
   * 
   * @return the bool value of the option with the given key.
   */ public
";


%csmethodmodifiers ConversionProperties::setBoolValue(std::string key, bool value) "
/**
   * Sets the value of the given option to a Boolean.
   * 
   * @param key the key for the option.
   * 
   * @param value the new Boolean value.
   */ public
";


%csmethodmodifiers ConversionProperties::getDoubleValue(std::string key) const "
/**
   * Returns the value of the given option as a @c double.
   * 
   * @param key the key for the option.
   * 
   * @return the double value of the option with the given key.
   */ public
";


%csmethodmodifiers ConversionProperties::setDoubleValue(std::string key, double value) "
/**
   * Sets the value of the given option to a @c double.
   * 
   * @param key the key for the option.
   * 
   * @param value the new double value.
   */ public
";


%csmethodmodifiers ConversionProperties::getFloatValue(std::string key) const "
/**
   * Returns the value of the given option as a @c float.
   * 
   * @param key the key for the option.
   * 
   * @return the float value of the option with the given key.
   */ public
";


%csmethodmodifiers ConversionProperties::setFloatValue(std::string key, float value) "
/**
   * Sets the value of the given option to a @c float.
   * 
   * @param key the key for the option.
   * 
   * @param value the new float value.
   */ public
";


%csmethodmodifiers ConversionProperties::getIntValue(std::string key) const "
/**
   * Returns the value of the given option as an integer.
   * 
   * @param key the key for the option.
   * 
   * @return the int value of the option with the given key.
   */ public
";


%csmethodmodifiers ConversionProperties::setIntValue(std::string key, int value) "
/**
   * Sets the value of the given option to an integer.
   * 
   * @param key the key for the option.
   * 
   * @param value the new integer value.
   */ public
";


%typemap(csimports) SBMLConverter "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Base class for SBML converters.
 *
 * @htmlinclude libsbml-facility-only-warning.html
 *
 * The SBMLConverter class is the base class for the various SBML @em
 * converters: classes of objects that transform or convert SBML documents.
 * These transformations can involve essentially anything that can be
 * written algorithmically; examples include converting the units of
 * measurement in a model, or converting from one Level+Version combination
 * of SBML to another.
 *
 * LibSBML provides a number of built-in converters, and applications can
 * create their own by subclassing SBMLConverter and following the examples
 * of the existing converters.  The following are the built-in converters
 * in libSBML @htmlinclude libsbml-version.html:
 * @li SBMLFunctionDefinitionConverter
 * @li SBMLInitialAssignmentConverter
 * @li SBMLLevelVersionConverter
 * @li SBMLRuleConverter
 * @li SBMLStripPackageConverter
 * @li SBMLUnitsConverter
 *
 * Many converters provide the ability to configure their behavior to some
 * extent.  This is realized through the use of @em properties that offer
 * different @em options.  Two related classes implement these features:
 * ConversionProperties and ConversionOptions.  The default property values
 * for each converter can be interrogated using the method
 * SBMLConverter::getDefaultProperties() on the converter class.
 */
"


%csmethodmodifiers SBMLConverter::SBMLConverter "
/**
   * Creates a new SBMLConverter object.
   */ public
";


%csmethodmodifiers SBMLConverter::SBMLConverter(const SBMLConverter& c) "
/**
   * Copy constructor; creates a copy of an SBMLConverter object.
   *
   * @param c the SBMLConverter object to copy.
   * 
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the argument @p orig is @c null.
   */ public
";


%csmethodmodifiers SBMLConverter::clone() const "
/**
   * Creates and returns a deep copy of this SBMLConverter object.
   * 
   * @return a (deep) copy of this SBMLConverter object.
   */ public
";


%csmethodmodifiers SBMLConverter::getDocument "
/**
   * Returns the SBML document that is the subject of the conversions.
   *
   * @return the current SBMLDocument object.
   */ public
";


%csmethodmodifiers SBMLConverter::getDocument() const "
/**
   * Returns the SBML document that is the subject of the conversions.
   *
   * @return the current SBMLDocument object, as a reference.
   */ public
";


%csmethodmodifiers SBMLConverter::getDefaultProperties() const "
/**
   * Returns the default properties of this converter.
   *
   * A given converter exposes one or more properties that can be adjusted
   * in order to influence the behavior of the converter.  This method
   * returns the @em default property settings for this converter.  It is
   * meant to be called in order to discover all the settings for the
   * converter object.  The run-time properties of the converter object can
   * be adjusted by using the method
   * SBMLConverter::setProperties(ConversionProperties props).
   * 
   * @return the default properties for the converter.
   *
   * @see setProperties(@if java ConversionProperties props@endif)
   * @see matchesProperties(@if java ConversionProperties props@endif)
   */ public
";


%csmethodmodifiers SBMLConverter::getTargetNamespaces "
/**
   * Returns the target SBML namespaces of the currently set properties.
   *
   * SBML namespaces are used by libSBML to express the Level+Version of
   * the SBML document (and, possibly, any SBML Level&nbsp;3 packages in
   * use). Some converters\' behavior is affected by the SBML namespace
   * configured in the converter.  For example, the actions of
   * SBMLLevelVersionConverter, the converter for converting SBML documents
   * from one Level+Version combination to another, are fundamentally
   * dependent on the SBML namespaces being targeted.
   *
   * @return the SBMLNamespaces object that describes the SBML namespaces
   * in effect.
   */ public
";


%csmethodmodifiers SBMLConverter::matchesProperties(const ConversionProperties &props) const "
/**
   * Predicate returning @c true if this converter\'s properties matches a
   * given set of configuration properties.
   * 
   * @param props the configuration properties to match.
   * 
   * @return @c true if this converter\'s properties match, @c false
   * otherwise.
   */ public
";


%csmethodmodifiers SBMLConverter::setDocument(const SBMLDocument* doc) "
/**
   * Sets the current SBML document to the given SBMLDocument object.
   * 
   * @param doc the document to use for this conversion.
   * 
   * @return integer value indicating the success/failure of the operation.
   * @if clike The value is drawn from the enumeration
   * #OperationReturnValues_t. @endif The set of possible values that may
   * be returned ultimately depends on the specific subclass of
   * SBMLConverter being used, but the default method can return the
   * following values:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   */ public
";


%csmethodmodifiers SBMLConverter::setProperties(const ConversionProperties *props) "
/**
   * Sets the configuration properties to be used by this converter.
   * 
   * A given converter exposes one or more properties that can be adjusted
   * in order to influence the behavior of the converter.  This method sets
   * the current properties for this converter.
   *
   * @param props the ConversionProperties object defining the properties
   * to set.
   * 
   * @return integer value indicating the success/failure of the operation.
   * @if clike The value is drawn from the enumeration
   * #OperationReturnValues_t. @endif The set of possible values that may
   * be returned ultimately depends on the specific subclass of
   * SBMLConverter being used, but the default method can return the
   * following values:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   *
   * @see getProperties()
   * @see matchesProperties(@if java ConversionProperties props@endif)
   */ public
";


%csmethodmodifiers SBMLConverter::getProperties() const "
/**
   * Returns the current properties in effect for this converter.
   * 
   * A given converter exposes one or more properties that can be adjusted
   * in order to influence the behavior of the converter.  This method
   * returns the current properties for this converter; in other words, the
   * settings in effect at this moment.  To change the property values, you
   * can use SBMLConverter::setProperties(ConversionProperties props).
   * 
   * @return the currently set configuration properties.
   *
   * @see setProperties(@if java ConversionProperties props@endif)
   * @see matchesProperties(@if java ConversionProperties props@endif)
   */ public
";


%csmethodmodifiers SBMLConverter::convert "
/**
   * Perform the conversion.
   *
   * This method causes the converter to do the actual conversion work,
   * that is, to convert the SBMLDocument object set by
   * SBMLConverter::setDocument(@if java SBMLDocument doc@endif) and
   * with the configuration options set by
   * SBMLConverter::setProperties(@if java ConversionProperties props@endif).
   * 
   * @return  integer value indicating the success/failure of the operation.
   * @if clike The value is drawn from the enumeration
   * #OperationReturnValues_t. @endif The set of possible values that may
   * be returned depends on the converter subclass; please consult
   * the documentation for the relevant class to find out what the
   * possibilities are.
   */ public
";


%typemap(csimports) SBMLConverterRegistry "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Registry of all SBML converters.
 *
 * @htmlinclude libsbml-facility-only-warning.html
 *
 * LibSBML provides facilities for transforming and converting SBML
 * documents in various ways.  These transformations can involve
 * essentially anything that can be written algorithmically; examples
 * include converting the units of measurement in a model, or converting
 * from one Level+Version combination of SBML to another.  Converters are
 * implemented as objects derived from the class SBMLConverter.
 *
 * The converter registry, implemented as a singleton object of class
 * SBMLConverterRegistry, maintains a list of known converters and provides
 * methods for discovering them.  Callers can use the method
 * SBMLConverterRegistry::getNumConverters() to find out how many
 * converters are registered, then use
 * SBMLConverterRegistry::getConverterByIndex(@if java int index@endif) to
 * iterate over each one; alternatively, callers can use
 * SBMLConverterRegistry::getConverterFor(@if java ConversionProperties props@endif)
 * to search for a converter having specific properties.
 */
"


%csmethodmodifiers SBMLConverterRegistry::getInstance "
/**
   * Returns the singleton instance for the converter registry.
   *
   * Prior to using the registry, callers have to obtain a copy of the
   * registry.  This static method provides the means for doing that.
   * 
   * @return the singleton for the converter registry. 
   */ public
";


%csmethodmodifiers SBMLConverterRegistry::addConverter(const SBMLConverter* converter) "
/** 
   * Adds the given converter to the registry of SBML converters.
   * 
   * @param converter the converter to add to the registry.
   * 
   * @return integer value indicating the success/failure of the operation.
   * @if clike The value is drawn from the enumeration
   * #OperationReturnValues_t. @endif The possible values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   */ public
";


%csmethodmodifiers SBMLConverterRegistry::getConverterByIndex(int index) const "
/** 
   * Returns the converter with the given index number.
   *
   * Converters are given arbitrary index numbers by the registry.  Callers
   * can use the method SBMLConverterRegistry::getNumConverters() to find
   * out how many converters are registered, then use this method to
   * iterate over the list and obtain each one in turn.
   * 
   * @param index the zero-based index of the converter to fetch.
   * 
   * @return the converter with the given index number, or @c null if the
   * number is less than @c 0 or there is no converter at the given index
   * position.
   */ public
";


%csmethodmodifiers SBMLConverterRegistry::getConverterFor(const ConversionProperties& props) const "
/** 
   * Returns the converter that best matches the given configuration
   * properties.
   * 
   * Many converters provide the ability to configure their behavior.  This
   * is realized through the use of @em properties that offer different @em
   * options.  The present method allows callers to search for converters
   * that have specific property values.  Callers can do this by creating a
   * ConversionProperties object, adding the desired option(s) to the
   * object, then passing the object to this method.
   * 
   * @param props a ConversionProperties object defining the properties
   * to match against.
   * 
   * @return the converter matching the properties, or @c null if no
   * suitable converter is found.
   *
   * @see getConverterByIndex(@if java int index@endif)
   */ public
";


%csmethodmodifiers SBMLConverterRegistry::getNumConverters() const "
/**
   * Returns the number of converters known by the registry.
   * 
   * @return the number of registered converters.
   *
   * @see getConverterByIndex(@if java int index@endif)
   */ public
";


%csmethodmodifiers SBMLConverterRegistry::SBMLConverterRegistry "
/** 
   * protected constructor, use the getInstance() method to access the registry.
   */ /* libsbml-internal */ public
";


%typemap(csimports) SBMLFunctionDefinitionConverter "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html SBML converter for replacing function definitions.
 * 
 * @htmlinclude libsbml-facility-only-warning.html
 *
 * This is an SBML converter for manipulating user-defined functions in an
 * SBML file.  When invoked on the current model, it performs the following
 * operation:
 * <ol>
 * <li>Read the list of user-defined functions in the model (i.e., the
 * list of FunctionDefinition objects);
 * <li>Look for invocations of the function in mathematical expressions
 * throughout the model; and
 * <li>For each invocation found, replaces the invocation with a
 * in-line copy of the function\'s body, similar to how macro expansions
 * might be performed in scripting and programming languages.
 * </ol>
 *
 * For example, suppose the model contains a function definition
 * representing the function <i>f(x, y) = x * y</i>.  Further
 * suppose this functions invoked somewhere else in the model, in
 * a mathematical formula, as <i>f(s, p)</i>.  The outcome of running
 * SBMLFunctionDefinitionConverter on the model will be to replace
 * the call to <i>f</i> with the expression <i>s * p</i>.
 *
 * @see SBMLInitialAssignmentConverter
 * @see SBMLLevelVersionConverter
 * @see SBMLRuleConverter
 * @see SBMLStripPackageConverter
 * @see SBMLUnitsConverter
 */
"


%csmethodmodifiers SBMLFunctionDefinitionConverter::SBMLFunctionDefinitionConverter "
/**
   * Creates a new SBMLFunctionDefinitionConverter object.
   */ public
";


%csmethodmodifiers SBMLFunctionDefinitionConverter::SBMLFunctionDefinitionConverter(const SBMLFunctionDefinitionConverter& obj) "
/**
   * Copy constructor; creates a copy of an SBMLFunctionDefinitionConverter
   * object.
   *
   * @param obj the SBMLFunctionDefinitionConverter object to copy.
   */ public
";


%csmethodmodifiers SBMLFunctionDefinitionConverter::clone() const "
/**
   * Creates and returns a deep copy of this SBMLFunctionDefinitionConverter
   * object.
   * 
   * @return a (deep) copy of this converter.
   */ public
";


%csmethodmodifiers SBMLFunctionDefinitionConverter::matchesProperties(const ConversionProperties &props) const "
/**
   * Returns @c true if this converter object\'s properties match the given
   * properties.
   *
   * A typical use of this method involves creating a ConversionProperties
   * object, setting the options desired, and then calling this method on
   * an SBMLFunctionDefinitionConverter object to find out if the object\'s
   * property values match the given ones.  This method is also used by
   * SBMLConverterRegistry::getConverterFor(@if java ConversionProperties props@endif)
   * to search across all registered converters for one matching particular
   * properties.
   * 
   * @param props the properties to match.
   * 
   * @return @c true if this converter\'s properties match, @c false
   * otherwise.
   */ public
";


%csmethodmodifiers SBMLFunctionDefinitionConverter::convert "
/**
   * Replaces invocations of each user-defined function with an in-line
   * copy, similar to macro expansion.
   *
   * @return  integer value indicating the success/failure of the operation.
   * @if clike The value is drawn from the enumeration
   * #OperationReturnValues_t. @endif The possible values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_CONV_INVALID_SRC_DOCUMENT LIBSBML_CONV_INVALID_SRC_DOCUMENT @endlink
   */ public
";


%csmethodmodifiers SBMLFunctionDefinitionConverter::getDefaultProperties() const "
/**
   * Returns the default properties of this converter.
   * 
   * A given converter exposes one or more properties that can be adjusted
   * in order to influence the behavior of the converter.  This method
   * returns the @em default property settings for this converter.  It is
   * meant to be called in order to discover all the settings for the
   * converter object.
   *
   * @return the ConversionProperties object describing the default properties
   * for this converter.
   */ public
";


%csmethodmodifiers SBMLFunctionDefinitionConverter::expandFD_errors(unsigned int errors) "
/** */ /* libsbml-internal */ public
";


%typemap(csimports) SBMLInitialAssignmentConverter "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html SBML converter for replacing initial assignments.
 *
 * @htmlinclude libsbml-facility-only-warning.html
 *
 * This is an SBML converter for replacing InitialAssignment objects 
 * (when possible) by setting the initial value attributes on the model
 * objects being assigned.  In other words, for every object that is
 * the target of an initial assignment in the model, it evaluates the
 * mathematical expression of the assignment to get a numerical value,
 * and then sets the corresponding attribute of the object to the
 * value.  The effects for different kinds of SBML components are
 * as follows:
 * 
 * <center>
 * <table border=\'0\' class=\'text-table width80 normal-font alt-row-colors\'>
 *  <tr style=\'background: lightgray; font-size: 14px;\'>
 *      <th align=\'left\' width=\'200\'>Component</th>
 *      <th align=\'left\'>Effect</th>
 *  </tr>
 *  <tr>
 *  <td>Compartment</td>
 *  <td>Sets the value of the <code>size</code> attribute.</td>
 *  </tr>
 *  <tr>
 *  <td>Species</td>
 *  <td>Sets the value of either the <code>initialAmount</code>
 *  or the <code>initialConcentration</code> attributes, depending
 *  on the value of the Species object\'s
 *  <code>hasOnlySubstanceUnits</code> attribute.</td>
 *  </tr>
 *  <tr>
 *  <td>Parameter</td>
 *  <td>Sets the value of the <code>value</code> attribute.</td>
 *  </tr>
 *  <tr>
 *  <td>SpeciesReference</td>
 *  <td>Sets the value of the <code>stoichiometry</code> attribute
 *  in the Reaction object where the SpeciesReference object appears.</td>
 *  </tr>
 * </table>
 * </center>
 *
 * @see SBMLFunctionDefinitionConverter
 * @see SBMLLevelVersionConverter
 * @see SBMLRuleConverter
 * @see SBMLStripPackageConverter
 * @see SBMLUnitsConverter
 */
"


%csmethodmodifiers SBMLInitialAssignmentConverter::SBMLInitialAssignmentConverter "
/**
   * Creates a new SBMLInitialAssignmentConverter object.
   */ public
";


%csmethodmodifiers SBMLInitialAssignmentConverter::SBMLInitialAssignmentConverter(const SBMLInitialAssignmentConverter& obj) "
/**
   * Copy constructor; creates a copy of an SBMLInitialAssignmentConverter
   * object.
   *
   * @param obj the SBMLInitialAssignmentConverter object to copy.
   */ public
";


%csmethodmodifiers SBMLInitialAssignmentConverter::clone() const "
/**
   * Creates and returns a deep copy of this SBMLInitialAssignmentConverter
   * object.
   * 
   * @return a (deep) copy of this converter.
   */ public
";


%csmethodmodifiers SBMLInitialAssignmentConverter::matchesProperties(const ConversionProperties &props) const "
/**
   * Returns @c true if this converter object\'s properties match the given
   * properties.
   *
   * A typical use of this method involves creating a ConversionProperties
   * object, setting the options desired, and then calling this method on
   * an SBMLInitialAssignmentConverter object to find out if the object\'s
   * property values match the given ones.  This method is also used by
   * SBMLConverterRegistry::getConverterFor(@if java ConversionProperties props@endif)
   * to search across all registered converters for one matching particular
   * properties.
   * 
   * @param props the properties to match.
   * 
   * @return @c true if this converter\'s properties match, @c false
   * otherwise.
   */ public
";


%csmethodmodifiers SBMLInitialAssignmentConverter::convert "
/** 
   * Perform the conversion.
   *
   * This method causes the converter to do the actual conversion work,
   * that is, to convert the SBMLDocument object set by
   * SBMLConverter::setDocument(@if java SBMLDocument doc@endif) and
   * with the configuration options set by
   * SBMLConverter::setProperties(@if java ConversionProperties props@endif).
   * 
   * @return  integer value indicating the success/failure of the operation.
   * @if clike The value is drawn from the enumeration
   * #OperationReturnValues_t. @endif The possible values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   */ public
";


%csmethodmodifiers SBMLInitialAssignmentConverter::getDefaultProperties() const "
/**
   * Returns the default properties of this converter.
   * 
   * A given converter exposes one or more properties that can be adjusted
   * in order to influence the behavior of the converter.  This method
   * returns the @em default property settings for this converter.  It is
   * meant to be called in order to discover all the settings for the
   * converter object.
   *
   * @return the ConversionProperties object describing the default properties
   * for this converter.
   */ public
";


%typemap(csimports) SBMLLevelVersionConverter "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html SBML converter for transforming documents from one
 * Level+Version to another.
 *
 * @htmlinclude libsbml-facility-only-warning.html
 *
 * This SBML converter takes an SBML document of one SBML Level+Version
 * combination and attempts to convert it to another Level+Version combination.
 * The target Level+Version is set using an SBMLNamespace object in the
 * ConversionProperties object that controls this converter.
 *
 * This class is the basis for
 * SBMLDocument::setLevelAndVersion(@if java long lev, long ver, bool strict@endif).
 * 
 * @see SBMLFunctionDefinitionConverter
 * @see SBMLInitialAssignmentConverter
 * @see SBMLRuleConverter
 * @see SBMLStripPackageConverter
 * @see SBMLUnitsConverter
 */
"


%csmethodmodifiers SBMLLevelVersionConverter "
/**
   * Creates a new SBMLLevelVersionConverter object.
   */ public
";


%csmethodmodifiers SBMLLevelVersionConverter(const SBMLLevelVersionConverter& obj) "
/**
   * Copy constructor; creates a copy of an SBMLLevelVersionConverter
   * object.
   *
   * @param obj the SBMLLevelVersionConverter object to copy.
   */ public
";


%csmethodmodifiers clone() const "
/**
   * Creates and returns a deep copy of this SBMLLevelVersionConverter
   * object.
   * 
   * @return a (deep) copy of this converter.
   */ public
";


%csmethodmodifiers matchesProperties(const ConversionProperties &props) const "
/**
   * Returns @c true if this converter object\'s properties match the given
   * properties.
   *
   * A typical use of this method involves creating a ConversionProperties
   * object, setting the options desired, and then calling this method on
   * an SBMLLevelVersionConverter object to find out if the object\'s
   * property values match the given ones.  This method is also used by
   * SBMLConverterRegistry::getConverterFor(@if java ConversionProperties props@endif)
   * to search across all registered converters for one matching particular
   * properties.
   * 
   * @param props the properties to match.
   * 
   * @return @c true if this converter\'s properties match, @c false
   * otherwise.
   */ public
";


%csmethodmodifiers convert "
/** 
   * Perform the conversion.
   *
   * This method causes the converter to do the actual conversion work,
   * that is, to convert the SBMLDocument object set by
   * SBMLConverter::setDocument(@if java SBMLDocument doc@endif) and
   * with the configuration options set by
   * SBMLConverter::setProperties(@if java ConversionProperties props@endif).
   * SBMLConverter::setProperties(@if java ConversionProperties props@endif).
   * 
   * @return  integer value indicating the success/failure of the operation.
   * @if clike The value is drawn from the enumeration
   * #OperationReturnValues_t. @endif The possible values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   */ public
";


%csmethodmodifiers getDefaultProperties() const "
/**
   * Returns the default properties of this converter.
   * 
   * A given converter exposes one or more properties that can be adjusted
   * in order to influence the behavior of the converter.  This method
   * returns the @em default property settings for this converter.  It is
   * meant to be called in order to discover all the settings for the
   * converter object.
   *
   * @return the ConversionProperties object describing the default properties
   * for this converter.
   */ public
";


%csmethodmodifiers getTargetLevel "
/**
   * Returns the target SBML Level for the conversion.
   *
   * @return an integer indicating the SBML Level.
   */ public
";


%csmethodmodifiers getTargetVersion "
/**
   * Returns the target SBML Version for the conversion.
   *
   * @return an integer indicating the Version within the SBML Level.
   */ public
";


%csmethodmodifiers getValidityFlag "
/**
   * Returns the flag indicating whether the conversion has been set to \'strict\'.
   *
   * @return @c true if strict validity has been requested, @c false
   * otherwise.
   */ public
";


%typemap(csimports) SBMLRuleConverter "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html SBML converter for reordering rules and assignments in a
 * model.
 * 
 * @htmlinclude libsbml-facility-only-warning.html
 *
 * This converter reorders assignments in a model.  Specifically, it sorts
 * the list of assignment rules (i.e., the AssignmentRule objects contained
 * in the ListOfAssignmentRules within the Model object) and the initial
 * assignments (i.e., the InitialAssignment objects contained in the
 * ListOfInitialAssignments) such that, within each set, assignments that
 * depend on prior values are placed after the values are set.  For
 * example, if there is an assignment rule stating <i>a = b + 1</i>, and
 * another rule stating <i>b = 3</i>, the list of rules is sorted and the
 * rules are arranged so that the rule for <i>b = 3</i> appears @em before
 * the rule for <i>a = b + 1</i>.  Similarly, if dependencies of this
 * sort exist in the list of initial assignments in the model, the initial
 * assignments are sorted as well.
 *
 * Beginning with SBML Level 2, assignment rules have no ordering
 * required&mdash;the order in which the rules appear in an SBML file has
 * no significance.  Software tools, however, may need to reorder
 * assignments for purposes of evaluating them.  For example, for
 * simulators that use time integration methods, it would be a good idea to
 * reorder assignment rules such as the following,
 *
 * <i>b = a + 10 seconds</i><br>
 * <i>a = time</i>
 *
 * so that the evaluation of the rules is independent of integrator
 * step sizes. (This is due to the fact that, in this case, the order in
 * which the rules are evaluated changes the result.)  This converter
 * can be used to reorder the SBML objects regardless of whether the
 * input file contained them in the desired order.  Here is a code
 * fragment to illustrate how to do that:
 * @verbatim
ConversionProperties props;
props.addOption(\'sortRules\', true, \'sort rules\');

SBMLConverter converter;
converter.setProperties(&props);
converter.setDocument(&doc);
converter.convert(); 
@endverbatim
 * 
 * @note The two sets of assignments (list of assignment rules on the one
 * hand, and list of initial assignments on the other hand) are handled @em
 * independently.  In an SBML model, these entities are treated differently
 * and no amount of sorting can deal with inter-dependencies between
 * assignments of the two kinds.
 *
 * @see SBMLFunctionDefinitionConverter
 * @see SBMLInitialAssignmentConverter
 * @see SBMLLevelVersionConverter
 * @see SBMLStripPackageConverter
 * @see SBMLUnitsConverter
 */
"


%csmethodmodifiers SBMLRuleConverter::SBMLRuleConverter "
/**
   * Creates a new SBMLLevelVersionConverter object.
   */ public
";


%csmethodmodifiers SBMLRuleConverter::SBMLRuleConverter(const SBMLRuleConverter& obj) "
/**
   * Copy constructor; creates a copy of an SBMLLevelVersionConverter
   * object.
   *
   * @param obj the SBMLLevelVersionConverter object to copy.
   */ public
";


%csmethodmodifiers SBMLRuleConverter::clone() const "
/**
   * Creates and returns a deep copy of this SBMLLevelVersionConverter
   * object.
   * 
   * @return a (deep) copy of this converter.
   */ public
";


%csmethodmodifiers SBMLRuleConverter::matchesProperties(const ConversionProperties &props) const "
/**
   * Returns @c true if this converter object\'s properties match the given
   * properties.
   *
   * A typical use of this method involves creating a ConversionProperties
   * object, setting the options desired, and then calling this method on
   * an SBMLLevelVersionConverter object to find out if the object\'s
   * property values match the given ones.  This method is also used by
   * SBMLConverterRegistry::getConverterFor(@if java ConversionProperties props@endif)
   * to search across all registered converters for one matching particular
   * properties.
   * 
   * @param props the properties to match.
   * 
   * @return @c true if this converter\'s properties match, @c false
   * otherwise.
   */ public
";


%csmethodmodifiers SBMLRuleConverter::convert "
/** 
   * Perform the conversion.
   *
   * This method causes the converter to do the actual conversion work,
   * that is, to convert the SBMLDocument object set by
   * SBMLConverter::setDocument(@if java SBMLDocument doc@endif) and
   * with the configuration options set by
   * SBMLConverter::setProperties(@if java ConversionProperties props@endif).
   * 
   * @return  integer value indicating the success/failure of the operation.
   * @if clike The value is drawn from the enumeration
   * #OperationReturnValues_t. @endif The possible values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_CONV_INVALID_SRC_DOCUMENT LIBSBML_CONV_INVALID_SRC_DOCUMENT @endlink
   */ public
";


%csmethodmodifiers SBMLRuleConverter::getDefaultProperties() const "
/**
   * Returns the default properties of this converter.
   * 
   * A given converter exposes one or more properties that can be adjusted
   * in order to influence the behavior of the converter.  This method
   * returns the @em default property settings for this converter.  It is
   * meant to be called in order to discover all the settings for the
   * converter object.
   *
   * @return the ConversionProperties object describing the default properties
   * for this converter.
   */ public
";


%typemap(csimports) SBMLStripPackageConverter "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html SBML converter for removing packages.
 * 
 * @htmlinclude libsbml-facility-only-warning.html
 *
 * This SBML converter takes an SBML document and removes (strips) a package
 * from it.  No conversion is performed; the package constructs are simply
 * removed from the SBML document.  The package to be stripped is determined
 * by the value of the option \'package\' on the conversion properties.
 *
 * @see SBMLFunctionDefinitionConverter
 * @see SBMLLevelVersionConverter
 * @see SBMLRuleConverter
 * @see SBMLLevelVersionConverter
 * @see SBMLUnitsConverter
 */
"


%csmethodmodifiers SBMLStripPackageConverter::SBMLStripPackageConverter "
/**
   * Creates a new SBMLStripPackageConverter object.
   */ public
";


%csmethodmodifiers SBMLStripPackageConverter::SBMLStripPackageConverter(const SBMLStripPackageConverter& obj) "
/**
   * Copy constructor; creates a copy of an SBMLStripPackageConverter
   * object.
   *
   * @param obj the SBMLStripPackageConverter object to copy.
   */ public
";


%csmethodmodifiers SBMLStripPackageConverter::clone() const "
/**
   * Creates and returns a deep copy of this SBMLStripPackageConverter
   * object.
   * 
   * @return a (deep) copy of this converter.
   */ public
";


%csmethodmodifiers SBMLStripPackageConverter::matchesProperties(const ConversionProperties &props) const "
/**
   * Returns @c true if this converter object\'s properties match the given
   * properties.
   *
   * A typical use of this method involves creating a ConversionProperties
   * object, setting the options desired, and then calling this method on
   * an SBMLStripPackageConverter object to find out if the object\'s
   * property values match the given ones.  This method is also used by
   * SBMLConverterRegistry::getConverterFor(@if java ConversionProperties props@endif)
   * to search across all registered converters for one matching particular
   * properties.
   * 
   * @param props the properties to match.
   * 
   * @return @c true if this converter\'s properties match, @c false
   * otherwise.
   */ public
";


%csmethodmodifiers SBMLStripPackageConverter::convert "
/** 
   * Perform the conversion.
   *
   * This method causes the converter to do the actual conversion work,
   * that is, to convert the SBMLDocument object set by
   * SBMLConverter::setDocument(@if java SBMLDocument doc@endif) and
   * with the configuration options set by
   * SBMLConverter::setProperties(@if java ConversionProperties props@endif).
   * 
   * @return  integer value indicating the success/failure of the operation.
   * @if clike The value is drawn from the enumeration
   * #OperationReturnValues_t. @endif The possible values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers SBMLStripPackageConverter::getDefaultProperties() const "
/**
   * Returns the default properties of this converter.
   * 
   * A given converter exposes one or more properties that can be adjusted
   * in order to influence the behavior of the converter.  This method
   * returns the @em default property settings for this converter.  It is
   * meant to be called in order to discover all the settings for the
   * converter object.
   *
   * @return the ConversionProperties object describing the default properties
   * for this converter.
   */ public
";


%typemap(csimports) SBMLUnitsConverter "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html SBML converter to convert a model\'s units to SI units.
 * 
 * @htmlinclude libsbml-facility-only-warning.html
 *
 * This SBML converter converts the units in a model to base SI units,
 * namely metre, kilogram, second, Ampere, Kelvin, mole and candela.
 *
 * Unit conversion will only be performed on models that are fully unit
 * consistent; that is, all objects have associated units, and there are no
 * literal numbers with no units specified.  In the case of an SBML
 * Level&nbsp;3 model involving math expressions, this means that the @c
 * timeUnits attribute on the Model object must be set, and if there are
 * any reactions in the model, the @c extentUnits attribute on the Model
 * object must also be set.
 *
 * This converter has the additional Boolean property \'removeUnusedUnits\'
 * that can be used to tell the converter whether to remove any
 * UnitDefinition objects that are not referred to, after conversion is
 * complete.  You can set this value by adding the property using
 * @verbatim
prop.addOption(\'removeUnusedUnits\', false);
@endverbatim
 * The converter\'s default behavior is to remove the unused
 * UnitDefinition objects in the model.
 *
 * @see SBMLFunctionDefinitionConverter
 * @see SBMLLevelVersionConverter
 * @see SBMLRuleConverter
 * @see SBMLStripPackageConverter
 * @see SBMLUnitsConverter
 */
"


%typemap(csimports) SBMLValidator "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Base class for SBML validators
 *
 * @htmlinclude not-sbml-warning.html
 *
 * LibSBML implements facilities for verifying that a given SBML document
 * is valid according to the SBML specifications; it also exposes the
 * validation interface so that user programs and SBML Level&nbsp;3 package
 * authors may use the facilities to implement new validators.  There are
 * two main interfaces to libSBML\'s validation facilities, based on the
 * classes Validator and SBMLValidator.
 *
 * The Validator class is the basis of the system for validating an SBML
 * document against the validation rules defined in the SBML
 * specifications.  The scheme used by Validator relies is compact and uses
 * the @em visitor programming pattern, but it relies on C/C++ features and
 * is not directly accessible from language bindings.  SBMLValidator offers
 * a framework for straightforward class-based extensibility, so that user
 * code can subclass SBMLValidator to implement new validation systems,
 * different validators can be introduced or turned off at run-time, and
 * interfaces can be provided in the libSBML language bindings.
 * SBMLValidator can call Validator functionality internally (as is the
 * case in the current implementation of SBMLInternalValidator) or use
 * entirely different implementation approaches, as necessary.
 *
 * Users of libSBML may already be familiar with the facilities encompassed
 * by the validation system, in the form of the consistency-checking methods
 * defined on SBMLDocument.  The methods SBMLDocument::setConsistencyChecks(@if java int categ, bool onoff@endif),
 * SBMLDocument::checkConsistency(), SBMLDocument::checkInternalConsistency()
 * and other method of that sort are in fact implemented via SBMLValidator,
 * specifically as methods on the class SBMLInternalValidator.
 *
 * Authors may use SBMLValidator as the base class for their own validator
 * extensions to libSBML.  The class SBMLInternalValidator may serve as a
 * code example for how to implement such things.
 */
"


%csmethodmodifiers SBMLValidator::SBMLValidator "
/**
   * Creates a new SBMLValidator.
   */ public
";


%csmethodmodifiers SBMLValidator::SBMLValidator(const SBMLValidator& orig) "
/**
   * Copy constructor; creates a copy of an SBMLValidator object.
   *
   * @param orig the object to copy.
   * 
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the argument @p orig is @c null.
   */ public
";


%csmethodmodifiers SBMLValidator::clone() const "
/**
   * Creates and returns a deep copy of this SBMLValidator.
   * 
   * @return a (deep) copy of this SBMLValidator.
   */ public
";


%csmethodmodifiers SBMLValidator::getDocument "
/**
   * Returns the current SBML document in use by this validator.
   * 
   * @return the current SBML document
   *
   * @see setDocument(@if java SBMLDocument doc@endif)
   */ public
";


%csmethodmodifiers SBMLValidator::getDocument() const "
/**
   * Returns the current SBML document in use by this validator.
   * 
   * @return a reference to the current SBML document
   * 
   * @see setDocument(@if java SBMLDocument doc@endif)
   */ public
";


%csmethodmodifiers SBMLValidator::setDocument(const SBMLDocument* doc) "
/** 
   * Sets the current SBML document to the given SBMLDocument object.
   * 
   * @param doc the document to use for this validation
   * 
   * @return an integer value indicating the success/failure of the
   * validation.  @if clike The value is drawn from the enumeration
   * #OperationReturnValues_t. @endif The possible values returned by this
   * function are
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   *
   * @see getDocument()
   */ public
";


%csmethodmodifiers SBMLValidator::validate "
/** 
   * Runs this validator on the current SBML document.
   *
   * @return an integer value indicating the success/failure of the
   * validation.  @if clike The value is drawn from the enumeration
   * #OperationReturnValues_t. @endif The possible values returned by this
   * function are determined by the specific subclasses of this class.
   */ public
";


%csmethodmodifiers SBMLValidator::clearFailures "
/**
   * Clears this validator\'s list of failures.
   *
   * If you are validating multiple SBML documents with the same validator,
   * call this method after you have processed the list of failures from
   * the last validation run and before validating the next document.
   *
   * @if clike @see getFailures() @endif
   */ public
";


%csmethodmodifiers SBMLValidator::getFailures() const "
/**
   * Returns a list of SBMLError objects (if any) that were logged by the
   * last run of this validator.
   * 
   * @return a list of errors, warnings and other diagnostics logged during
   * validation.
   *
   * @see clearFailures()
   */ public
";


%csmethodmodifiers SBMLValidator::logFailure(const SBMLError& err) "
/**
   * Adds the given failure to this list of Validators failures.
   *
   * @param err an SBMLError object representing an error or warning
   *
   * @if clike @see getFailures() @endif
   */ public
";


%csmethodmodifiers SBMLValidator::validate(const SBMLDocument& d) "
/**
   * Validates the given SBMLDocument object.
   *
   * This is identical to calling setDocument(@if java SBMLDocument d @endif)
   * followed by validate().
   *
   * @param d the SBML document to validate
   *
   * @return the number of validation failures that occurred.  The objects
   * describing the actual failures can be retrieved using getFailures().
   */ public
";


%csmethodmodifiers SBMLValidator::validate(const std::string& filename) "
/**
   * Validates the SBML document located at the given @p filename.
   *
   * This is a convenience method that saves callers the trouble of
   * using SBMLReader to read the document first.
   *
   * @param filename the path to the file to be read and validated.
   *
   * @return the number of validation failures that occurred.  The objects
   * describing the actual failures can be retrieved using getFailures().
   */ public
";


%csmethodmodifiers SBMLValidator::getErrorLog "
/**
   * Returns the list of errors or warnings logged during parsing,
   * consistency checking, or attempted translation of this model.
   *
   * Note that this refers to the SBMLDocument object\'s error log (i.e.,
   * the list returned by SBMLDocument::getErrorLog()).  @em That list of
   * errors and warnings is @em separate from the validation failures
   * tracked by this validator (i.e., the list returned by getFailures()).
   * 
   * @return the SBMLErrorLog used for the SBMLDocument
   * 
   * @if clike @see getFailures() @endif
   */ public
";


%csmethodmodifiers SBMLValidator::getModel() const "
/**
   * Returns the Model object stored in the SBMLDocument.
   *
   * It is important to note that this method <em>does not create</em> a
   * Model instance.  The model in the SBMLDocument must have been created
   * at some prior time, for example using SBMLDocument::createModel() 
   * or SBMLDocument::setModel(@if java Model m@endif).
   * This method returns @c null if a model does not yet exist.
   * 
   * @return the Model contained in this validator\'s SBMLDocument object.
   *
   * @see SBMLDocument::setModel(@if java Model m@endif)
   * @see SBMLDocument::createModel()
   */ public
";


%csmethodmodifiers SBMLValidator::getModel "
/**
   * Returns the Model object stored in the SBMLDocument.
   *
   * It is important to note that this method <em>does not create</em> a
   * Model instance.  The model in the SBMLDocument must have been created
   * at some prior time, for example using SBMLDocument::createModel() 
   * or SBMLDocument::setModel(@if java Model m@endif).
   * This method returns @c null if a model does not yet exist.
   * 
   * @return the Model contained in this validator\'s SBMLDocument object.
   *
   * @see SBMLDocument::setModel(@if java Model m@endif)
   * @see SBMLDocument::createModel()
   */ public
";


%csmethodmodifiers SBMLValidator::getNumFailures() const "
/** 
   * Returns the number of failures encountered in the last validation run.
   * 
   * This method returns the number of failures logged by this validator.
   * This number only reflects @em this validator\'s actions; the number may
   * not be the same as the number of errors and warnings logged on the
   * SBMLDocument object\'s error log (i.e., the object returned by
   * SBMLDocument::getErrorLog()), because other parts of libSBML may log
   * errors and warnings beyond those found by this validator.
   *
   * @return the number of errors logged by this validator. 
   */ public
";


%csmethodmodifiers SBMLValidator::getFailure "
/** 
   * Returns the failure object at index n in this validator\'s list of
   * failures logged during the last run.
   *
   * Callers should use getNumFailures() first, to find out the number
   * of entries in this validator\'s list of failures.
   *
   * @param n an integer indicating the index of the object to return from
   * the failures list; index values start at 0.
   * 
   * @return the failure at the given index number.
   *
   * @see getNumFailures()
   */ public
";


%csmethodmodifiers SBMLExternalValidator::SBMLExternalValidator "
/**
   * Constructor.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBMLExternalValidator::SBMLExternalValidator(const SBMLExternalValidator&) "
/**
   * Copy constructor.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBMLExternalValidator::clone() const "
/**
   * Creates and returns a deep copy of this converter.
   * 
   * @return a (deep) copy of this converter.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBMLExternalValidator::validate "
/**
   * the actual conversion 
   * 
   * @return status code represeting success/failure/conversion impossible
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBMLExternalValidator::getProgram() const "
/**
   * Returns the program name of the validator to be run
   *
   * @return the program name of the validator to be run
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBMLExternalValidator::setProgram(std::string program) "
/**
   * Sets the name of the program to run
   *
   * @param program the program to be started
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBMLExternalValidator::getOutputFileName() const "
/**
   * Returns the output file name (this is the file the external program will write)
   *
   * @return the output file name
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBMLExternalValidator::setOutputFileName(std::string outputFileName) "
/**
   * Sets the output file name
   *
   * @param outputFileName the name of the output XML file
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBMLExternalValidator::getSBMLFileName() const "
/**
   * @return the name of the SBML file (the document of this validator will be written to it)
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBMLExternalValidator::setSBMLFileName(std::string sbmlFileName) "
/**
   * Sets the filename for the temporary file to be created
   *
   * @param sbmlFileName the temporary name
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBMLExternalValidator::clearArguments "
/**
   * Clear all additional arguments
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBMLExternalValidator::addArgument(std::string arg) "
/**
   * Adds the given argument to the list of additional arguments 
   *
   * @param arg the argument
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBMLExternalValidator::getNumArguments() const "
/**
   * @return the number of arguments. 
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBMLExternalValidator::getArgument "
/**
   * Returns the argument for the given index. 
   * 
   * @param n the zero based index of the argument. 
   *
   * @return the argument at the given index. 
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBMLExternalValidator::getArguments() const "
/**
   * @return all arguments
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBMLExternalValidator::setArguments(std::vector<std::string> args) "
/**
   * Sets the additional arguments
   *
   * @param args teh additional arguments
   */ /* libsbml-internal */ public
";


%csmethodmodifiers readMathML(XMLInputStream& stream, std::string reqd_prefix="") "
/**
 * Reads the MathML from the given XMLInputStream, constructs a corresponding
 * abstract syntax tree and returns a pointer to the root of the tree.
 */ /* libsbml-internal */ public
";


%csmethodmodifiers writeMathML(const ASTNode* node, XMLOutputStream& stream, SBMLNamespaces *sbmlns=NULL) "
/**
 * Writes the given ASTNode (and its children) to the XMLOutputStream as
 * MathML.
 */ /* libsbml-internal */ public
";


%csmethodmodifiers readMathMLFromString(const char *xml) "
/**
 * Reads the MathML from the given XML string, constructs a corresponding
 * abstract syntax tree, and returns a pointer to the root of the tree.
 *
 * @param xml a string containing a full MathML expression
 *
 * @return the root of an AST corresponding to the given mathematical
 * expression, otherwise @c null is returned if the given string is @c null
 * or invalid.
 */ public
";


%csmethodmodifiers writeMathMLToString(const ASTNode_t* node) "
/**
 * Writes the given ASTNode (and its children) to a string as MathML, and
 * returns the string.
 *
 * @param node the root of an AST to write out to the stream.
 *
 * @return a string containing the written-out MathML representation
 * of the given AST.
 *
 * @note The string is owned by the caller and should be freed (with
 * free()) when no longer needed.  @c null is returned if the given
 * argument is @c null.
 */ public
";


%typemap(csimports) ASTNode "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Abstract Syntax Tree (AST) representation of a
 * mathematical expression.
 *
 * @htmlinclude not-sbml-warning.html
 *
 * Abstract Syntax Trees (ASTs) are a simple kind of data structure used in
 * libSBML for storing mathematical expressions.  The ASTNode is the
 * cornerstone of libSBML\'s AST representation.  An AST \'node\' represents the
 * most basic, indivisible part of a mathematical formula and come in many
 * types.  For instance, there are node types to represent numbers (with
 * subtypes to distinguish integer, real, and rational numbers), names
 * (e.g., constants or variables), simple mathematical operators, logical
 * or relational operators and functions. LibSBML ASTs provide a canonical,
 * in-memory representation for all mathematical formulas regardless of
 * their original format (which might be MathML or might be text strings).
 *
 * *
 * 
 * An AST @em node in libSBML is a recursive structure containing a pointer
 * to the node\'s value (which might be, for example, a number or a symbol)
 * and a list of children nodes.  Each ASTNode node may have none, one,
 * two, or more children depending on its type.  The following diagram
 * illustrates an example of how the mathematical expression <code>\'1 +
 * 2\'</code> is represented as an AST with one @em plus node having two @em
 * integer children nodes for the numbers <code>1</code> and
 * <code>2</code>.  The figure also shows the corresponding MathML
 * representation:
 *
 * @htmlinclude astnode-illustration.html
 * 
 * The following are other noteworthy points about the AST representation
 * in libSBML:

 * @li A numerical value represented in MathML as a real number with an
 * exponent is preserved as such in the AST node representation, even if
 * the number could be stored in a @c double data type.  This is done
 * so that when an SBML model is read in and then written out again, the
 * amount of change introduced by libSBML to the SBML during the round-trip
 * activity is minimized.
 *  
 * @li Rational numbers are represented in an AST node using separate
 * numerator and denominator values.  These can be retrieved using the
 * methods ASTNode::getNumerator() and ASTNode::getDenominator().
 * 
 * @li The children of an ASTNode are other ASTNode objects.  The list of
 * children is empty for nodes that are leaf elements, such as numbers.
 * For nodes that are actually roots of expression subtrees, the list of
 * children points to the parsed objects that make up the rest of the
 * expression.
 *
 * For many applications, the details of ASTs are irrelevant because the
 * applications can use the text-string based translation functions such as
 * libsbmlcs.libsbml.formulaToString(), SBML_parseL3Formula() and libsbmlcs.libsbml.parseFormula().  If
 * you find the complexity of using the AST representation of expressions too
 * high for your purposes, perhaps the string-based functions will be more
 * suitable.
 * 
 * Finally, it is worth noting that the AST and MathML handling code in
 * libSBML remains written in C, not C++.  (All of libSBML was originally
 * written in C.)  Readers may occasionally wonder why some aspects are more
 * C-like and less object oriented, and that\'s one of the reasons.
 *
 *
 *
 * @if clike <h3><a class=\'anchor\' name=\'ASTNodeType_t\'>
 * ASTNodeType_t</a></h3> @else <h3><a class=\'anchor\'
 * name=\'ASTNodeType_t\'>The set of possible %ASTNode types</a></h3> @endif
 *
 * *
 * 
 * Every ASTNode has an associated type code to indicate whether, for
 * example, it holds a number or stands for an arithmetic operator.
 * @if clike The type is recorded as a value drawn from the enumeration 
 * @link ASTNode.h::ASTNodeType_t <code>ASTNodeType_t</code> @endlink.@endif
 * @if java The type is recorded as a value drawn from a
 * set of static integer constants defined in the class @link
 * libsbmlcs.libsbml@endlink. Their names begin with the characters @c AST_.@endif
 * @if python The type is recorded as a value drawn from a
 * set of static integer constants defined in the class @link
 * libsbml@endlink. Their names begin with the characters @c AST_.@endif
 * @if csharp The type is recorded as a value drawn from a
 * set of static integer constants defined in the class @link
 * libsbml@endlink. Their names begin with the characters @c AST_.@endif
 * The list of possible types is quite long, because it covers all the
 * mathematical functions that are permitted in SBML. The values are shown
 * in the following table:
 *
 * @htmlinclude astnode-types.html
 *
 * The types have the following meanings:
 *
 * @li If the node is basic mathematical operator (e.g., @c \'+\'), then the
 * node\'s type will be @link libsbmlcs.libsbml.AST_PLUS AST_PLUS@endlink, @link
 * libsbmlcs.libsbml.AST_MINUS AST_MINUS@endlink, @link libsbmlcs.libsbml.AST_TIMES
 * AST_TIMES@endlink, @link libsbmlcs.libsbml.AST_DIVIDE AST_DIVIDE@endlink, or
 * @link libsbmlcs.libsbml.AST_POWER AST_POWER@endlink, as appropriate.
 *
 * @li If the node is a predefined function or operator from %SBML
 * Level&nbsp;1 (in the string-based formula syntax used in Level&nbsp;1) or
 * %SBML Level&nbsp;2 and&nbsp;3 (in the subset of MathML used in SBML
 * Levels&nbsp;2 and&nbsp;3), then the node\'s type
 * will be either @c AST_FUNCTION_<em><span
 * class=\'placeholder\'>X</span></em>, @c AST_LOGICAL_<em><span
 * class=\'placeholder\'>X</span></em>, or @c AST_RELATIONAL_<em><span
 * class=\'placeholder\'>X</span></em>, as appropriate.  (Examples: @link
 * libsbmlcs.libsbml.AST_FUNCTION_LOG AST_FUNCTION_LOG@endlink, @link
 * libsbmlcs.libsbml.AST_RELATIONAL_LEQ AST_RELATIONAL_LEQ@endlink.)
 *
 * @li If the node refers to a user-defined function, the node\'s type will
 * be @link libsbmlcs.libsbml.AST_FUNCTION AST_FUNCTION@endlink (because it holds the
 * name of the function).
 *
 * @li If the node is a lambda expression, its type will be @link
 * libsbmlcs.libsbml.AST_LAMBDA AST_LAMBDA@endlink.
 * 
 * @li If the node is a predefined constant (@c \'ExponentialE\', @c \'Pi\',
 * @c \'True\' or @c \'False\'), then the node\'s type will be @link
 * libsbmlcs.libsbml.AST_CONSTANT_E AST_CONSTANT_E@endlink, @link
 * libsbmlcs.libsbml.AST_CONSTANT_PI AST_CONSTANT_PI@endlink, @link
 * libsbmlcs.libsbml.AST_CONSTANT_TRUE AST_CONSTANT_TRUE@endlink, or @link
 * libsbmlcs.libsbml.AST_CONSTANT_FALSE AST_CONSTANT_FALSE@endlink.
 * 
 * @li (Levels&nbsp;2 and&nbsp;3 only) If the node is the special MathML
 * csymbol @c time, the value of the node will be @link
 * libsbmlcs.libsbml.AST_NAME_TIME AST_NAME_TIME@endlink.  (Note, however, that
 * the MathML csymbol @c delay is translated into a node of type @link
 * libsbmlcs.libsbml.AST_FUNCTION_DELAY AST_FUNCTION_DELAY@endlink.  The
 * difference is due to the fact that @c time is a single variable, whereas
 * @c delay is actually a function taking arguments.)
 *
 * @li (Level&nbsp;3 only) If the node is the special MathML csymbol @c avogadro,
 * the value of the node will be @c AST_NAME_AVOGADRO.
 *
 * @li If the node contains a numerical value, its type will be @link
 * libsbmlcs.libsbml.AST_INTEGER AST_INTEGER@endlink, @link
 * libsbmlcs.libsbml.AST_REAL AST_REAL@endlink, @link libsbmlcs.libsbml.AST_REAL_E
 * AST_REAL_E@endlink, or @link libsbmlcs.libsbml.AST_RATIONAL
 * AST_RATIONAL@endlink, as appropriate.
 *
 *
 * 
 * <h3><a class=\'anchor\' name=\'math-convert\'>Converting between ASTs and text strings</a></h3>
 * 
 * The text-string form of mathematical formulas produced by @if clike libsbmlcs.libsbml.formulaToString()@endif@if csharp libsbmlcs.libsbml.formulaToString()@endif@if python libsbml.formulaToString()@endif@if java <code><a href=\'libsbml.html#formulaToString(org.sbml.libsbml.ASTNode)\'>libsbml.formulaToString()</a></code>@endif and
 * read by @if clike libsbmlcs.libsbml.parseFormula()@endif@if csharp libsbmlcs.libsbml.parseFormula()@endif@if python libsbml.parseFormula()@endif@if java <code><a href=\'libsbml.html#parseFormula(java.lang.String)\'>libsbml.parseFormula(String formula)</a></code>@endif
 * and
 * @if clike SBML_parseL3Formula()@endif@if csharp SBML_parseL3Formula()@endif@if python libsbml.parseL3Formula()@endif@if java <code><a href=\'libsbml.html#parseL3Formula(java.lang.String)\'>libsbml.parseL3Formula(String formula)</a></code>@endif
 * are in a simple C-inspired infix notation.  A
 * formula in this text-string form can be handed to a program that
 * understands SBML mathematical expressions, or used as part
 * of a translation system.  The libSBML distribution comes with an example
 * program in the @c \'examples\' subdirectory called @c translateMath that
 * implements an interactive command-line demonstration of translating
 * infix formulas into MathML and vice-versa.
 *
 * The formula strings may contain operators, function calls, symbols, and
 * white space characters.  The allowable white space characters are tab
 * and space.  The following are illustrative examples of formulas
 * expressed in the syntax:
 * 
 * @verbatim
0.10 * k4^2
@endverbatim
 * @verbatim
(vm * s1)/(km + s1)
@endverbatim
 *
 * The following table shows the precedence rules in this syntax.  In the
 * Class column, @em operand implies the construct is an operand, @em
 * prefix implies the operation is applied to the following arguments, @em
 * unary implies there is one argument, and @em binary implies there are
 * two arguments.  The values in the Precedence column show how the order
 * of different types of operation are determined.  For example, the
 * expression <em>a * b + c</em> is evaluated as <em>(a * b) + c</em>
 * because the <code>*</code> operator has higher precedence.  The
 * Associates column shows how the order of similar precedence operations
 * is determined; for example, <em>a - b + c</em> is evaluated as <em>(a -
 * b) + c</em> because the <code>+</code> and <code>-</code> operators are
 * left-associative.  The precedence and associativity rules are taken from
 * the C programming language, except for the symbol <code>^</code>, which
 * is used in C for a different purpose.  (Exponentiation can be invoked
 * using either <code>^</code> or the function @c power.)
 * 
 * @htmlinclude math-precedence-table.html 
 *
 * A program parsing a formula in an SBML model should assume that names
 * appearing in the formula are the identifiers of Species, Parameter,
 * Compartment, FunctionDefinition, Reaction (in SBML Levels&nbsp;2
 * and&nbsp;3), or SpeciesReference (in SBML Level&nbsp;3 only) objects
 * defined in a model.  When a function call is involved, the syntax
 * consists of a function identifier, followed by optional white space,
 * followed by an opening parenthesis, followed by a sequence of zero or
 * more arguments separated by commas (with each comma optionally preceded
 * and/or followed by zero or more white space characters), followed by a
 * closing parenthesis.  There is an almost one-to-one mapping between the
 * list of predefined functions available, and those defined in MathML.
 * All of the MathML functions are recognized; this set is larger than the
 * functions defined in SBML Level&nbsp;1.  In the subset of functions that
 * overlap between MathML and SBML Level&nbsp;1, there exist a few
 * differences.  The following table summarizes the differences between the
 * predefined functions in SBML Level&nbsp;1 and the MathML equivalents in
 * SBML Levels&nbsp;2 and &nbsp;3:
 * 
 * @htmlinclude math-functions.html
 * 
 * * 
 * @warning <span class=\'warning\'>We urge developers to keep in mind that
 * the text-string formula syntax is specific to SBML Level&nbsp;1\'s C-like
 * mathematical formula syntax.  In particular, it is <em>not a
 * general-purpose mathematical expression syntax</em>.  LibSBML provides
 * methods for parsing and transforming text-string math formulas back and
 * forth from AST structures, but it is important to keep the system\'s
 * limitations in mind.</span>
 * 
 *
 *
 * @if clike @see SBML_parseL3Formula()@endif
 * @if csharp @see SBML_parseL3Formula()@endif
 * @if python @see libsbml.parseL3Formula()@endif
 * @if java @see <code><a href=\'libsbml.html#parseL3Formula(String formula)\'>libsbml.parseL3Formula(String formula)</a></code>@endif
 * @if clike @see libsbmlcs.libsbml.parseFormula()@endif
 * @if csharp @see libsbmlcs.libsbml.parseFormula()@endif
 * @if python @see libsbml.parseFormula()@endif
 * @if java @see <code><a href=\'libsbml.html#parseFormula(String formula)\'>libsbml.parseFormula(String formula)</a></code>@endif
 */
"


%csmethodmodifiers ASTNode::ASTNode(ASTNodeType_t type = AST_UNKNOWN) "
/**
   * Creates and returns a new ASTNode.
   *
   * Unless the argument @p type is given, the returned node will by
   * default have a type of @link libsbmlcs.libsbml.AST_UNKNOWN
   * AST_UNKNOWN@endlink.  If the type isn\'t supplied when caling this
   * constructor, the caller should set the node type to something else as
   * soon as possible using
   * @if clike setType()@else ASTNode::setType(int)@endif.
   *
   * @param type an optional
   * @if clike @link #ASTNodeType_t ASTNodeType_t@endlink@else type@endif
   * code indicating the type of node to create.
   *
   * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
   */ public
";


%csmethodmodifiers ASTNode::ASTNode(Token_t *token) "
/**
   * Creates a new ASTNode from the given Token.  The resulting ASTNode
   * will contain the same data as the Token.
   *
   * @param token the Token to add.
   */ public
";


%csmethodmodifiers ASTNode::ASTNode(const ASTNode& orig) "
/**
   * Copy constructor; creates a deep copy of the given ASTNode.
   *
   * @param orig the ASTNode to be copied.
   */ public
";


%csmethodmodifiers ASTNode::freeName "
/**
   * Frees the name of this ASTNode and sets it to @c null.
   * 
   * This operation is only applicable to ASTNode objects corresponding to
   * operators, numbers, or @link libsbmlcs.libsbml.AST_UNKNOWN
   * AST_UNKNOWN@endlink.  This method has no effect on other types of
   * nodes.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   */ public
";


%csmethodmodifiers ASTNode::canonicalize "
/**
   * Converts this ASTNode to a canonical form and returns @c true if
   * successful, @c false otherwise.
   *
   * The rules determining the canonical form conversion are as follows:
   * <ul>
   *
   * <li> If the node type is @link libsbmlcs.libsbml.AST_NAME AST_NAME@endlink
   * and the node name matches @c \'ExponentialE\', @c \'Pi\', @c \'True\' or @c
   * \'False\' the node type is converted to the corresponding 
   * <code>AST_CONSTANT_</code><em><span class=\'placeholder\'>X</span></em> type.
   *
   * <li> If the node type is an @link libsbmlcs.libsbml.AST_FUNCTION
   * AST_FUNCTION@endlink and the node name matches an SBML (MathML) function name, logical operator name, or
   * relational operator name, the node is converted to the corresponding
   * <code>AST_FUNCTION_</code><em><span class=\'placeholder\'>X</span></em> or
   * <code>AST_LOGICAL_</code><em><span class=\'placeholder\'>X</span></em> type.
   *
   * </ul>
   *
   * SBML Level&nbsp;1 function names are searched first; thus, for
   * example, canonicalizing @c log will result in a node type of @link
   * libsbmlcs.libsbml.AST_FUNCTION_LN AST_FUNCTION_LN@endlink.  (See the SBML
   * Level&nbsp;1 Version&nbsp;2 Specification, Appendix C.)
   *
   * Sometimes, canonicalization of a node results in a structural
   * conversion of the node as a result of adding a child.  For example, a
   * node with the SBML Level&nbsp;1 function name @c sqr and a single
   * child node (the argument) will be transformed to a node of type
   * @link libsbmlcs.libsbml.AST_FUNCTION_POWER AST_FUNCTION_POWER@endlink with
   * two children.  The first child will remain unchanged, but the second
   * child will be an ASTNode of type @link libsbmlcs.libsbml.AST_INTEGER
   * AST_INTEGER@endlink and a value of 2.  The function names that result
   * in structural changes are: @c log10, @c sqr, and @c sqrt.
   */ public
";


%csmethodmodifiers ASTNode::addChild(ASTNode* child) "
/**
   * Adds the given node as a child of this ASTNode.  Child nodes are added
   * in-order, from left to right.
   *
   * @param child the ASTNode instance to add
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   *
   * @note Adding a child to an ASTNode may change the structure of the
   * mathematical formula being represented by the tree structure, and may
   * render the representation invalid.  Callers need to be careful to use
   * this method in the context of other operations to create complete and
   * correct formulas.  The method
   * @if clike isWellFormedASTNode()@else ASTNode::isWellFormedASTNode()@endif
   * may also be useful for checking the results of node modifications.
   *
   * @see prependChild(ASTNode child)
   * @see replaceChild(long n, ASTNode child)
   * @see insertChild(long n, ASTNode child)
   * @see removeChild(long n)
   * @see isWellFormedASTNode()
   */ public
";


%csmethodmodifiers ASTNode::prependChild(ASTNode* child) "
/**
   * Adds the given node as a child of this ASTNode.  This method adds
   * child nodes from right to left.
   *
   * @param child the ASTNode instance to add
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   *
   * @note Prepending a child to an ASTNode may change the structure of the
   * mathematical formula being represented by the tree structure, and may
   * render the representation invalid.
   *
   * @see addChild(ASTNode child)
   * @see replaceChild(long n, ASTNode child)
   * @see insertChild(long n, ASTNode child)
   * @see removeChild(long n)
   */ public
";


%csmethodmodifiers ASTNode::removeChild(unsigned int n) "
/**
   * Removes the nth child of this ASTNode object.
   *
   * @param n long the index of the child to remove
   *
   * @return integer value indicating success/failure of the
   * function. The possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INDEX_EXCEEDS_SIZE LIBSBML_INDEX_EXCEEDS_SIZE @endlink
   *
   * @note Removing a child from an ASTNode may change the structure of the
   * mathematical formula being represented by the tree structure, and may
   * render the representation invalid.
   *
   * @see addChild(ASTNode child)
   * @see prependChild(ASTNode child)
   * @see replaceChild(long n, ASTNode child)
   * @see insertChild(long n, ASTNode child)
   */ public
";


%csmethodmodifiers ASTNode::replaceChild(unsigned int n, ASTNode *newChild) "
/**
   * Replaces the nth child of this ASTNode with the given ASTNode.
   *
   * @param n long the index of the child to replace
   * @param newChild ASTNode to replace the nth child
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INDEX_EXCEEDS_SIZE LIBSBML_INDEX_EXCEEDS_SIZE @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   *
   * @note Replacing a child from an ASTNode may change the structure of the
   * mathematical formula being represented by the tree structure, and may
   * render the representation invalid.
   * 
   * @see addChild(ASTNode child)
   * @see prependChild(ASTNode child)
   * @see insertChild(long n, ASTNode child)
   * @see removeChild(long n)
   */ public
";


%csmethodmodifiers ASTNode::insertChild(unsigned int n, ASTNode *newChild) "
/**
   * Insert the given ASTNode at point n in the list of children
   * of this ASTNode.
   *
   * @param n long the index of the ASTNode being added
   * @param newChild ASTNode to insert as the nth child
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INDEX_EXCEEDS_SIZE LIBSBML_INDEX_EXCEEDS_SIZE @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   *
   * @note Inserting a child into an ASTNode may change the structure of the
   * mathematical formula being represented by the tree structure, and may
   * render the representation invalid.
   * 
   * @see addChild(ASTNode child)
   * @see prependChild(ASTNode child)
   * @see replaceChild(long n, ASTNode child)
   * @see removeChild(long n)
   */ public
";


%csmethodmodifiers ASTNode::deepCopy() const "
/**
   * Creates a recursive copy of this node and all its children.
   * 
   * @return a copy of this ASTNode and all its children.  The caller owns
   * the returned ASTNode and is reponsible for deleting it.
   */ public
";


%csmethodmodifiers ASTNode::getChild "
/**
   * Get a child of this node according to its index number.
   *
   * @param n the index of the child to get
   * 
   * @return the nth child of this ASTNode or @c null if this node has no nth
   * child (<code>n &gt; </code>
   * @if clike getNumChildren()@else ASTNode::getNumChildren()@endif
   * <code>- 1</code>).
   */ public
";


%csmethodmodifiers ASTNode::getLeftChild() const "
/**
   * Get the left child of this node.
   * 
   * @return the left child of this ASTNode.  This is equivalent to calling
   * @if clike getChild()@else ASTNode::getChild(long)@endif
   * with an argument of @c 0.
   */ public
";


%csmethodmodifiers ASTNode::getRightChild() const "
/**
   * Get the right child of this node.
   *
   * @return the right child of this ASTNode, or @c null if this node has no
   * right child.  If
   * @if clike getNumChildren()@else ASTNode::getNumChildren()@endif
   * <code>&gt; 1</code>, then this is equivalent to:
   * @verbatim
getChild( getNumChildren() - 1 );
@endverbatim
   */ public
";


%csmethodmodifiers ASTNode::getNumChildren() const "
/**
   * Get the number of children that this node has.
   * 
   * @return the number of children of this ASTNode, or 0 is this node has
   * no children.
   */ public
";


%csmethodmodifiers ASTNode::addSemanticsAnnotation(XMLNode* sAnnotation) "
/**
   * Adds the given XMLNode as a <em>semantic annotation</em> of this ASTNode.
   *
   * @htmlinclude about-semantic-annotations.html
   *
   * @param sAnnotation the annotation to add.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   *
   * @note Although SBML permits the semantic annotation construct in
   * MathML expressions, the truth is that this construct has so far (at
   * this time of this writing, which is early 2011) seen very little use
   * in SBML software.  The full implications of using semantic annotations
   * are still poorly understood.  If you wish to use this construct, we
   * urge you to discuss possible uses and applications on the SBML
   * discussion lists, particularly <a target=\'_blank\'
   * href=\'http://sbml.org/Forums\'>sbml-discuss&#64;caltech.edu</a> and/or <a
   * target=\'_blank\'
   * href=\'http://sbml.org/Forums\'>sbml-interoperability&#64;caltech.edu</a>.
   */ public
";


%csmethodmodifiers ASTNode::getNumSemanticsAnnotations() const "
/**
   * Get the number of <em>semantic annotation</em> elements inside this node.
   *
   * @htmlinclude about-semantic-annotations.html
   * 
   * @return the number of annotations of this ASTNode.
   *
   * @see ASTNode::addSemanticsAnnotation(XMLNode sAnnotation)
   */ public
";


%csmethodmodifiers ASTNode::getSemanticsAnnotation "
/**
   * Get the nth semantic annotation of this node.
   *
   * @htmlinclude about-semantic-annotations.html
   * 
   * @return the nth annotation of this ASTNode, or @c null if this node has
   * no nth annotation (<code>n &gt;</code>
   * @if clike getNumChildren()@else ASTNode::getNumChildren()@endif
   * <code>- 1</code>).
   *
   * @see ASTNode::addSemanticsAnnotation(XMLNode sAnnotation)
   */ public
";


%csmethodmodifiers ASTNode::getListOfNodes(ASTNodePredicate predicate) const "
/**
   * Performs a depth-first search of the tree rooted at this ASTNode
   * object, and returns a List of nodes where the given function
   * <code>predicate(node)</code> returns @c true (non-zero).
   *
   * For portability between different programming languages, the predicate
   * is passed in as a pointer to a function.  @if clike The function
   * definition must have the type @link ASTNode::ASTNodePredicate
   * ASTNodePredicate @endlink, which is defined as
   * @verbatim
int (*ASTNodePredicate) (ASTNode_t *node);
@endverbatim
   * where a return value of non-zero represents @c true and zero
   * represents @c false. @endif
   *
   * @param predicate the predicate to use
   *
   * @return the list of nodes for which the predicate returned @c true
   * (non-zero).  The List returned is owned by the caller and should be
   * deleted after the caller is done using it.  The ASTNode objects in the
   * list; however, are not owned by the caller (as they still belong to
   * the tree itself), and therefore should not be deleted.
   */ public
";


%csmethodmodifiers ASTNode::fillListOfNodes(ASTNodePredicate predicate, List* lst) const "
/**
   * Performs a depth-first search of the tree rooted at this ASTNode
   * object, and adds to the list @p lst the nodes where the given function
   * <code>predicate(node)</code> returns @c true (non-zero).
   *
   * This method is identical to getListOfNodes(ASTNodePredicate predicate) const, 
   * except that instead of creating a new List object, it uses the one passed
   * in as argument @p lst. 
   *
   * For portability between different programming languages, the predicate
   * is passed in as a pointer to a function.  The function definition must
   * have the type @link ASTNode.h::ASTNodePredicate ASTNodePredicate
   * @endlink, which is defined as
   * @verbatim
int (*ASTNodePredicate) (ASTNode_t *node);
@endverbatim
   * where a return value of non-zero represents @c true and zero
   * represents @c false.
   *
   * @param predicate the predicate to use.
   *
   * @param lst the List to which ASTNode objects should be added.
   *
   * @see getListOfNodes(ASTNodePredicate predicate) const
   */ public
";


%csmethodmodifiers ASTNode::getCharacter() const "
/**
   * Get the value of this node as a single character.  This function
   * should be called only when
   * @if clike getType()@else ASTNode::getType()@endif returns
   * @link libsbmlcs.libsbml.AST_PLUS AST_PLUS@endlink,
   * @link libsbmlcs.libsbml.AST_MINUS AST_MINUS@endlink,
   * @link libsbmlcs.libsbml.AST_TIMES AST_TIMES@endlink,
   * @link libsbmlcs.libsbml.AST_DIVIDE AST_DIVIDE@endlink or
   * @link libsbmlcs.libsbml.AST_POWER AST_POWER@endlink.
   * 
   * @return the value of this ASTNode as a single character
   */ public
";


%csmethodmodifiers ASTNode::getId() const "
/**
   * Get the id of this ASTNode.  
   * 
   * @return the mathml id of this ASTNode.
   */ public
";


%csmethodmodifiers ASTNode::getClass() const "
/**
   * Get the class of this ASTNode.  
   * 
   * @return the mathml class of this ASTNode.
   */ public
";


%csmethodmodifiers ASTNode::getStyle() const "
/**
   * Get the style of this ASTNode.  
   * 
   * @return the mathml style of this ASTNode.
   */ public
";


%csmethodmodifiers ASTNode::getInteger() const "
/**
   * Get the value of this node as an integer. This function should be
   * called only when
   * @if clike getType()@else ASTNode::getType()@endif
   * <code>== @link libsbmlcs.libsbml.AST_INTEGER AST_INTEGER@endlink</code>.
   * 
   * @return the value of this ASTNode as a (<code>long</code>) integer. 
   */ public
";


%csmethodmodifiers ASTNode::getName() const "
/**
   * Get the value of this node as a string.  This function may be called
   * on nodes that (1) are not operators, i.e., nodes for which
   * @if clike isOperator()@else ASTNode::isOperator()@endif
   * returns @c false, and (2) are not numbers, i.e.,
   * @if clike isNumber()@else ASTNode::isNumber()@endif returns @c false.
   * 
   * @return the value of this ASTNode as a string.
   */ public
";


%csmethodmodifiers ASTNode::getOperatorName() const "
/**
   * Get the value of this operator node as a string.  This function may be called
   * on nodes that are operators, i.e., nodes for which
   * @if clike isOperator()@else ASTNode::isOperator()@endif
   * returns @c true.
   * 
   * @return the name of this operator ASTNode as a string (or null if not an operator).
   */ public
";


%csmethodmodifiers ASTNode::getNumerator() const "
/**
   * Get the value of the numerator of this node.  This function should be
   * called only when
   * @if clike getType()@else ASTNode::getType()@endif
   * <code>== @link libsbmlcs.libsbml.AST_RATIONAL AST_RATIONAL@endlink</code>.
   * 
   * @return the value of the numerator of this ASTNode.  
   */ public
";


%csmethodmodifiers ASTNode::getDenominator() const "
/**
   * Get the value of the denominator of this node.  This function should
   * be called only when
   * @if clike getType()@else ASTNode::getType()@endif
   * <code>== @link libsbmlcs.libsbml.AST_RATIONAL AST_RATIONAL@endlink</code>.
   * 
   * @return the value of the denominator of this ASTNode.
   */ public
";


%csmethodmodifiers ASTNode::getReal() const "
/**
   * Get the real-numbered value of this node.  This function
   * should be called only when
   * @if clike isReal()@else ASTNode::isReal()@endif
   * <code>== true</code>.
   *
   * This function performs the necessary arithmetic if the node type is
   * @link libsbmlcs.libsbml.AST_REAL_E AST_REAL_E@endlink (<em>mantissa *
   * 10<sup> exponent</sup></em>) or @link libsbmlcs.libsbml.AST_RATIONAL
   * AST_RATIONAL@endlink (<em>numerator / denominator</em>).
   * 
   * @return the value of this ASTNode as a real (double).
   */ public
";


%csmethodmodifiers ASTNode::getMantissa() const "
/**
   * Get the mantissa value of this node.  This function should be called
   * only when @if clike getType()@else ASTNode::getType()@endif
   * returns @link libsbmlcs.libsbml.AST_REAL_E AST_REAL_E@endlink
   * or @link libsbmlcs.libsbml.AST_REAL AST_REAL@endlink.
   * If @if clike getType()@else ASTNode::getType()@endif
   * returns @link libsbmlcs.libsbml.AST_REAL AST_REAL@endlink,
   * this method is identical to
   * @if clike getReal()@else ASTNode::getReal()@endif.
   * 
   * @return the value of the mantissa of this ASTNode. 
   */ public
";


%csmethodmodifiers ASTNode::getExponent() const "
/**
   * Get the exponent value of this ASTNode.  This function should be
   * called only when
   * @if clike getType()@else ASTNode::getType()@endif
   * returns @link libsbmlcs.libsbml.AST_REAL_E AST_REAL_E@endlink
   * or @link libsbmlcs.libsbml.AST_REAL AST_REAL@endlink.
   * 
   * @return the value of the exponent of this ASTNode.
   */ public
";


%csmethodmodifiers ASTNode::getPrecedence() const "
/**
   * Get the precedence of this node in the infix math syntax of SBML
   * Level&nbsp;1.  For more information about the infix syntax, see the
   * discussion about <a href=\'#math-convert\'>text string formulas</a> at
   * the top of the documentation for ASTNode.
   * 
   * @return an integer indicating the precedence of this ASTNode
   */ public
";


%csmethodmodifiers ASTNode::getType() const "
/**
   * Get the type of this ASTNode.  The value returned is one of the
   * enumeration values such as @link libsbmlcs.libsbml.AST_LAMBDA
   * AST_LAMBDA@endlink, @link libsbmlcs.libsbml.AST_PLUS AST_PLUS@endlink,
   * etc.
   * 
   * @return the type of this ASTNode.
   */ public
";


%csmethodmodifiers ASTNode::getUnits() const "
/**
   * Get the units of this ASTNode.  
   *
   * @htmlinclude about-sbml-units-attrib.html
   * 
   * @return the units of this ASTNode.
   *
   * @note The <code>sbml:units</code> attribute is only available in SBML
   * Level&nbsp;3.  It may not be used in Levels 1&ndash;2 of SBML.
   * 
   * @if clike @see SBML_parseL3Formula()@endif
   * @if csharp @see SBML_parseL3Formula()@endif
   * @if python @see libsbml.parseL3Formula()@endif
   * @if java @see <code><a href=\'libsbml.html#parseL3Formula(String formula)\'>libsbml.parseL3Formula(String formula)</a></code>@endif
   */ public
";


%csmethodmodifiers ASTNode::isAvogadro() const "
/**
   * Predicate returning @c true (non-zero) if this node is the special 
   * symbol @c avogadro.  The predicate returns @c false (zero) otherwise.
   * 
   * @return @c true if this ASTNode is the special symbol avogadro.
   *
   * @if clike @see SBML_parseL3Formula()@endif
   * @if csharp @see SBML_parseL3Formula()@endif
   * @if python @see libsbml.parseL3Formula()@endif
   * @if java @see <code><a href=\'libsbml.html#parseL3Formula(String formula)\'>libsbml.parseL3Formula(String formula)</a></code>@endif
   */ public
";


%csmethodmodifiers ASTNode::isBoolean() const "
/**
   * Predicate returning @c true (non-zero) if this node has a bool type
   * (a logical operator, a relational operator, or the constants @c true
   * or @c false).
   *
   * @return true if this ASTNode is a bool, false otherwise.
   */ public
";


%csmethodmodifiers ASTNode::returnsBoolean(const Model* model=NULL) const "
/**
   * Predicate returning @c true (non-zero) if this node returns a bool type
   * or @c false (zero) otherwise.
   *
   * This function looks at the whole ASTNode rather than just the top 
   * level of the ASTNode. Thus it will consider return values from
   * piecewise statements.  In addition, if this ASTNode uses a function
   * call, the return value of the functionDefinition will be determined.
   * Note that this is only possible where the ASTNode can trace its parent
   * Model, that is, the ASTNode must represent the math element of some
   * SBML object that has already been added to an instance of an SBMLDocument.
   *
   * @see isBoolean()
   *
   * @return true if this ASTNode returns a bool, false otherwise.
   */ public
";


%csmethodmodifiers ASTNode::isConstant() const "
/**
   * Predicate returning @c true (non-zero) if this node represents a MathML
   * constant (e.g., @c true, @c Pi).
   * 
   * @return @c true if this ASTNode is a MathML constant, @c false otherwise.
   * 
   * @note this function will also return @c true for @link
   * libsbmlcs.libsbml.AST_NAME_AVOGADRO AST_NAME_AVOGADRO@endlink in SBML Level&nbsp;3.
   */ public
";


%csmethodmodifiers ASTNode::isFunction() const "
/**
   * Predicate returning @c true (non-zero) if this node represents a
   * MathML function (e.g., <code>abs()</code>), or an SBML Level&nbsp;1
   * function, or a user-defined function.
   * 
   * @return @c true if this ASTNode is a function, @c false otherwise.
   */ public
";


%csmethodmodifiers ASTNode::isInfinity() const "
/**
   * Predicate returning @c true (non-zero) if this node represents
   * the special IEEE 754 value infinity, @c false (zero) otherwise.
   *
   * @return @c true if this ASTNode is the special IEEE 754 value infinity,
   * @c false otherwise.
   */ public
";


%csmethodmodifiers ASTNode::isInteger() const "
/**
   * Predicate returning @c true (non-zero) if this node contains an
   * integer value, @c false (zero) otherwise.
   *
   * @return @c true if this ASTNode is of type @link
   * libsbmlcs.libsbml.AST_INTEGER AST_INTEGER@endlink, @c false otherwise.
   */ public
";


%csmethodmodifiers ASTNode::isLambda() const "
/**
   * Predicate returning @c true (non-zero) if this node is a MathML
   * <code>&lt;lambda&gt;</code>, @c false (zero) otherwise.
   * 
   * @return @c true if this ASTNode is of type @link libsbmlcs.libsbml.AST_LAMBDA
   * AST_LAMBDA@endlink, @c false otherwise.
   */ public
";


%csmethodmodifiers ASTNode::isLog10() const "
/**
   * Predicate returning @c true (non-zero) if this node represents a 
   * @c log10 function, @c false (zero) otherwise.  More precisely, this
   * predicate returns @c true if the node type is @link
   * libsbmlcs.libsbml.AST_FUNCTION_LOG AST_FUNCTION_LOG@endlink with two
   * children, the first of which is an @link libsbmlcs.libsbml.AST_INTEGER
   * AST_INTEGER@endlink equal to 10.
   * 
   * @return @c true if the given ASTNode represents a log10() function, @c
   * false otherwise.
   *
   * @if clike @see SBML_parseL3Formula()@endif
   * @if csharp @see SBML_parseL3Formula()@endif
   * @if python @see libsbml.parseL3Formula()@endif
   * @if java @see <code><a href=\'libsbml.html#parseL3Formula(String formula)\'>libsbml.parseL3Formula(String formula)</a></code>@endif
   */ public
";


%csmethodmodifiers ASTNode::isLogical() const "
/**
   * Predicate returning @c true (non-zero) if this node is a MathML
   * logical operator (i.e., @c and, @c or, @c not, @c xor).
   * 
   * @return @c true if this ASTNode is a MathML logical operator
   */ public
";


%csmethodmodifiers ASTNode::isName() const "
/**
   * Predicate returning @c true (non-zero) if this node is a user-defined
   * variable name in SBML L1, L2 (MathML), or the special symbols @c delay
   * or @c time.  The predicate returns @c false (zero) otherwise.
   * 
   * @return @c true if this ASTNode is a user-defined variable name in SBML
   * L1, L2 (MathML) or the special symbols delay or time.
   */ public
";


%csmethodmodifiers ASTNode::isNaN() const "
/**
   * Predicate returning @c true (non-zero) if this node represents the
   * special IEEE 754 value \'not a number\' (NaN), @c false (zero)
   * otherwise.
   * 
   * @return @c true if this ASTNode is the special IEEE 754 NaN.
   */ public
";


%csmethodmodifiers ASTNode::isNegInfinity() const "
/**
   * Predicate returning @c true (non-zero) if this node represents the
   * special IEEE 754 value \'negative infinity\', @c false (zero) otherwise.
   * 
   * @return @c true if this ASTNode is the special IEEE 754 value negative
   * infinity, @c false otherwise.
   */ public
";


%csmethodmodifiers ASTNode::isNumber() const "
/**
   * Predicate returning @c true (non-zero) if this node contains a number,
   * @c false (zero) otherwise.  This is functionally equivalent to the
   * following code:
   * @verbatim
 isInteger() || isReal()
 @endverbatim
   * 
   * @return @c true if this ASTNode is a number, @c false otherwise.
   */ public
";


%csmethodmodifiers ASTNode::isOperator() const "
/**
   * Predicate returning @c true (non-zero) if this node is a mathematical
   * operator, meaning, <code>+</code>, <code>-</code>, <code>*</code>, 
   * <code>/</code> or <code>^</code> (power).
   * 
   * @return @c true if this ASTNode is an operator.
   */ public
";


%csmethodmodifiers ASTNode::isPiecewise() const "
/**
   * Predicate returning @c true (non-zero) if this node is the MathML
   * <code>&lt;piecewise&gt;</code> construct, @c false (zero) otherwise.
   * 
   * @return @c true if this ASTNode is a MathML @c piecewise function
   */ public
";


%csmethodmodifiers ASTNode::isRational() const "
/**
   * Predicate returning @c true (non-zero) if this node represents a rational
   * number, @c false (zero) otherwise.
   * 
   * @return @c true if this ASTNode is of type @link
   * libsbmlcs.libsbml.AST_RATIONAL AST_RATIONAL@endlink.
   */ public
";


%csmethodmodifiers ASTNode::isReal() const "
/**
   * Predicate returning @c true (non-zero) if this node can represent a
   * real number, @c false (zero) otherwise.  More precisely, this node
   * must be of one of the following types: @link libsbmlcs.libsbml.AST_REAL
   * AST_REAL@endlink, @link libsbmlcs.libsbml.AST_REAL_E AST_REAL_E@endlink or
   * @link libsbmlcs.libsbml.AST_RATIONAL AST_RATIONAL@endlink.
   * 
   * @return @c true if the value of this ASTNode can represented as a real
   * number, @c false otherwise.
   */ public
";


%csmethodmodifiers ASTNode::isRelational() const "
/**
   * Predicate returning @c true (non-zero) if this node is a MathML
   * relational operator, meaning <code>==</code>, <code>&gt;=</code>, 
   * <code>&gt;</code>, <code>&lt;</code>, and <code>!=</code>.
   * 
   * @return @c true if this ASTNode is a MathML relational operator, @c
   * false otherwise
   */ public
";


%csmethodmodifiers ASTNode::isSqrt() const "
/**
   * Predicate returning @c true (non-zero) if this node represents a
   * square root function, @c false (zero) otherwise.  More precisely, the
   * node type must be @link libsbmlcs.libsbml.AST_FUNCTION_ROOT
   * AST_FUNCTION_ROOT@endlink with two children, the first of which is an
   * @link libsbmlcs.libsbml.AST_INTEGER AST_INTEGER@endlink node having value
   * equal to 2.
   * 
   * @return @c true if the given ASTNode represents a sqrt() function,
   * @c false otherwise.
   */ public
";


%csmethodmodifiers ASTNode::isUMinus() const "
/**
   * Predicate returning @c true (non-zero) if this node is a unary minus
   * operator, @c false (zero) otherwise.  A node is defined as a unary
   * minus node if it is of type @link libsbmlcs.libsbml.AST_MINUS
   * AST_MINUS@endlink and has exactly one child.
   * 
   * For numbers, unary minus nodes can be \'collapsed\' by negating the
   * number.  In fact, 
   * @if clike libsbmlcs.libsbml.parseFormula()@endif@if csharp libsbmlcs.libsbml.parseFormula()@endif@if python libsbml.parseFormula()@endif@if java <code><a href=\'libsbml.html#parseFormula(java.lang.String)\'>libsbml.parseFormula(String formula)</a></code>@endif
   * does this during its parsing process, and 
   * @if clike SBML_parseL3Formula()@endif@if csharp SBML_parseL3Formula()@endif@if python libsbml.parseL3Formula()@endif@if java <code><a href=\'libsbml.html#parseL3Formula(java.lang.String)\'>libsbml.parseL3Formula(String formula)</a></code>@endif
   * has a configuration option that allows this behavior to be turned
   * on or off.  However, unary minus nodes for symbols
   * (@link libsbmlcs.libsbml.AST_NAME AST_NAME@endlink) cannot
   * be \'collapsed\', so this predicate function is necessary.
   * 
   * @return @c true if this ASTNode is a unary minus, @c false otherwise.
   *
   * @if clike @see SBML_parseL3Formula()@endif
   * @if csharp @see SBML_parseL3Formula()@endif
   * @if python @see libsbml.parseL3Formula()@endif
   * @if java @see <code><a href=\'libsbml.html#parseL3Formula(String formula)\'>libsbml.parseL3Formula(String formula)</a></code>@endif
   */ public
";


%csmethodmodifiers ASTNode::isUPlus() const "
/**
   * Predicate returning @c true (non-zero) if this node is a unary plus
   * operator, @c false (zero) otherwise.  A node is defined as a unary
   * minus node if it is of type @link libsbmlcs.libsbml.AST_MINUS
   * AST_MINUS@endlink and has exactly one child.
   *
   * @return @c true if this ASTNode is a unary plus, @c false otherwise.
   */ public
";


%csmethodmodifiers ASTNode::hasTypeAndNumChildren "
/**
  * Predicate returning @c true if this node is of type @param type
  * and has @param numchildren number of children.  Designed
  * for use in cases where it is useful to discover if the node is
  * a unary not or unary minus, or a times node with no children, etc.
  *
  * @return @c true if this ASTNode is has the specified type and number
  *         of children, @c false otherwise.
  */ public
";


%csmethodmodifiers ASTNode::isUnknown() const "
/**
   * Predicate returning @c true (non-zero) if this node has an unknown type.
   * 
   * \'Unknown\' nodes have the type @link libsbmlcs.libsbml.AST_UNKNOWN
   * AST_UNKNOWN@endlink.  Nodes with unknown types will not appear in an
   * ASTNode tree returned by libSBML based upon valid SBML input; the only
   * situation in which a node with type @link libsbmlcs.libsbml.AST_UNKNOWN
   * AST_UNKNOWN@endlink may appear is immediately after having create a
   * new, untyped node using the ASTNode constructor.  Callers creating
   * nodes should endeavor to set the type to a valid node type as soon as
   * possible after creating new nodes.
   * 
   * @return @c true if this ASTNode is of type @link
   * libsbmlcs.libsbml.AST_UNKNOWN AST_UNKNOWN@endlink, @c false otherwise.
   */ public
";


%csmethodmodifiers ASTNode::isSetId() const "
/**
   * Predicate returning @c true (non-zero) if this node has the mathml attribute
   * <code>id</code>.
   * 
   * @return true if this ASTNode has an attribute id, false otherwise.
   */ public
";


%csmethodmodifiers ASTNode::isSetClass() const "
/**
   * Predicate returning @c true (non-zero) if this node has the mathml attribute
   * <code>class</code>.
   * 
   * @return true if this ASTNode has an attribute class, false otherwise.
   */ public
";


%csmethodmodifiers ASTNode::isSetStyle() const "
/**
   * Predicate returning @c true (non-zero) if this node has the mathml attribute
   * <code>style</code>.
   * 
   * @return true if this ASTNode has an attribute style, false otherwise.
   */ public
";


%csmethodmodifiers ASTNode::isSetUnits() const "
/**
   * Predicate returning @c true (non-zero) if this node has the attribute
   * <code>sbml:units</code>.
   *
   * @htmlinclude about-sbml-units-attrib.html
   * 
   * @return @c true if this ASTNode has units associated with it, @c false otherwise.
   *
   * @note The <code>sbml:units</code> attribute is only available in SBML
   * Level&nbsp;3.  It may not be used in Levels 1&ndash;2 of SBML.
   */ public
";


%csmethodmodifiers ASTNode::hasUnits() const "
/**
   * Predicate returning @c true (non-zero) if this node or any of its
   * children nodes have the attribute <code>sbml:units</code>.
   *
   * @htmlinclude about-sbml-units-attrib.html
   * 
   * @return @c true if this ASTNode or its children has units associated
   * with it, @c false otherwise.
   *
   * @note The <code>sbml:units</code> attribute is only available in SBML
   * Level&nbsp;3.  It may not be used in Levels 1&ndash;2 of SBML.
   */ public
";


%csmethodmodifiers ASTNode::setCharacter(char value) "
/**
   * Sets the value of this ASTNode to the given character.  If character
   * is one of @c +, @c -, <code>*</code>, <code>/</code> or @c ^, the node
   * type will be set accordingly.  For all other characters, the node type
   * will be set to @link libsbmlcs.libsbml.AST_UNKNOWN AST_UNKNOWN@endlink.
   *
   * @param value the character value to which the node\'s value should be
   * set.
   *
   * @return integer value indicating success/failure of the function.  The
   * possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   */ public
";


%csmethodmodifiers ASTNode::setId(std::string id) "
/**
   * Sets the mathml id of this ASTNode to id.
   *
   * @param id @c string representing the identifier.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   */ public
";


%csmethodmodifiers ASTNode::setClass(std::string className) "
/**
   * Sets the mathml class of this ASTNode to className.
   *
   * @param className @c string representing the mathml class for this node.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   */ public
";


%csmethodmodifiers ASTNode::setStyle(std::string style) "
/**
   * Sets the mathml style of this ASTNode to style.
   *
   * @param style @c string representing the identifier.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   */ public
";


%csmethodmodifiers ASTNode::setName(const char *name) "
/**
   * Sets the value of this ASTNode to the given name.
   *
   * As a side-effect, this ASTNode object\'s type will be reset to
   * @link libsbmlcs.libsbml.AST_NAME AST_NAME@endlink if (and <em>only
   * if</em>) the ASTNode was previously an operator (
   * @if clike isOperator()@else ASTNode::isOperator()@endif
   * <code>== true</code>), number (
   * @if clike isNumber()@else ASTNode::isNumber()@endif
   * <code>== true</code>), or unknown.
   * This allows names to be set for @link libsbmlcs.libsbml.AST_FUNCTION
   * AST_FUNCTION@endlink nodes and the like.
   *
   * @param name the string containing the name to which this node\'s value
   * should be set
   *
   * @return integer value indicating success/failure of the function.  The
   * possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   */ public
";


%csmethodmodifiers ASTNode::setValue(int value) "
/**
   * Sets the value of this ASTNode to the given integer and sets the node
   * type to @link libsbmlcs.libsbml.AST_INTEGER AST_INTEGER@endlink.
   *
   * @param value the integer to which this node\'s value should be set
   *
   * @return integer value indicating success/failure of the function.  The
   * possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   */ public
";


%csmethodmodifiers ASTNode::setValue(long value) "
/**
   * Sets the value of this ASTNode to the given (@c long) integer and sets
   * the node type to @link libsbmlcs.libsbml.AST_INTEGER AST_INTEGER@endlink.
   *
   * @param value the integer to which this node\'s value should be set
   *
   * @return integer value indicating success/failure of the function.  The
   * possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   */ public
";


%csmethodmodifiers ASTNode::setValue(long numerator, long denominator) "
/**
   * Sets the value of this ASTNode to the given rational in two parts: the
   * numerator and denominator.  The node type is set to @link
   * libsbmlcs.libsbml.AST_RATIONAL AST_RATIONAL@endlink.
   *
   * @param numerator the numerator value of the rational
   * @param denominator the denominator value of the rational
   *
   * @return integer value indicating success/failure of the function.  The
   * possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   */ public
";


%csmethodmodifiers ASTNode::setValue(double value) "
/**
   * Sets the value of this ASTNode to the given real (@c double) and sets
   * the node type to @link libsbmlcs.libsbml.AST_REAL AST_REAL@endlink.
   *
   * This is functionally equivalent to:
   * @verbatim
setValue(value, 0);
@endverbatim
   *
   * @param value the @c double format number to which this node\'s value
   * should be set
   *
   * @return integer value indicating success/failure of the function.  The
   * possible values returned by this function are: @li @link
   * libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS
   * LIBSBML_OPERATION_SUCCESS @endlink
   */ public
";


%csmethodmodifiers ASTNode::setValue(double mantissa, long exponent) "
/**
   * Sets the value of this ASTNode to the given real (@c double) in two
   * parts: the mantissa and the exponent.  The node type is set to
   * @link libsbmlcs.libsbml.AST_REAL_E AST_REAL_E@endlink.
   *
   * @param mantissa the mantissa of this node\'s real-numbered value
   * @param exponent the exponent of this node\'s real-numbered value
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   */ public
";


%csmethodmodifiers ASTNode::setType(ASTNodeType_t type) "
/**
   * Sets the type of this ASTNode to the given type code.  A side-effect
   * of doing this is that any numerical values previously stored in this
   * node are reset to zero.
   *
   * @param type the type to which this node should be set
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers ASTNode::setUnits(std::string units) "
/**
   * Sets the units of this ASTNode to units.
   *
   * The units will be set @em only if this ASTNode object represents a
   * MathML <code>&lt;cn&gt;</code> element, i.e., represents a number.
   * Callers may use
   * @if clike isNumber()@else ASTNode::isNumber()@endif
   * to inquire whether the node is of that type.
   *
   * @htmlinclude about-sbml-units-attrib.html
   *
   * @param units @c string representing the unit identifier.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   *
   * @note The <code>sbml:units</code> attribute is only available in SBML
   * Level&nbsp;3.  It may not be used in Levels 1&ndash;2 of SBML.
   */ public
";


%csmethodmodifiers ASTNode::swapChildren(ASTNode *that) "
/**
   * Swap the children of this ASTNode object with the children of the
   * given ASTNode object.
   *
   * @param that the other node whose children should be used to replace
   * <em>this</em> node\'s children
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers ASTNode::renameSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames all the SIdRef attributes on this node and any child node
   */ public
";


%csmethodmodifiers ASTNode::renameUnitSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames all the UnitSIdRef attributes on this node and any child node.
   * (The only place UnitSIDRefs appear in MathML <code>&lt;cn&gt;</code> elements.)
   */ public
";


%csmethodmodifiers ASTNode::replaceIDWithFunction(const std::string& id, const ASTNode* function) "
/**
   * Replace any nodes of type AST_NAME with the name \'id\' from the child \'math\' object with the provided ASTNode. 
   *
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ASTNode::multiplyTimeBy(const ASTNode* function) "
/**
   * Replaces any \'AST_NAME_TIME\' nodes with a node that multiplies time by the given function.
   *
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ASTNode::unsetUnits "
/**
   * Unsets the units of this ASTNode.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers ASTNode::unsetId "
/**
   * Unsets the mathml id of this ASTNode.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers ASTNode::unsetClass "
/**
   * Unsets the mathml class of this ASTNode.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers ASTNode::unsetStyle "
/**
   * Unsets the mathml style of this ASTNode.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers ASTNode::setSemanticsFlag "
/**
   * Sets the flag indicating that this ASTNode has semantics attached.
   *
   * @htmlinclude about-semantic-annotations.html
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ASTNode::unsetSemanticsFlag "
/**
   * Unsets the flag indicating that this ASTNode has semantics attached.
   *
   * @htmlinclude about-semantic-annotations.html
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ASTNode::getSemanticsFlag() const "
/**
   * Gets the flag indicating that this ASTNode has semantics attached.
   *
   * @htmlinclude about-semantic-annotations.html
   *
   * @return @c true if this node has semantics attached, @c false otherwise.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ASTNode::setDefinitionURL(XMLAttributes url) "
/**
   * Sets the attribute \'definitionURL\'.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ASTNode::getDefinitionURL() const "
/**
   * Gets the MathML @c definitionURL attribute value.
   *
   * @return the value of the @c definitionURL attribute, in the form of
   * a libSBML XMLAttributes object.
   */ public
";


%csmethodmodifiers ASTNode::replaceArgument(const std::string bvar, ASTNode * arg) "
/**
   * Replaces occurences of a given name within this ASTNode with the
   * name/value/formula represented by @p arg.
   * 
   * For example, if the formula in this ASTNode is <code>x + y</code>,
   * then the <code>&lt;bvar&gt;</code> is @c x and @c arg is an ASTNode
   * representing the real value @c 3.  This method substitutes @c 3 for @c
   * x within this ASTNode object.
   *
   * @param bvar a string representing the variable name to be substituted
   * @param arg an ASTNode representing the name/value/formula to substitute
   */ public
";


%csmethodmodifiers ASTNode::setParentSBMLObject(SBase * sb) "
/**
   * Sets the parent SBML object.
   * 
   * @param sb the parent SBML object of this ASTNode.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ASTNode::getParentSBMLObject() const "
/**
   * Returns the parent SBML object.
   * 
   * @return the parent SBML object of this ASTNode.
   */ public
";


%csmethodmodifiers ASTNode::reduceToBinary "
/**
   * Reduces this ASTNode to a binary tree.
   * 
   * Example: if this ASTNode is <code>and(x, y, z)</code>, then the 
   * formula of the reduced node is <code>and(and(x, y), z)</code>.  The
   * operation replaces the formula stored in the current ASTNode object.
   */ public
";


%csmethodmodifiers ASTNode::setUserData(void *userData) "
/**
  * Sets the user data of this node. This can be used by the application
  * developer to attach custom information to the node. In case of a deep
  * copy this attribute will passed as it is. The attribute will be never
  * interpreted by this class.
  * 
  * @param userData specifies the new user data. 
  *
  * @return integer value indicating success/failure of the
  * function.  The possible values returned by this function are:
  * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
  * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
  */ public
";


%csmethodmodifiers ASTNode::*getUserData() const "
/**
  * Returns the user data that has been previously set via setUserData().
  *
  * @return the user data of this node, or @c null if no user data has been set.
  *
  * @if clike
  * @see ASTNode::setUserData
  * @endif
  */ public
";


%csmethodmodifiers ASTNode::isWellFormedASTNode() const "
/**
  * Predicate returning @c true or @c false depending on whether this
  * ASTNode is well-formed.
  *
  * @note An ASTNode may be well-formed, with each node and its children
  * having the appropriate number of children for the given type, but may
  * still be invalid in the context of its use within an SBML model.
  *
  * @return @c true if this ASTNode is well-formed, @c false otherwise.
  *
  * @see hasCorrectNumberArguments()
  */ public
";


%csmethodmodifiers ASTNode::hasCorrectNumberArguments() const "
/**
  * Predicate returning @c true or @c false depending on whether this
  * ASTNode has the correct number of children for it\'s type.
  *
  * For example, an ASTNode with type @link libsbmlcs.libsbml.AST_PLUS
  * AST_PLUS@endlink expects 2 child nodes.
  *
  * @note This function performs a check on the toplevel node only.
  * Child nodes are not checked.
  *
  * @return @c true if this ASTNode is has appropriate number of children
  * for it\'s type, @c false otherwise.
  *
  * @see isWellFormedASTNode()
  */ public
";


%csmethodmodifiers ASTNode::isBvar() const "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers ASTNode::setBvar "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers ASTNode::containsVariable(const std::string id) const "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers ASTNode::getNumVariablesWithUndeclaredUnits(Model * m = NULL) const "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers ASTNode::canonicalizeConstant "
/**
   * Internal helper function for canonicalize().
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ASTNode::canonicalizeFunction "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers ASTNode::canonicalizeFunctionL1 "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers ASTNode::canonicalizeLogical "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers ASTNode::canonicalizeRelational "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers SBML_parseFormula(const char *formula) "
/**
 * Parses the given SBML formula and returns a representation of it as an
 * Abstract Syntax Tree (AST).
 *
 * *
 * 
 * The text-string form of mathematical formulas produced by
 * @if clike libsbmlcs.libsbml.formulaToString()@endif@if csharp libsbmlcs.libsbml.formulaToString()@endif@if python libsbml.formulaToString()@endif@if java <code><a href=\'libsbml.html#formulaToString(org.sbml.libsbml.ASTNode)\'>libsbml.formulaToString(ASTNode tree)</a></code>@endif
 * and read by @if clike libsbmlcs.libsbml.parseFormula()@endif@if csharp libsbmlcs.libsbml.parseFormula()@endif@if python libsbml.parseFormula()@endif@if java <code><a href=\'libsbml.html#parseFormula(java.lang.String)\'>libsbml.parseFormula(String formula)</a></code>@endif
 * use a simple C-inspired infix notation taken from SBML Level&nbsp;1.  A
 * formula in this text-string form therefore can be handed to a program
 * that understands SBML Level&nbsp;1 mathematical expressions, or used as
 * part of a formula translation system.  The syntax is described in detail
 * in the documentation for ASTNode. 
 *
 * Note that this facility is provided as a convenience by libSBML&mdash;the
 * MathML standard does not actually define a \'string-form\' equivalent to
 * MathML expression trees, so the choice of formula syntax is somewhat
 * arbitrary.  The approach taken by libSBML is to use the syntax defined by
 * SBML Level&nbsp;1 (which in fact used a text-string representation of
 * formulas and not MathML).  This formula syntax is based mostly on C
 * programming syntax, and may contain operators, function calls, symbols,
 * and white space characters.  The following table provides the precedence
 * rules for the different entities that may appear in formula strings.
 *
 * @htmlinclude math-precedence-table.html
 * 
 * In the table above, @em operand implies the construct is an operand, @em
 * prefix implies the operation is applied to the following arguments, @em
 * unary implies there is one argument, and @em binary implies there are
 * two arguments.  The values in the <b>Precedence</b> column show how the
 * order of different types of operation are determined.  For example, the
 * expression <code>a * b + c</code> is evaluated as <code>(a * b) +
 * c</code> because the @c * operator has higher precedence.  The
 * <b>Associates</b> column shows how the order of similar precedence
 * operations is determined; for example, <code>a - b + c</code> is
 * evaluated as <code>(a - b) + c</code> because the @c + and @c -
 * operators are left-associative.
 *
 * The function call syntax consists of a function name, followed by optional
 * white space, followed by an opening parenthesis token, followed by a
 * sequence of zero or more arguments separated by commas (with each comma
 * optionally preceded and/or followed by zero or more white space
 * characters, followed by a closing parenthesis token.  The function name
 * must be chosen from one of the pre-defined functions in SBML or a
 * user-defined function in the model.  The following table lists the names
 * of certain common mathematical functions; this table corresponds to
 * Table&nbsp;6 in the <a target=\'_blank\' href=\'http://sbml.org/Documents/Specifications#SBML_Level_1_Version_2\'>SBML Level&nbsp;1 Version&nbsp;2 specification</a>:
 *
 * @htmlinclude string-functions-table.html
 *
 * @warning <span class=\'warning\'>There are differences between the symbols
 * used to represent the common mathematical functions and the corresponding
 * MathML token names.  This is a potential source of incompatibilities.
 * Note in particular that in this text-string syntax, <code>log(x)</code>
 * represents the natural logarithm, whereas in MathML, the natural logarithm
 * is <code>&lt;ln/&gt;</code>.  Application writers are urged to be careful
 * when translating between text forms and MathML forms, especially if they
 * provide a direct text-string input facility to users of their software
 * systems.</span>
 *
 * 
 *
 * * 
 * @warning <span class=\'warning\'>We urge developers to keep in mind that
 * the text-string formula syntax is specific to SBML Level&nbsp;1\'s C-like
 * mathematical formula syntax.  In particular, it is <em>not a
 * general-purpose mathematical expression syntax</em>.  LibSBML provides
 * methods for parsing and transforming text-string math formulas back and
 * forth from AST structures, but it is important to keep the system\'s
 * limitations in mind.</span>
 * 
 *
 * 
 * @param formula the text-string formula expression to be parsed
 *
 * @return the root node of the AST corresponding to the @p formula, or @c
 * null if an error occurred in parsing the formula
 *
 * @if clike @see libsbmlcs.libsbml.formulaToString()
 * @see SBML_parseL3FormulaWithSettings()
 * @see SBML_parseL3Formula()
 * @see SBML_parseL3FormulaWithModel()
 * @see SBML_getLastParseL3Error()
 * @see SBML_getDefaultL3ParserSettings()
 * @endif
 * @if csharp @see libsbmlcs.libsbml.formulaToString()
 * @see SBML_parseL3FormulaWithSettings()
 * @see SBML_parseL3Formula()
 * @see SBML_parseL3FormulaWithModel()
 * @see SBML_getLastParseL3Error()
 * @see SBML_getDefaultL3ParserSettings()
 * @endif
 * @if python @see libsbml.formulaToString()
 * @see libsbml.parseL3FormulaWithSettings()
 * @see libsbml.parseL3Formula()
 * @see libsbml.parseL3FormulaWithModel()
 * @see libsbml.getLastParseL3Error()
 * @see libsbml.getDefaultL3ParserSettings()
 * @endif
 * @if java @see <code><a href=\'libsbml.html#formulaToString(org.sbml.libsbml.ASTNode tree)\'>libsbml.formulaToString(ASTNode tree)</a></code>
 * @see <code><a href=\'libsbml.html#parseL3FormulaWithSettings(java.lang.String, org.sbml.libsbml.L3ParserSettings)\'>libsbml.parseL3FormulaWithSettings(String formula, L3ParserSettings settings)</a></code>
 * @see <code><a href=\'libsbml.html#parseL3Formula(java.lang.String)\'>libsbml.parseL3Formula(String formula)</a></code>
 * @see <code><a href=\'libsbml.html#parseL3FormulaWithModel(java.lang.String, org.sbml.libsbml.Model)\'>parseL3FormulaWithModel(String formula, Model model)</a></code>
 * @see <code><a href=\'libsbml.html#getLastParseL3Error()\'>getLastParseL3Error()</a></code>
 * @see <code><a href=\'libsbml.html#getDefaultL3ParserSettings()\'>getDefaultL3ParserSettings()</a></code>
 * @endif
 */ public
";


%csmethodmodifiers SBML_formulaToString(const ASTNode_t *tree) "
/**
 * Converts an AST to a string representation of a formula using a syntax
 * basically derived from SBML Level&nbsp;1.
 *
 * *
 * 
 * The text-string form of mathematical formulas produced by
 * @if clike libsbmlcs.libsbml.formulaToString()@endif@if csharp libsbmlcs.libsbml.formulaToString()@endif@if python libsbml.formulaToString()@endif@if java <code><a href=\'libsbml.html#formulaToString(org.sbml.libsbml.ASTNode)\'>libsbml.formulaToString(ASTNode tree)</a></code>@endif
 * and read by @if clike libsbmlcs.libsbml.parseFormula()@endif@if csharp libsbmlcs.libsbml.parseFormula()@endif@if python libsbml.parseFormula()@endif@if java <code><a href=\'libsbml.html#parseFormula(java.lang.String)\'>libsbml.parseFormula(String formula)</a></code>@endif
 * use a simple C-inspired infix notation taken from SBML Level&nbsp;1.  A
 * formula in this text-string form therefore can be handed to a program
 * that understands SBML Level&nbsp;1 mathematical expressions, or used as
 * part of a formula translation system.  The syntax is described in detail
 * in the documentation for ASTNode. 
 *
 * Note that this facility is provided as a convenience by libSBML&mdash;the
 * MathML standard does not actually define a \'string-form\' equivalent to
 * MathML expression trees, so the choice of formula syntax is somewhat
 * arbitrary.  The approach taken by libSBML is to use the syntax defined by
 * SBML Level&nbsp;1 (which in fact used a text-string representation of
 * formulas and not MathML).  This formula syntax is based mostly on C
 * programming syntax, and may contain operators, function calls, symbols,
 * and white space characters.  The following table provides the precedence
 * rules for the different entities that may appear in formula strings.
 *
 * @htmlinclude math-precedence-table.html
 * 
 * In the table above, @em operand implies the construct is an operand, @em
 * prefix implies the operation is applied to the following arguments, @em
 * unary implies there is one argument, and @em binary implies there are
 * two arguments.  The values in the <b>Precedence</b> column show how the
 * order of different types of operation are determined.  For example, the
 * expression <code>a * b + c</code> is evaluated as <code>(a * b) +
 * c</code> because the @c * operator has higher precedence.  The
 * <b>Associates</b> column shows how the order of similar precedence
 * operations is determined; for example, <code>a - b + c</code> is
 * evaluated as <code>(a - b) + c</code> because the @c + and @c -
 * operators are left-associative.
 *
 * The function call syntax consists of a function name, followed by optional
 * white space, followed by an opening parenthesis token, followed by a
 * sequence of zero or more arguments separated by commas (with each comma
 * optionally preceded and/or followed by zero or more white space
 * characters, followed by a closing parenthesis token.  The function name
 * must be chosen from one of the pre-defined functions in SBML or a
 * user-defined function in the model.  The following table lists the names
 * of certain common mathematical functions; this table corresponds to
 * Table&nbsp;6 in the <a target=\'_blank\' href=\'http://sbml.org/Documents/Specifications#SBML_Level_1_Version_2\'>SBML Level&nbsp;1 Version&nbsp;2 specification</a>:
 *
 * @htmlinclude string-functions-table.html
 *
 * @warning <span class=\'warning\'>There are differences between the symbols
 * used to represent the common mathematical functions and the corresponding
 * MathML token names.  This is a potential source of incompatibilities.
 * Note in particular that in this text-string syntax, <code>log(x)</code>
 * represents the natural logarithm, whereas in MathML, the natural logarithm
 * is <code>&lt;ln/&gt;</code>.  Application writers are urged to be careful
 * when translating between text forms and MathML forms, especially if they
 * provide a direct text-string input facility to users of their software
 * systems.</span>
 *
 * 
 *
 * * 
 * @warning <span class=\'warning\'>We urge developers to keep in mind that
 * the text-string formula syntax is specific to SBML Level&nbsp;1\'s C-like
 * mathematical formula syntax.  In particular, it is <em>not a
 * general-purpose mathematical expression syntax</em>.  LibSBML provides
 * methods for parsing and transforming text-string math formulas back and
 * forth from AST structures, but it is important to keep the system\'s
 * limitations in mind.</span>
 * 
 * 
 *
 * @param tree the AST to be converted.
 * 
 * @return the formula from the given AST as an SBML Level 1 text-string
 * mathematical formula.  The caller owns the returned string and is
 * responsible for freeing it when it is no longer needed.
 *
 * @if clike @see libsbmlcs.libsbml.formulaToString()
 * @see SBML_parseL3FormulaWithSettings()
 * @see SBML_parseL3Formula()
 * @see SBML_parseL3FormulaWithModel()
 * @see SBML_getLastParseL3Error()
 * @see SBML_getDefaultL3ParserSettings()
 * @endif
 * @if csharp @see libsbmlcs.libsbml.formulaToString()
 * @see SBML_parseL3FormulaWithSettings()
 * @see SBML_parseL3Formula()
 * @see SBML_parseL3FormulaWithModel()
 * @see SBML_getLastParseL3Error()
 * @see SBML_getDefaultL3ParserSettings()
 * @endif
 * @if python @see libsbml.formulaToString()
 * @see libsbml.parseL3FormulaWithSettings()
 * @see libsbml.parseL3Formula()
 * @see libsbml.parseL3FormulaWithModel()
 * @see libsbml.getLastParseL3Error()
 * @see libsbml.getDefaultL3ParserSettings()
 * @endif
 * @if java @see <code><a href=\'libsbml.html#formulaToString(org.sbml.libsbml.ASTNode tree)\'>libsbml.formulaToString(ASTNode tree)</a></code>
 * @see <code><a href=\'libsbml.html#parseL3FormulaWithSettings(java.lang.String, org.sbml.libsbml.L3ParserSettings)\'>libsbml.parseL3FormulaWithSettings(String formula, L3ParserSettings settings)</a></code>
 * @see <code><a href=\'libsbml.html#parseL3Formula(java.lang.String)\'>libsbml.parseL3Formula(String formula)</a></code>
 * @see <code><a href=\'libsbml.html#parseL3FormulaWithModel(java.lang.String, org.sbml.libsbml.Model)\'>parseL3FormulaWithModel(String formula, Model model)</a></code>
 * @see <code><a href=\'libsbml.html#getLastParseL3Error()\'>getLastParseL3Error()</a></code>
 * @see <code><a href=\'libsbml.html#getDefaultL3ParserSettings()\'>getDefaultL3ParserSettings()</a></code>
 * @endif
 */ public
";


%csmethodmodifiers SBML_parseL3Formula(const char *formula) "
/**
 * Parses the given mathematical formula and returns a representation of it
 * as an Abstract Syntax Tree (AST).
 *
 * *
 * 
 * The text-string form of mathematical formulas read by the functions
 * @if clike SBML_formulaToL3String()@endif@if csharp
 * SBML_formulaL3ToString()@endif@if python
 * libsbml.formulaToL3String()@endif@if java <code><a
 * href=\'libsbml.html#formulaToL3String(org.sbml.libsbml.ASTNode)\'>libsbml.formulaToL3String(ASTNode
 * tree)</a></code>@endif and @if clike SBML_parseL3Formula()@endif@if csharp
 * SBML_parseL3Formula()@endif@if python
 * libsbml.parseL3Formula()@endif@if java <code><a
 * href=\'libsbml.html#parseFormula(java.lang.String)\'>libsbml.parseFormula(String
 * formula)</a></code>@endif are expanded versions of the formats produced
 * and read by @if clike libsbmlcs.libsbml.formulaToString()@endif@if csharp
 * libsbmlcs.libsbml.formulaToString()@endif@if python libsbml.formulaToString()@endif@if java <code><a
 * href=\'libsbml.html#formulaToString(org.sbml.libsbml.ASTNode)\'>libsbml.formulaToString(ASTNode
 * tree)</a></code>@endif and @if clike libsbmlcs.libsbml.parseFormula()@endif@if csharp
 * libsbmlcs.libsbml.parseFormula()@endif@if python libsbml.parseFormula()@endif@if java
 * <code><a
 * href=\'libsbml.html#parseFormula(java.lang.String)\'>libsbml.parseFormula(String
 * formula)</a></code>@endif, respectively.  The latter two libSBML
 * functions were originally developed to support conversion between SBML
 * Levels&nbsp;1 and&nbsp;2, and were focused on the syntax of mathematical
 * formulas used in SBML Level&nbsp;1.  With time, and the use of MathML in
 * SBML Levels&nbsp;2 and&nbsp;3, it became clear that supporting
 * Level&nbsp;2 and&nbsp;3\'s expanded mathematical syntax would be useful for
 * software developers.
 * To maintain backwards compatibility, the original
 * @if clike libsbmlcs.libsbml.formulaToString()@endif@if csharp libsbmlcs.libsbml.formulaToString()@endif@if python libsbml.formulaToString()@endif@if java <code><a href=\'libsbml.html#formulaToString(org.sbml.libsbml.ASTNode)\'>libsbml.formulaToString(ASTNode tree)</a></code>@endif
 * and
 * @if clike libsbmlcs.libsbml.parseFormula()@endif@if csharp libsbmlcs.libsbml.parseFormula()@endif@if python libsbml.parseFormula()@endif@if java <code><a href=\'libsbml.html#parseFormula(java.lang.String)\'>libsbml.parseFormula(String formula)</a></code>@endif
 * have been left untouched, and instead, the new functionality is
 * provided in the form of
 * @if clike SBML_parseL3Formula()@endif@if csharp SBML_parseL3Formula()@endif@if python libsbml.parseL3Formula()@endif@if java <cod
e><a href=\'libsbml.html#parseL3Formula(java.lang.String)\'>libsbml.parseL3Formula(String formula)</a></code>@endif
 * and @if clike SBML_formulaToL3String()@endif@if csharp
 * SBML_formulaL3ToString()@endif@if python
 * libsbml.formulaToL3String()@endif@if java <code><a
 * href=\'libsbml.html#formulaToL3String(org.sbml.libsbml.ASTNode)\'>libsbml.formulaToL3String(ASTNode
 * tree)</a></code>@endif.
 *
 * The following are the differences in the formula syntax supported by the
 * \'L3\' versions of the formula parsers and formatters, compared to what is
 * supported by @if clike libsbmlcs.libsbml.parseFormula()@endif@if csharp
 * libsbmlcs.libsbml.parseFormula()@endif@if python libsbml.parseFormula()@endif@if java
 * <code><a
 * href=\'libsbml.html#parseFormula(java.lang.String)\'>libsbml.parseFormula(String
 * formula)</a></code>@endif and @if clike
 * SBML_formulaToL3String()@endif@if csharp SBML_formulaL3ToString()@endif@if python
 * libsbml.formulaToL3String()@endif@if java <code><a
 * href=\'libsbml.html#formulaToL3String(org.sbml.libsbml.ASTNode)\'>libsbml.formulaToL3String(ASTNode
 * tree)</a></code>@endif:
 *
 * @li Units may be asociated with bare numbers, using the following syntax:
 * <div style=\'margin: 10px auto 10px 25px; display: block\'>
 * <span class=\'code\' style=\'background-color: #d0d0ee\'>number</span>
 * <span class=\'code\' style=\'background-color: #edd\'>unit</span>
 * </div>
 * The <span class=\'code\' style=\'background-color: #d0d0ee\'>number</span>
 * may be in any form (an integer, real, or rational
 * number), and the 
 * <span class=\'code\' style=\'background-color: #edd\'>unit</span>
 * must conform to the syntax of an SBML identifier (technically, the
 * type defined as @c SId in the SBML specifications).  The whitespace between
 * <span class=\'code\' style=\'background-color: #d0d0ee\'>number</span>
 * and <span class=\'code\' style=\'background-color: #edd\'>unit</span>
 * is optional.
 *
 * @li The Boolean function symbols @c &&, @c ||, @c !, and @c != may be
 * used.
 *
 * @li The @em modulo operation is allowed as the symbol @c @% and will
 * produce a piecewise function in the MathML.
 *
 * @li All inverse trigonometric functions may be defined in the infix either
 * using @c arc as a prefix or simply @c a; in other words, both @c arccsc
 * and @c acsc are interpreted as the operator @em arccosecant defined in
 * MathML.  (Many functions in the SBML Level&nbsp;1 infix-notation parser
 * implemented by @if clike libsbmlcs.libsbml.parseFormula()@endif@if csharp
 * libsbmlcs.libsbml.parseFormula()@endif@if python libsbml.parseFormula()@endif@if java
 * <code><a
 * href=\'libsbml.html#parseFormula(java.lang.String)\'>libsbml.parseFormula(String
 * formula)</a></code>@endif are defined this way as well, but not all.)
 *
 * @li The following expression is parsed as a rational number instead of
 * as a numerical division:
 * <pre style=\'display: block; margin-left: 25px\'>
 * (<span class=\'code\' style=\'background-color: #d0d0ee\'>integer</span>/<span class=\'code\' style=\'background-color: #d0d0ee\'>integer</span>)</pre>
 * No spaces are allowed in this construct; in other words,
 * &quot;<code>(3 / 4)</code>&quot; will be parsed into the MathML
 * <code>&lt;divide&gt;</code> construct rather than a rational number.  The 
 * general number syntax allows you to assign units to a rational number, e.g.,
 * &quot;<code>(3/4) ml</code>&quot;.  (If the string is a division, units
 * are not interpreted in this way.)
 *
 * @li Various settings may be altered by using an L3ParserSettings object in
 * conjunction with the functions @if clike
 * SBML_parseL3FormulaWithSettings()@endif@if csharp
 * SBML_parseL3FormulaWithSettings()@endif@if python
 * libsbml.parseL3FormulaWithSettings()@endif@if java <code><a
 * href=\'libsbml.html#parseL3FormulaWithSettings(java.lang.String,
 * org.sbml.libsbml.L3ParserSettings)\'>libsbml.parseL3FormulaWithSettings(String
 * formula, L3ParserSettings settings)</a></code>@endif and @if clike
 * SBML_formulaToL3String()@endif@if csharp SBML_formulaL3ToString()@endif@if python
 * libsbml.formulaToL3String()@endif@if java <code><a
 * href=\'libsbml.html#formulaToL3String(org.sbml.libsbml.ASTNode)\'>libsbml.formulaToL3String(ASTNode
 * tree)</a></code>@endif, including the following:
 * <ul>
 * <li> The function @c log with a single argument (&quot;<code>log(x)</code>&quot;) 
 * can be parsed as <code>log10(x)</code>, <code>ln(x)</code>, or treated
 * as an error, as desired.
 * <li> Unary minus signs can be collapsed or preserved; that is,
 * sequential pairs of unary minuses (e.g., &quot;<code>- -3</code>&quot;)
 * can be removed from the input entirely and single unary minuses can be
 * incorporated into the number node, or all minuses can be preserved in
 * the AST node structure.
 * <li> Parsing of units embedded in the input string can be turned on and
 * off.
 * <li> The string @c avogadro can be parsed as a MathML @em csymbol or
 * as an identifier.
 * <li> A Model object may optionally be provided to the parser using the
 * variant function call
 * @if clike SBML_parseL3FormulaWithModel()@endif@if csharp
 * SBML_parseL3FormulaWithModel()@endif@if python
 * libsbml.SBML_parseL3FormulaWithModel()@endif@if java <code><a
 * href=\'libsbml.html#parseL3FormulaWithModel(java.lang.String,
 * org.sbml.libsbml.Model)\'>libsbml.parseL3FormulaWithModel(String formula,
 * Model model)</a></code>@endif or stored in a L3ParserSettings object
 * passed to the variant function @if clike
 * SBML_parseL3FormulaWithSettings()@endif@if csharp
 * SBML_parseL3FormulaWithSettings()@endif@if python
 * libsbml.parseL3FormulaWithSettings()@endif@if java <code><a
 * href=\'libsbml.html#parseL3FormulaWithSettings(java.lang.String,
 * org.sbml.libsbml.L3ParserSettings)\'>libsbml.parseL3FormulaWithSettings(String
 * formula, L3ParserSettings settings)</a></code>@endif.
 * When a Model object is provided, identifiers (values of type @c SId) from
 * that model are used in preference to pre-defined MathML definitions.  More
 * precisely, the Model entities whose identifiers will shadow identical
 * symbols in the mathematical formula are: Species, Compartment, Parameter,
 * Reaction, and SpeciesReference.  For instance, if the parser is given a
 * Model containing a Species with the identifier
 * &quot;<code>pi</code>&quot;, and the formula to be parsed is
 * &quot;<code>3*pi</code>&quot;, the MathML produced will contain the
 * construct <code>&lt;ci&gt; pi &lt;/ci&gt;</code> instead of the construct
 * <code>&lt;pi/&gt;</code>.  <li> Similarly, when a Model object is
 * provided, @c SId values of user-defined functions present in the model
 * will be used preferentially over pre-defined MathML functions.  For
 * example, if the passed-in Model contains a FunctionDefinition with the
 * identifier &quot;<code>sin</code>&quot;, that function will be used
 * instead of the predefined MathML function <code>&lt;sin/&gt;</code>.
 * </ul>
 * These configuration settings cannot be changed using the basic parser and
 * formatter functions, but can be changed on a per-call basis by using the
 * alternative functions @if clike
 * SBML_parseL3FormulaWithSettings()@endif@if csharp
 * SBML_parseL3FormulaWithSettings()@endif@if python
 * libsbml.parseL3FormulaWithSettings()@endif@if java <code><a
 * href=\'libsbml.html#parseL3FormulaWithSettings(java.lang.String,
 * org.sbml.libsbml.L3ParserSettings)\'>libsbml.parseL3FormulaWithSettings(String
 * formula, L3ParserSettings settings)</a></code>@endif and @if clike
 * SBML_formulaToL3StringWithSettings()@endif@if csharp
 * SBML_formulaToL3StringWithSettings()@endif@if python
 * libsbml.formulaToL3StringWithSettings()@endif@if java <code><a
 * href=\'libsbml.html#formulaToL3StringWithSettings(ASTNode_t tree,
 * org.sbml.libsbml.L3ParserSettings)\'>libsbml.parseL3FormulaWithSettings(ASTNode tree
 * L3ParserSettings settings)</a></code>@endif.
 *
 * The parser function @if clike
 * SBML_parseL3FormulaWithSettings()@endif@if csharp
 * SBML_parseL3FormulaWithSettings()@endif@if python
 * libsbml.parseL3FormulaWithSettings()@endif@if java <code><a
 * href=\'libsbml.html#parseL3FormulaWithSettings(java.lang.String,
 * org.sbml.libsbml.L3ParserSettings)\'>libsbml.parseL3FormulaWithSettings(String
 * formula, L3ParserSettings settings)</a></code>@endif
 * returns the root node of the AST corresponding to the
 * formula given as the argument.  If the formula contains a syntax error,
 * the function will return @c null instead.  When @c null is returned, an
 * error is set; information about the error can be retrieved using
 * @if clike SBML_getLastParseL3Error()@endif@if csharp SBML_getLastParseL3Error()@endif@if python libsbml.getLastParseL3Error()@endif@if java <code><a href=\'libsbml.html#getLastParseL3Error()\'>libsbml.getLastParseL3Error()</a></code>@endif.
 *
 * Note that this facility and the SBML Level&nbsp;1-based @if clike
 * libsbmlcs.libsbml.parseFormula()@endif@if csharp libsbmlcs.libsbml.parseFormula()@endif@if python
 * libsbml.parseFormula()@endif@if java <code><a
 * href=\'libsbml.html#parseFormula(java.lang.String)\'>libsbml.parseFormula(String
 * formula)</a></code>@endif are provided as a convenience by
 * libSBML&mdash;the MathML standard does not actually define a \'string-form\'
 * equivalent to MathML expressions, so the choice of formula syntax is
 * arbitrary.  The approach taken by libSBML is to start with the syntax
 * defined by SBML Level&nbsp;1 (which in fact used a text-string
 * representation of formulas, and not MathML), and expand it to include the
 * above functionality.  This formula syntax is based mostly on C programming
 * syntax, and may contain operators, function calls, symbols, and white
 * space characters.  The following table provides the precedence rules for
 * the different entities that may appear in formula strings.
 *
 * @htmlinclude math-precedence-table-l3.html
 * 
 * In the table above, @em operand implies the construct is an operand, @em
 * prefix implies the operation is applied to the following arguments, @em
 * unary implies there is one argument, and @em binary implies there are
 * two arguments.  The values in the <b>Precedence</b> column show how the
 * order of different types of operation are determined.  For example, the
 * expression <code>a + b * c</code> is evaluated as <code>a + (b * c)</code> 
 * because the @c * operator has higher precedence.  The
 * <b>Associates</b> column shows how the order of similar precedence
 * operations is determined; for example, <code>a && b || c</code> is
 * evaluated as <code>(a && b) || c</code> because the @c && and @c ||
 * operators are left-associative and have the same precedence.
 *
 * The function call syntax consists of a function name, followed by optional
 * white space, followed by an opening parenthesis token, followed by a
 * sequence of zero or more arguments separated by commas (with each comma
 * optionally preceded and/or followed by zero or more white space
 * characters), followed by a closing parenthesis token.  The function name
 * must be chosen from one of the pre-defined functions in SBML or a
 * user-defined function in the model.  The following table lists the names
 * of certain common mathematical functions; this table corresponds to
 * Table&nbsp;6 in the <a target=\'_blank\'
 * href=\'http://sbml.org/Documents/Specifications#SBML_Level_1_Version_2\'>SBML
 * Level&nbsp;1 Version&nbsp;2 specification</a> with additions based on the
 * functions added in SBML Level 2 and Level 3:
 *
 * @htmlinclude string-functions-table-l3.html
 *
 * Note that the manner in which the \'L3\' versions of the formula parser and
 * formatter interpret the function &quot;<code>log</code>&quot; can be
 * changed.  To do so, callers should use the function @if clike
 * SBML_parseL3FormulaWithSettings()@endif@if csharp
 * SBML_parseL3FormulaWithSettings()@endif@if python
 * libsbml.parseL3FormulaWithSettings()@endif@if java <code><a
 * href=\'libsbml.html#parseL3FormulaWithSettings(java.lang.String,
 * org.sbml.libsbml.L3ParserSettings)\'>libsbml.parseL3FormulaWithSettings(String
 * formula, L3ParserSettings settings)</a></code>@endif 
 * and pass it an appropriate L3ParserSettings object.  By default,
 * unlike the SBML Level&nbsp;1 parser implemented by @if clike
 * libsbmlcs.libsbml.parseFormula()@endif@if csharp libsbmlcs.libsbml.parseFormula()@endif@if python
 * libsbml.parseFormula()@endif@if java <code><a
 * href=\'libsbml.html#parseFormula(java.lang.String)\'>libsbml.parseFormula(String
 * formula)</a></code>@endif, the string &quot;<code>log</code>&quot; is
 * interpreted as the base&nbsp;10 logarithm, and @em not as the natural
 * logarithm.  However, you can change the interpretation to be base-10 log,
 * natural log, or as an error; since the name \'log\' by itself is ambiguous,
 * you require that the parser uses @c log10 or @c ln instead, which are more
 * clear.  Please refer to @if clike
 * SBML_parseL3FormulaWithSettings()@endif@if csharp
 * SBML_parseL3FormulaWithSettings()@endif@if python
 * libsbml.parseL3FormulaWithSettings()@endif@if java <code><a
 * href=\'libsbml.html#parseL3FormulaWithSettings(java.lang.String,
 * org.sbml.libsbml.L3ParserSettings)\'>libsbml.parseL3FormulaWithSettings(String
 * formula, L3ParserSettings settings)</a></code>@endif.
 * 
 * In addition, the following symbols will be translated to their MathML
 * equivalents, if no symbol with the same @c SId identifier string exists
 * in the Model object provided:
 *
 * @htmlinclude string-values-table-l3.html
 * 
 * Note that whether the string &quot;<code>avogadro</code>&quot; is parsed
 * as an AST node of type @link libsbmlcs.libsbml.AST_NAME_AVOGADRO
 * AST_NAME_AVOGADRO@endlink or @link libsbmlcs.libsbml.AST_NAME AST_NAME@endlink
 * is configurable; use the alternate version of this function, called @if clike
 * SBML_parseL3FormulaWithSettings()@endif@if csharp
 * SBML_parseL3FormulaWithSettings()@endif@if python
 * libsbml.parseL3FormulaWithSettings()@endif@if java <code><a
 * href=\'libsbml.html#parseL3FormulaWithSettings(java.lang.String,
 * org.sbml.libsbml.L3ParserSettings)\'>libsbml.parseL3FormulaWithSettings(String
 * formula, L3ParserSettings settings)</a></code>@endif.  This
 * functionality is provided because SBML Level&nbsp;2 models may not use
 * @link libsbmlcs.libsbml.AST_NAME_AVOGADRO AST_NAME_AVOGADRO@endlink AST nodes.
 *
 *

 * @param formula the text-string formula expression to be parsed
 *
 * @return the root node of an AST representing the mathematical formula,
 * or @c null if an error occurred while parsing the formula.  When @c null
 * is returned, an error is recorded internally; information about the
 * error can be retrieved using 
 * @if clike SBML_getLastParseL3Error()@endif@if csharp SBML_getLastParseL3Error()@endif@if python libsbml.getLastParseL3Error()@endif@if java <code><a href=\'libsbml.html#getLastParseL3Error()\'>libsbml.getLastParseL3Error()</a></code>@endif.
 *
 * @if clike @see libsbmlcs.libsbml.formulaToString()
 * @see SBML_formulaToL3String()
 * @see SBML_parseL3FormulaWithSettings()
 * @see SBML_parseL3Formula()
 * @see SBML_parseL3FormulaWithModel()
 * @see SBML_getLastParseL3Error()
 * @see SBML_getDefaultL3ParserSettings()
 * @endif
 * @if csharp @see libsbmlcs.libsbml.formulaToString()
 * @see SBML_formulaToL3String()
 * @see SBML_parseL3FormulaWithSettings()
 * @see SBML_parseL3Formula()
 * @see SBML_parseL3FormulaWithModel()
 * @see SBML_getLastParseL3Error()
 * @see SBML_getDefaultL3ParserSettings()
 * @endif
 * @if python @see libsbml.formulaToString()
 * @see libsbml.formulaToL3String()
 * @see libsbml.parseL3FormulaWithSettings()
 * @see libsbml.parseL3Formula()
 * @see libsbml.parseL3FormulaWithModel()
 * @see libsbml.getLastParseL3Error()
 * @see libsbml.getDefaultL3ParserSettings()
 * @endif
 * @if java @see <code><a href=\'libsbml.html#formulaToString(org.sbml.libsbml.ASTNode tree)\'>libsbml.formulaToString(ASTNode tree)</a></code>
 * @see <code><a href=\'libsbml.html#parseL3FormulaWithSettings(java.lang.String, org.sbml.libsbml.L3ParserSettings)\'>libsbml.parseL3FormulaWithSettings(String formula, L3ParserSettings settings)</a></code>
 * @see <code><a href=\'libsbml.html#parseL3Formula(java.lang.String)\'>libsbml.parseL3Formula(String formula)</a></code>
 * @see <code><a href=\'libsbml.html#parseL3FormulaWithModel(java.lang.String, org.sbml.libsbml.Model)\'>parseL3FormulaWithModel(String formula, Model model)</a></code>
 * @see <code><a href=\'libsbml.html#getLastParseL3Error()\'>getLastParseL3Error()</a></code>
 * @see <code><a href=\'libsbml.html#getDefaultL3ParserSettings()\'>getDefaultL3ParserSettings()</a></code>
 * @endif
 */ public
";


%csmethodmodifiers SBML_parseL3FormulaWithModel(const char *formula, const Model_t * model) "
/**
 * Parses the given mathematical formula using specific a specific Model to
 * resolve symbols, and returns an Abstract Syntax Tree (AST)
 * representation of the result.
 *
 * This is identical to
 * @if clike SBML_parseL3Formula()@endif@if csharp SBML_parseL3Formula()@endif@if python libsbml.parseL3Formula()@endif@if java <code><a href=\'libsbml.html#parseL3Formula(java.lang.String)\'>libsbml.parseL3Formula(String formula)</a></code>@endif,
 * except that this function uses the given model in the argument @p model
 * to check against identifiers that appear in the @p formula.
 *
 * For more details about the parser, please see the definition of
 * the function @if clike SBML_parseL3Formula()@endif@if csharp SBML_parseL3Formula()@endif@if python libsbml.parseL3Formula()@endif@if java <code><a href=\'libsbml.html#parseL3Formula(java.lang.String)\'>libsbml.parseL3Formula(String formula)</a></code>@endif.
 *
 * @param formula the mathematical formula expression to be parsed
 *
 * @param model the Model object to use for checking identifiers
 *
 * @return the root node of an AST representing the mathematical formula,
 * or @c null if an error occurred while parsing the formula.  When @c null
 * is returned, an error is recorded internally; information about the
 * error can be retrieved using
 * @if clike SBML_getLastParseL3Error()@endif@if csharp SBML_getLastParseL3Error()@endif@if python libsbml.getLastParseL3Error()@endif@if java <code><a href=\'libsbml.html#getLastParseL3Error()\'>libsbml.getLastParseL3Error()</a></code>@endif.
 * 
 * @if clike @see libsbmlcs.libsbml.formulaToString()
 * @see SBML_parseL3FormulaWithSettings()
 * @see SBML_parseL3Formula()
 * @see SBML_getLastParseL3Error()
 * @see SBML_getDefaultL3ParserSettings()
 * @endif
 * @if csharp @see libsbmlcs.libsbml.formulaToString()
 * @see SBML_parseL3FormulaWithSettings()
 * @see SBML_parseL3Formula()
 * @see SBML_getLastParseL3Error()
 * @see SBML_getDefaultL3ParserSettings()
 * @endif
 * @if python @see libsbml.formulaToString()
 * @see libsbml.parseL3FormulaWithSettings()
 * @see libsbml.parseL3Formula()
 * @see libsbml.getLastParseL3Error()
 * @see libsbml.getDefaultL3ParserSettings()
 * @endif
 * @if java @see <code><a href=\'libsbml.html#formulaToString(org.sbml.libsbml.ASTNode tree)\'>libsbml.formulaToString(ASTNode tree)</a></code>
 * @see <code><a href=\'libsbml.html#parseL3FormulaWithSettings(java.lang.String, org.sbml.libsbml.L3ParserSettings)\'>libsbml.parseL3FormulaWithSettings(String formula, L3ParserSettings settings)</a></code>
 * @see <code><a href=\'libsbml.html#parseL3Formula(java.lang.String)\'>libsbml.parseL3Formula(String formula)</a></code>
 * @see <code><a href=\'libsbml.html#getLastParseL3Error()\'>getLastParseL3Error()</a></code>
 * @see <code><a href=\'libsbml.html#getDefaultL3ParserSettings()\'>getDefaultL3ParserSettings()</a></code>
 * @endif
 */ public
";


%csmethodmodifiers SBML_parseL3FormulaWithSettings(const char *formula, const L3ParserSettings_t *settings) "
/**
 * Parses the given mathematical formula using specific parser settings and
 * returns an Abstract Syntax Tree (AST) representation of the result.
 *
 * This is identical to
 @if clike SBML_parseL3Formula()@endif@if csharp SBML_parseL3Formula()@endif@if python libsbml.parseL3Formula()@endif@if java <code><a href=\'libsbml.html#parseL3Formula(java.lang.String)\'>libsbml.parseL3Formula(String formula)</a></code>@endif,
 * except that this function uses the parser settings given in the argument
 * @p settings.  The settings override the default parsing behavior.
 *
 * The parameter @p settings allows callers to change the following parsing
 * behaviors:
 *
 * @li Use a specific Model object against which identifiers to compare
 * identifiers.  This causes the parser to search the Model for identifiers
 * that the parser encounters in the formula.  If a given symbol in the
 * formula matches the identifier of a Species, Compartment, Parameter,
 * Reaction, SpeciesReference or FunctionDefinition in the Model, then the
 * symbol is assumed to refer to that model entity instead of any possible
 * mathematical terms with the same symbol.  For example, if the parser is
 * given a Model containing a Species with the identifier
 * &quot;<code>pi</code>&quot;, and the formula to be parsed is
 * &quot;<code>3*pi</code>&quot;, the MathML produced will contain the
 * construct <code>&lt;ci&gt; pi &lt;/ci&gt;</code> instead of the
 * construct <code>&lt;pi/&gt;</code>.
 * @li Whether to parse &quot;<code>log(x)</code>&quot; with a single
 * argument as the base 10
 * logarithm of x, the natural logarithm of x, or treat the case as an
 * error.
 * @li Whether to parse &quot;<code>number id</code>&quot; by interpreting
 * @c id as the identifier of a unit of measurement associated with the
 * number, or whether to treat the case as an error.
 * @li Whether to parse &quot;<code>avogadro</code>&quot; as an ASTNode of
 * type @link libsbmlcs.libsbml.AST_NAME_AVOGADRO AST_NAME_AVOGADRO@endlink or
 * as type @link libsbmlcs.libsbml.AST_NAME AST_NAME@endlink.
 * @li Whether to always create explicit ASTNodes of type @link
 * libsbmlcs.libsbml.AST_MINUS AST_MINUS@endlink for all unary minuses, or
 * collapse and remove minuses where possible.
 *
 * For more details about the parser, please see the definition of
 * L3ParserSettings and
 * @if clike SBML_parseL3Formula()@endif@if csharp SBML_parseL3Formula()@endif@if python libsbml.parseL3Formula()@endif@if java <code><a href=\'libsbml.html#parseL3Formula(java.lang.String)\'>libsbml.parseL3Formula(String formula)</a></code>@endif.
 *
 * @param formula the mathematical formula expression to be parsed
 *
 * @param settings the settings to be used for this parser invocation
 *
 * @return the root node of an AST representing the mathematical formula,
 * or @c null if an error occurred while parsing the formula.  When @c null
 * is returned, an error is recorded internally; information about the
 * error can be retrieved using
 * @if clike SBML_getLastParseL3Error()@endif@if csharp SBML_getLastParseL3Error()@endif@if python libsbml.getLastParseL3Error()@endif@if java <code><a href=\'libsbml.html#getLastParseL3Error()\'>libsbml.getLastParseL3Error()</a></code>@endif.
 * 
 * @if clike @see libsbmlcs.libsbml.formulaToString()
 * @see SBML_parseL3Formula()
 * @see SBML_parseL3FormulaWithModel()
 * @see SBML_getLastParseL3Error()
 * @see SBML_getDefaultL3ParserSettings()
 * @endif
 * @if csharp @see libsbmlcs.libsbml.formulaToString()
 * @see SBML_parseL3Formula()
 * @see SBML_parseL3FormulaWithModel()
 * @see SBML_getLastParseL3Error()
 * @see SBML_getDefaultL3ParserSettings()
 * @endif
 * @if python @see libsbml.formulaToString()
 * @see libsbml.parseL3Formula()
 * @see libsbml.parseL3FormulaWithModel()
 * @see libsbml.getLastParseL3Error()
 * @see libsbml.getDefaultL3ParserSettings()
 * @endif
 * @if java @see <code><a href=\'libsbml.html#formulaToString(org.sbml.libsbml.ASTNode tree)\'>libsbml.formulaToString(ASTNode tree)</a></code>
 * @see <code><a href=\'libsbml.html#parseL3Formula(java.lang.String)\'>libsbml.parseL3Formula(String formula)</a></code>
 * @see <code><a href=\'libsbml.html#parseL3FormulaWithModel(java.lang.String, org.sbml.libsbml.Model)\'>parseL3FormulaWithModel(String formula, Model model)</a></code>
 * @see <code><a href=\'libsbml.html#getLastParseL3Error()\'>getLastParseL3Error()</a></code>
 * @see <code><a href=\'libsbml.html#getDefaultL3ParserSettings()\'>getDefaultL3ParserSettings()</a></code>
 * @endif
 */ public
";


%csmethodmodifiers SBML_getDefaultL3ParserSettings "
/**
 * Returns a copy of the default parser settings used by @if clike SBML_parseL3Formula()@endif@if csharp SBML_parseL3Formula()@endif@if python libsbml.parseL3Formula()@endif@if java <code><a href=\'libsbml.html#parseL3Formula(java.lang.String)\'>libsbml.parseL3Formula(String formula)</a></code>@endif.
 * 
 * The settings structure allows callers to change the following parsing
 * behaviors:
 * 
 * @li Use a specific Model object against which identifiers to compare
 * identifiers.  This causes the parser to search the Model for identifiers
 * that the parser encounters in the formula.  If a given symbol in the
 * formula matches the identifier of a Species, Compartment, Parameter,
 * Reaction, SpeciesReference or FunctionDefinition in the Model, then the
 * symbol is assumed to refer to that model entity instead of any possible
 * mathematical terms with the same symbol.  For example, if the parser is
 * given a Model containing a Species with the identifier
 * &quot;<code>pi</code>&quot;, and the formula to be parsed is
 * &quot;<code>3*pi</code>&quot;, the MathML produced will contain the
 * construct <code>&lt;ci&gt; pi &lt;/ci&gt;</code> instead of the
 * construct <code>&lt;pi/&gt;</code>.
 * @li Whether to parse &quot;<code>log(x)</code>&quot; with a single
 * argument as the base 10
 * logarithm of x, the natural logarithm of x, or treat the case as an
 * error.
 * @li Whether to parse &quot;<code>number id</code>&quot; by interpreting
 * @c id as the identifier of a unit of measurement associated with the
 * number, or whether to treat the case as an error.
 * @li Whether to parse &quot;<code>avogadro</code>&quot; as an ASTNode of
 * type @link libsbmlcs.libsbml.AST_NAME_AVOGADRO AST_NAME_AVOGADRO@endlink or
 * as type @link libsbmlcs.libsbml.AST_NAME AST_NAME@endlink.
 * @li Whether to always create explicit ASTNodes of type @link
 * libsbmlcs.libsbml.AST_MINUS AST_MINUS@endlink for all unary minuses, or
 * collapse and remove minuses where possible.
 *
 * For more details about the parser, please see the definition of
 * L3ParserSettings and
 * @if clike SBML_parseL3Formula()@endif@if csharp SBML_parseL3Formula()@endif@if python libsbml.parseL3Formula()@endif@if java <code><a href=\'libsbml.html#parseL3Formula(java.lang.String)\'>libsbml.parseL3Formula(String formula)</a></code>@endif.
 * 
 * @if clike @see libsbmlcs.libsbml.formulaToString()
 * @see SBML_parseL3FormulaWithSettings()
 * @see SBML_parseL3Formula()
 * @see SBML_parseL3FormulaWithModel()
 * @see SBML_getLastParseL3Error()
 * @endif
 * @if csharp @see libsbmlcs.libsbml.formulaToString()
 * @see SBML_parseL3FormulaWithSettings()
 * @see SBML_parseL3Formula()
 * @see SBML_parseL3FormulaWithModel()
 * @see SBML_getLastParseL3Error()
 * @endif
 * @if python @see libsbml.formulaToString()
 * @see libsbml.parseL3FormulaWithSettings()
 * @see libsbml.parseL3Formula()
 * @see libsbml.parseL3FormulaWithModel()
 * @see libsbml.getLastParseL3Error()
 * @endif
 * @if java @see <code><a href=\'libsbml.html#formulaToString(org.sbml.libsbml.ASTNode tree)\'>libsbml.formulaToString(ASTNode tree)</a></code>
 * @see <code><a href=\'libsbml.html#parseL3FormulaWithSettings(java.lang.String, org.sbml.libsbml.L3ParserSettings)\'>libsbml.parseL3FormulaWithSettings(String formula, L3ParserSettings settings)</a></code>
 * @see <code><a href=\'libsbml.html#parseL3Formula(java.lang.String)\'>libsbml.parseL3Formula(String formula)</a></code>
 * @see <code><a href=\'libsbml.html#parseL3FormulaWithModel(java.lang.String, org.sbml.libsbml.Model)\'>parseL3FormulaWithModel(String formula, Model model)</a></code>
 * @see <code><a href=\'libsbml.html#getLastParseL3Error()\'>getLastParseL3Error()</a></code>
 * @endif
 */ public
";


%csmethodmodifiers SBML_getLastParseL3Error "
/**
 * Returns the last error reported by the parser.
 *
 * If @if clike SBML_parseL3Formula()@endif@if csharp SBML_parseL3Formula()@endif@if python libsbml.parseL3Formula()@endif@if java <code><a href=\'libsbml.html#parseL3Formula(java.lang.String)\'>libsbml.parseL3Formula(String formula)</a></code>@endif, 
 * @if clike SBML_parseL3FormulaWithSettings()@endif@if csharp SBML_parseL3FormulaWithSettings()@endif@if python libsbml.parseL3FormulaWithSettings()@endif@if java <code><a href=\'libsbml.html#parseL3FormulaWithSettings(java.lang.String, org.sbml.libsbml.L3ParserSettings)\'>libsbml.parseL3FormulaWithSettings(String formula, L3ParserSettings settings)</a></code>@endif, or
 * @if clike SBML_parseL3FormulaWithModel()@endif@if csharp SBML_parseL3FormulaWithModel()@endif@if python libsbml.parseL3FormulaWithModel()@endif@if java <code><a href=\'libsbml.html#parseL3FormulaWithModel(java.lang.String, org.sbml.libsbml.Model)\'>libsbml.parseL3FormulaWithModel(String formula, Model model)</a></code>@endif return @c null, an error is set internally which is accessible
 * via this function. 
 *
 * @return a string describing the error that occurred.  This will contain
 * the string the parser was trying to parse, which character it had parsed
 * when it encountered the error, and a description of the error.
 *
 * @if clike @see libsbmlcs.libsbml.formulaToString()
 * @see SBML_parseL3FormulaWithSettings()
 * @see SBML_parseL3Formula()
 * @see SBML_parseL3FormulaWithModel()
 * @see SBML_getDefaultL3ParserSettings()
 * @endif
 * @if csharp @see libsbmlcs.libsbml.formulaToString()
 * @see SBML_parseL3FormulaWithSettings()
 * @see SBML_parseL3Formula()
 * @see SBML_parseL3FormulaWithModel()
 * @see SBML_getDefaultL3ParserSettings()
 * @endif
 * @if python @see libsbml.formulaToString()
 * @see libsbml.parseL3FormulaWithSettings()
 * @see libsbml.parseL3Formula()
 * @see libsbml.parseL3FormulaWithModel()
 * @see libsbml.getDefaultL3ParserSettings()
 * @endif
 * @if java @see <code><a href=\'libsbml.html#formulaToString(org.sbml.libsbml.ASTNode tree)\'>libsbml.formulaToString(ASTNode tree)</a></code>
 * @see <code><a href=\'libsbml.html#parseL3FormulaWithSettings(java.lang.String, org.sbml.libsbml.L3ParserSettings)\'>libsbml.parseL3FormulaWithSettings(String formula, L3ParserSettings settings)</a></code>
 * @see <code><a href=\'libsbml.html#parseL3Formula(java.lang.String)\'>libsbml.parseL3Formula(String formula)</a></code>
 * @see <code><a href=\'libsbml.html#parseL3FormulaWithModel(java.lang.String, org.sbml.libsbml.Model)\'>parseL3FormulaWithModel(String formula, Model model)</a></code>
 * @see <code><a href=\'libsbml.html#getDefaultL3ParserSettings()\'>getDefaultL3ParserSettings()</a></code>
 * @endif
 */ public
";


%typemap(csimports) L3ParserSettings "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html A helper class for controlling the behavior of the
 * text-string formula parser.
 *
 * @htmlinclude not-sbml-warning.html
 *
 * The function
 * @if clike SBML_parseL3FormulaWithSettings()@endif@if csharp SBML_parseL3FormulaWithSettings()@endif@if python libsbml.parseL3FormulaWithSettings()@endif@if java <code><a href=\'libsbml.html#parseL3FormulaWithSettings(java.lang.String, org.sbml.libsbml.L3ParserSettings)\'>libsbml.parseL3FormulaWithSettings(String formula, L3ParserSettings settings)</a></code>@endif,
 * along with its variants 
 * @if clike libsbmlcs.libsbml.parseFormula()@endif@if csharp libsbmlcs.libsbml.parseFormula()@endif@if python libsbml.parseFormula()@endif@if java <code><a href=\'libsbml.html#parseFormula(java.lang.String)\'>libsbml.parseFormula(java.lang.String formula)</a></code>@endif
 * and
 * @if clike SBML_parseL3FormulaWithModel()@endif@if csharp SBML_parseL3FormulaWithModel()@endif@if python libsbml.parseL3FormulaWithModel()@endif@if java <code><a href=\'libsbml.html#parseL3FormulaWithModel(java.lang.String, org.sbml.libsbml.Model)\'>libsbml.parseL3FormulaWithModel(String formula, Model model)</a></code>@endif,
 * are the interfaces to a parser for mathematical formulas expressed as
 * text strings.  The parser converts the text-string formulas into
 * Abstract Syntax Trees (ASTs), represented in libSBML using ASTNode
 * objects. Compared to the parser implemented by the function
 * @if clike libsbmlcs.libsbml.parseFormula()@endif@if csharp libsbmlcs.libsbml.parseFormula()@endif@if python libsbml.parseFormula()@endif@if java <code><a href=\'libsbml.html#parseFormula(java.lang.String)\'>libsbml.parseFormula(java.lang.String formula)</a></code>@endif,
 * which was designed primarily for converting the mathematical formula
 * strings in SBML Level&nbsp;1, the \'L3\' variant of the parser accepts an
 * extended formula syntax.  It also has a number of configurable behaviors.
 * This class (L3ParserSettings) is an object used to communicate the
 * configuration settings with callers.
 *
 * The following aspects of the parser are configurable:
 * <ul>
 * <li> The function @c log with a single argument (&quot;<code>log(x)</code>&quot;) 
 * can be parsed as <code>log10(x)</code>, <code>ln(x)</code>, or treated
 * as an error, as desired.
 * <li> Unary minus signs can be collapsed or preserved; that is,
 * sequential pairs of unary minuses (e.g., &quot;<code>- -3</code>&quot;)
 * can be removed from the input entirely and single unary minuses can be
 * incorporated into the number node, or all minuses can be preserved in
 * the AST node structure.
 * <li> Parsing of units embedded in the input string can be turned on and
 * off.
 * <li> The string @c avogadro can be parsed as a MathML @em csymbol or
 * as an identifier.
 * <li> A Model object may optionally be provided to the parser using
 * the variant function call @if clike  SBML_parseL3FormulaWithModel()@endif@if csharp  SBML_parseL3FormulaWithModel()@endif@if python  libsbml.SBML_parseL3FormulaWithModel()@endif@if java <code><a href=\'libsbml.html#parseL3FormulaWithModel(java.lang.String, org.sbml.libsbml.Model)\'>libsbml.parseL3FormulaWithModel(String formula, Model model)</a></code>@endif.
 * or stored in a L3ParserSettings object passed to the variant function
 * @if clike SBML_parseL3FormulaWithSettings()@endif@if csharp SBML_parseL3FormulaWithSettings()@endif@if python libsbml.parseL3FormulaWithSettings()@endif@if java <code><a href=\'libsbml.html#parseL3FormulaWithSettings(java.lang.String, org.sbml.libsbml.L3ParserSettings)\'>libsbml.parseL3FormulaWithSettings(String formula, org.sbml.libsbml.L3ParserSettings settings)</a></code>@endif.
 * When a Model object is provided, identifiers (values of type @c SId)
 * from that model are used in preference to pre-defined MathML
 * definitions.  More precisely, the Model entities whose identifiers will
 * shadow identical symbols in the mathematical formula are: Species,
 * Compartment, Parameter, Reaction, and SpeciesReference.  For instance,
 * if the parser is given a Model containing a Species with the identifier
 * &quot;<code>pi</code>&quot;, and the formula to be parsed is
 * &quot;<code>3*pi</code>&quot;, the MathML produced will contain the
 * construct <code>&lt;ci&gt; pi &lt;/ci&gt;</code> instead of the
 * construct <code>&lt;pi/&gt;</code>.
 * <li> Similarly, when a Model object is provided, @c SId values of
 * user-defined functions present in the Model will be used preferentially
 * over pre-defined MathML functions.  For example, if the passed-in Model
 * contains a FunctionDefinition with the identifier
 * &quot;<code>sin</code>&quot;, that function will be used instead of the
 * predefined MathML function <code>&lt;sin/&gt;</code>.
 * </ul>
 *
 * To obtain the default configuration values, callers can use the function
 * @if clike SBML_getDefaultL3ParserSettings()@endif@if csharp SBML_getDefaultL3ParserSettings()@endif@if python libsbml.SBML_getDefaultL3ParserSettings()@endif@if java <code><a href=\'libsbml.html#getDefaultL3ParserSettings()\'>libsbml.getDefaultL3ParserSettings()</a></code>@endif.
 * To change the configuration, callers can create an L3ParserSettings
 * object, set the desired characteristics using the methods
 * provided, and pass that object to
 * @if clike SBML_parseL3FormulaWithSettings()@endif@if csharp SBML_parseL3FormulaWithSettings()@endif@if python libsbml.parseL3FormulaWithSettings()@endif@if java <a href=\'libsbml.html#parseL3FormulaWithSettings(java.lang.String, org.sbml.libsbml.L3ParserSettings)\'><code>libsbml.parseL3FormulaWithSettings(String formula, L3ParserSettings settings)</code></a>@endif.
 *
 * @if clike @see SBML_parseL3FormulaWithSettings()
 * @see SBML_parseL3Formula()
 * @see SBML_parseL3FormulaWithModel()
 * @endif
 * @if csharp @see SBML_parseL3FormulaWithSettings()
 * @see SBML_parseL3Formula()
 * @see SBML_parseL3FormulaWithModel()
 * @endif
 * @if python @see libsbml.parseL3FormulaWithSettings()
 * @see libsbml.parseL3Formula()
 * @see libsbml.parseL3FormulaWithModel()
 * @endif
 * @if java @see <code><a href=\'libsbml.html#parseL3FormulaWithSettings(java.lang.String, org.sbml.libsbml.L3ParserSettings)\'>libsbml.parseL3FormulaWithSettings(String formula, L3ParserSettings settings)</a></code>
 * @see <code><a href=\'libsbml.html#parseL3Formula(java.lang.String)\'>libsbml.parseL3Formula(String formula)</a></code>
 * @see <code><a href=\'libsbml.html#parseL3FormulaWithModel(java.lang.String, org.sbml.libsbml.Model)\'>parseL3FormulaWithModel(String formula, Model model)</a></code>
 * @endif
 */
"


%csmethodmodifiers L3ParserSettings::L3ParserSettings "
/**
   * Creates a new L3ParserSettings object with default values.
   * 
   * This is the default constructor for the L3ParserSettings object.  It
   * sets the Model to @c null and other settings to @c
   * L3P_PARSE_LOG_AS_LOG10, @c L3P_EXPAND_UNARY_MINUS, @c L3P_PARSE_UNITS,
   * and @c L3P_AVOGADRO_IS_CSYMBOL.
   */ public
";


%csmethodmodifiers L3ParserSettings::L3ParserSettings(Model* model, ParseLogType_t parselog, bool collapseminus, bool parseunits, bool avocsymbol) "
/**
   * Creates a new L3ParserSettings object with specific values for all
   * possible settings.
   *
   * @param model a Model object to be used for disambiguating identifiers
   * 
   * @param parselog a flag that controls how the parser will handle
   * the symbol @c log in formulas
   *
   * @param collapseminus a flag that controls how the parser will handle
   * minus signs
   *
   * @param parseunits a flag that controls how the parser will handle
   * apparent references to units of measurement associated with raw
   * numbers in a formula
   *
   * @param avocsymbol a flag that controls how the parser will handle
   * the appearance of the symbol @c avogadro in a formula
   *
   * @see getModel()
   * @see setModel(@if java Model model@endif)
   * @see unsetModel()
   * @see getParseLog()
   * @see setParseLog(@if java int type@endif)
   * @see getParseUnits()
   * @see setParseUnits(@if java bool units@endif)
   * @see getParseCollapseMinus()
   * @see setParseCollapseMinus(@if java bool collapseminus@endif)
   * @see getParseAvogadroCsymbol()
   * @see setParseAvogadroCsymbol(@if java bool l2only@endif)
   */ public
";


%csmethodmodifiers L3ParserSettings::setModel(const Model* model) "
/**
   * Sets the model reference in this L3ParserSettings object.
   *
   * When a Model object is provided, identifiers (values of type @c SId)
   * from that model are used in preference to pre-defined MathML
   * definitions.  More precisely, the Model entities whose identifiers will
   * shadow identical symbols in the mathematical formula are: Species,
   * Compartment, Parameter, Reaction, and SpeciesReference.  For instance,
   * if the parser is given a Model containing a Species with the identifier
   * &quot;<code>pi</code>&quot;, and the formula to be parsed is
   * &quot;<code>3*pi</code>&quot;, the MathML produced will contain the
   * construct <code>&lt;ci&gt; pi &lt;/ci&gt;</code> instead of the
   * construct <code>&lt;pi/&gt;</code>.
   * Similarly, when a Model object is provided, @c SId values of
   * user-defined functions present in the Model will be used preferentially
   * over pre-defined MathML functions.  For example, if the passed-in Model
   * contains a FunctionDefinition with the identifier
   * &quot;<code>sin</code>&quot;, that function will be used instead of the
   * predefined MathML function <code>&lt;sin/&gt;</code>.
   *
   * @param model a Model object to be used for disambiguating identifiers
   *
   * @warning <span class=\'warning\'>This does @em not copy the Model object.
   * This means that modifications made to the object after invoking this
   * method may affect parsing behavior.</span>
   *
   * @see getModel()
   * @see unsetModel()
   */ public
";


%csmethodmodifiers L3ParserSettings::getModel() const "
/**
   * Returns the Model object referenced by this L3ParserSettings object.
   *
   * @see setModel(@if java Model model@endif)
   * @see unsetModel()
   */ public
";


%csmethodmodifiers L3ParserSettings::unsetModel "
/**
   * Sets the Model reference in this L3ParserSettings object to @c null.
   *
   * @see setModel(@if java Model model@endif)
   * @see getModel()
   */ public
";


%csmethodmodifiers L3ParserSettings::setParseLog(ParseLogType_t type) "
/**
   * Sets the behavior for handling @c log in mathematical formulas.
   *
   * The function @c log with a single argument
   * (&quot;<code>log(x)</code>&quot;) can be parsed as
   * <code>log10(x)</code>, <code>ln(x)</code>, or treated as an error, as
   * desired.
   *
   * @param type a constant, one of following three possibilities:
   * @li @link libsbmlcs.libsbml.L3P_PARSE_LOG_AS_LOG10 L3P_PARSE_LOG_AS_LOG10@endlink
   * @li @link libsbmlcs.libsbml.L3P_PARSE_LOG_AS_LN L3P_PARSE_LOG_AS_LN@endlink
   * @li @link libsbmlcs.libsbml.L3P_PARSE_LOG_AS_ERROR L3P_PARSE_LOG_AS_ERROR@endlink
   *
   * @see getParseLog()
   */ public
";


%csmethodmodifiers L3ParserSettings::getParseLog() const "
/**
   * Returns the current setting indicating what to do with formulas
   * containing the function @c log with one argument.
   *
   * The function @c log with a single argument
   * (&quot;<code>log(x)</code>&quot;) can be parsed as
   * <code>log10(x)</code>, <code>ln(x)</code>, or treated as an error, as
   * desired.
   *
   * @return One of following three constants:
   * @li @link libsbmlcs.libsbml.L3P_PARSE_LOG_AS_LOG10 L3P_PARSE_LOG_AS_LOG10@endlink
   * @li @link libsbmlcs.libsbml.L3P_PARSE_LOG_AS_LN L3P_PARSE_LOG_AS_LN@endlink
   * @li @link libsbmlcs.libsbml.L3P_PARSE_LOG_AS_ERROR L3P_PARSE_LOG_AS_ERROR@endlink
   *
   * @see setParseLog(@if java int type@endif)
   */ public
";


%csmethodmodifiers L3ParserSettings::setParseCollapseMinus(bool collapseminus) "
/**
   * Sets the behavior for handling unary minuses appearing in mathematical
   * formulas.
   *
   * This setting affects two behaviors.  First, pairs of multiple unary
   * minuses in a row (e.g., &quot;<code>- -3</code>&quot;) can be
   * collapsed and ignored in the input, or the multiple minuses can be
   * preserved in the AST node tree that is generated by the parser.
   * Second, minus signs in front of numbers can be collapsed into the
   * number node itself; for example, a &quot;<code>- 4.1</code>&quot; can
   * be turned into a single ASTNode of type @link libsbmlcs.libsbml.AST_REAL
   * AST_REAL@endlink with a value of <code>-4.1</code>, or it can be
   * turned into a node of type @link libsbmlcs.libsbml.AST_MINUS
   * AST_MINUS@endlink having a child node of type @link
   * libsbmlcs.libsbml.AST_REAL AST_REAL@endlink.  This method lets you tell
   * the parser which behavior to use&mdash;either collapse minuses or
   * always preserve them.  The two possibilities are represented using the
   * following constants:
   *
   * @li @link libsbmlcs.libsbml.L3P_COLLAPSE_UNARY_MINUS
   * L3P_COLLAPSE_UNARY_MINUS@endlink (value = @c true): collapse unary
   * minuses where possible.
   * @li @link libsbmlcs.libsbml.L3P_EXPAND_UNARY_MINUS
   * L3P_EXPAND_UNARY_MINUS@endlink (value = @c false): do not collapse
   * unary minuses, and instead translate each one into an AST node of type
   * @link libsbmlcs.libsbml.AST_MINUS AST_MINUS@endlink.
   *
   * @param collapseminus a bool value (one of the constants
   * @link libsbmlcs.libsbml.L3P_COLLAPSE_UNARY_MINUS
   * L3P_COLLAPSE_UNARY_MINUS@endlink or
   * @link libsbmlcs.libsbml.L3P_EXPAND_UNARY_MINUS
   * L3P_EXPAND_UNARY_MINUS@endlink) indicating how unary minus signs in
   * the input should be handled.
   *
   * @see getParseCollapseMinus()
   */ public
";


%csmethodmodifiers L3ParserSettings::getParseCollapseMinus() const "
/**
   * Returns a flag indicating the current behavior set for handling
   * multiple unary minuses in formulas.
   *
   * This setting affects two behaviors.  First, pairs of multiple unary
   * minuses in a row (e.g., &quot;<code>- -3</code>&quot;) can be
   * collapsed and ignored in the input, or the multiple minuses can be
   * preserved in the AST node tree that is generated by the parser.
   * Second, minus signs in front of numbers can be collapsed into the
   * number node itself; for example, a &quot;<code>- 4.1</code>&quot; can
   * be turned into a single ASTNode of type @link libsbmlcs.libsbml.AST_REAL
   * AST_REAL@endlink with a value of <code>-4.1</code>, or it can be
   * turned into a node of type @link libsbmlcs.libsbml.AST_MINUS
   * AST_MINUS@endlink having a child node of type @link
   * libsbmlcs.libsbml.AST_REAL AST_REAL@endlink.  This method lets you tell
   * the parser which behavior to use&mdash;either collapse minuses or
   * always preserve them.  The two possibilities are represented using the
   * following constants:
   *
   * @li @link libsbmlcs.libsbml.L3P_COLLAPSE_UNARY_MINUS
   * L3P_COLLAPSE_UNARY_MINUS@endlink (value = @c true): collapse unary
   * minuses where possible.
   * @li @link libsbmlcs.libsbml.L3P_EXPAND_UNARY_MINUS
   * L3P_EXPAND_UNARY_MINUS@endlink (value = @c false): do not collapse
   * unary minuses, and instead translate each one into an AST node of type
   * @link libsbmlcs.libsbml.AST_MINUS AST_MINUS@endlink.
   *
   * @return A bool, one of @link
   * libsbmlcs.libsbml.L3P_COLLAPSE_UNARY_MINUS
   * L3P_COLLAPSE_UNARY_MINUS@endlink or @link
   * libsbmlcs.libsbml.L3P_EXPAND_UNARY_MINUS L3P_EXPAND_UNARY_MINUS@endlink.
   *
   * @see setParseCollapseMinus(@if java bool collapseminus@endif)
   */ public
";


%csmethodmodifiers L3ParserSettings::setParseUnits(bool units) "
/**
   * Sets the parser\'s behavior in handling units associated with numbers
   * in a mathematical formula.
   *
   * In SBML Level&nbsp;2, there is no means of associating a unit of
   * measurement with a pure number in a formula, while SBML Level&nbsp;3
   * does define a syntax for this.  In Level&nbsp;3, MathML
   * <code>&lt;cn&gt;</code> elements can have an attribute named @c units
   * placed in the SBML namespace, which can be used to indicate the units
   * to be associated with the number.  The text-string infix formula
   * parser allows units to be placed after raw numbers; they are
   * interpreted as unit identifiers for units defined by the SBML
   * specification or in the containing Model object.  Some examples
   * include: &quot;<code>4 mL</code>&quot;, &quot;<code>2.01
   * Hz</code>&quot;, &quot;<code>3.1e-6 M</code>&quot;, and
   * &quot;<code>(5/8) inches</code>&quot;.  To produce a valid SBML model,
   * there must either exist a UnitDefinition corresponding to the
   * identifier of the unit, or the unit must be defined in Table&nbsp;2 of
   * the SBML specification.
   *
   * @param units A bool indicating whether to parse units:
   * @li @link libsbmlcs.libsbml.L3P_PARSE_UNITS L3P_PARSE_UNITS@endlink
   * (value = @c true): parse units in the text-string formula.
   * @li @link libsbmlcs.libsbml.L3P_NO_UNITS L3P_NO_UNITS@endlink (value = @c
   * false): treat units in the text-string formula as errors.
   *
   * @see getParseUnits()
   */ public
";


%csmethodmodifiers L3ParserSettings::getParseUnits() const "
/**
   * Returns @c if the current settings allow units in text-string
   * mathematical formulas.
   *
   * In SBML Level&nbsp;2, there is no means of associating a unit of
   * measurement with a pure number in a formula, while SBML Level&nbsp;3
   * does define a syntax for this.  In Level&nbsp;3, MathML
   * <code>&lt;cn&gt;</code> elements can have an attribute named @c units
   * placed in the SBML namespace, which can be used to indicate the units
   * to be associated with the number.  The text-string infix formula
   * parser allows units to be placed after raw numbers; they are
   * interpreted as unit identifiers for units defined by the SBML
   * specification or in the containing Model object.  Some examples
   * include: &quot;<code>4 mL</code>&quot;, &quot;<code>2.01
   * Hz</code>&quot;, &quot;<code>3.1e-6 M</code>&quot;, and
   * &quot;<code>(5/8) inches</code>&quot;.  To produce a valid SBML model,
   * there must either exist a UnitDefinition corresponding to the
   * identifier of the unit, or the unit must be defined in Table&nbsp;2 of
   * the SBML specification.
   *
   * Since SBML Level&nbsp;2 does not have the ability to associate units with
   * pure numbers, the value should be set to @c false when parsing text-string
   * formulas intended for use in SBML Level&nbsp;2 documents.
   *
   * @return A bool indicating whether to parse units:
   * @li @link libsbmlcs.libsbml.L3P_PARSE_UNITS L3P_PARSE_UNITS@endlink
   * (value = @c true): parse units in the text-string formula.
   * @li @link libsbmlcs.libsbml.L3P_NO_UNITS L3P_NO_UNITS@endlink (value = @c
   * false): treat units in the text-string formula as errors.
   *
   * @see setParseUnits(@if java bool units@endif)
   */ public
";


%csmethodmodifiers L3ParserSettings::setParseAvogadroCsymbol(bool l2only) "
/**
   * Sets the parser\'s behavior in handling the string @c avogadro in
   * mathematical formulas.
   *
   * SBML Level&nbsp;3 defines a symbol for representing the value of
   * Avogadro\'s constant, but it is not defined in SBML Level&nbsp;2.  As a
   * result, the text-string formula parser must behave differently
   * depending on which SBML Level is being targeted.  The argument to this
   * method can be one of two values:
   *
   * @li @link libsbmlcs.libsbml.L3P_AVOGADRO_IS_CSYMBOL
   * L3P_AVOGADRO_IS_CSYMBOL@endlink (value = @c true): tells the parser to
   * translate the string @c avogadro (in any capitalization) into an AST
   * node of type @link libsbmlcs.libsbml.AST_NAME_AVOGADRO
   * AST_NAME_AVOGADRO@endlink.
   * @li @link libsbmlcs.libsbml.L3P_AVOGADRO_IS_NAME
   * L3P_AVOGADRO_IS_NAME@endlink (value = @c false): tells the parser to
   * translate the string @c avogadro into an AST of type @link
   * libsbmlcs.libsbml.AST_NAME AST_NAME@endlink.
   *
   * Since SBML Level&nbsp;2 does not define a symbol for Avogadro\'s
   * constant, the value should be set to @c false when parsing text-string
   * formulas intended for use in SBML Level&nbsp;2 documents.
   *
   * @param l2only a bool value (one of the constants
   * @link libsbmlcs.libsbml.L3P_AVOGADRO_IS_CSYMBOL
   * L3P_AVOGADRO_IS_CSYMBOL@endlink or
   * @link libsbmlcs.libsbml.L3P_AVOGADRO_IS_NAME
   * L3P_AVOGADRO_IS_NAME@endlink) indicating how the string @c avogadro
   * should be treated when encountered in a formula.
   *
   * @see getParseAvogadroCsymbol()
   */ public
";


%csmethodmodifiers L3ParserSettings::getParseAvogadroCsymbol() const "
/**
   * Returns @c true if the current settings are oriented towards handling
   * @c avogadro for SBML Level&nbsp;3.
   *
   * SBML Level&nbsp;3 defines a symbol for representing the value of
   * Avogadro\'s constant, but it is not defined in SBML Level&nbsp;2.  As a
   * result, the text-string formula parser must behave differently
   * depending on which SBML Level is being targeted.
   *
   * @return A bool indicating which mode is currently set; the value is
   * one of the following possibilities:
   * @li @link libsbmlcs.libsbml.L3P_AVOGADRO_IS_CSYMBOL
   * L3P_AVOGADRO_IS_CSYMBOL@endlink (value = @c true): tells the parser to
   * translate the string @c avogadro (in any capitalization) into an AST
   * node of type @link libsbmlcs.libsbml.AST_NAME_AVOGADRO
   * AST_NAME_AVOGADRO@endlink.
   * @li @link libsbmlcs.libsbml.L3P_AVOGADRO_IS_NAME
   * L3P_AVOGADRO_IS_NAME@endlink (value = @c false): tells the parser to
   * translate the string @c avogadro into an AST of type @link
   * libsbmlcs.libsbml.AST_NAME AST_NAME@endlink.
   *
   * @see setParseAvogadroCsymbol(@if java bool l2only@endif)
   */ public
";


%typemap(csimports) XMLAttributes "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Representation of attributes on an XML node.
 *
 * @htmlinclude not-sbml-warning.html
 *
 * 
 */
"


%typemap(csimports) XMLConstructorException "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Class of exceptions thrown by constructors of some
 * libSBML objects.
 *
 * @htmlinclude not-sbml-warning.html
 *
 * In some situations, constructors for SBML objects may need to indicate
 * to callers that the creation of the object failed.  The failure may be
 * for different reasons, such as an attempt to use invalid parameters or a
 * system condition such as a memory error.  To communicate this to
 * callers, those classes will throw an XMLConstructorException.  @if cpp
 * Callers can use the standard C++ <code>std::exception</code> method
 * <code>what()</code> to extract the diagnostic message stored with the
 * exception.@endif
 * <p>
 * In languages that don\'t have an exception mechanism (e.g., C), the
 * constructors generally try to return an error code instead of throwing
 * an exception.
 *
 * @see SBMLConstructorException
 */
"


%csmethodmodifiers XMLAttributes::XMLAttributes "
/**
   * Creates a new empty XMLAttributes set.
   */ public
";


%csmethodmodifiers XMLAttributes::XMLAttributes(const XMLAttributes& orig) "
/**
   * Copy constructor; creates a copy of this XMLAttributes set.
   *
   * @p orig the XMLAttributes object to copy.
   *
   * @throws @if python ValueError @else XMLConstructorException @endif
   * Thrown if the argument @p orig is @c null.
   */ public
";


%csmethodmodifiers XMLAttributes::clone() const "
/**
   * Creates and returns a deep copy of this XMLAttributes set.
   * 
   * @return a (deep) copy of this XMLAttributes set.
   */ public
";


%csmethodmodifiers XMLAttributes::add(  const std::string& name , const std::string& value , const std::string& namespaceURI = "" , const std::string& prefix = "") "
/**
   * Adds an attribute (a name/value pair) to this XMLAttributes object,
   * optionally with a prefix and URI defining a namespace.
   *
   * @param name a string, the local name of the attribute.
   * @param value a string, the value of the attribute.
   * @param namespaceURI a string, the namespace URI of the attribute.
   * @param prefix a string, the prefix of the namespace
   *
   * @return an integer code indicating the success or failure of the
   * function.  The possible values returned by this
   * function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   *
   * @note if local name with the same namespace URI already exists in this 
   * attribute set, its value and prefix will be replaced.
   *
   * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
   */ public
";


%csmethodmodifiers XMLAttributes::add( const XMLTriple& triple, const std::string& value) "
/**
   * Adds an attribute with the given XMLTriple/value pair to this XMLAttributes set.
   *
   * @note if local name with the same namespace URI already exists in this attribute set, 
   * its value and prefix will be replaced.
   *
   * @param triple an XMLTriple, the XML triple of the attribute.
   * @param value a string, the value of the attribute.
   *
   * @return integer value indicating success/failure of the
   * function. The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   */ public
";


%csmethodmodifiers XMLAttributes::addResource(const std::string& name, const std::string& value) "
/**
   * Adds an name/value pair to this XMLAttributes set.  
   *
   * This method is similar to the add method but an attribute with same name wont 
   * be overwritten. This facilitates the addition of multiple resource attributes 
   * in CVTerm class.
   *
   * @param name a string, the name of the attribute.
   * @param value a string, the value of the attribute.
   *
   * @note This function is only internally used to store multiple rdf:resource 
   * attributes in CVTerm class, and thus should not be used for other purposes.
   *
   * @return integer value indicating success/failure of the
   * function. The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   */ /* libsbml-internal */ public
";


%csmethodmodifiers XMLAttributes::removeResource(int n) "
/**
   * Removes an attribute with the given index from this XMLAttributes set.  
   *
   * @param n an integer the index of the resource to be deleted
   * @return integer value indicating success/failure of the
   * function. The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INDEX_EXCEEDS_SIZE LIBSBML_INDEX_EXCEEDS_SIZE @endlink
   */ public
";


%csmethodmodifiers XMLAttributes::remove(int n) "
/**
   * Removes an attribute with the given index from this XMLAttributes set.  
   * (This function is an alias of XMLAttributes::removeResource(@if java int n@endif) ).
   *
   * @param n an integer the index of the resource to be deleted
   *
   * @return integer value indicating success/failure of the
   * function. The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INDEX_EXCEEDS_SIZE LIBSBML_INDEX_EXCEEDS_SIZE @endlink
   */ public
";


%csmethodmodifiers XMLAttributes::remove(const std::string& name, const std::string& uri = "") "
/**
   * Removes an attribute with the given local name and namespace URI from 
   * this XMLAttributes set.  
   *
   * @param name   a string, the local name of the attribute.
   * @param uri    a string, the namespace URI of the attribute.
   *
   * @return integer value indicating success/failure of the
   * function. The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INDEX_EXCEEDS_SIZE LIBSBML_INDEX_EXCEEDS_SIZE @endlink
   */ public
";


%csmethodmodifiers XMLAttributes::remove(const XMLTriple& triple) "
/**
   * Removes an attribute with the given XMLTriple from this XMLAttributes set.  
   *
   * @param triple an XMLTriple, the XML triple of the attribute.
   *
   * @return integer value indicating success/failure of the
   * function. The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INDEX_EXCEEDS_SIZE LIBSBML_INDEX_EXCEEDS_SIZE @endlink
   */ public
";


%csmethodmodifiers XMLAttributes::clear "
/**
   * Clears (deletes) all attributes in this XMLAttributes object.
   *
   * @return integer value indicating success/failure of the
   * function. The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   */ public
";


%csmethodmodifiers XMLAttributes::getIndex(const std::string& name) const "
/**
   * Return the index of an attribute with the given name.
   *
   * @note A namespace bound to the name is not checked by this function.
   * Thus, if there are multiple attributes with the given local name and
   * different namespaces, the smallest index among those attributes will
   * be returned.  XMLAttributes::getIndex(string name, string uri) or
   * XMLAttributes::getIndex(XMLTriple triple) should be used to get an index of an
   * attribute with the given local name and namespace.
   *
   * @param name a string, the local name of the attribute for which the 
   * index is required.
   *
   * @return the index of an attribute with the given local name, or -1 if not present.
   */ public
";


%csmethodmodifiers XMLAttributes::getIndex(const std::string& name, const std::string& uri) const "
/**
   * Return the index of an attribute with the given local name and namespace URI.
   *
   * @param name a string, the local name of the attribute.
   * @param uri  a string, the namespace URI of the attribute.
   *
   * @return the index of an attribute with the given local name and namespace URI, 
   * or -1 if not present.
   */ public
";


%csmethodmodifiers XMLAttributes::getIndex(const XMLTriple& triple) const "
/**
   * Return the index of an attribute with the given XMLTriple.
   *
   * @param triple an XMLTriple, the XML triple of the attribute for which 
   *        the index is required.
   *
   * @return the index of an attribute with the given XMLTriple, or -1 if not present.
   */ public
";


%csmethodmodifiers XMLAttributes::getLength() const "
/**
   * Return the number of attributes in the set.
   *
   * @return the number of attributes in this XMLAttributes set.
   */ public
";


%csmethodmodifiers XMLAttributes::getNumAttributes() const "
/**
   * Return the number of attributes in the set.
   *
   * @return the number of attributes in this XMLAttributes set.
   *
   * This function is an alias for getLength introduced for consistency
   * with other XML classes.
   */ public
";


%csmethodmodifiers XMLAttributes::getName(int index) const "
/**
   * Return the local name of an attribute in this XMLAttributes set (by position).
   *
   * @param index an integer, the position of the attribute whose local name is 
   * required.
   *
   * @return the local name of an attribute in this list (by position).  
   *
   * @note If index is out of range, an empty string will be returned.  Use
   * XMLAttributes::hasAttribute(int index) to test for the attribute
   * existence.
   */ public
";


%csmethodmodifiers XMLAttributes::getPrefix(int index) const "
/**
   * Return the prefix of an attribute in this XMLAttributes set (by position).
   *
   * @param index an integer, the position of the attribute whose prefix is 
   * required.
   *
   * @return the namespace prefix of an attribute in this list (by
   * position).  
   *
   * @note If index is out of range, an empty string will be returned. Use
   * XMLAttributes::hasAttribute(int index) to test for the attribute
   * existence.
   */ public
";


%csmethodmodifiers XMLAttributes::getPrefixedName(int index) const "
/**
   * Return the prefixed name of an attribute in this XMLAttributes set (by position).
   *
   * @param index an integer, the position of the attribute whose prefixed 
   * name is required.
   *
   * @return the prefixed name of an attribute in this list (by
   * position).  
   *
   * @note If index is out of range, an empty string will be returned.  Use
   * XMLAttributes::hasAttribute(int index) to test for attribute existence.
   */ public
";


%csmethodmodifiers XMLAttributes::getURI(int index) const "
/**
   * Return the namespace URI of an attribute in this XMLAttributes set (by position).
   *
   * @param index an integer, the position of the attribute whose namespace URI is 
   * required.
   *
   * @return the namespace URI of an attribute in this list (by position).
   *
   * @note If index is out of range, an empty string will be returned.  Use
   * XMLAttributes::hasAttribute(int index) to test for attribute existence.
   */ public
";


%csmethodmodifiers XMLAttributes::getValue(int index) const "
/**
   * Return the value of an attribute in this XMLAttributes set (by position).
   *
   * @param index an integer, the position of the attribute whose value is 
   * required.
   *
   * @return the value of an attribute in the list (by position).  
   *
   * @note If index is out of range, an empty string will be returned.  Use
   * XMLAttributes::hasAttribute(int index) to test for attribute existence.
   */ public
";


%csmethodmodifiers XMLAttributes::getValue(const std::string name) const "
/**
   * Return an attribute\'s value by name.
   *
   * @param name a string, the local name of the attribute whose value is required.
   *
   * @return The attribute value as a string.  
   *
   * @note If an attribute with the given local name does not exist, an
   * empty string will be returned.  Use
   * XMLAttributes::hasAttribute(string name, string uri) const
   * to test for attribute existence.  A namespace bound to the local name
   * is not checked by this function.  Thus, if there are multiple
   * attributes with the given local name and different namespaces, the
   * value of an attribute with the smallest index among those attributes
   * will be returned.  XMLAttributes::getValue(string name) or
   * XMLAttributes::getValue(XMLTriple triple) should be used to get a value of an
   * attribute with the given local name and namespace.
   */ public
";


%csmethodmodifiers XMLAttributes::getValue(const std::string name, const std::string uri) const "
/**
   * Return a value of an attribute with the given local name and namespace URI.
   *
   * @param name a string, the local name of the attribute whose value is required.
   * @param uri  a string, the namespace URI of the attribute.
   *
   * @return The attribute value as a string.  
   *
   * @note If an attribute with the given local name and namespace URI does
   * not exist, an empty string will be returned.  Use
   * XMLAttributes::hasAttribute(string name, string uri) const
   * to test for attribute existence.
   */ public
";


%csmethodmodifiers XMLAttributes::getValue(const XMLTriple& triple) const "
/**
   * Return a value of an attribute with the given XMLTriple.
   *
   * @param triple an XMLTriple, the XML triple of the attribute whose 
   *        value is required.
   *
   * @return The attribute value as a string.  
   *
   * @note If an attribute with the given XMLTriple does not exist, an
   * empty string will be returned.  Use
   * XMLAttributes::hasAttribute(XMLTriple triple) to test for attribute existence.
   */ public
";


%csmethodmodifiers XMLAttributes::hasAttribute(int index) const "
/**
   * Predicate returning @c true or @c false depending on whether
   * an attribute with the given index exists in this XMLAttributes.
   *
   * @param index an integer, the position of the attribute.
   *
   * @return @c true if an attribute with the given index exists in this
   * XMLAttributes, @c false otherwise.
   */ public
";


%csmethodmodifiers XMLAttributes::hasAttribute(const std::string name, const std::string uri="") const "
/**
   * Predicate returning @c true or @c false depending on whether
   * an attribute with the given local name and namespace URI exists in this 
   * XMLAttributes.
   *
   * @param name a string, the local name of the attribute.
   * @param uri  a string, the namespace URI of the attribute.
   *
   * @return @c true if an attribute with the given local name and namespace 
   * URI exists in this XMLAttributes, @c false otherwise.
   */ public
";


%csmethodmodifiers XMLAttributes::hasAttribute(const XMLTriple& triple) const "
/**
   * Predicate returning @c true or @c false depending on whether
   * an attribute with the given XML triple exists in this XMLAttributes.
   *
   * @param triple an XMLTriple, the XML triple of the attribute 
   *
   * @return @c true if an attribute with the given XML triple exists in this
   * XMLAttributes, @c false otherwise.
   *
   */ public
";


%csmethodmodifiers XMLAttributes::isEmpty() const "
/**
   * Predicate returning @c true or @c false depending on whether 
   * this XMLAttributes set is empty.
   * 
   * @return @c true if this XMLAttributes set is empty, @c false otherwise.
   */ public
";


%csmethodmodifiers XMLAttributes::readInto "
/**
   * Reads the value for the attribute name into value.  If the given local
   * name was not found or value could be interpreted as a bool, value 
   * is not modified.
   *
   * According to the W3C XML Schema, valid bool values are: \'true\',
   * \'false\', \'1\', and \'0\' (case-insensitive).  For more information, see:
   * http://www.w3.org/TR/xmlschema-2/#bool
   *
   * If an XMLErrorLog is passed in datatype format errors are logged.  If
   * required is true, missing attributes are also logged.
   *
   *
   * @param name a string, the local name of the attribute.
   * @param value a bool, the value of the attribute.
   * @param log an XMLErrorLog, the error log.
   * @param required a bool, indicating whether the attribute is required.
   * @param line a long integer, the line number at which the error occured.
   * @param column a long integer, the column number at which the error occured.
   *
   * @returns @c true if the attribute was read into value, @c false otherwise.
   *
   * @note A namespace bound to the given local name is not checked by this
   * function. XMLAttributes::readInto(XMLTriple, bool&, ...) should
   * be used to read a value for an attribute name with a prefix and
   * namespace.
   *
   * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
   */ public
";


%csmethodmodifiers XMLAttributes::readInto "
/**
   * Reads the value for the attribute with the given XMLTriple into value.  
   * If the XMLTriple was not found or value could be interpreted as a bool, 
   * value is not modified.
   *
   * According to the W3C XML Schema, valid bool values are: \'true\',
   * \'false\', \'1\', and \'0\' (case-insensitive).  For more information, see:
   * http://www.w3.org/TR/xmlschema-2/#bool
   *
   * If an XMLErrorLog is passed in datatype format errors are logged.  If
   * required is true, missing attributes are also logged.
   *
   *
   * @param triple an XMLTriple, the XML triple of the attribute.
   * @param value a bool, the value of the attribute.
   * @param log an XMLErrorLog, the error log.
   * @param required a bool, indicating whether the attribute is required.
   * @param line a long integer, the line number at which the error occured.
   * @param column a long integer, the column number at which the error occured.
   *
   * @returns @c true if the attribute was read into value, @c false otherwise.
   *
   * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
   */ public
";


%csmethodmodifiers XMLAttributes::readInto "
/**
   * Reads the value for the attribute name into value.  If the given local
   * name was not found or value could be interpreted as a double, value is 
   * not modified.
   *
   * According to the W3C XML Schema, valid doubles are the same as valid
   * doubles for C and the special values \'INF\', \'-INF\', and \'NaN\'
   * (case-sensitive).  For more information, see:
   * http://www.w3.org/TR/xmlschema-2/#double
   *
   * If an XMLErrorLog is passed in datatype format errors are logged.  If
   * required is true, missing attributes are also logged.
   *
   * @param name a string, the local name of the attribute.
   * @param value a double, the value of the attribute.
   * @param log an XMLErrorLog, the error log.
   * @param required a bool, indicating whether the attribute is required.
   * @param line a long integer, the line number at which the error occured.
   * @param column a long integer, the column number at which the error occured.
   *
   * @returns @c true if the attribute was read into value, @c false otherwise.
   *
   * @note A namespace bound to the given local name is not checked by this
   * function.  XMLAttributes::readInto(XMLTriple, double&, ...) const
   * should be used to read a value for an attribute name with a prefix and
   * namespace.
   *
   * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
   */ public
";


%csmethodmodifiers XMLAttributes::readInto "
/**
   * Reads the value for the attribute with the given XMLTriple into value.  
   * If the triple was not found or value could be interpreted as a double, 
   *value is not modified.
   *
   * According to the W3C XML Schema, valid doubles are the same as valid
   * doubles for C and the special values \'INF\', \'-INF\', and \'NaN\'
   * (case-sensitive).  For more information, see:
   * http://www.w3.org/TR/xmlschema-2/#double
   *
   * If an XMLErrorLog is passed in datatype format errors are logged.  If
   * required is true, missing attributes are also logged.
   *
   * @param triple an XMLTriple, the XML triple of the attribute.
   * @param value a double, the value of the attribute.
   * @param log an XMLErrorLog, the error log.
   * @param required a bool, indicating whether the attribute is required.
   * @param line a long integer, the line number at which the error occured.
   * @param column a long integer, the column number at which the error occured.
   *
   * @returns @c true if the attribute was read into value, @c false otherwise.
   *
   * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
   */ public
";


%csmethodmodifiers XMLAttributes::readInto "
/**
   * Reads the value for the attribute name into value.  If the given local
   * name was not found or value could be interpreted as an long, value is 
   * not modified.
   *
   * According to the W3C XML Schema valid integers include zero, *all*
   * positive and *all* negative whole numbers.  For practical purposes, we
   * limit values to what can be stored in a long.  For more information,
   * see: http://www.w3.org/TR/xmlschema-2/#integer
   *
   * If an XMLErrorLog is passed in datatype format errors are logged.  If
   * required is true, missing attributes are also logged.
   *
   * @param name a string, the local name of the attribute.
   * @param value a long, the value of the attribute.
   * @param log an XMLErrorLog, the error log.
   * @param required a bool, indicating whether the attribute is required.
   * @param line a long integer, the line number at which the error occured.
   * @param column a long integer, the column number at which the error occured.
   *
   * @returns @c true if the attribute was read into value, @c false otherwise.
   *
   * @note A namespace bound to the given local name is not checked by this
   * function.  XMLAttributes::readInto(XMLTriple, long&, ...) should
   * be used to read a value for an attribute name with a prefix and
   * namespace.
   *
   * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
   */ public
";


%csmethodmodifiers XMLAttributes::readInto "
/**
   * Reads the value for the attribute XMLTriple into value.  
   * If the XMLTriple was not found or value could be interpreted as a long, 
   * value is not modified.
   *
   * According to the W3C XML Schema valid integers include zero, *all*
   * positive and *all* negative whole numbers.  For practical purposes, we
   * limit values to what can be stored in a long.  For more information,
   * see: http://www.w3.org/TR/xmlschema-2/#integer
   *
   * If an XMLErrorLog is passed in datatype format errors are logged.  If
   * required is true, missing attributes are also logged.
   *
   * @param triple an XMLTriple, the XML triple of the attribute.
   * @param value a long, the value of the attribute.
   * @param log an XMLErrorLog, the error log.
   * @param required a bool, indicating whether the attribute is required.
   * @param line a long integer, the line number at which the error occured.
   * @param column a long integer, the column number at which the error occured.
   *
   * @returns @c true if the attribute was read into value, @c false otherwise.
   *
   * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
   */ public
";


%csmethodmodifiers XMLAttributes::readInto "
/**
   * Reads the value for the attribute name into value.  If the given local
   * name was not found or value could be interpreted as an int, value is 
   * not modified.
   *
   * According to the W3C XML Schema valid integers include zero, *all*
   * positive and *all* negative whole numbers.  For practical purposes, we
   * limit values to what can be stored in a int.  For more information,
   * see: http://www.w3.org/TR/xmlschema-2/#integer
   *
   * If an XMLErrorLog is passed in datatype format errors are logged.  If
   * required is true, missing attributes are also logged.
   *
   * @param name a string, the local name of the attribute.
   * @param value an integer, the value of the attribute.
   * @param log an XMLErrorLog, the error log.
   * @param required a bool, indicating whether the attribute is required.
   * @param line a long integer, the line number at which the error occured.
   * @param column a long integer, the column number at which the error occured.
   *
   * @returns @c true if the attribute was read into value, @c false otherwise.
   *
   * @note A namespace bound to the given local name is not checked by this
   * function.  XMLAttributes::readInto(XMLTriple, int&, ...) should
   * be used to read a value for an attribute name with a prefix and
   * namespace.
   *
   * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
   */ public
";


%csmethodmodifiers XMLAttributes::readInto "
/**
   * Reads the value for the attribute with the given XMLTriple into value.  
   * If the XMLTriple was not found or value could be interpreted as an int, 
   * value is not modified.
   *
   * According to the W3C XML Schema valid integers include zero, *all*
   * positive and *all* negative whole numbers.  For practical purposes, we
   * limit values to what can be stored in a int.  For more information,
   * see: http://www.w3.org/TR/xmlschema-2/#integer
   *
   * If an XMLErrorLog is passed in datatype format errors are logged.  If
   * required is true, missing attributes are also logged.
   *
   * @param triple an XMLTriple, the XML triple of the attribute.
   * @param value an integer, the value of the attribute.
   * @param log an XMLErrorLog, the error log.
   * @param required a bool, indicating whether the attribute is required.
   * @param line a long integer, the line number at which the error occured.
   * @param column a long integer, the column number at which the error occured.
   *
   * @returns @c true if the attribute was read into value, @c false otherwise.
   *
   * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
   */ public
";


%csmethodmodifiers XMLAttributes::readInto "
/**
   * Reads the value for the attribute name into value.  If the given local
   * name was not found or value could be interpreted as a long integer, 
   * value is not modified.
   *
   * According to the W3C XML Schema valid integers include zero, *all*
   * positive and *all* negative whole numbers.  For practical purposes, we
   * limit values to what can be stored in a long.  For more
   * information, see: http://www.w3.org/TR/xmlschema-2/#integer
   *
   * If an XMLErrorLog is passed in datatype format errors are logged.  If
   * required is true, missing attributes are also logged.
   *
   * @param name a string, the local name of the attribute.
   * @param value a long integereger, the value of the attribute.
   * @param log an XMLErrorLog, the error log.
   * @param required a bool, indicating whether the attribute is required.
   * @param line a long integer, the line number at which the error occured.
   * @param column a long integer, the column number at which the error occured.
   *
   * @returns @c true if the attribute was read into value, @c false otherwise.
   *
   * @note A namespace bound to the given local name is not checked by this
   * function.  XMLAttributes::readInto(XMLTriple, long&,
   * ...) should be used to read a value for an attribute name with a
   * prefix and namespace.
   *
   * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
   */ public
";


%csmethodmodifiers XMLAttributes::readInto "
/**
   * Reads the value for the attribute with the given XMLTriple into value.  
   * If the XMLTriple was not found or value could be interpreted as a long integer, 
   * value is not modified.
   *
   * According to the W3C XML Schema valid integers include zero, *all*
   * positive and *all* negative whole numbers.  For practical purposes, we
   * limit values to what can be stored in a long.  For more
   * information, see: http://www.w3.org/TR/xmlschema-2/#integer
   *
   * If an XMLErrorLog is passed in datatype format errors are logged.  If
   * required is true, missing attributes are also logged.
   *
   * @param triple an XMLTriple, the XML triple of the attribute.
   * @param value a long integereger, the value of the attribute.
   * @param log an XMLErrorLog, the error log.
   * @param required a bool, indicating whether the attribute is required.
   * @param line a long integer, the line number at which the error occured.
   * @param column a long integer, the column number at which the error occured.
   *
   * @returns @c true if the attribute was read into value, @c false otherwise.
   *
   * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
   */ public
";


%csmethodmodifiers XMLAttributes::readInto "
/**
   * Reads the value for the attribute name into value.  If the given local
   * name was not found, value is not modified.
   *
   * If an XMLErrorLog is passed in and required is true, missing
   * attributes are logged.
   *
   * @param name a string, the local name of the attribute.
   * @param value a string, the value of the attribute.
   * @param log an XMLErrorLog, the error log.
   * @param required a bool, indicating whether the attribute is required.
   * @param line a long integer, the line number at which the error occured.
   * @param column a long integer, the column number at which the error occured.
   *
   * @returns @c true if the attribute was read into value, @c false otherwise.
   *
   * @note A namespace bound to the given local name is not checked by this
   * function. XMLAttributes::readInto(XMLTriple, string&, ...) const
   * should be used to read a value for an attribute name with a prefix and
   * namespace.
   *
   * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
   */ public
";


%csmethodmodifiers XMLAttributes::readInto "
/**
   * Reads the value for the attribute with the given XMLTriple into value.  
   * If the XMLTriple was not found, value is not modified.
   *
   * If an XMLErrorLog is passed in and required is true, missing
   * attributes are logged.
   *
   * @param triple an XMLTriple, the XML triple of the attribute.
   * @param value a string, the value of the attribute.
   * @param log an XMLErrorLog, the error log.
   * @param required a bool, indicating whether the attribute is required.
   * @param line a long integer, the line number at which the error occured.
   * @param column a long integer, the column number at which the error occured.
   *
   * @returns @c true if the attribute was read into value, @c false otherwise.
   *
   * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
   */ public
";


%csmethodmodifiers XMLAttributes::write(XMLOutputStream& stream) const "
/**
   * Writes this XMLAttributes set to stream.
   *
   * @param stream XMLOutputStream, stream to which this XMLAttributes
   * set is to be written.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers XMLAttributes::setErrorLog(XMLErrorLog* log) "
/**
   * (Optional) Sets the log used when logging attributeTypeError() and
   * attributeRequired() errors.
   *
   * @param log the log to use
   *
   * @return integer value indicating success/failure of the
   * function. The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   */ /* libsbml-internal */ public
";


%csmethodmodifiers XMLAttributes::attributeTypeError "
/**
   * Logs an attribute datatype error.
   *
   * @param name  name of the attribute
   * @param type  the datatype of the attribute value.
   * @param log   the XMLErrorLog where the error should be logged
   * @param line a long integer, the line number at which the error occured.
   * @param column a long integer, the column number at which the error occured.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers XMLAttributes::attributeRequiredError "
/**
   * Logs an error indicating a required attribute was missing.
   * Used internally.
   * 
   * @param name  name of the attribute
   * @param log   the XMLErrorLog where the error should be logged
   * @param line a long integer, the line number at which the error occured.
   * @param column a long integer, the column number at which the error occured.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers XMLAttributes::readInto "
/**
   * Reads the value for the attribute with the given index into value.  
   * If the attribute was not found or value could be interpreted as a bool, 
   * value is not modified.
   *
   * According to the W3C XML Schema, valid bool values are: \'true\',
   * \'false\', \'1\', and \'0\' (case-insensitive).  For more information, see:
   * http://www.w3.org/TR/xmlschema-2/#bool
   *
   * If an XMLErrorLog is passed in datatype format errors are logged.  If
   * required is true, missing attributes are also logged.
   *
   *
   * @param index a int, the index of the attribute.
   * @param name a string, the name of the attribute 
   * (only used for an error message (if error detected))
   * @param value a bool, the value of the attribute.
   * @param log an XMLErrorLog, the error log.
   * @param required a bool, indicating whether the attribute is required.
   * @param line a long integer, the line number at which the error occured.
   * @param column a long integer, the column number at which the error occured.
   *
   * @returns @c true if the attribute was read into value, @c false otherwise.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers XMLAttributes::readInto "
/**
   * Reads the value for the attribute with the given index into value.  
   * If name was not found or value could be interpreted as a double, value 
   * is not modified.
   *
   * According to the W3C XML Schema, valid doubles are the same as valid
   * doubles for C and the special values \'INF\', \'-INF\', and \'NaN\'
   * (case-sensitive).  For more information, see:
   * http://www.w3.org/TR/xmlschema-2/#double
   *
   * If an XMLErrorLog is passed in datatype format errors are logged.  If
   * required is true, missing attributes are also logged.
   *
   * @param index a int, the index of the attribute.
   * @param name a string, the name of the attribute
   * (only used for an error message (if error detected))
   * @param value a double, the value of the attribute.
   * @param log an XMLErrorLog, the error log.
   * @param required a bool, indicating whether the attribute is required.
   * @param line a long integer, the line number at which the error occured.
   * @param column a long integer, the column number at which the error occured.
   *
   * @returns @c true if the attribute was read into value, @c false otherwise.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers XMLAttributes::readInto "
/**
   * Reads the value for the attribute with the given index into value.  
   * If the attribute was not found or value could be interpreted as a long, 
   * value is not modified.
   *
   * According to the W3C XML Schema valid integers include zero, *all*
   * positive and *all* negative whole numbers.  For practical purposes, we
   * limit values to what can be stored in a long.  For more information,
   * see: http://www.w3.org/TR/xmlschema-2/#integer
   *
   * If an XMLErrorLog is passed in datatype format errors are logged.  If
   * required is true, missing attributes are also logged.
   *
   * @param index a int, the index of the attribute.
   * @param name a string, the name of the attribute
   * (only used for an error message (if error detected))
   * @param value a long, the value of the attribute.
   * @param log an XMLErrorLog, the error log.
   * @param required a bool, indicating whether the attribute is required.
   * @param line a long integer, the line number at which the error occured.
   * @param column a long integer, the column number at which the error occured.
   *
   * @returns @c true if the attribute was read into value, @c false otherwise.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers XMLAttributes::readInto "
/**
   * Reads the value for the attribute with the given index into value.  
   * If the attribute was not found or value could be interpreted as an integer, 
   * value is not modified.
   *
   * According to the W3C XML Schema valid integers include zero, *all*
   * positive and *all* negative whole numbers.  For practical purposes, we
   * limit values to what can be stored in a int.  For more information,
   * see: http://www.w3.org/TR/xmlschema-2/#integer
   *
   * If an XMLErrorLog is passed in datatype format errors are logged.  If
   * required is true, missing attributes are also logged.
   *
   * @param index a int, the index of the attribute.
   * @param name a string, the name of the attribute
   * (only used for an error message (if error detected))
   * @param value an integer, the value of the attribute.
   * @param log an XMLErrorLog, the error log.
   * @param required a bool, indicating whether the attribute is required.
   * @param line a long integer, the line number at which the error occured.
   * @param column a long integer, the column number at which the error occured.
   *
   * @returns @c true if the attribute was read into value, @c false otherwise.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers XMLAttributes::readInto "
/**
   * Reads the value for the attribute with the given index into value.  
   * If the attribute was not found or value could be interpreted as an 
   * long, value is not modified.
   *
   * According to the W3C XML Schema valid integers include zero, *all*
   * positive and *all* negative whole numbers.  For practical purposes, we
   * limit values to what can be stored in a long.  For more
   * information, see: http://www.w3.org/TR/xmlschema-2/#integer
   *
   * If an XMLErrorLog is passed in datatype format errors are logged.  If
   * required is true, missing attributes are also logged.
   *
   * @param index a int, the index of the attribute.
   * @param name a string, the name of the attribute
   * (only used for an error message (if error detected))
   * @param value a long integereger, the value of the attribute.
   * @param log an XMLErrorLog, the error log.
   * @param required a bool, indicating whether the attribute is required.
   * @param line a long integer, the line number at which the error occured.
   * @param column a long integer, the column number at which the error occured.
   *
   * @returns @c true if the attribute was read into value, @c false otherwise.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers XMLAttributes::readInto "
/**
   * Reads the value for the attribute with the given index into value.  
   * If the attribute was not found, value is not modified.
   *
   * If an XMLErrorLog is passed in and required is true, missing
   * attributes are logged.
   *
   * @param index a int, the index of the attribute.
   * @param name a string, the name of the attribute
   * (only used for an error message (if error detected))
   * @param value a string, the value of the attribute.
   * @param log an XMLErrorLog, the error log.
   * @param required a bool, indicating whether the attribute is required.
   * @param line a long integer, the line number at which the error occured.
   * @param column a long integer, the column number at which the error occured.
   *
   * @returns @c true if the attribute was read into value, @c false otherwise.
   */ /* libsbml-internal */ public
";


%typemap(csimports) XMLConstructorException "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Class of exceptions thrown by constructors of some
 * libSBML objects.
 *
 * @htmlinclude not-sbml-warning.html
 *
 * In some situations, constructors for SBML objects may need to indicate
 * to callers that the creation of the object failed.  The failure may be
 * for different reasons, such as an attempt to use invalid parameters or a
 * system condition such as a memory error.  To communicate this to
 * callers, those classes will throw an XMLConstructorException.  @if cpp
 * Callers can use the standard C++ <code>std::exception</code> method
 * <code>what()</code> to extract the diagnostic message stored with the
 * exception.@endif
 * <p>
 * In languages that don\'t have an exception mechanism (e.g., C), the
 * constructors generally try to return an error code instead of throwing
 * an exception.
 *
 * @see SBMLConstructorException
 */
"


%typemap(csimports) XMLNamespaces "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Representation of XML Namespaces.
 *
 * @htmlinclude not-sbml-warning.html
 *
 * This class serves to organize functionality for tracking XML namespaces
 * in a document or data stream.  The namespace declarations are stored as
 * a list of pairs of XML namespace URIs and prefix strings.  These
 * correspond to the parts of a namespace declaration on an XML element.
 * For example, in the following XML fragment,
 * @verbatim
<annotation>
    <mysim:nodecolors xmlns:mysim=\'urn:lsid:mysim.org\'
         mysim:bgcolor=\'green\' mysim:fgcolor=\'white\'/>
</annotation>
@endverbatim
 * there is one namespace declaration.  Its URI is
 * <code>urn:lsid:mysim.org</code> and its prefix is <code>mysim</code>.
 * This pair could be stored as one item in an XMLNamespaces list.
 *
 * XMLNamespaces provides various methods for manipulating the list of
 * prefix-URI pairs.  Individual namespaces stored in a given XMLNamespace
 * object instance can be retrieved based on their index using
 * XMLNamespaces::getPrefix(int index), or by their characteristics such as
 * their URI or position in the list.
 */
"


%csmethodmodifiers XMLNamespaces::XMLNamespaces "
/**
   * Creates a new empty list of XML namespace declarations.
   */ public
";


%csmethodmodifiers XMLNamespaces::XMLNamespaces(const XMLNamespaces& orig) "
/**
   * Copy constructor; creates a copy of this XMLNamespaces list.
   *
   * @param orig the XMLNamespaces object to copy
   *
   * @throws @if python ValueError @else XMLConstructorException @endif
   * Thrown if the argument @p orig is @c null.
   */ public
";


%csmethodmodifiers XMLNamespaces::clone() const "
/**
   * Creates and returns a deep copy of this XMLNamespaces list.
   * 
   * @return a (deep) copy of this XMLNamespaces list.
   */ public
";


%csmethodmodifiers XMLNamespaces::add(const std::string& uri, const std::string& prefix = "") "
/**
   * Appends an XML namespace prefix and URI pair to this list of namespace
   * declarations.
   *
   * An XMLNamespaces object stores a list of pairs of namespaces and their
   * prefixes.  If there is an XML namespace with the given @p uri prefix
   * in this list, then its corresponding URI will be overwritten by the
   * new @p uri unless the uri represents the core sbml namespace.
   * Calling programs could use one of the other XMLNamespaces
   * methods, such as
   * XMLNamespaces::hasPrefix(@if java String@endif) and 
   * XMLNamespaces::hasURI(@if java String@endif) to
   * inquire whether a given prefix and/or URI
   * is already present in this XMLNamespaces object.
   * If the @p uri represents the sbml namespaces then it will not be
   * overwritten, as this has potentially serious consequences. If it
   * is necessary to replace the sbml namespace the namespace should be removed
   * prior to adding the new namespace.
   *
   * @param uri a string, the uri for the namespace
   * @param prefix a string, the prefix for the namespace
   *
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   *
   * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
   */ public
";


%csmethodmodifiers XMLNamespaces::remove(int index) "
/**
   * Removes an XML Namespace stored in the given position of this list.
   *
   * @param index an integer, position of the namespace to remove.
   *
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INDEX_EXCEEDS_SIZE LIBSBML_INDEX_EXCEEDS_SIZE @endlink
   */ public
";


%csmethodmodifiers XMLNamespaces::remove(const std::string& prefix) "
/**
   * Removes an XML Namespace with the given prefix.
   *
   * @param prefix a string, prefix of the required namespace.
   *
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INDEX_EXCEEDS_SIZE LIBSBML_INDEX_EXCEEDS_SIZE @endlink
   *
   * @see remove(int index)
   */ public
";


%csmethodmodifiers XMLNamespaces::clear "
/**
   * Clears (deletes) all XML namespace declarations in this XMLNamespaces
   * object.
   *
   * @return integer value indicating success/failure of the
   * function. The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED@endlink
   *
   * @see remove(int index)
   */ public
";


%csmethodmodifiers XMLNamespaces::getIndex(const std::string uri) const "
/**
   * Look up the index of an XML namespace declaration by URI.
   *
   * An XMLNamespaces object stores a list of pairs of namespaces and their
   * prefixes.  If this XMLNamespaces object contains a pair with the given
   * URI @p uri, this method returns its index in the list.
   *
   * @param uri a string, the URI of the sought-after namespace.
   *
   * @return the index of the given declaration, or <code>-1</code> if not
   * present.
   */ public
";


%csmethodmodifiers XMLNamespaces::containsUri(const std::string uri) const "
/**
   * Tests whether the given uri is contained in this set of namespaces. 
   * 
   */ public
";


%csmethodmodifiers XMLNamespaces::getIndexByPrefix(const std::string prefix) const "
/**
   * Look up the index of an XML namespace declaration by prefix.
   *
   * An XMLNamespaces object stores a list of pairs of namespaces and their
   * prefixes.  If this XMLNamespaces object contains a pair with the given
   * prefix @p prefix, this method returns its index in the list.
   *
   * @param prefix a string, the prefix string of the sought-after
   * namespace
   *
   * @return the index of the given declaration, or <code>-1</code> if not
   * present.
   */ public
";


%csmethodmodifiers XMLNamespaces::getLength() const "
/**
   * Returns the total number of URI-and-prefix pairs stored in this
   * particular XMLNamespaces instance.
   *
   * @return the number of namespaces in this list.
   */ public
";


%csmethodmodifiers XMLNamespaces::getNumNamespaces() const "
/**
   * Returns the total number of URI-and-prefix pairs stored in this
   * particular XMLNamespaces instance.
   *
   * @return the number of namespaces in this list.
   *
   * This function is an alias for getLength introduced for consistency
   * with other XML classes.
   */ public
";


%csmethodmodifiers XMLNamespaces::getPrefix(int index) const "
/**
   * Look up the prefix of an XML namespace declaration by its position.
   *
   * An XMLNamespaces object stores a list of pairs of namespaces and their
   * prefixes.  This method returns the prefix of the <code>n</code>th
   * element in that list (if it exists).  Callers should use
   * XMLAttributes::getLength() first to find out how many namespaces are
   * stored in the list.
   *
   * @param index an integer, position of the sought-after prefix
   *
   * @return the prefix of an XML namespace declaration in this list (by
   * position), or an empty string if the @p index is out of range
   *
   * @see getLength()
   */ public
";


%csmethodmodifiers XMLNamespaces::getPrefix(const std::string& uri) const "
/**
   * Look up the prefix of an XML namespace declaration by its URI.
   *
   * An XMLNamespaces object stores a list of pairs of namespaces and their
   * prefixes.  This method returns the prefix for a pair that has the
   * given @p uri.
   *
   * @param uri a string, the URI of the prefix being sought
   *
   * @return the prefix of an XML namespace declaration given its URI, or
   * an empty string if no such @p uri exists in this XMLNamespaces object
   */ public
";


%csmethodmodifiers XMLNamespaces::getURI(int index) const "
/**
   * Look up the URI of an XML namespace declaration by its position.
   *
   * An XMLNamespaces object stores a list of pairs of namespaces and their
   * prefixes.  This method returns the URI of the <code>n</code>th element
   * in that list (if it exists).  Callers should use
   * XMLAttributes::getLength() first to find out how many namespaces are
   * stored in the list.
   *
   * @param index an integer, position of the required URI.
   *
   * @return the URI of an XML namespace declaration in this list (by
   * position), or an empty string if the @p index is out of range.
   *
   * @see getLength()
   */ public
";


%csmethodmodifiers XMLNamespaces::getURI(const std::string& prefix = "") const "
/**
   * Look up the URI of an XML namespace declaration by its prefix.
   *
   * An XMLNamespaces object stores a list of pairs of namespaces and their
   * prefixes.  This method returns the namespace URI for a pair that has
   * the given @p prefix.
   *
   * @param prefix a string, the prefix of the required URI
   *
   * @return the URI of an XML namespace declaration having the given @p
   * prefix, or an empty string if no such prefix-and-URI pair exists
   * in this XMLNamespaces object
   *
   * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
   * 
   * @see getURI()
   */ public
";


%csmethodmodifiers XMLNamespaces::isEmpty() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * XMLNamespaces list is empty.
   * 
   * @return @c true if this XMLNamespaces list is empty, @c false otherwise.
   */ public
";


%csmethodmodifiers XMLNamespaces::hasURI(const std::string& uri) const "
/**
   * Predicate returning @c true or @c false depending on whether an XML
   * Namespace with the given URI is contained in this XMLNamespaces list.
   * 
   * @param uri a string, the uri for the namespace
   *
   * @return @c true if an XML Namespace with the given URI is contained in
   * this XMLNamespaces list, @c false otherwise.
   */ public
";


%csmethodmodifiers XMLNamespaces::hasPrefix(const std::string& prefix) const "
/**
   * Predicate returning @c true or @c false depending on whether an XML
   * Namespace with the given prefix is contained in this XMLNamespaces
   * list.
   *
   * @param prefix a string, the prefix for the namespace
   * 
   * @return @c true if an XML Namespace with the given URI is contained in
   * this XMLNamespaces list, @c false otherwise.
   */ public
";


%csmethodmodifiers XMLNamespaces::hasNS(const std::string& uri, const std::string& prefix) const "
/**
   * Predicate returning @c true or @c false depending on whether an XML
   * Namespace with the given URI and prefix pair is contained in this
   * XMLNamespaces list.
   *
   * @param uri a string, the URI for the namespace
   * @param prefix a string, the prefix for the namespace
   * 
   * @return @c true if an XML Namespace with the given uri/prefix pair is
   * contained in this XMLNamespaces list, @c false otherwise.
   */ public
";


%csmethodmodifiers XMLNamespaces::removeDefault "
/**
   * Removes the default XML namespace.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers XMLNamespaces::containIdenticalSetNS(XMLNamespaces* rhs) "
/** */ /* libsbml-internal */ public
";


%typemap(csimports) XMLToken "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Representation of a token in an XML stream.
 *
 * @htmlinclude not-sbml-warning.html
 *
 */
"


%csmethodmodifiers XMLToken::XMLToken "
/**
   * Creates a new empty XMLToken.
   */ public
";


%csmethodmodifiers XMLToken::XMLToken(  const XMLTriple&      triple , const XMLAttributes&  attributes , const XMLNamespaces&  namespaces , const unsigned int    line   = 0 , const unsigned int    column = 0 ) "
/**
   * Creates a start element XMLToken with the given set of attributes and
   * namespace declarations.
   *
   * @param triple XMLTriple.
   * @param attributes XMLAttributes, the attributes to set.
   * @param namespaces XMLNamespaces, the namespaces to set.
   * @param line a long integer, the line number (default = 0).
   * @param column a long integer, the column number (default = 0).
   *
   * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
   */ public
";


%csmethodmodifiers XMLToken::XMLToken(  const XMLTriple&      triple , const XMLAttributes&  attributes , const unsigned int    line   = 0 , const unsigned int    column = 0 ) "
/**
   * Creates a start element XMLToken with the given set of attributes.
   *
   * @param triple XMLTriple.
   * @param attributes XMLAttributes, the attributes to set.
   * @param line a long integer, the line number (default = 0).
   * @param column a long integer, the column number (default = 0).
   *
   * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
   */ public
";


%csmethodmodifiers XMLToken::XMLToken(  const XMLTriple&    triple , const unsigned int  line   = 0 , const unsigned int  column = 0 ) "
/**
   * Creates an end element XMLToken.
   *
   * @param triple XMLTriple.
   * @param line a long integer, the line number (default = 0).
   * @param column a long integer, the column number (default = 0).
   *
   * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
   */ public
";


%csmethodmodifiers XMLToken::XMLToken(  const std::string&  chars , const unsigned int  line   = 0 , const unsigned int  column = 0 ) "
/**
   * Creates a text XMLToken.
   *
   * @param chars a string, the text to be added to the XMLToken
   * @param line a long integer, the line number (default = 0).
   * @param column a long integer, the column number (default = 0).
   *
   * @throws @if python ValueError @else XMLConstructorException @endif
   * Thrown if the argument @p orig is @c null.
   *
   * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
   */ public
";


%csmethodmodifiers XMLToken::XMLToken(const XMLToken& orig) "
/**
   * Copy constructor; creates a copy of this XMLToken.
   *
   * @param orig the XMLToken object to copy.
   *
   * @throws @if python ValueError @else XMLConstructorException @endif
   * Thrown if the argument @p orig is @c null.
   */ public
";


%csmethodmodifiers XMLToken::clone() const "
/**
   * Creates and returns a deep copy of this XMLToken.
   * 
   * @return a (deep) copy of this XMLToken set.
   */ public
";


%csmethodmodifiers XMLToken::getAttributes() const "
/**
   * Returns the attributes of this element.
   *
   * @return the XMLAttributes of this XML element.
   */ public
";


%csmethodmodifiers XMLToken::setAttributes(const XMLAttributes& attributes) "
/**
   * Sets an XMLAttributes to this XMLToken.
   * Nothing will be done if this XMLToken is not a start element.
   *
   * @param attributes XMLAttributes to be set to this XMLToken.
   *
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_XML_OPERATION LIBSBML_INVALID_XML_OPERATION @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   *
   * @note This function replaces the existing XMLAttributes with the new one.
   */ public
";


%csmethodmodifiers XMLToken::addAttr(  const std::string& name , const std::string& value , const std::string& namespaceURI = "" , const std::string& prefix = "") "
/**
   * Adds an attribute to the attribute set in this XMLToken optionally 
   * with a prefix and URI defining a namespace.
   * Nothing will be done if this XMLToken is not a start element.
   *
   * @param name a string, the local name of the attribute.
   * @param value a string, the value of the attribute.
   * @param namespaceURI a string, the namespace URI of the attribute.
   * @param prefix a string, the prefix of the namespace
   *
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_XML_OPERATION LIBSBML_INVALID_XML_OPERATION @endlink
   *
   * @note if local name with the same namespace URI already exists in the
   * attribute set, its value and prefix will be replaced.
   *
   * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
   */ public
";


%csmethodmodifiers XMLToken::addAttr( const XMLTriple& triple, const std::string& value) "
/**
   * Adds an attribute with the given XMLTriple/value pair to the attribute set
   * in this XMLToken.
   * Nothing will be done if this XMLToken is not a start element.
   *
   * @note if local name with the same namespace URI already exists in the 
   * attribute set, its value and prefix will be replaced.
   *
   * @param triple an XMLTriple, the XML triple of the attribute.
   * @param value a string, the value of the attribute.
   *
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_XML_OPERATION LIBSBML_INVALID_XML_OPERATION @endlink
   */ public
";


%csmethodmodifiers XMLToken::removeAttr(int n) "
/**
   * Removes an attribute with the given index from the attribute set in
   * this XMLToken.
   * Nothing will be done if this XMLToken is not a start element.
   *
   * @param n an integer the index of the resource to be deleted
   *
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_XML_OPERATION LIBSBML_INVALID_XML_OPERATION @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INDEX_EXCEEDS_SIZE LIBSBML_INDEX_EXCEEDS_SIZE @endlink
   */ public
";


%csmethodmodifiers XMLToken::removeAttr(const std::string& name, const std::string& uri = "") "
/**
   * Removes an attribute with the given local name and namespace URI from 
   * the attribute set in this XMLToken.
   * Nothing will be done if this XMLToken is not a start element.
   *
   * @param name   a string, the local name of the attribute.
   * @param uri    a string, the namespace URI of the attribute.
   *
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_XML_OPERATION LIBSBML_INVALID_XML_OPERATION @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INDEX_EXCEEDS_SIZE LIBSBML_INDEX_EXCEEDS_SIZE @endlink
   */ public
";


%csmethodmodifiers XMLToken::removeAttr(const XMLTriple& triple) "
/**
   * Removes an attribute with the given XMLTriple from the attribute set 
   * in this XMLToken.  
   * Nothing will be done if this XMLToken is not a start element.
   *
   * @param triple an XMLTriple, the XML triple of the attribute.
   *
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_XML_OPERATION LIBSBML_INVALID_XML_OPERATION @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INDEX_EXCEEDS_SIZE LIBSBML_INDEX_EXCEEDS_SIZE @endlink
   */ public
";


%csmethodmodifiers XMLToken::clearAttributes "
/**
   * Clears (deletes) all attributes in this XMLToken.
   * Nothing will be done if this XMLToken is not a start element.
   *
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_XML_OPERATION LIBSBML_INVALID_XML_OPERATION @endlink
   */ public
";


%csmethodmodifiers XMLToken::getAttrIndex(const std::string& name, const std::string& uri="") const "
/**
   * Return the index of an attribute with the given local name and namespace URI.
   *
   * @param name a string, the local name of the attribute.
   * @param uri  a string, the namespace URI of the attribute.
   *
   * @return the index of an attribute with the given local name and namespace URI, 
   * or <code>-1</code> if not present.
   *
   * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
   */ public
";


%csmethodmodifiers XMLToken::getAttrIndex(const XMLTriple& triple) const "
/**
   * Return the index of an attribute with the given XMLTriple.
   *
   * @param triple an XMLTriple, the XML triple of the attribute for which 
   *        the index is required.
   *
   * @return the index of an attribute with the given XMLTriple, or <code>-1</code> if not present.
   */ public
";


%csmethodmodifiers XMLToken::getAttributesLength() const "
/**
   * Return the number of attributes in the attributes set.
   *
   * @return the number of attributes in the attributes set in this XMLToken.
   */ public
";


%csmethodmodifiers XMLToken::getAttrName(int index) const "
/**
   * Return the local name of an attribute in the attributes set in this 
   * XMLToken (by position).
   *
   * @param index an integer, the position of the attribute whose local name 
   * is required.
   *
   * @return the local name of an attribute in this list (by position).  
   *
   * @note If index
   * is out of range, an empty string will be returned.  Use
   * XMLToken::hasAttr(@if java int index@endif)
   * to test for the attribute existence.
   */ public
";


%csmethodmodifiers XMLToken::getAttrPrefix(int index) const "
/**
   * Return the prefix of an attribute in the attribute set in this 
   * XMLToken (by position).
   *
   * @param index an integer, the position of the attribute whose prefix is 
   * required.
   *
   * @return the namespace prefix of an attribute in the attribute set
   * (by position).  
   *
   * @note If index is out of range, an empty string will be returned. Use
   * XMLToken::hasAttr(@if java int index@endif) to test
   * for the attribute existence.
   */ public
";


%csmethodmodifiers XMLToken::getAttrPrefixedName(int index) const "
/**
   * Return the prefixed name of an attribute in the attribute set in this 
   * XMLToken (by position).
   *
   * @param index an integer, the position of the attribute whose prefixed 
   * name is required.
   *
   * @return the prefixed name of an attribute in the attribute set 
   * (by position).  
   *
   * @note If index is out of range, an empty string will be returned.  Use
   * XMLToken::hasAttr(@if java int index@endif) to test
   * for attribute existence.
   */ public
";


%csmethodmodifiers XMLToken::getAttrURI(int index) const "
/**
   * Return the namespace URI of an attribute in the attribute set in this 
   * XMLToken (by position).
   *
   * @param index an integer, the position of the attribute whose namespace 
   * URI is required.
   *
   * @return the namespace URI of an attribute in the attribute set (by position).
   *
   * @note If index is out of range, an empty string will be returned.  Use
   * XMLToken::hasAttr(@if java int index@endif) to test
   * for attribute existence.
   */ public
";


%csmethodmodifiers XMLToken::getAttrValue(int index) const "
/**
   * Return the value of an attribute in the attribute set in this XMLToken  
   * (by position).
   *
   * @param index an integer, the position of the attribute whose value is 
   * required.
   *
   * @return the value of an attribute in the attribute set (by position).  
   *
   * @note If index is out of range, an empty string will be returned. Use
   * XMLToken::hasAttr(@if java int index@endif) to test
   * for attribute existence.
   */ public
";


%csmethodmodifiers XMLToken::getAttrValue(const std::string name, const std::string uri="") const "
/**
   * Return a value of an attribute with the given local name and namespace URI.
   *
   * @param name a string, the local name of the attribute whose value is required.
   * @param uri  a string, the namespace URI of the attribute.
   *
   * @return The attribute value as a string.  
   *
   * @note If an attribute with the 
   * given local name and namespace URI does not exist, an empty string will be 
   * returned.  
   * Use XMLToken::hasAttr(@if java String name, String uri@endif)
   * to test for attribute existence.
   *
   * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
   */ public
";


%csmethodmodifiers XMLToken::getAttrValue(const XMLTriple& triple) const "
/**
   * Return a value of an attribute with the given XMLTriple.
   *
   * @param triple an XMLTriple, the XML triple of the attribute whose 
   *        value is required.
   *
   * @return The attribute value as a string.  
   *
   * @note If an attribute with the
   * given XMLTriple does not exist, an empty string will be returned.  
   * Use XMLToken::hasAttr(@if java XMLTriple triple@endif)
   * to test for attribute existence.
   */ public
";


%csmethodmodifiers XMLToken::hasAttr(int index) const "
/**
   * Predicate returning @c true or @c false depending on whether
   * an attribute with the given index exists in the attribute set in this 
   * XMLToken.
   *
   * @param index an integer, the position of the attribute.
   *
   * @return @c true if an attribute with the given index exists in the attribute 
   * set in this XMLToken, @c false otherwise.
   */ public
";


%csmethodmodifiers XMLToken::hasAttr(const std::string name, const std::string uri="") const "
/**
   * Predicate returning @c true or @c false depending on whether
   * an attribute with the given local name and namespace URI exists 
   * in the attribute set in this XMLToken.
   *
   * @param name a string, the local name of the attribute.
   * @param uri  a string, the namespace URI of the attribute.
   *
   * @return @c true if an attribute with the given local name and namespace 
   * URI exists in the attribute set in this XMLToken, @c false otherwise.
   *
   * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
   */ public
";


%csmethodmodifiers XMLToken::hasAttr(const XMLTriple& triple) const "
/**
   * Predicate returning @c true or @c false depending on whether
   * an attribute with the given XML triple exists in the attribute set in 
   * this XMLToken 
   *
   * @param triple an XMLTriple, the XML triple of the attribute 
   *
   * @return @c true if an attribute with the given XML triple exists
   * in the attribute set in this XMLToken, @c false otherwise.
   *
   */ public
";


%csmethodmodifiers XMLToken::isAttributesEmpty() const "
/**
   * Predicate returning @c true or @c false depending on whether 
   * the attribute set in this XMLToken set is empty.
   * 
   * @return @c true if the attribute set in this XMLToken is empty, 
   * @c false otherwise.
   */ public
";


%csmethodmodifiers XMLToken::getNamespaces() const "
/**
   * Returns the XML namespace declarations for this XML element.
   *
   * @return the XML namespace declarations for this XML element.
   */ public
";


%csmethodmodifiers XMLToken::setNamespaces(const XMLNamespaces& namespaces) "
/**
   * Sets an XMLnamespaces to this XML element.
   * Nothing will be done if this XMLToken is not a start element.
   *
   * @param namespaces XMLNamespaces to be set to this XMLToken.
   *
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_XML_OPERATION LIBSBML_INVALID_XML_OPERATION @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   *
   * @note This function replaces the existing XMLNamespaces with the new one.
   */ public
";


%csmethodmodifiers XMLToken::addNamespace(const std::string& uri, const std::string& prefix = "") "
/**
   * Appends an XML namespace prefix and URI pair to this XMLToken.
   * If there is an XML namespace with the given prefix in this XMLToken, 
   * then the existing XML namespace will be overwritten by the new one.
   *
   * Nothing will be done if this XMLToken is not a start element.
   *
   * @param uri a string, the uri for the namespace
   * @param prefix a string, the prefix for the namespace
   *
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_XML_OPERATION LIBSBML_INVALID_XML_OPERATION @endlink
   *
   * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
   */ public
";


%csmethodmodifiers XMLToken::removeNamespace(int index) "
/**
   * Removes an XML Namespace stored in the given position of the XMLNamespaces
   * of this XMLToken.
   * Nothing will be done if this XMLToken is not a start element.
   *
   * @param index an integer, position of the removed namespace.
   *
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_XML_OPERATION LIBSBML_INVALID_XML_OPERATION @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INDEX_EXCEEDS_SIZE LIBSBML_INDEX_EXCEEDS_SIZE @endlink
   */ public
";


%csmethodmodifiers XMLToken::removeNamespace(const std::string& prefix) "
/**
   * Removes an XML Namespace with the given prefix.
   * Nothing will be done if this XMLToken is not a start element.
   *
   * @param prefix a string, prefix of the required namespace.
   *
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_XML_OPERATION LIBSBML_INVALID_XML_OPERATION @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INDEX_EXCEEDS_SIZE LIBSBML_INDEX_EXCEEDS_SIZE @endlink
   */ public
";


%csmethodmodifiers XMLToken::clearNamespaces "
/**
   * Clears (deletes) all XML namespace declarations in the XMLNamespaces of
   * this XMLToken.
   * Nothing will be done if this XMLToken is not a start element.
   *
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_XML_OPERATION LIBSBML_INVALID_XML_OPERATION @endlink
   */ public
";


%csmethodmodifiers XMLToken::getNamespaceIndex(const std::string& uri) const "
/**
   * Look up the index of an XML namespace declaration by URI.
   *
   * @param uri a string, uri of the required namespace.
   *
   * @return the index of the given declaration, or <code>-1</code> if not present.
   */ public
";


%csmethodmodifiers XMLToken::getNamespaceIndexByPrefix(const std::string& prefix) const "
/**
   * Look up the index of an XML namespace declaration by prefix.
   *
   * @param prefix a string, prefix of the required namespace.
   *
   * @return the index of the given declaration, or <code>-1</code> if not present.
   */ public
";


%csmethodmodifiers XMLToken::getNamespacesLength() const "
/**
   * Returns the number of XML namespaces stored in the XMLNamespaces 
   * of this XMLToken.
   *
   * @return the number of namespaces in this list.
   */ public
";


%csmethodmodifiers XMLToken::getNamespacePrefix(int index) const "
/**
   * Look up the prefix of an XML namespace declaration by position.
   *
   * Callers should use getNamespacesLength() to find out how many 
   * namespaces are stored in the XMLNamespaces.
   *
   * @param index an integer, position of the required prefix.
   *
   * @return the prefix of an XML namespace declaration in the XMLNamespaces 
   * (by position).  
   *
   * @note If index is out of range, an empty string will be
   * returned.
   *
   * @see getNamespacesLength()
   */ public
";


%csmethodmodifiers XMLToken::getNamespacePrefix(const std::string& uri) const "
/**
   * Look up the prefix of an XML namespace declaration by its URI.
   *
   * @param uri a string, the URI of the prefix being sought
   *
   * @return the prefix of an XML namespace declaration given its URI.  
   *
   * @note If @p uri does not exist, an empty string will be returned.
   */ public
";


%csmethodmodifiers XMLToken::getNamespaceURI(int index) const "
/**
   * Look up the URI of an XML namespace declaration by its position.
   *
   * @param index an integer, position of the required URI.
   *
   * @return the URI of an XML namespace declaration in the XMLNamespaces
   * (by position).  
   *
   * @note If @p index is out of range, an empty string will be
   * returned.
   *
   * @see getNamespacesLength()
   */ public
";


%csmethodmodifiers XMLToken::getNamespaceURI(const std::string& prefix = "") const "
/**
   * Look up the URI of an XML namespace declaration by its prefix.
   *
   * @param prefix a string, the prefix of the required URI
   *
   * @return the URI of an XML namespace declaration given its prefix.  
   *
   * @note If @p prefix does not exist, an empty string will be returned.
   *
   * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
   */ public
";


%csmethodmodifiers XMLToken::isNamespacesEmpty() const "
/**
   * Predicate returning @c true or @c false depending on whether 
   * the XMLNamespaces of this XMLToken is empty.
   * 
   * @return @c true if the XMLNamespaces of this XMLToken is empty, 
   * @c false otherwise.
   */ public
";


%csmethodmodifiers XMLToken::hasNamespaceURI(const std::string& uri) const "
/**
   * Predicate returning @c true or @c false depending on whether 
   * an XML Namespace with the given URI is contained in the XMLNamespaces of
   * this XMLToken.
   * 
   * @param uri a string, the uri for the namespace
   *
   * @return @c true if an XML Namespace with the given URI is contained in the
   * XMLNamespaces of this XMLToken,  @c false otherwise.
   */ public
";


%csmethodmodifiers XMLToken::hasNamespacePrefix(const std::string& prefix) const "
/**
   * Predicate returning @c true or @c false depending on whether 
   * an XML Namespace with the given prefix is contained in the XMLNamespaces of
   * this XMLToken.
   *
   * @param prefix a string, the prefix for the namespace
   * 
   * @return @c true if an XML Namespace with the given URI is contained in the
   * XMLNamespaces of this XMLToken, @c false otherwise.
   */ public
";


%csmethodmodifiers XMLToken::hasNamespaceNS(const std::string& uri, const std::string& prefix) const "
/**
   * Predicate returning @c true or @c false depending on whether 
   * an XML Namespace with the given uri/prefix pair is contained in the 
   * XMLNamespaces ofthis XMLToken.
   *
   * @param uri a string, the uri for the namespace
   * @param prefix a string, the prefix for the namespace
   * 
   * @return @c true if an XML Namespace with the given uri/prefix pair is 
   * contained in the XMLNamespaces of this XMLToken,  @c false otherwise.
   */ public
";


%csmethodmodifiers XMLToken::setTriple(const XMLTriple& triple) "
/**
   * Sets the XMLTripe (name, uri and prefix) of this XML element.
   * Nothing will be done if this XML element is a text node.
   *
   * @param triple XMLTriple to be added to this XML element.
   *
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_XML_OPERATION LIBSBML_INVALID_XML_OPERATION @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   */ public
";


%csmethodmodifiers XMLToken::getName() const "
/**
   * Returns the (unqualified) name of this XML element.
   *
   * @return the (unqualified) name of this XML element.
   */ public
";


%csmethodmodifiers XMLToken::getPrefix() const "
/**
   * Returns the namespace prefix of this XML element.
   *
   * @return the namespace prefix of this XML element.  
   *
   * @note If no prefix
   * exists, an empty string will be return.
   */ public
";


%csmethodmodifiers XMLToken::getURI() const "
/**
   * Returns the namespace URI of this XML element.
   *
   * @return the namespace URI of this XML element.
   */ public
";


%csmethodmodifiers XMLToken::getCharacters() const "
/**
   * Returns the text of this element.
   *
   * @return the characters of this XML text.
   */ public
";


%csmethodmodifiers XMLToken::append(const std::string& chars) "
/**
   * Appends characters to this XML text content.
   *
   * @param chars string, characters to append
   *
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED@endlink
   */ public
";


%csmethodmodifiers XMLToken::getColumn() const "
/**
   * Returns the column at which this XMLToken occurred in the input
   * document or data stream.
   *
   * @return the column at which this XMLToken occurred.
   */ public
";


%csmethodmodifiers XMLToken::getLine() const "
/**
   * Returns the line at which this XMLToken occurred in the input document
   * or data stream.
   *
   * @return the line at which this XMLToken occurred.
   */ public
";


%csmethodmodifiers XMLToken::isElement() const "
/**
   * Predicate returning @c true or @c false depending on whether 
   * this XMLToken is an XML element.
   * 
   * @return @c true if this XMLToken is an XML element, @c false otherwise.
   */ public
";


%csmethodmodifiers XMLToken::isEnd() const "
/**
   * Predicate returning @c true or @c false depending on whether 
   * this XMLToken is an XML end element.
   * 
   * @return @c true if this XMLToken is an XML end element, @c false otherwise.
   */ public
";


%csmethodmodifiers XMLToken::isEndFor(const XMLToken& element) const "
/**
   * Predicate returning @c true or @c false depending on whether 
   * this XMLToken is an XML end element for the given start element.
   * 
   * @param element XMLToken, element for which query is made.
   *
   * @return @c true if this XMLToken is an XML end element for the given
   * XMLToken start element, @c false otherwise.
   */ public
";


%csmethodmodifiers XMLToken::isEOF() const "
/**
   * Predicate returning @c true or @c false depending on whether 
   * this XMLToken is an end of file marker.
   * 
   * @return @c true if this XMLToken is an end of file (input) marker, @c false
   * otherwise.
   */ public
";


%csmethodmodifiers XMLToken::isStart() const "
/**
   * Predicate returning @c true or @c false depending on whether 
   * this XMLToken is an XML start element.
   * 
   * @return @c true if this XMLToken is an XML start element, @c false otherwise.
   */ public
";


%csmethodmodifiers XMLToken::isText() const "
/**
   * Predicate returning @c true or @c false depending on whether 
   * this XMLToken is an XML text element.
   * 
   * @return @c true if this XMLToken is an XML text element, @c false otherwise.
   */ public
";


%csmethodmodifiers XMLToken::setEnd "
/**
   * Declares this XML start element is also an end element.
   *
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED@endlink
   */ public
";


%csmethodmodifiers XMLToken::setEOF "
/**
   * Declares this XMLToken is an end-of-file (input) marker.
   *
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED@endlink
   */ public
";


%csmethodmodifiers XMLToken::unsetEnd "
/**
   * Declares this XML start/end element is no longer an end element.
   *
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED@endlink
   */ public
";


%csmethodmodifiers XMLToken::write(XMLOutputStream& stream) const "
/**
   * Writes this XMLToken to stream.
   *
   * @param stream XMLOutputStream, stream to which this XMLToken
   * is to be written.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers XMLToken::toString "
/**
   * Prints a string representation of the underlying token stream, for
   * debugging purposes.
   */ public
";


%typemap(csimports) XMLNode "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Representation of a node in an XML document tree.
 * 
 * Beginning with version 3.0.0, libSBML implements an XML abstraction
 * layer.  This layer presents a uniform XML interface to calling programs
 * regardless of which underlying XML parser libSBML has actually been
 * configured to use.  The basic data object in the XML abstraction is a
 * @em node, represented by XMLNode.
 *
 * An XMLNode can contain any number of children.  Each child is another
 * XMLNode, thereby forming a tree.  The methods XMLNode::getNumChildren()
 * and XMLNode::getChild(@if java long n@endif) can be used to access the tree
 * structure starting from a given node.
 *
 * Each XMLNode is subclassed from XMLToken, and thus has the same methods
 * available as XMLToken.  These methods include XMLToken::getNamespaces(),
 * XMLToken::getPrefix(), XMLToken::getName(), XMLToken::getURI(), and
 * XMLToken::getAttributes().
 *
 * @section xmlnode-str2xmlnode Conversion between an XML string and an XMLNode
 *
 * LibSBML provides the following utility functions for converting an XML
 * string (e.g., <code>&lt;annotation&gt;...&lt;/annotation&gt;</code>)
 * to/from an XMLNode object.
 * <ul>
 * <li> XMLNode::toXMLString() returns a string representation of the XMLNode object. 
 *
 * <li> XMLNode::convertXMLNodeToString(@if java XMLNode node@endif)
 * (static function) returns a string representation 
 * of the given XMLNode object.
 *
 * <li> XMLNode::convertStringToXMLNode(@if java String xml@endif)
 * (static function) returns an XMLNode object converted 
 * from the given XML string.
 * </ul>
 *
 * The returned XMLNode object by XMLNode::convertStringToXMLNode(@if java String xml@endif)
 * is a dummy root (container) XMLNode if the given XML string has two or
 * more top-level elements (e.g.,
 * &quot;<code>&lt;p&gt;...&lt;/p&gt;&lt;p&gt;...&lt;/p&gt;</code>&quot;). In the
 * dummy root node, each top-level element in the given XML string is
 * contained as a child XMLNode. XMLToken::isEOF() can be used to identify
 * if the returned XMLNode object is a dummy node or not.  Here is an
 * example: @if clike
 * @verbatim
// Checks if the XMLNode object returned by XMLNode::convertStringToXMLNode() is a dummy root node:
                                                                                         
string str = \'...\'; 
XMLNode xn = XMLNode::convertStringToXMLNode(str);                                      
if ( xn == null )
{                                                                                      
  // returned value is null (error)                                                    
  ...
}                                                                                      
else if ( xn->isEOF() )                                                                 
{                                                                                      
  // root node is a dummy node                                                         
  for ( int i = 0; i < xn->getNumChildren(); i++ )                                          
  {                                                                                    
    // access to each child node of the dummy node.                                    
    XMLNode xnChild = xn->getChild(i);                                                  
    ...                                                                                
  }                                                                                    
}                                                                                      
else                                                                                   
{                                                                                      
  // root node is NOT a dummy node                                                     
  ...                                                                                  
}
@endverbatim
  *  @endif@if java
@verbatim
// Checks if the returned XMLNode object is a dummy root node:

String str = \'...\';
XMLNode xn = XMLNode.convertStringToXMLNode(str);
if ( xn == null )
{
  // returned value is null (error)
  ...
}
else if ( xn.isEOF() )
{
  // root node is a dummy node
  for ( int i = 0; i < xn.getNumChildren(); i++ )
  {
    // access to each child node of the dummy node.
    XMLNode xnChild = xn.getChild(i);
    ...
  }
}
else
{
  // root node is NOT a dummy node
  ...
}
@endverbatim
 * @endif@if python
@verbatim
xn = XMLNode.convertStringToXMLNode(\'<p></p>\')
if xn == None:
  # Do something to handle exceptional situation.

elif xn.isEOF():
  # Node is a dummy node.

else:
  # None is not a dummy node.
@endverbatim
 * @endif
 */
"


%csmethodmodifiers XMLNode::XMLNode "
/**
   * Creates a new empty XMLNode with no children.
   */ public
";


%csmethodmodifiers XMLNode::XMLNode(const XMLToken& token) "
/**
   * Creates a new XMLNode by copying token.
   *
   * @param token XMLToken to be copied to XMLNode
   */ public
";


%csmethodmodifiers XMLNode::XMLNode(  const XMLTriple&     triple , const XMLAttributes& attributes , const XMLNamespaces& namespaces , const unsigned int   line   = 0 , const unsigned int   column = 0 ) "
/**
   * Creates a new start element XMLNode with the given set of attributes and
   * namespace declarations.
   *
   * @param triple XMLTriple.
   * @param attributes XMLAttributes, the attributes to set.
   * @param namespaces XMLNamespaces, the namespaces to set.
   * @param line a long integer, the line number (default = 0).
   * @param column a long integer, the column number (default = 0).
   *
   * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
   */ public
";


%csmethodmodifiers XMLNode::XMLNode(  const XMLTriple&      triple , const XMLAttributes&  attributes , const unsigned int    line   = 0 , const unsigned int    column = 0 ) "
/**
   * Creates a start element XMLNode with the given set of attributes.
   *
   * @param triple XMLTriple.
   * @param attributes XMLAttributes, the attributes to set.
   * @param line a long integer, the line number (default = 0).
   * @param column a long integer, the column number (default = 0).
   *
   * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
  */ public
";


%csmethodmodifiers XMLNode::XMLNode(  const XMLTriple&    triple , const unsigned int  line   = 0 , const unsigned int  column = 0 ) "
/**
   * Creates an end element XMLNode.
   *
   * @param triple XMLTriple.
   * @param line a long integer, the line number (default = 0).
   * @param column a long integer, the column number (default = 0).
   *
   * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
   */ public
";


%csmethodmodifiers XMLNode::XMLNode(  const std::string&  chars , const unsigned int  line   = 0 , const unsigned int  column = 0 ) "
/**
   * Creates a text XMLNode.
   *
   * @param chars a string, the text to be added to the XMLToken
   * @param line a long integer, the line number (default = 0).
   * @param column a long integer, the column number (default = 0).
   *
   * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
   */ public
";


%csmethodmodifiers XMLNode::XMLNode(XMLInputStream& stream) "
/**
   * Creates a new XMLNode by reading XMLTokens from stream.  
   *
   * The stream must be positioned on a start element
   * (<code>stream.peek().isStart() == true</code>) and will be read until
   * the matching end element is found.
   *
   * @param stream XMLInputStream from which XMLNode is to be created.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers XMLNode::XMLNode(const XMLNode& orig) "
/**
   * Copy constructor; creates a copy of this XMLNode.
   * 
   * @param orig the XMLNode instance to copy.
   *
   * @throws @if python ValueError @else XMLConstructorException @endif
   * Thrown if the argument @p orig is @c null.
   */ public
";


%csmethodmodifiers XMLNode::clone() const "
/**
   * Creates and returns a deep copy of this XMLNode.
   * 
   * @return a (deep) copy of this XMLNode.
   */ public new
";


%csmethodmodifiers XMLNode::addChild(const XMLNode& node) "
/**
   * Adds a copy of @p node as a child of this XMLNode.
   *
   * The given @p node is added at the end of the list of children.
   *
   * @param node the XMLNode to be added as child.
   *
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_XML_OPERATION LIBSBML_INVALID_XML_OPERATION @endlink
   *
   * @note The given node is added at the end of the children list.
   */ public
";


%csmethodmodifiers XMLNode::insertChild(unsigned int n, const XMLNode& node) "
/**
   * Inserts a copy of the given node as the <code>n</code>th child of this
   * XMLNode.
   *
   * If the given index @p n is out of range for this XMLNode instance,
   * the @p node is added at the end of the list of children.  Even in
   * that situation, this method does not throw an error.
   *
   * @param n an integer, the index at which the given node is inserted
   * @param node an XMLNode to be inserted as <code>n</code>th child.
   *
   * @return a reference to the newly-inserted child @p node
   */ public
";


%csmethodmodifiers XMLNode::removeChild(unsigned int n) "
/**
   * Removes the <code>n</code>th child of this XMLNode and returns the
   * removed node.
   *
   * It is important to keep in mind that a given XMLNode may have more
   * than one child.  Calling this method erases all existing references to
   * child nodes @em after the given position @p n.  If the index @p n is
   * greater than the number of child nodes in this XMLNode, this method
   * takes no action (and returns @c null).
   *
   * @param n an integer, the index of the node to be removed
   *
   * @return the removed child, or @c null if @p n is greater than the number
   * of children in this node
   *
   * @note The caller owns the returned node and is responsible for deleting it.
   */ public
";


%csmethodmodifiers XMLNode::removeChildren "
/**
   * Removes all children from this node.
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   */ public
";


%csmethodmodifiers XMLNode::getChild(unsigned int n) "
/**
   * Returns the <code>n</code>th child of this XMLNode.
   *
   * If the index @p n is greater than the number of child nodes,
   * this method returns an empty node.
   *
   * @param n a long integereger, the index of the node to return
   * 
   * @return the <code>n</code>th child of this XMLNode.
   */ public
";


%csmethodmodifiers XMLNode::getChild "
/**
   * Returns the  <code>n</code>th child of this XMLNode.
   *
   * If the index @p n is greater than the number of child nodes,
   * this method returns an empty node.
   *
   * @param n a long integereger, the index of the node to return
   * 
   * @return the <code>n</code>th child of this XMLNode.
   */ public
";


%csmethodmodifiers XMLNode::getChild(const std::string&  name) "
/**
   * Returns the first child of this XMLNode with the corresponding name.
   *
   * If no child with corrsponding name can be found, 
   * this method returns an empty node.
   *
   * @param name the name of the node to return
   * 
   * @return the first child of this XMLNode with given name.
   */ public
";


%csmethodmodifiers XMLNode::getChild(const std::string&  name) const "
/**
   * Returns the first child of this XMLNode with the corresponding name.
   *
   * If no child with corrsponding name can be found, 
   * this method returns an empty node.
   *
   * @param name the name of the node to return
   * 
   * @return the first child of this XMLNode with given name.
   */ public
";


%csmethodmodifiers XMLNode::getIndex(const std::string& name) const "
/**
   * Return the index of the first child of this XMLNode with the given name.
   *
   * @param name a string, the name of the child for which the 
   * index is required.
   *
   * @return the index of the first child of this XMLNode with the given
   * name, or -1 if not present.
   */ public
";


%csmethodmodifiers XMLNode::hasChild(const std::string& name) const "
/**
   * Return a bool indicating whether this XMLNode has a child with the
   * given name.
   *
   * @param name a string, the name of the child to be checked.
   *
   * @return bool indicating whether this XMLNode has a child with the
   * given name.
   */ public
";


%csmethodmodifiers XMLNode::equals(const XMLNode& other, bool ignoreURI=false) const "
/**
   * Compare this XMLNode against another XMLNode returning true if both
   * nodes represent the same XML tree, or false otherwise.
   *
   * @param other another XMLNode to compare against.
   *
   * @param ignoreURI whether to ignore the namespace URI when doing the
   * comparison.
   *
   * @return bool indicating whether this XMLNode represents the same XML
   * tree as another.
   */ public
";


%csmethodmodifiers XMLNode::getNumChildren() const "
/**
   * Returns the number of children for this XMLNode.
   *
   * @return the number of children for this XMLNode.
   */ public
";


%csmethodmodifiers XMLNode::write(XMLOutputStream& stream) const "
/**
   * Writes this XMLNode and its children to stream.
   *
   * @param stream XMLOutputStream, stream to which this XMLNode
   * is to be written.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers XMLNode::toXMLString() const "
/**
   * Returns a string representation of this XMLNode. 
   *
   * @return a string derived from this XMLNode.
   */ public
";


%csmethodmodifiers XMLNode::convertXMLNodeToString(const XMLNode* node) "
/**
   * Returns a string representation of a given XMLNode. 
   *
   * @param node the XMLNode to be represented as a string
   *
   * @return a string-form representation of @p node
   */ public
";


%csmethodmodifiers XMLNode::convertStringToXMLNode(const std::string& xmlstr, const XMLNamespaces* xmlns = NULL) "
/**
   * Returns an XMLNode which is derived from a string containing XML
   * content.
   *
   * The XML namespace must be defined using argument @p xmlns if the
   * corresponding XML namespace attribute is not part of the string of the
   * first argument.
   *
   * @param xmlstr string to be converted to a XML node.
   * @param xmlns XMLNamespaces the namespaces to set (default value is @c null).
   *
   * @note The caller owns the returned XMLNode and is reponsible for
   * deleting it.  The returned XMLNode object is a dummy root (container)
   * XMLNode if the top-level element in the given XML string is NOT
   * <code>&lt;html&gt;</code>, <code>&lt;body&gt;</code>,
   * <code>&lt;annotation&gt;</code>, or <code>&lt;notes&gt;</code>.  In
   * the dummy root node, each top-level element in the given XML string is
   * contained as a child XMLNode. XMLToken::isEOF() can be used to
   * identify if the returned XMLNode object is a dummy node.
   *
   * @return a XMLNode which is converted from string @p xmlstr.  If the
   * conversion failed, this method returns @c null.
   *
   * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
   */ public
";


%typemap(csimports) XMLTriple "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Representation of a qualified XML name.
 *
 * @htmlinclude not-sbml-warning.html
 *
 * A \'triple\' in the libSBML XML layer encapsulates the notion of qualified
 * name, meaning an element name or an attribute name with an optional
 * namespace qualifier.  An XMLTriple instance carries up to three data items:
 * 
 * <ul>
 *
 * <li> The name of the attribute or element; that is, the attribute name
 * as it appears in an XML document or data stream;
 *
 * <li> The XML namespace prefix (if any) of the attribute.  For example,
 * in the following fragment of XML, the namespace prefix is the string
 * <code>mysim</code> and it appears on both the element
 * <code>someelement</code> and the attribute <code>attribA</code>.  When
 * both the element and the attribute are stored as XMLTriple objects,
 * their <i>prefix</i> is <code>mysim</code>.
 * @verbatim
<mysim:someelement mysim:attribA=\'value\' />
@endverbatim
 *
 * <li> The XML namespace URI with which the prefix is associated.  In
 * XML, every namespace used must be declared and mapped to a URI.
 *
 * </ul>
 *
 * XMLTriple objects are the lowest-level data item in the XML layer
 * of libSBML.  Other objects such as XMLToken make use of XMLTriple
 * objects.
 */
"


%csmethodmodifiers XMLTriple::XMLTriple "
/**
   * Creates a new, empty XMLTriple.
   */ public
";


%csmethodmodifiers XMLTriple::XMLTriple(  const std::string&  name , const std::string&  uri , const std::string&  prefix ) "
/**
   * Creates a new XMLTriple with the given @p name, @p uri and and @p
   * prefix.
   *
   * @param name a string, name for the XMLTriple.
   * @param uri a string, URI of the XMLTriple.
   * @param prefix a string, prefix for the URI of the XMLTriple,
   *
   * @throws @if python ValueError @else XMLConstructorException @endif
   * Thrown if the argument @p orig is @c null.
   */ public
";


%csmethodmodifiers XMLTriple::XMLTriple(const std::string& triplet, const char sepchar = ' ') "
/**
   * Creates a new XMLTriple by splitting the given @p triplet on the
   * separator character @p sepchar.
   *
   * Triplet may be in one of the following formats:
   * <ul>
   * <li> name
   * <li> URI sepchar name
   * <li> URI sepchar name sepchar prefix
   * </ul>
   * @param triplet a string representing the triplet as above
   * @param sepchar a character, the sepchar used in the triplet
   *
   * @throws @if python ValueError @else XMLConstructorException @endif
   * Thrown if the argument @p orig is @c null.
   *
   * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
   */ public
";


%csmethodmodifiers XMLTriple::XMLTriple(const XMLTriple& orig) "
/**
   * Copy constructor; creates a copy of this XMLTriple set.
   *
   * @param orig the XMLTriple object to copy.
   *
   * @throws @if python ValueError @else XMLConstructorException @endif
   * Thrown if the argument @p orig is @c null.
   */ public
";


%csmethodmodifiers XMLTriple::clone() const "
/**
   * Creates and returns a deep copy of this XMLTriple set.
   * 
   * @return a (deep) copy of this XMLTriple set.
   */ public
";


%csmethodmodifiers XMLTriple::getName() const "
/**
   * Returns the @em name portion of this XMLTriple.
   *
   * @return a string, the name from this XMLTriple.
   */ public
";


%csmethodmodifiers XMLTriple::getPrefix() const "
/**
   * Returns the @em prefix portion of this XMLTriple.
   *
   * @return a string, the @em prefix portion of this XMLTriple.
   */ public
";


%csmethodmodifiers XMLTriple::getURI() const "
/**
   * Returns the @em URI portion of this XMLTriple.
   *
   * @return URI a string, the @em prefix portion of this XMLTriple.
   */ public
";


%csmethodmodifiers XMLTriple::getPrefixedName() const "
/**
   * Returns the prefixed name from this XMLTriple.
   *
   * @return a string, the prefixed name from this XMLTriple.
   */ public
";


%csmethodmodifiers XMLTriple::isEmpty() const "
/**
   * Predicate returning @c true or @c false depending on whether 
   * this XMLTriple is empty.
   * 
   * @return @c true if this XMLTriple is empty, @c false otherwise.
   */ public
";


%typemap(csimports) XMLOutputStream "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Interface to an XML output stream.
 *
 * @if notclike @internal @endif
 */
"


%csmethodmodifiers XMLOutputStream::XMLOutputStream(  std::ostream&       stream , const std::string&  encoding     = "UTF-8" , bool                writeXMLDecl = true , const std::string&   programName  = "" , const std::string&  programVersion = "") "
/**
   * Creates a new XMLOutputStream that wraps stream.
   *
   * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
   */ public
";


%csmethodmodifiers XMLOutputStream::endElement(const std::string& name, const std::string& prefix = "") "
/**
   * Writes the given XML end element name to this XMLOutputStream.
   */ public
";


%csmethodmodifiers XMLOutputStream::endElement(const XMLTriple& triple) "
/**
   * Writes the given XML end element \'prefix:name\' to this
   * XMLOutputStream.
   */ public
";


%csmethodmodifiers XMLOutputStream::setAutoIndent(bool indent) "
/**
   * Turns automatic indentation on or off for this XMLOutputStream.
   */ public
";


%csmethodmodifiers XMLOutputStream::startElement(const std::string& name, const std::string& prefix = "") "
/**
   * Writes the given XML start element name to this XMLOutputStream.
   */ public
";


%csmethodmodifiers XMLOutputStream::startElement(const XMLTriple& triple) "
/**
   * Writes the given XML start element \'prefix:name\' to this
   * XMLOutputStream.
   */ public
";


%csmethodmodifiers XMLOutputStream::startEndElement(const std::string& name, const std::string& prefix = "") "
/**
   * Writes the given XML start and end element name to this XMLOutputStream.
   */ public
";


%csmethodmodifiers XMLOutputStream::startEndElement(const XMLTriple& triple) "
/**
   * Writes the given XML start and end element \'prefix:name\' to this
   * XMLOutputStream.
   */ public
";


%csmethodmodifiers XMLOutputStream::writeAttribute(const std::string& name, const std::string& value) "
/**
   * Writes the given attribute, name=\'value\' to this XMLOutputStream.
   */ public
";


%csmethodmodifiers XMLOutputStream::writeAttribute(const std::string& name, const std::string& prefix, const std::string& value) "
/**
   * Writes the given attribute, prefix:name=\'value\' to this XMLOutputStream.
   */ public
";


%csmethodmodifiers XMLOutputStream::writeAttribute(const XMLTriple& triple, const std::string& value) "
/**
   * Writes the given attribute, prefix:name=\'value\' to this
   * XMLOutputStream.
   */ public
";


%csmethodmodifiers XMLOutputStream::writeAttribute(const std::string& name, const char* value) "
/**
   * Writes the given attribute, name=\'value\' to this XMLOutputStream.
   */ public
";


%csmethodmodifiers XMLOutputStream::writeAttribute(const std::string& name, const std::string& prefix, const char* value) "
/**
   * Writes the given attribute, prefix:name=\'value\' to this XMLOutputStream.
   */ public
";


%csmethodmodifiers XMLOutputStream::writeAttribute(const XMLTriple& triple, const char* value) "
/**
   * Writes the given attribute, prefix:name=\'value\' to this
   * XMLOutputStream.
   */ public
";


%csmethodmodifiers XMLOutputStream::writeAttribute(const std::string& name, const bool& value) "
/**
   * Writes the given attribute, name=\'true\' or name=\'false\' to this
   * XMLOutputStream.
   */ public
";


%csmethodmodifiers XMLOutputStream::writeAttribute(const std::string& name, const std::string &prefix, const bool& value) "
/**
   * Writes the given attribute, prefix:name=\'true\' or prefix:name=\'false\' to this
   * XMLOutputStream.
   */ public
";


%csmethodmodifiers XMLOutputStream::writeAttribute(const XMLTriple& triple, const bool& value) "
/**
   * Writes the given attribute, prefix:name=\'true\' or prefix:name=\'false\'
   * to this XMLOutputStream.
   */ public
";


%csmethodmodifiers XMLOutputStream::writeAttribute(const std::string& name, const double& value) "
/**
   * Writes the given attribute, name=\'value\' to this XMLOutputStream.
   */ public
";


%csmethodmodifiers XMLOutputStream::writeAttribute(const std::string& name, const std::string& prefix, const double& value) "
/**
   * Writes the given attribute, prefix:name=\'value\' to this XMLOutputStream.
   */ public
";


%csmethodmodifiers XMLOutputStream::writeAttribute(const XMLTriple& triple, const double& value) "
/**
   * Writes the given attribute, prefix:name=\'value\' to this
   * XMLOutputStream.
   */ public
";


%csmethodmodifiers XMLOutputStream::writeAttribute(const std::string& name, const long& value) "
/**
   * Writes the given attribute, name=\'value\' to this XMLOutputStream.
   */ public
";


%csmethodmodifiers XMLOutputStream::writeAttribute(const std::string& name, const std::string& prefix, const long& value) "
/**
   * Writes the given attribute, prefix:name=\'value\' to this XMLOutputStream.
   */ public
";


%csmethodmodifiers XMLOutputStream::writeAttribute(const XMLTriple& triple, const long& value) "
/**
   * Writes the given attribute, prefix:name=\'value\' to this
   * XMLOutputStream.
   */ public
";


%csmethodmodifiers XMLOutputStream::writeAttribute(const std::string& name, const int& value) "
/**
   * Writes the given attribute, name=\'value\' to this XMLOutputStream.
   */ public
";


%csmethodmodifiers XMLOutputStream::writeAttribute(const std::string& name, const std::string& prefix, const int& value) "
/**
   * Writes the given attribute, prefix:name=\'value\' to this XMLOutputStream.
   */ public
";


%csmethodmodifiers XMLOutputStream::writeAttribute(const XMLTriple& triple, const int& value) "
/**
   * Writes the given attribute, prefix:name=\'value\' to this
   * XMLOutputStream.
   */ public
";


%csmethodmodifiers XMLOutputStream::writeAttribute(const std::string& name, const unsigned int& value) "
/**
   * Writes the given attribute, name=\'value\' to this XMLOutputStream.
   */ public
";


%csmethodmodifiers XMLOutputStream::writeAttribute(const std::string& name, const std::string& prefix, const unsigned int& value) "
/**
   * Writes the given attribute, prefix:name=\'value\' to this XMLOutputStream.
   */ public
";


%csmethodmodifiers XMLOutputStream::writeAttribute(const XMLTriple& triple, const unsigned int& value) "
/**
   * Writes the given attribute, prefix:name=\'value\' to this
   * XMLOutputStream.
   */ public
";


%csmethodmodifiers XMLOutputStream::writeXMLDecl "
/**
   * Writes the XML declaration:
   * <?xml version=\'1.0\' encoding=\'...\'?>
   */ public
";


%csmethodmodifiers XMLOutputStream::writeComment(const std::string& programName, const std::string& programVersion) "
/**
   * Writes an XML comment:
   * <?xml version=\'1.0\' encoding=\'...\'?>
   */ public
";


%csmethodmodifiers XMLOutputStream::downIndent "
/**
   * Decreases the indentation level for this XMLOutputStream.
   */ public
";


%csmethodmodifiers XMLOutputStream::upIndent "
/**
   * Increases the indentation level for this XMLOutputStream.
   */ public
";


%csmethodmodifiers XMLOutputStream::getStringStream "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers XMLOutputStream::XMLOutputStream(const XMLOutputStream& other) "
/**
   * Copy Constructor, made private so as to notify users, that copying an input stream is not supported. 
   */ /* libsbml-internal */ public
";


%csmethodmodifiers XMLOutputStream::XMLOutputStream "
/**
   * Unitialized XMLOutputStreams may only be created by subclasses.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers XMLOutputStream::writeChars(const std::string& name) "
/**
   * Outputs the given characters to the underlying stream.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers XMLOutputStream::writeIndent(bool isEnd = false) "
/**
   * Outputs indentation whitespace.
   *
   * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
   */ /* libsbml-internal */ public
";


%csmethodmodifiers XMLOutputStream::writeName(const std::string& name, const std::string& prefix = "") "
/**
   * Outputs name.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers XMLOutputStream::writeName(const XMLTriple& triple) "
/**
   * Outputs prefix:name.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers XMLOutputStream::writeValue(const std::string& value) "
/**
   * Outputs value in quotes.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers XMLOutputStream::writeValue(const char* value) "
/**
   * Outputs value in quotes.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers XMLOutputStream::writeValue(const bool& value) "
/**
   * Outputs \'true\' or \'false\' in quotes.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers XMLOutputStream::writeValue(const double& value) "
/**
   * Outputs the double value in quotes, or \'INF\', \'-INF\', or \'NaN\'.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers XMLOutputStream::writeValue(const long& value) "
/**
   * Outputs the long value in quotes.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers XMLOutputStream::writeValue(const int& value) "
/**
   * Outputs the int value in quotes.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers XMLOutputStream::writeValue(const unsigned int& value) "
/**
   * Outputs the int value in quotes.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers XMLOutputStream::setStringStream "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers XMLOutputStream::unsetStringStream "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers XMLOutputStringStream::XMLOutputStringStream(  std::ostringstream& stream , const std::string&  encoding     = "UTF-8" , bool                writeXMLDecl = true , const std::string&  programName  = "" , const std::string&  programVersion = "") "
/**
   * Creates a new XMLOutputStream that wraps stream.
   *
   * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
   */ /* libsbml-internal */ public
";


%csmethodmodifiers XMLOutputStringStream::getString "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers XMLOutputFileStream::XMLOutputFileStream(  std::ofstream&      stream , const std::string&  encoding     = "UTF-8" , bool                writeXMLDecl = true , const std::string&  programName  = "" , const std::string&  programVersion = "") "
/**
   * Creates a new XMLOutputStream that wraps stream.
   *
   * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
   */ /* libsbml-internal */ public
";


%typemap(csimports) XMLInputStream "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html An interface to an XML input stream.
 *
 * @if notclike @internal @endif
 */
"


%csmethodmodifiers XMLInputStream::XMLInputStream(  const char*        content , bool               isFile   = true , const std::string  library  = "" , XMLErrorLog*       errorLog = NULL ) "
/**
   * Creates a new XMLInputStream.
   *
   * @p content the source of the stream.
   *
   * @p isFile bool flag to indicate whether @p content is a file name.
   * If @c true, @p content is assumed to be the file from which the XML
   * content is to be read.  If @c false, @p content is taken to be a
   * string that @em is the content to be read.
   *
   * @p library the name of the parser library to use.
   *
   * @p errorLog the XMLErrorLog object to use.
   *
   * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
   */ /* libsbml-internal */ public
";


%csmethodmodifiers XMLInputStream::getEncoding "
/**
   * Returns the encoding of the XML stream.
   *
   * @return the encoding of the XML stream.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers XMLInputStream::getVersion "
/**
   * Returns the version of the XML stream.
   *
   * @return the version of the XML stream.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers XMLInputStream::getErrorLog "
/**
   * Returns an XMLErrorLog which can be used to log XML parse errors and
   * other validation errors (and messages).
   *
   * @return an XMLErrorLog which can be used to log XML parse errors and
   * other validation errors (and messages).
   */ /* libsbml-internal */ public
";


%csmethodmodifiers XMLInputStream::isEOF() const "
/**
   * Returns true if end of file (stream) has been reached, false
   * otherwise.
   *
   * @return true if end of file (stream) has been reached, false
   * otherwise.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers XMLInputStream::isError() const "
/**
   * Returns true if a fatal error occurred while reading from this stream.
   *
   * @return true if a fatal error occurred while reading from this stream.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers XMLInputStream::isGood() const "
/**
   * Returns true if the stream is in a good state (i.e. isEOF() and
   * isError() are both false), false otherwise.
   *
   * @return true if the stream is in a good state (i.e. isEOF() and
   * isError() are both false), false otherwise.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers XMLInputStream::next "
/**
   * Consumes the next XMLToken and return it.
   *
   * @return the next XMLToken or EOF (XMLToken.isEOF() == true).
   */ /* libsbml-internal */ public
";


%csmethodmodifiers XMLInputStream::peek "
/**
   * Returns the next XMLToken without consuming it.  A subsequent call to
   * either peek() or next() will return the same token.
   *
   * @return the next XMLToken or EOF (XMLToken.isEOF() == true).
   */ /* libsbml-internal */ public
";


%csmethodmodifiers XMLInputStream::skipPastEnd(const XMLToken& element) "
/**
   * Consume zero or more XMLTokens up to and including the corresponding
   * end XML element or EOF.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers XMLInputStream::skipText "
/**
   * Consume zero or more XMLTokens up to but not including the next XML
   * element or EOF.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers XMLInputStream::setErrorLog(XMLErrorLog* log) "
/**
   * Sets the XMLErrorLog this stream will use to log errors.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ /* libsbml-internal */ public
";


%csmethodmodifiers XMLInputStream::toString "
/**
   * Prints a string representation of the underlying token stream, for
   * debugging purposes.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers XMLInputStream::getSBMLNamespaces "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers XMLInputStream::setSBMLNamespaces(SBMLNamespaces * sbmlns) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers XMLInputStream::XMLInputStream(const XMLInputStream& other) "
/**
   * Copy Constructor, made private so as to notify users, that copying an input stream is not supported. 
   */ /* libsbml-internal */ public
";


%csmethodmodifiers XMLInputStream::XMLInputStream "
/**
   * Unitialized XMLInputStreams may only be created by subclasses.
   */ public
";


%csmethodmodifiers XMLInputStream::queueToken "
/**
   * Runs mParser until mTokenizer is ready to deliver at least one
   * XMLToken or a fatal error occurs.
   */ public
";


%typemap(csimports) XMLError "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Representation of errors, warnings and other diagnostics
 *
 * @htmlinclude not-sbml-warning.html
 *
 * LibSBML can be configured to use any of a number of XML parsers; at the
 * time of this writing, libSBML supports Xerces versions 2.4 through 3.1,
 * Expat version 1.95.x and higher, and libxml2 version 2.6.16 and higher.
 * These parsers each report different status codes for the various
 * exceptions that can occur during XML processing.  The XMLError object
 * class abstracts away from the particular diagnostics reported by the
 * different parsers and presents a single uniform interface and set of
 * status codes, along with operations for manipulating the error objects.
 *
 * When the libSBML XML parser layer encounters an error in the XML content
 * being processed, or when there is something else wrong (such as an
 * out-of-memory condition), the problems are reported as XMLError objects.
 * Each XMLError object instance has an identification number that
 * identifies the nature of the problem.
 * @if clike This error identifier will be up to five digits 
 * long and drawn from the enumeration <a class=\'el\'
 * href=\'#error-codes\'>XMLErrorCode_t</a>.  Applications can use the
 * error identifiers as a means of recognizing the error encountered and
 * changing their behavior if desired. @else This
 * error identifier is one of the constants listed in the next section below.
 * Applications can use the error identifiers as a means of recognizing the
 * error encountered and changing their behavior if desired.  @endif
 *
 * Integer error codes are useful for software, but not so much for telling
 * humans what happened.  For this reason, XMLError also provides two text
 * messages describing the nature of the error.  These messages are
 * accessible by means of the methods XMLError::getShortMessage() and
 * XMLError::getMessage().  The method XMLError::getShortMessage() returns
 * a very brief synopsis of the warning or error condition, whereas
 * XMLError::getMessage() returns a longer explanation.  These text strings
 * are suitable for displaying to human users.
 *
 * Each XMLError object also contains a category code; its value may be
 * retrieved using the method XMLError::getCategory().  Category values
 * are drawn from @if clike the enumeration <a class=\'el\' href=\'#XMLErrorCategory_t\'>XMLErrorCategory_t</a> described below.@else a
 * set of constants whose names begin with the characters @c LIBSBML_CAT_, described below.@endif &nbsp;Categories
 * are used by libSBML to provide more information to calling programs about
 * the nature of a given error.  
 *
 * In addition to category codes, each XMLError object also has a severity
 * code; its value may be retrieved using the method
 * XMLError::getSeverity().  Severity code values are drawn from
 * @if clike the enumeration <a class=\'el\' href=\'#XMLErrorSeverity_t\'>XMLErrorSeverity_t</a>@else a
 * set of constants whose names begin with the characters @c LIBSBML_SEV_@endif,
 * described below. Severity levels range from informational
 * (@link libsbmlcs.libsbml.LIBSBML_SEV_INFO LIBSBML_SEV_INFO@endlink) to
 * fatal errors (@link libsbmlcs.libsbml.LIBSBML_SEV_FATAL LIBSBML_SEV_FATAL@endlink).
 *
 * Finally, XMLError objects record the line and column near where the
 * problem occurred in the XML content.  The values can be retrieved using
 * the methods XMLError::getLine() and XMLError::getColumn().  We say \'near
 * where the problem occurred\', because many factors affect how accurate
 * the line/column information ultimately is.  For example, sometimes, the
 * underlying XML parsers can only report such information for the parent
 * XML element where an error occurs, and not for the specific point where
 * the problem occurs.  In other situations, some parsers report invalid
 * line and/or column numbers altogether.  If this occurs, libSBML sets the
 * line and/or column number in the XMLError object to either
 * <code>0</code> or the value of the maximum unsigned long integer
 * representable on the platform where libSBML is running.  The probability
 * that a true line or column number in an SBML model would equal this
 * value is vanishingly small; thus, if an application encounters these
 * values in an XMLError object, it can assume no valid line/column number
 * could be provided by libSBML in that situation.
 * 
 * @if clike
 * <h3><a class=\'anchor\' name=\'error-codes\'>XMLErrorCode_t</a></h3>
 *
 * This is an enumeration of all the error and warning codes returned by
 * the XML layer in libSBML.  Each code is an integer with a 4-digit value
 * less than 10000.  The following table lists each possible value and a
 * brief description of its meaning.
 * @endif@if java <h3><a class=\'anchor\' 
 * name=\'error-codes\'>Error codes associated with XMLError objects</a></h3>
 * 
 * The error and warning codes returned by the XML layer in libSBML are
 * listed in the table below.  In the libSBML Java language interface,
 * these error identifiers are currently implemented as static integer
 * constants defined in the interface class <code><a
 * href=\'libsbmlcs.libsbml.html\'>libsbmlConstants</a></code>.  This is
 * admittedly not an ideal approach from the standpoint of modern Java
 * programming, but it was necessary to work around the lack of
 * enumerations in Java prior to JDK 1.5.  Future versions of libSBML may
 * use a proper Java enumeration type to define the error
 * identifiers. @endif@if csharp <h3><a class=\'anchor\' 
 * name=\'error-codes\'>Error codes associated with XMLError objects</a></h3>
 * 
 * The error and warning codes returned by the XML layer in libSBML are
 * listed in the table below.  In the libSBML C# language interface,
 * these error identifiers are currently implemented as static integer
 * constants defined in the interface class @link libsbmlcs.libsbml@endlink.@endif
 *
 * <center>
 * <table cellspacing=\'1\' cellpadding=\'1\' border=\'0\' class=\'text-table width80 normal-font alt-row-colors\'>
 * <caption>Possible XMLError error codes.  Depending on the programming
 * language in use, the <em>Enumerator</em> values will be defined either
 * as a value from the enumeration XMLErrorCode_t or as integer constants.
 * To make this table more compact, we have shortened the identifiers for
 * the category and severity codes to their essential parts.  To get the
 * actual names of the constants, prepend <code>LIBSBML_CAT_</code> to the
 * category names and <code>LIBSBML_SEV_</code> to the severity names
 * shown in the two right-hand columns.
 * </caption>
 *  <tr style=\'background: lightgray\' class=\'normal-font\'>
 *      <th>Enumerator</th>
 *      <th>Meaning</th>
 *      <th width=\'90\'>Category</th>
 *      <th width=\'90\'>Severity</th>
 *  </tr>
 * <tr><td>@link libsbmlcs.libsbml.XMLUnknownError XMLUnknownError@endlink</td><td>Unrecognized error encountered internally</td><td>INTERNAL</td><td>FATAL</td></tr>
 * <tr><td>@link libsbmlcs.libsbml.XMLOutOfMemory XMLOutOfMemory@endlink</td> <td>Out of memory</td><td>SYSTEM</td><td>FATAL</td></tr>
 * <tr><td>@link libsbmlcs.libsbml.XMLFileUnreadable XMLFileUnreadable@endlink</td> <td>File unreadable</td><td>SYSTEM</td><td>ERROR</td></tr>
 * <tr><td>@link libsbmlcs.libsbml.XMLFileUnwritable XMLFileUnwritable@endlink</td> <td>File unwritable</td><td>SYSTEM</td><td>ERROR</td></tr>
 * <tr><td>@link libsbmlcs.libsbml.XMLFileOperationError XMLFileOperationError@endlink</td><td>Error encountered while attempting file operation</td><td>SYSTEM</td><td>ERROR</td></tr>
 * <tr><td>@link libsbmlcs.libsbml.XMLNetworkAccessError XMLNetworkAccessError@endlink</td><td>Network access error</td><td>SYSTEM</td><td>ERROR</td></tr>
 * <tr><td>@link libsbmlcs.libsbml.InternalXMLParserError InternalXMLParserError@endlink</td><td>Internal XML parser state error</td><td>INTERNAL</td><td>FATAL</td></tr>
 * <tr><td>@link libsbmlcs.libsbml.UnrecognizedXMLParserCode UnrecognizedXMLParserCode@endlink</td><td>XML parser returned an unrecognized error code</td><td>INTERNAL</td><td>FATAL</td></tr>
 * <tr><td>@link libsbmlcs.libsbml.XMLTranscoderError XMLTranscoderError@endlink</td><td>Character transcoder error</td><td>INTERNAL</td><td>FATAL</td></tr>
 * <tr><td>@link libsbmlcs.libsbml.MissingXMLDecl MissingXMLDecl@endlink</td><td>Missing XML declaration at beginning of XML input</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>@link libsbmlcs.libsbml.MissingXMLEncoding MissingXMLEncoding@endlink</td><td>Missing encoding attribute in XML declaration</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>@link libsbmlcs.libsbml.BadXMLDecl BadXMLDecl@endlink</td><td>Invalid or unrecognized XML declaration or XML encoding</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>@link libsbmlcs.libsbml.BadXMLDOCTYPE BadXMLDOCTYPE@endlink</td><td>Invalid, malformed or unrecognized XML DOCTYPE declaration</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>@link libsbmlcs.libsbml.InvalidCharInXML InvalidCharInXML@endlink</td><td>Invalid character in XML content</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>@link libsbmlcs.libsbml.BadlyFormedXML BadlyFormedXML@endlink</td><td>XML content is not well-formed</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>@link libsbmlcs.libsbml.UnclosedXMLToken UnclosedXMLToken@endlink</td><td>Unclosed XML token</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>@link libsbmlcs.libsbml.InvalidXMLConstruct InvalidXMLConstruct@endlink</td><td>XML construct is invalid or not permitted</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>@link libsbmlcs.libsbml.XMLTagMismatch XMLTagMismatch@endlink</td><td>Element tag mismatch or missing tag</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>@link libsbmlcs.libsbml.DuplicateXMLAttribute DuplicateXMLAttribute@endlink</td><td>Duplicate XML attribute</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>@link libsbmlcs.libsbml.UndefinedXMLEntity UndefinedXMLEntity@endlink</td><td>Undefined XML entity</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>@link libsbmlcs.libsbml.BadProcessingInstruction BadProcessingInstruction@endlink</td><td>Invalid, malformed or unrecognized XML processing instruction</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>@link libsbmlcs.libsbml.BadXMLPrefix BadXMLPrefix@endlink</td><td>Invalid or undefined XML namespace prefix</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>@link libsbmlcs.libsbml.BadXMLPrefixValue BadXMLPrefixValue@endlink</td><td>Invalid XML namespace prefix value</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>@link libsbmlcs.libsbml.MissingXMLRequiredAttribute MissingXMLRequiredAttribute@endlink</td><td>Missing a required XML attribute</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>@link libsbmlcs.libsbml.XMLAttributeTypeMismatch XMLAttributeTypeMismatch@endlink</td><td>Data type mismatch for the value of an attribute</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>@link libsbmlcs.libsbml.XMLBadUTF8Content XMLBadUTF8Content@endlink</td><td>Invalid UTF8 content</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>@link libsbmlcs.libsbml.MissingXMLAttributeValue MissingXMLAttributeValue@endlink</td><td>Missing or improperly formed attribute value</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>@link libsbmlcs.libsbml.BadXMLAttributeValue BadXMLAttributeValue@endlink</td><td>Invalid or unrecognizable attribute value</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>@link libsbmlcs.libsbml.BadXMLAttribute BadXMLAttribute@endlink</td><td>Invalid, unrecognized or malformed attribute</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>@link libsbmlcs.libsbml.UnrecognizedXMLElement UnrecognizedXMLElement@endlink</td><td>Element either not recognized or not permitted</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>@link libsbmlcs.libsbml.BadXMLComment BadXMLComment@endlink</td><td>Badly formed XML comment</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>@link libsbmlcs.libsbml.BadXMLDeclLocation BadXMLDeclLocation@endlink</td><td>XML declaration not permitted in this location</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>@link libsbmlcs.libsbml.XMLUnexpectedEOF XMLUnexpectedEOF@endlink</td><td>Reached end of input unexpectedly</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>@link libsbmlcs.libsbml.BadXMLIDValue BadXMLIDValue@endlink</td><td>Value is invalid for XML ID, or has already been used</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>@link libsbmlcs.libsbml.BadXMLIDRef BadXMLIDRef@endlink</td><td>XML ID value was never declared</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>@link libsbmlcs.libsbml.UninterpretableXMLContent UninterpretableXMLContent@endlink</td><td>Unable to interpret content</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>@link libsbmlcs.libsbml.BadXMLDocumentStructure BadXMLDocumentStructure@endlink</td><td>Bad XML document structure</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>@link libsbmlcs.libsbml.InvalidAfterXMLContent InvalidAfterXMLContent@endlink</td><td>Encountered invalid content after expected content</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>@link libsbmlcs.libsbml.XMLExpectedQuotedString XMLExpectedQuotedString@endlink</td><td>Expected to find a quoted string</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>@link libsbmlcs.libsbml.XMLEmptyValueNotPermitted XMLEmptyValueNotPermitted@endlink</td><td>An empty value is not permitted in this context</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>@link libsbmlcs.libsbml.XMLBadNumber XMLBadNumber@endlink</td><td>Invalid or unrecognized number</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>@link libsbmlcs.libsbml.XMLBadColon XMLBadColon@endlink</td><td>Colon characters are invalid in this context</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>@link libsbmlcs.libsbml.MissingXMLElements MissingXMLElements@endlink</td><td>One or more expected elements are missing</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>@link libsbmlcs.libsbml.XMLContentEmpty XMLContentEmpty@endlink</td><td>Main XML content is empty</td><td>XML</td><td>ERROR</td></tr>
 * </table>
 * </center>
 *
 *
 * @if clike
 * <h3><a class=\'anchor\' name=\'error-categories\'>XMLErrorCategory_t</a></h3>
 *
 * As discussed above, each XMLError object contains a value for a category
 * identifier, describing the type of issue that the XMLError object
 * represents.  The category can be retrieved from an XMLError object using
 * the method XMLError::getCategory().  The value is chosen from the
 * enumeration of category codes <a class=\'el\' href=\'#XMLErrorCategory_t\'>
 * XMLErrorCategory_t</a>.  The following table
 * lists each possible value and a brief description of its meaning.
 * @endif@if java <h3><a class=\'anchor\'
 * name=\'error-categories\'>Category codes associated with XMLError objects</a></h3>
 *
 * As discussed above, each XMLError object contains a value for a category
 * identifier, describing the type of issue that the XMLError object represents.
 * The category can be retrieved from an XMLError object using the method
 * XMLError::getCategory(). The following table lists each possible value
 * and a brief description of its meaning.
 * 
 * As is the case with the error codes, in the libSBML Java language
 * interface, the category identifiers are currently implemented as static
 * integer constants defined in the interface class
 * <code>libsbmlConstants</code> in the file \'<a
 * href=\'libsbmlcs.libsbml.html\'>libsbmlcs.libsbml.java</a>\'.
 * @endif@if csharp <h3><a class=\'anchor\'
 * name=\'error-categories\'>Category codes associated with XMLError objects</a></h3>
 *
 * As discussed above, each XMLError object contains a value for a category
 * identifier, describing the type of issue that the XMLError object represents.
 * The category can be retrieved from an XMLError object using the method
 * XMLError::getCategory(). The following table lists each possible value
 * and a brief description of its meaning.
 * 
 * As is the case with the error codes, in the libSBML C# language
 * interface, the category identifiers are currently implemented as static
 * integer constants defined in the interface
 * class @link libsbmlcs.libsbml@endlink. @endif
 *
 * <center>
 * <table width=\'90%\' cellspacing=\'1\' cellpadding=\'1\' border=\'0\' class=\'text-table width80 normal-font alt-row-colors\'>
 *  <tr style=\'background: lightgray\' class=\'normal-font\'>
 *      <th>Enumerator</th>
 *      <th>Meaning</th>
 *  </tr>
 * <tr><td>@link libsbmlcs.libsbml.LIBSBML_CAT_INTERNAL LIBSBML_CAT_INTERNAL@endlink</td>
 * <td>A problem involving the libSBML
 * software itself or the underlying XML parser.  This almost certainly
 * indicates a software defect (i.e., bug) in libSBML.  Please report
 * instances of this to the libSBML developers.</td></tr>
 * <tr><td>@link libsbmlcs.libsbml.LIBSBML_CAT_SYSTEM LIBSBML_CAT_SYSTEM@endlink</td>
 * <td>A problem reported by the operating
 * system, such as an inability to read or write a file.  This indicates
 * something that is not a program error but is outside of the control of
 * libSBML.</td></tr>
 * <tr><td>@link libsbmlcs.libsbml.LIBSBML_CAT_XML LIBSBML_CAT_XML@endlink</td>
 * <td>A problem in the XML content itself.  This
 * usually arises from malformed XML or the use of
 * constructs not permitted in SBML.</td></tr>
 * </table>
 * </center>
 *
 *
 * @if clike
 * <h3><a class=\'anchor\' name=\'error-severities\'>XMLErrorSeverity_t</a></h3>
 *
 * As described above, each XMLError object contains a value for a severity
 * code, describing how critical is the issue that the XMLError object
 * represents.  The severity can be retrieved from an XMLError object using
 * the method XMLError::getSeverity().  The value is chosen from the
 * enumeration of category codes <a class=\'el\' href=\'#XMLErrorSeverity_t\'>
 * XMLErrorSeverity_t</a>.  The following table
 * lists each possible value and a brief description of its meaning.
 * @endif@if java <h3><a class=\'anchor\'
 * name=\'error-severities\'>Severity codes associated with XMLError objects</a></h3>
 * 
 * As described above, each XMLError object contains a value for a severity
 * code, describing how severe is the issue that the XMLError object
 * represents.  The severity be retrieved from an XMLError object using the
 * method XMLError::getSeverity(). The following table lists each possible
 * value and a brief description of its meaning.
 * 
 * As is the case with the category codes, in the libSBML Java language
 * interface, these severity codes are currently
 * implemented as static integer constants defined in the interface class
 * <code>libsbmlConstants</code> in the file \'<a
 * href=\'libsbmlcs.libsbml.html\'>libsbmlcs.libsbml.java</a>\'.  This
 * is admittedly not an ideal approach from the standpoint of modern Java
 * programming, but it was necessary to work around the lack of
 * enumerations in Java prior to JDK 1.5.  Future versions of libSBML may
 * use a proper Java enumeration type to define the severity
 * codes. @endif@if csharp <h3><a class=\'anchor\'
 * name=\'error-severities\'>Severity codes associated with XMLError objects</a></h3>
 * 
 * As described above, each XMLError object contains a value for a severity
 * code, describing how severe is the issue that the XMLError object
 * represents.  The severity be retrieved from an XMLError object using the
 * method XMLError::getSeverity(). The following table lists each possible
 * value and a brief description of its meaning.
 * 
 * As is the case with the category codes, in the libSBML C# language
 * interface, these severity codes are currently
 * implemented as static integer constants defined in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif
 *
 * <center>
 * <table width=\'90%\' cellspacing=\'1\' cellpadding=\'1\' border=\'0\' class=\'text-table width80 normal-font alt-row-colors\'>
 *  <tr style=\'background: lightgray\' class=\'normal-font\'>
 *      <th>Enumerator</th>
 *      <th>Meaning</th>
 *  </tr>
 * <tr><td>@link libsbmlcs.libsbml.LIBSBML_SEV_INFO LIBSBML_SEV_INFO@endlink</td>
 * <td>The error is actually informational and
 * not necessarily a serious problem.</td></tr>
 * <tr><td>@link libsbmlcs.libsbml.LIBSBML_SEV_WARNING LIBSBML_SEV_WARNING@endlink</td>
 * <td>The error object represents a problem
 * that is not serious enough to necessarily stop the problem, but
 * applications should take note of the problem and evaluate what its
 * implications may be.</td></tr>
 * <tr><td>@link libsbmlcs.libsbml.LIBSBML_SEV_ERROR LIBSBML_SEV_ERROR@endlink</td>
 * <td>The error object represents a serious
 * error.  The application may continue running but it is unlikely to be
 * able to continue processing the same XML file or data stream.</td></tr>
 * <tr><td>@link libsbmlcs.libsbml.LIBSBML_SEV_FATAL LIBSBML_SEV_FATAL@endlink</td>
 * <td>A serious error occurred, such as an
 * out-of-memory condition, and the software should terminate
 * immediately.</td></tr>
 * </table>
 * </center>
 */
"


%csmethodmodifiers XMLError::XMLError( const int errorId           = 0 , const std::string& details  = "" , const unsigned int line     = 0 , const unsigned int column   = 0 , const unsigned int severity = LIBSBML_SEV_FATAL , const unsigned int category = LIBSBML_CAT_INTERNAL ) "
/**
   * Creates a new XMLError to report that something occurred during XML
   * processing.
   *
   * XMLError objects have identification numbers to indicate the nature of
   * the exception.  @if clike These numbers are drawn from
   * the enumeration <a class=\'el\'
   * href=\'#error-codes\'>XMLErrorCode_t</a>.
   * @else These numbers are defined as unsigned 
   * integer constants in the file
   * \'libsbmlcs.libsbml.java\'.  See the <a class=\'el\'
   * href=\'#error-codes\'>top of this documentation</a> for a table
   * listing the possible values and their meanings. @endif The argument @p
   * errorId to this constructor @em can be (but does not have to be) a
   * value from this @if clike enumeration. If it is a value
   * from <a class=\'el\' href=\'#error-codes\'>XMLErrorCode_t</a>, the
   * XMLError class assumes the error is a low-level system or XML layer
   * error and <em>prepends</em> a built-in, predefined error message to
   * any string passed in the argument @p details to this constructor.  In
   * addition, all <a class=\'el\' href=\'#error-codes\'>XMLErrorCode_t</a>
   * errors have associated values for the @p severity and @p category
   * codes, and these fields are filled-in as well from the enumerations <a
   * class=\'el\' href=\'#error-severities\'>XMLErrorSeverity_t</a> and <a
   * class=\'el\' href=\'#error-categories\'>XMLErrorCategory_t</a>,
   * respectively. @else set of constants.  If it is
   * one of the predefined error identifiers, the XMLError class assumes
   * the error is a low-level system or XML layer error and
   * <em>prepends</em> a built-in, predefined error message to any string
   * passed in the argument @p details to this constructor.  In addition,
   * all the predefined error identifiers have associated values for the @p
   * severity and @p category codes, and these fields are filled-in as
   * well. @endif
   *
   * If the error identifier @p errorId is a number greater than 9999, this
   * constructor assumes that the error was generated from another part of
   * the software, and does not do additional filling in of values beyond
   * the defaults in the constructor itself.  This allows XMLError to serve
   * as a base class for other errors (and is used in this way elsewhere in
   * libSBML).  Callers should fill in all the parameters with suitable
   * values if generating errors with codes greater than 9999 to make
   * maximum use of the XMLError facilities.
   *
   * @if clike As mentioned above, there are two other
   * enumerations, <a class=\'el\'
   * href=\'#error-severities\'>XMLErrorSeverity_t</a> and <a class=\'el\'
   * href=\'#error-categories\'>XMLErrorCategory_t</a>, used for indicating
   * the severity and category of error for the predefined XMLError codes.
   * The values passed in @p severity and @p category override the defaults
   * assigned based on the error code.  If the value of @p errorId is a
   * value from <a class=\'el\' href=\'#error-codes\'>XMLErrorCode_t</a>,
   * callers do not need to fill in @p severity and @p category.
   * Conversely, if @p errorId is not a value from <a class=\'el\'
   * href=\'#error-codes\'>XMLErrorCode_t</a>, callers can use other
   * values (not just those from <a class=\'el\'
   * href=\'#error-severities\'>XMLErrorSeverity_t</a> and <a class=\'el\'
   * href=\'#error-categories\'>XMLErrorCategory_t</a>, but their own
   * special values) for @p severity and @p
   * category. @else As mentioned above, 
   * there are additional constants defined for <a class=\'el\'
   * href=\'#error-severities\'>standard severity</a> and <a class=\'el\'
   * href=\'#error-categories\'>standard category</a> codes, and every predefined 
   * error in libSBML has an associated value for severity and category taken
   * from these predefined sets.  These constants have symbol names
   * prefixed with <code>LIBSBML_SEV_</code> and <code>LIBSBML_CAT_</code>,
   * respectively.  If the value of @p errorId is one of the standard error
   * codes, callers do not need to fill in @p severity and @p category in a
   * call to this constructor.  Conversely, if @p errorId is not an existing
   * XML-level error code, callers can use other values for @p severity and
   * @p category. @endif
   *
   * @param errorId a long integer, the identification number of the error.
   * 
   * @param details a string containing additional details about the error.
   * If the error code in @p errorId is one that is recognized by XMLError,
   * the given message is @em appended to a predefined message associated
   * with the given code.  If the error code is not recognized, the message
   * is stored as-is as the text of the error.
   * 
   * @param line a long integer, the line number at which the error occured.
   * 
   * @param column a long integer, the column number at which the error occured.
   * 
   * @param severity an integer indicating severity of the error.
   * 
   * @param category an integer indicating the category to which the error
   * belongs.
   *
   * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
   */ public
";


%csmethodmodifiers XMLError::XMLError(const XMLError& orig) "
/**
   * Copy constructor; creates a copy of this XMLError.
   *
   * @p orig the XMLError object to copy.
   *
   * @throws @if python ValueError @else XMLConstructorException @endif
   * Thrown if the argument @p orig is @c null.
   */ public
";


%csmethodmodifiers XMLError::getErrorId() const "
/**
   * Returns the identifier of this error.
   *
   * @return the error code for this error.
   * 
   * @see getMessage()
   * @see getShortMessage()
   * @see getCategory()
   * @see getSeverity()
   */ public
";


%csmethodmodifiers XMLError::getMessage() const "
/**
   * Returns the message text of this error.
   *
   * The message associated with an error object describes the nature of
   * the problem.  The message returned by this method is generally longer
   * and clearer than the message returned by XMLError::getShortMessage(),
   * but not in all cases.
   *
   * Callers may use XMLError::getCategory() and XMLError::getSeverity() to
   * obtain additional information about the nature and severity of the
   * problem.
   *
   * @return the message text
   *
   * @see getErrorId()
   * @see getShortMessage()
   * @see getCategory()
   * @see getSeverity()
   */ public
";


%csmethodmodifiers XMLError::getShortMessage() const "
/**
   * Returns a brief message for this error.
   *
   * This is an alternative error message that, in general, is as short as
   * the authors could make it.  However, brevity is often inversely
   * proportional to clarity, so this short message may not be sufficiently
   * informative to understand the nature of the error.  Calling
   * applications may wish to check XMLError::getMessage() in addition or
   * instead.
   *
   * @return the short error message text
   * 
   * @see getErrorId()
   * @see getMessage()
   * @see getCategory()
   * @see getSeverity()
   */ public
";


%csmethodmodifiers XMLError::getLine() const "
/**
   * Returns the line number in the XML input near where the error, warning
   * or other diagnostic occurred.
   *
   * We say \'near where the problem occurred\', because many factors affect
   * how accurate the line/column information ultimately is.  For example,
   * sometimes, the underlying XML parsers can only report such information
   * for the parent XML element where an error occurs, and not for the
   * specific point where the problem occurs.  In other situations, some
   * parsers report invalid line and/or column numbers altogether.  If this
   * occurs, libSBML sets the line and/or column number in the XMLError
   * object to either <code>0</code> or the value of the maximum unsigned
   * long integer representable on the platform where libSBML is running.
   * The probability that a true line or column number in an SBML model
   * would equal this value is vanishingly small; thus, if an application
   * encounters these values in an XMLError object, it can assume no valid
   * line/column number could be provided by libSBML in that situation.
   *
   * @return the line number
   *
   * @see getColumn()
   */ public
";


%csmethodmodifiers XMLError::getColumn() const "
/**
   * Returns the column number in the XML input near where the error,
   * warning or other diagnostic occurred.
   *
   * We say \'near where the problem occurred\', because many factors affect
   * how accurate the line/column information ultimately is.  For example,
   * sometimes, the underlying XML parsers can only report such information
   * for the parent XML element where an error occurs, and not for the
   * specific point where the problem occurs.  In other situations, some
   * parsers report invalid line and/or column numbers altogether.  If this
   * occurs, libSBML sets the line and/or column number in the XMLError
   * object to either <code>0</code> or the value of the maximum unsigned
   * long integer representable on the platform where libSBML is running.
   * The probability that a true line or column number in an SBML model
   * would equal this value is vanishingly small; thus, if an application
   * encounters these values in an XMLError object, it can assume no valid
   * line/column number could be provided by libSBML in that situation.
   *
   * @return the column number
   *
   * @see getLine()
   */ public
";


%csmethodmodifiers XMLError::getSeverity() const "
/**
   * Returns the severity of this error.
   *
   * XMLError defines an enumeration of severity codes for the XML layer.
   * Applications that build on XMLError by subclassing it may add their
   * own severity codes with numbers higher than those in the predefined
   * set of severity codes.
   *
   * @return the severity of this XMLError.
   *
   * @see getSeverityAsString()
   * @see getCategory()
   */ public
";


%csmethodmodifiers XMLError::getSeverityAsString() const "
/**
   * Returns a string describing the severity level of this error.
   *
   * XMLError defines an enumeration of severity codes for the XML layer.
   * Applications that build on XMLError by subclassing it may add their
   * own severity codes with numbers higher than those in the predefined
   * set of severity codes.
   *
   * @return string representing the severity of this XMLError.
   *
   * @see getSeverity()
   * @see getCategoryAsString()
   */ public
";


%csmethodmodifiers XMLError::getCategory() const "
/**
   * Returns the category of this error.
   *
   * XMLError defines an enumeration of category codes for the XML layer.
   * Applications that build on XMLError by subclassing it may add their
   * own categories with numbers higher than those in the predefined
   * set of category codes.
   *
   * Categories can be used to partition errors into distinct groups.
   * Among other things, this can be used to prevent id conflicts by
   * uniquely identifying an XMLError by both id and category.
   *
   * @return the category of this XMLError.
   *
   * @see getSeverity()
   * @see getCategoryAsString()
   */ public
";


%csmethodmodifiers XMLError::getCategoryAsString() const "
/**
   * Returns a string describing the category of this error.
   *
   * XMLError defines an enumeration of category codes for the XML layer.
   * Applications that build on XMLError by subclassing it may add their
   * own categories with numbers higher than those in the predefined
   * set of category codes.
   *
   * Categories can be used to partition errors into distinct groups.
   * Among other things, this can be used to prevent id conflicts by
   * uniquely identifying an XMLError by both id and category.
   *
   * @return string representing the category of this XMLError.
   *
   * @see getCategory()
   * @see getSeverityAsString()
   */ public
";


%csmethodmodifiers XMLError::isInfo() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * error object is for information purposes only.
   *
   * This is equivalent to obtaining the severity code from an XMLError
   * object (via XMLError::getSeverity()) and then comparing it to the
   * value @link libsbmlcs.libsbml.LIBSBML_SEV_INFO LIBSBML_SEV_INFO@endlink from the
   * @if clike enumeration #XMLErrorSeverity_t. @else set of predefined
   * severity codes.@endif
   *
   * @return @c true if this XMLError is for informational purposes only,
   * @c false otherwise.
   *
   * @see isWarning()
   * @see isError()
   * @see isFatal()
   */ public
";


%csmethodmodifiers XMLError::isWarning() const "
/**
   * Predicate returning @c true or @c false depending on whether 
   * this error object is a warning.
   *
   * This is equivalent to obtaining the severity code from an XMLError
   * object (via XMLError::getSeverity()) and then comparing it to the
   * value @link libsbmlcs.libsbml.LIBSBML_SEV_WARNING LIBSBML_SEV_WARNING@endlink from the
   * @if clike enumeration #XMLErrorSeverity_t. @else set of predefined
   * severity codes.@endif
   *
   * @return @c true if this error is a warning, @c false otherwise.
   *
   * @see isInfo()
   * @see isError()
   * @see isFatal()
   */ public
";


%csmethodmodifiers XMLError::isError() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * error is a significant error.
   *
   * This is equivalent to obtaining the severity code from an XMLError
   * object (via XMLError::getSeverity()) and then comparing it to the
   * value @link libsbmlcs.libsbml.LIBSBML_SEV_ERROR LIBSBML_SEV_ERROR@endlink from the
   * @if clike enumeration #XMLErrorSeverity_t. @else set of predefined
   * severity codes.@endif
   *
   * @return @c true if this error is an error, @c false otherwise.
   *
   * @see isInfo()
   * @see isWarning()
   * @see isFatal()
   */ public
";


%csmethodmodifiers XMLError::isFatal() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * error is a fatal run-time error.
   *
   * This is equivalent to obtaining the severity code from an XMLError
   * object (via XMLError::getSeverity()) and then comparing it to the
   * value @link libsbmlcs.libsbml.LIBSBML_SEV_FATAL LIBSBML_SEV_FATAL@endlink from the
   * @if clike enumeration #XMLErrorSeverity_t. @else set of predefined severity codes.@endif
   *
   * @return @c true if this error is a fatal error, @c false otherwise.
   *
   * @see isInfo()
   * @see isWarning()
   * @see isError()
   */ public
";


%csmethodmodifiers XMLError::isInternal() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * error resulted from an internal program error.
   *
   * This is equivalent to obtaining the category identifier from an
   * XMLError object (via XMLError::getCategory()) and then comparing it to
   * the value @link libsbmlcs.libsbml.LIBSBML_CAT_INTERNAL LIBSBML_CAT_INTERNAL@endlink from the
   * @if clike enumeration #XMLErrorCategory_t. @else set of predefined category codes.@endif
   *
   * @return @c true or @c false
   *
   * @see isSystem()
   * @see isXML()
   */ public
";


%csmethodmodifiers XMLError::isSystem() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * error was generated by the operating system.
   *
   * This is equivalent to obtaining the category identifier from an
   * XMLError object (via XMLError::getCategory()) and then comparing it to
   * the value @link libsbmlcs.libsbml.LIBSBML_CAT_SYSTEM LIBSBML_CAT_SYSTEM@endlink from the
   * @if clike enumeration #XMLErrorCategory_t. @else set of predefined category codes.@endif
   *
   * @return @c true or @c false
   *
   * @see isInternal()
   * @see isXML()
   */ public
";


%csmethodmodifiers XMLError::isXML() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * error resulted from a problem in the XML input (e.g., an XML syntax
   * error).
   *
   * This is equivalent to obtaining the category identifier from an
   * XMLError object (via XMLError::getCategory()) and then comparing it to
   * the value @link libsbmlcs.libsbml.LIBSBML_CAT_XML LIBSBML_CAT_XML@endlink from the
   * @if clike enumeration #XMLErrorCategory_t. @else set of predefined category codes.@endif
   *
   * @return @c true or @c false
   *
   * @see isInternal()
   * @see isSystem()
   */ public
";


%csmethodmodifiers XMLError::isValid() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * error resulted from a problem or whether it was logged as an unknown
   * error.
   *
   * This is equivalent to obtaining the error identifier from an
   * XMLError object (via XMLError::getErrorId()) and then comparing it to
   * the value XMLUnknownError or UnknownError from the
   * @if clike enumeration #XMLErrorCode_t. @else set of predefined error codes.@endif
   *
   * @return @c true or @c false
   */ public
";


%csmethodmodifiers XMLError::setLine(unsigned int line) "
/**
   * Sets the line number where this error occurred.
   * 
   * @param line a long integer, the line number to set.
   *
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   *
   * @see setColumn(long column)
   */ public
";


%csmethodmodifiers XMLError::setColumn(unsigned int column) "
/**
   * Sets the column number where this error occurred.
   * 
   * @param column a long integer, the column number to set.
   *
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   *
   * @see setLine(long line)
   */ public
";


%csmethodmodifiers XMLError::getStandardMessage(const int code) "
/**
   * Returns a copy of the message string associated with the given
   * predefined XMLError code.
   *
   * @param code the error code whose message is sought; it must be a
   * predefined value from @if clike <a class=\'el\' href=\'#error-codes\'>
   * XMLErrorCode_t</a>. @else <a class=\'el\' href=\'#error-codes\'>the set
   * of predefined error identifiers</a>.@endif
   */ public
";


%csmethodmodifiers XMLError::getPackage() const "
/**
   * Returns the SBML Level&nbsp;3 package extension (if any) that logged
   * this error.
   *
   * Each error logged by an libSBML extension for SBML Level&nbsp;3 packages
   * includes a record of the package that logged it.  The field is a simple
   * text string.  If the string is empty or has the value @c \'core\', then
   * the error came from libSBML core; otherwise, the string will be the
   * short-form name of the package (e.g., @c \'comp\' for the Hierarchical
   * Model Composition package).
   *
   * @return a string representing the name of the package that logged this
   * error.  If the error did not come from a package extension, the value
   * will be the empty string or @c \'core\'.
   */ public
";


%csmethodmodifiers XMLError::getErrorIdOffset() const "
/**
   * Returns libSBML\'s internal numerical offset for the error code
   * associated with this error.
   *
   * In the SBML Level&nbsp;3 package specifications, package validation
   * rules are identified by 5-digit numbers prefixed with the nickname of
   * the package itself&mdash;e.g., &ldquo;comp-10101&rdquo;,
   * &ldquo;fbc-20301&rdquo;, etc.  Historically, libSBML reported error
   * codes as pure integers, and some application software systems make
   * decisions based on the numerical values of the error codes.  To permit
   * these applications to continue to function in this fashion, libSBML
   * internally continues to maintain error identifiers as pure integers.  To
   * handle the possibility that errors may come from package extensions,
   * libSBML uses numerical offsets added to the internal error codes.  These
   * offsets add two leading digits to the regular 5-digit error codes; for
   * example, &ldquo;comp&rdquo; error codes are stored as 1010101, 1020102,
   * etc.  The offset in this case is 1000000.  Another package will have the
   * offset 2000000, yet another will have 3000000, etc.
   *
   * This method returns the integer offset in this error\'s error code.
   * Calling applications can get the 5-digit package-specific number for a
   * given error code by subtracting the offset from the value reported by
   * getErrorId():
   * @verbatim
 getErrorId() - getErrorIdOffset()
 @endverbatim
   * When libSBML produces error messages, it combines the text string
   * returned by getPackage() with the subtracted value of the error code,
   * to produce a text string of the form &ldquo;comp-10101&rdquo;.
   *
   * @see getErrorId()
   * @see getPackage()
   */ public
";


%typemap(csimports) XMLErrorLog "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Log of errors and other events encountered while
 * processing an XML file or data stream.
 *
 * @htmlinclude not-sbml-warning.html
 *
 * The error log is a list.  The XML layer of libSBML maintains an error
 * log associated with a given XML document or data stream.  When an
 * operation results in an error, or when there is something wrong with the
 * XML content, the problem is reported as an XMLError object stored in the
 * XMLErrorLog list.  Potential problems range from low-level issues (such
 * as the inability to open a file) to XML syntax errors (such as
 * mismatched tags or other problems).
 *
 * A typical approach for using this error log is to first use
 * @if java XMLErrorLog::getNumErrors()@else getNumErrors()@endif
 * to inquire how many XMLError object instances it contains, and then to
 * iterate over the list of objects one at a time using
 * getError(long n) const.  Indexing in the list begins at 0.
 *
 * In normal circumstances, programs using libSBML will actually obtain an
 * SBMLErrorLog rather than an XMLErrorLog.  The former is subclassed from
 * XMLErrorLog and simply wraps commands for working with SBMLError objects
 * rather than the low-level XMLError objects.  Classes such as
 * SBMLDocument use the higher-level SBMLErrorLog.
 */
"


%csmethodmodifiers XMLErrorLog::getNumErrors() const "
/**
   * Returns the number of errors that have been logged.
   *
   * To retrieve individual errors from the log, callers may use
   * @if clike getError() @else XMLErrorLog::getError(long n) @endif.
   *
   * @return the number of errors that have been logged.
   */ public
";


%csmethodmodifiers XMLErrorLog::getError "
/**
   * Returns the <i>n</i>th XMLError object in this log.
   *
   * Index @p n is counted from 0.  Callers should first inquire about the
   * number of items in the log by using the method
   * @if java XMLErrorLog::getNumErrors()@else getNumErrors()@endif.
   * Attempts to use an error index number that exceeds the actual number
   * of errors in the log will result in a @c null being returned.
   *
   * @param n the index number of the error to retrieve (with 0 being the
   * first error).
   *
   * @return the <i>n</i>th XMLError in this log, or @c null if @p n is
   * greater than or equal to
   * @if java XMLErrorLog::getNumErrors()@else getNumErrors()@endif.
   *
   * @see getNumErrors()
   */ public
";


%csmethodmodifiers XMLErrorLog::clearLog "
/**
   * Deletes all errors from this log.
   */ public
";


%csmethodmodifiers XMLErrorLog::XMLErrorLog "
/**
   * Creates a new empty XMLErrorLog.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers XMLErrorLog::XMLErrorLog(const XMLErrorLog& other) "
/**
   * Copy Constructor
   */ /* libsbml-internal */ public
";


%csmethodmodifiers XMLErrorLog::add(const XMLError& error) "
/**
   * Logs the given XMLError.
   *
   * @param error XMLError, the error to be logged.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers XMLErrorLog::add(const std::list<XMLError>& errors) "
/**
   * Logs (copies) the XMLErrors in the given XMLError list to this
   * XMLErrorLog.
   *
   * @param errors list, a list of XMLError to be added to the log.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers XMLErrorLog::add(const std::vector<XMLError*>& errors) "
/**
   * Logs (copies) the XMLErrors in the given XMLError list to this
   * XMLErrorLog.
   *
   * @param errors list, a list of XMLError to be added to the log.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers XMLErrorLog::setParser(const XMLParser* p) "
/**
   * Sets the XMLParser associated with this XMLErrorLog.
   *
   * The XMLParser will be used to obtain the current line and column
   * number for XMLError objects that lack line and column numbers when
   * they are logged.  This method is used by libSBML\'s internal XML
   * parsing code and probably has no useful reason to be called from
   * application programs.
   *
   * @param p XMLParser, the parser to use
   *
   * @return integer value indicating success/failure of the
   * function.   The possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ /* libsbml-internal */ public
";


%csmethodmodifiers XMLErrorLog::toString() const "
/** 
   * Writes all errors contained in this log to a string and returns it.
   *
   * This method uses printErrors() to format the diagnostic messages.
   * Please consult that method for information about the organization
   * of the messages in the string returned by this method.
   *
   * @return a string containing all logged errors and warnings.
   *
   * @see printErrors()
   */ public
";


%csmethodmodifiers XMLErrorLog::printErrors(std::ostream& stream = std::cerr) const "
/**
   * Prints all the errors or warnings stored in this error log.
   *
   * This method prints the text to the stream given by the optional
   * parameter @p stream.  If no stream is given, the method prints the
   * output to the standard error stream.
   *
   * The format of the output is:
   * @verbatim
   N error(s):
     line NNN: (id) message
 @endverbatim
   * If no errors have occurred, i.e.,
   * <code>getNumErrors() == 0</code>, then no output will be produced.

   * @param stream the ostream or ostringstream object indicating where
   * the output should be printed.
   *
   * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
   */ public
";


%csmethodmodifiers XMLErrorLog::isSeverityOverridden() const "
/**
   * Returns a bool indicating whether or not the severity has been
   * overridden.
   *
   * @return @c true if an error severity override has been set, @c false
   * otherwise.
   *
   * @see setSeverityOverride(@if java int severity@endif)
   */ public
";


%csmethodmodifiers XMLErrorLog::unsetSeverityOverride "
/**
   * Usets an existing override.
   *
   * @see setSeverityOverride(@if java int severity@endif)
   */ public
";


%csmethodmodifiers XMLErrorLog::getSeverityOverride() const "
/**
   * Returns the current override.
   *
   * @return a severity override code.  The possible values are @if clike drawn
   * from the enumeration #XMLErrorSeverityOverride_t@endif:
   * @li @link libsbmlcs.libsbml.LIBSBML_OVERRIDE_DISABLED LIBSBML_OVERRIDE_DISABLED@endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OVERRIDE_DONT_LOG LIBSBML_OVERRIDE_DONT_LOG@endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OVERRIDE_WARNING LIBSBML_OVERRIDE_WARNING@endlink
   *
   * @see setSeverityOverride(@if java int severity@endif)
   */ public
";


%csmethodmodifiers XMLErrorLog::setSeverityOverride(XMLErrorSeverityOverride_t severity) "
/**
   * Set the severity override. 
   * 
   * @param severity an override code indicating what to do.  If the value is
   * @link libsbmlcs.libsbml.LIBSBML_OVERRIDE_DISABLED LIBSBML_OVERRIDE_DISABLED@endlink
   * (the default setting) all errors logged will be given the severity
   * specified in their usual definition.   If the value is
   * @link libsbmlcs.libsbml.LIBSBML_OVERRIDE_WARNING LIBSBML_OVERRIDE_WARNING@endlink,
   * then all errors will be logged as warnings.  If the value is 
   * @link libsbmlcs.libsbml.LIBSBML_OVERRIDE_DONT_LOG LIBSBML_OVERRIDE_DONT_LOG@endlink,
   * no error will be logged, regardless of their severity.
   *
   * @see getSeverityOverride()
   */ public
";


%csmethodmodifiers XMLErrorLog::changeErrorSeverity(XMLErrorSeverity_t originalSeverity, XMLErrorSeverity_t targetSeverity, std::string package = "all") "
/**
   * Changes the severity override for errors in the log that have a given
   * severity.
   *
   * This searches through the list of errors in the log, comparing each
   * one\'s severity to the value of @p originalSeverity.  For each error
   * encountered with that severity logged by the named @p package, the
   * severity of the error is reset to @p targetSeverity.
   *
   * @param originalSeverity the severity code to match
   *
   * @param targetSeverity the severity code to use as the new severity
   *
   * @param package a string, the name of an SBML Level&nbsp;3 package
   * extension to use to narrow the search for errors.  A value of @c \'all\'
   * signifies to match against errors logged from any package; a value of a
   * package nickname such as @c \'comp\' signifies to limit consideration to
   * errors from just that package.
   *
   * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
   *
   * @see getSeverityOverride()
   */ public
";


%typemap(csimports) SBMLErrorLog "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Log of errors and other events encountered during SBML
 * processing.
 *
 * @htmlinclude not-sbml-warning.html
 *
 * The error log is a list.  Each SBMLDocument maintains its own
 * SBMLErrorLog.  When a libSBML operation on SBML content results in an
 * error, or when there is something worth noting about the SBML content,
 * the issue is reported as an SBMLError object stored in the SBMLErrorLog
 * list.
 *
 * SBMLErrorLog is derived from XMLErrorLog, an object class that serves
 * exactly the same purpose but for the XML parsing layer.  XMLErrorLog
 * provides crucial methods such as
 * @if java XMLErrorLog::getNumErrors()@else getNumErrors()@endif
 * for determining how many SBMLError or XMLError objects are in the log.
 * SBMLErrorLog inherits these methods.
 *
 * The general approach to working with SBMLErrorLog in user programs
 * involves first obtaining a pointer to a log from a libSBML object such
 * as SBMLDocument.  Callers should then use
 * @if java XMLErrorLog::getNumErrors()@else getNumErrors() @endif to inquire how
 * many objects there are in the list.  (The answer may be 0.)  If there is
 * at least one SBMLError object in the SBMLErrorLog instance, callers can
 * then iterate over the list using
 * SBMLErrorLog::getError(@if java long n@endif)@if clike const@endif,
 * using methods provided by the SBMLError class to find out the error code
 * and associated information such as the error severity, the message, and
 * the line number in the input.
 *
 * If you wish to simply print the error strings for a human to read, an
 * easier and more direct way might be to use SBMLDocument::printErrors().
 *
 * @see SBMLError
 * @see XMLErrorLog
 * @see XMLError
 */
"


%csmethodmodifiers SBMLErrorLog::getError "
/**
   * Returns the <i>n</i>th SBMLError object in this log.
   *
   * Index @p n is counted from 0.  Callers should first inquire about the
   * number of items in the log by using the
   * @if java XMLErrorLog::getNumErrors()@else getNumErrors()@endif method.
   * Attempts to use an error index number that exceeds the actual number
   * of errors in the log will result in a @c null being returned.
   *
   * @param n the index number of the error to retrieve (with 0 being the
   * first error).
   *
   * @return the <i>n</i>th SBMLError in this log, or @c null if @p n is
   * greater than or equal to
   * @if java XMLErrorLog::getNumErrors()@else getNumErrors()@endif.
   *
   * @see getNumErrors()
   */ public new
";


%csmethodmodifiers SBMLErrorLog::SBMLErrorLog "
/**
   * Creates a new, empty SBMLErrorLog.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBMLErrorLog::SBMLErrorLog(const SBMLErrorLog& other) "
/**
   * Copy Constructor
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBMLErrorLog::logError( const unsigned int errorId  = 0 , const unsigned int level    = SBML_DEFAULT_LEVEL , const unsigned int version  = SBML_DEFAULT_VERSION , const std::string& details  = "" , const unsigned int line     = 0 , const unsigned int column   = 0 , const unsigned int severity = LIBSBML_SEV_ERROR , const unsigned int category = LIBSBML_CAT_SBML ) "
/**
   * Convenience function that combines creating an SBMLError object and
   * adding it to the log.
   *
   * @param errorId a long integer, the identification number of the error.
   *
   * @param level a long integer, the SBML Level
   *
   * @param version a long integer, the SBML Level\'s Version
   * 
   * @param details a string containing additional details about the error.
   * If the error code in @p errorId is one that is recognized by SBMLError,
   * the given message is @em appended to a predefined message associated
   * with the given code.  If the error code is not recognized, the message
   * is stored as-is as the text of the error.
   * 
   * @param line a long integer, the line number at which the error occured.
   * 
   * @param column a long integer, the column number at which the error occured.
   * 
   * @param severity an integer indicating severity of the error.
   * 
   * @param category an integer indicating the category to which the error
   * belongs.
   *
   * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBMLErrorLog::logPackageError( const std::string& package    = "core" , const unsigned int errorId    = 0 , const unsigned int pkgVersion = 1 , const unsigned int level      = SBML_DEFAULT_LEVEL , const unsigned int version    = SBML_DEFAULT_VERSION , const std::string& details    = "" , const unsigned int line       = 0 , const unsigned int column     = 0 , const unsigned int severity   = LIBSBML_SEV_ERROR , const unsigned int category   = LIBSBML_CAT_SBML ) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers SBMLErrorLog::add(const SBMLError& error) "
/**
   * Adds the given SBMLError to the log.
   *
   * @param error SBMLError, the error to be logged.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBMLErrorLog::add(const std::list<SBMLError>& errors) "
/**
   * Adds (copies) the SBMLErrors in the given SBMLError list to this
   * SBMLErrorLog.
   *
   * @param errors list, a list of SBMLError to be added to the log.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBMLErrorLog::add(const std::vector<SBMLError>& errors) "
/**
   * Adds (copies) the SBMLErrors in the given SBMLError vector to this
   * SBMLErrorLog.
   *
   * @param errors vector, a vector of SBMLError to be added to the log.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBMLErrorLog::remove(const unsigned int errorId) "
/**
   * Removes an error having errorId from the SBMLError list.
   *  
   * Only the first item will be removed if there are multiple errors
   * with the given errorId.
   *
   * @param errorId the error identifier of the error to be removed.
   */ public
";


%csmethodmodifiers SBMLErrorLog::contains(const unsigned int errorId) "
/**
   * Returns true if SBMLErrorLog contains an errorId
   *
   * @param errorId the error identifier of the error to be found.
   */ public
";


%typemap(csimports) SBMLError "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Representation of errors, warnings and other diagnostics
 *
 * @htmlinclude not-sbml-warning.html
 *
 * When a libSBML operation on SBML content results in an error, or when
 * there is something wrong with the SBML content, the problems are
 * reported as SBMLError objects.  These are generally stored in an
 * SBMLErrorLog object; this log object, in turn, is kept in the
 * SBMLDocument object containing the SBML content.  Applications can
 * obtain the list of logged errors using SBMLDocument::getErrorLog() and
 * then use the methods provided by SBMLErrorLog to access individual
 * SBMLError objects.  (Note that despite the word \'error\' in the name,
 * SBMLError objects are used to represent not only \'true\' errors, but also
 * warnings and some informational diagnostics.  The name is a historical
 * hold-over from early versions of libSBML, in which the object really was
 * only used to report errors.)
 *
 * @if clike
 * Each SBMLError object instance has an identification number that
 * identifies the nature of the problem.  This \'error id\' number will be up
 * to five digits long, and it will be listed in one of two enumerations:
 * <a class=\'el\' href=\'#SBMLErrorCode_t\'> SBMLErrorCode_t</a> (described <a
 * class=\'el\' href=\'#SBMLErrorCode_t\'> below</a>) or @link
 * XMLError::XMLErrorCode_t XMLErrorCode_t @endlink (described in the
 * documentation for the class XMLError).  The former enumeration contains
 * all the SBML validation rule numbers listed in the appendices of the
 * SBML specification documents, as well as some additional
 * libSBML-specific error codes.
 * @endif@if java
 * Each SBMLError object instance has an identification number that
 * identifies the nature of the problem.  This \'error id\' number will be up
 * to five digits long, and it will come from one of two sets of static
 * integer constants defined in the interface class <code><a
 * href=\'libsbmlcs.libsbml.html\'> libsbmlConstants</a></code>: either the
 * SBML error identifiers <a class=\'el\' href=\'#SBMLErrorCode_t\'> (described
 * below)</a> or the XML error identifiers (described in the documentation
 * for the class <code><a href=\'XMLError.html\'> XMLError</a></code>).  The
 * former set of constants includes all the SBML validation rule numbers
 * listed in the appendices of the SBML specification documents, as well as
 * some additional libSBML-specific error codes.
 * @endif@if python
 * Each SBMLError object instance has an identification number that
 * identifies the nature of the problem.  This \'error id\' number will be up
 * to five digits long, and it will come from one
 * of two sets of static integer constants defined in
 * the interface class @link libsbml libsbml@endlink: either the SBML
 * error identifiers <a
 * class=\'el\' href=\'#SBMLErrorCode_t\'> (described below)</a> or the XML
 * error identifiers (described in the documentation for the class XMLError).
 * The former set of constants
 * includes all the SBML validation rule numbers listed in the appendices
 * of the SBML specification documents, as well as some additional
 * libSBML-specific error codes.
 * @endif
 * 
 * Error codes are useful mainly for software.  For human readers,
 * SBMLError also includes text messages that describe the nature of a
 * given problem.  The messages can be accessed using
 * SBMLError::getShortMessage() and SBMLError::getMessage().  The former
 * provides a brief one-line description of the issue, while
 * SBMLError::getMessage() provides a more detailed text, including (if
 * appropriate) references to sections of the SBML specifications where
 * relevant topics are discussed.  These text strings are suitable for
 * displaying to human users.
 *
 * @if clike
 * An SBMLError object also contains a category code; its value may be
 * retrieved using the method SBMLError::getCategory().  Category values
 * are drawn from the enumeration <a class=\'el\'
 * href=\'#SBMLErrorCategory_t\'>SBMLErrorCategory_t</a> described below.
 * Categories are used to partition errors into distinct conceptual groups.
 * This is principally used by the libSBML validation system to group
 * classes of validation checks.  For example, 
 * @link libsbmlcs.libsbml.LIBSBML_CAT_IDENTIFIER_CONSISTENCY LIBSBML_CAT_IDENTIFIER_CONSISTENCY@endlink
 * is the category for tests that check identifier consistency;
 * @link libsbmlcs.libsbml.LIBSBML_CAT_MATHML_CONSISTENCY LIBSBML_CAT_MATHML_CONSISTENCY@endlink
 * is the category for MathML consistency checking; and
 * so on.
 * @endif@if java
 * An SBMLError object also contains a category code; its value may be
 * retrieved using the method SBMLError::getCategory().  Category values
 * are drawn from a set of static integer constants
 * defined in <code><a href=\'libsbmlcs.libsbml.html\'>libsbmlConstants</a></code>,
 * and having names beginning with the characters
 * <code>LIBSBML_CAT_</code>.  The list of possible codes is described in a
 * separate section below.  Categories are used to partition errors into
 * distinct conceptual groups.  This is principally used by the libSBML
 * validation system to group classes of validation checks.  For example,
 * @link libsbmlcs.libsbml.LIBSBML_CAT_IDENTIFIER_CONSISTENCY LIBSBML_CAT_IDENTIFIER_CONSISTENCY@endlink
 * is the category for tests that check identifier consistency;
 * @link libsbmlcs.libsbml.LIBSBML_CAT_MATHML_CONSISTENCY LIBSBML_CAT_MATHML_CONSISTENCY@endlink
 * is the category for MathML consistency checking; and
 * so on.
 * @endif@if python
 * An SBMLError object also contains a category code; its value may be
 * retrieved using the method SBMLError::getCategory().  Category values
 * are drawn from a set of static integer constants
 * defined in @link libsbml libsbml@endlink and having names beginning with the characters
 * <code>LIBSBML_CAT_</code>.  The list of possible codes is described in a
 * separate section below.  Categories are used to partition errors into
 * distinct conceptual groups.  This is principally used by the libSBML
 * validation system to group classes of validation checks.  For example,
 * @link libsbmlcs.libsbml.LIBSBML_CAT_IDENTIFIER_CONSISTENCY LIBSBML_CAT_IDENTIFIER_CONSISTENCY@endlink
 * is the category for tests that check identifier consistency;
 * @link libsbmlcs.libsbml.LIBSBML_CAT_MATHML_CONSISTENCY LIBSBML_CAT_MATHML_CONSISTENCY@endlink
 * is the category for MathML consistency checking; and
 * so on.
 * @endif
 *
 * In addition, SBMLError also has a severity code.  Its value may be
 * retrieved using the method SBMLError::getSeverity().  The possible
 * severity values are the same as those reported by @if clike XMLError.@endif@if python XMLError.@endif@if java <code><a href=\'XMLError.html\'>XMLError</a></code>.@endif 
 * Severity levels currently range from informational
 * (@link libsbmlcs.libsbml.LIBSBML_SEV_INFO LIBSBML_SEV_INFO@endlink)
 * to fatal errors
 * (@link libsbmlcs.libsbml.LIBSBML_SEV_FATAL LIBSBML_SEV_FATAL@endlink).
 * They can be
 * used by an application to evaluate how serious a given problem
 * is. 
 *
 * Finally, SBMLError records the line and column near where the problem
 * occurred in the SBML content.  The values may be retrieved using the
 * methods SBMLError::getLine() and SBMLError::getColumn().  We say \'near\',
 * because a lot of factors affect how accurate the line/column information
 * ultimately is.  For example, different XML parsers have different
 * conventions for which line and column number they report for a
 * particular problem (which makes a difference when a problem involves an
 * opening XML tag on one line and a closing tag on another line).  In some
 * situations, some parsers report invalid line and/or column numbers
 * altogether.  If this occurs, libSBML sets the line and/or column number
 * in the SBMLError object to the the value of the maximum unsigned long
 * integer representable on the platform where libSBML is running.  (This
 * is equal to the constant named <code>ULONG_MAX</code> in C and C++.)
 * The probability that a true line or column number in an SBML model would
 * equal this value is vanishingly small; thus, if an application
 * encounters these values in an XMLError object, it can assume no valid
 * line/column number could be provided by libSBML in that situation.
 *
 * @if clike
 * <h3><a class=\'anchor\' name=\'SBMLErrorCode_t\'>SBMLErrorCode_t</a></h3>
 *
 * SBMLErrorCode_t is an enumeration of all SBML-level error, warning and
 * informational diagnostic codes.  Every SBMLError object has an error
 * code value that can be either a value from this enumeration, or a value
 * from the @link XMLError::XMLErrorCode_t XMLErrorCode_t @endlink
 * enumeration (see the documentation for XMLError).  The latter values
 * apply when the error or warning signifies a basic XML issue rather than
 * an SBML issue per se.  The values of SBMLErrorCode_t are distinguished
 * from those of @link XMLError::XMLErrorCode_t XMLErrorCode_t @endlink by
 * being numbered 10000 and higher, while the XML layer\'s codes are 9999 and
 * lower.  The method SBMLError::getErrorId() returns the error code of a
 * given SBMLError object instance.
 * 
 * The following is a table of the symbolic names of SBMLErrorCode_t values
 * and the meaning of each code.  In this table, the right-hand columns
 * titled \'L1V1\', \'L1V2\', etc. refer to Levels and Versions of the SBML
 * specifications, and the entries in each column refer to whether the
 * severity of the condition in that particular Level+Version of SBML.
 * The codes stand for the following:
 * 
 * @endif@if java <h3><a class=\'anchor\' 
 * name=\'SBMLErrorCode_t\'>Error codes associated with SBMLError objects</a></h3>
 *
 * The error and warning codes returned by libSBML are listed in the table
 * below.  The method SBMLError::getErrorId() returns the error code of a
 * given SBMLError object instance.  In the libSBML Java language
 * interface, these error identifiers are currently
 * implemented as static integer constants defined in the interface class
 * <code><a href=\'libsbmlcs.libsbml.html\'>libsbmlConstants</a></code>.  This
 * is admittedly not an ideal approach from the standpoint of modern Java
 * programming, but it was necessary to work around the lack of
 * enumerations in Java prior to JDK 1.5.  Future versions of libSBML may
 * use a proper Java enumeration type to define the error identifiers.
 * 
 * In this table, the right-hand columns titled \'L1V1\', \'L1V2\', etc. refer
 * to Levels and Versions of the SBML specifications, and the entries in
 * each column refer to whether the severity of the condition in that
 * particular Level+Version of SBML.  The codes stand for the following:
 *
 * @endif@if python <h3><a class=\'anchor\' 
 * name=\'SBMLErrorCode_t\'>Error codes associated with SBMLError objects</a></h3>
 *
 * The error and warning codes returned by libSBML are listed in the table
 * below.  The method SBMLError::getErrorId() returns the error code of a
 * given SBMLError object instance.  In the libSBML Python language
 * interface, these error identifiers are currently
 * implemented as static integer constants defined in the interface class
 * @link libsbml libsbml@endlink. 
 * 
 * In this table, the right-hand columns titled \'L1V1\', \'L1V2\', etc. refer
 * to Levels and Versions of the SBML specifications, and the entries in
 * each column refer to whether the severity of the condition in that
 * particular Level+Version of SBML.  The codes stand for the following:
 *
 * @endif
 *
 * <table cellspacing=\'1\' cellpadding=\'2\' border=\'0\' class=\'normal-font\'>
 * <tr><td class=\'s-na\'>N</td><td>= Not applicable</td></tr>
 * <tr><td class=\'s-info\'>I</td><td>= Informational</td></tr>
 * <tr><td class=\'s-warning\'>W</td><td>= Warning</td></tr>
 * <tr><td class=\'s-error\'>E</td><td>= Error</td></tr>
 * <tr><td class=\'s-fatal\'>F</td><td>= Fatal</td></tr>
 * </table>
 *
 * The text shown in the \'Meaning\' is the text returned by the
 * SBMLError::getShortMessage() method on a given SBMLError object.  A
 * longer and (hopefully) clearer explanation of the issue is returned by
 * SBMLError::getMessage().
 *
 * The error codes come from different lists depending on whether they\'re
 * from libSBML core or from an SBML Level&nbsp;3 package extension.
 * @if clike The errors below come from #XMLErrorCode_t and #SBMLErrorCode_t
 * (for core), and #CompSBMLErrorCode_t, #FbcSBMLErrorCode_t,
 * #LayoutSBMLErrorCode_t, and #QualSBMLErrorCode_t (for packages).@endif
 * @if notclike However, in the language interfaces other than C++, all
 * libSBML error codes are ultimately represented as integer constants rather
 * than separate enumerations lists, and they are all stored in a single
 * interface class.  Codes from different libSBML extensions have names that
 * begin with the package\'s nickname, such as <code>Qual</code> for
 * the Qualitative Models package, <code>Layout</code> for the Layout
 * package, and so on.  If the name of a code does not begin with one of
 * the package nicknames (<code>%Layout</code>, <code>Fbc</code>,
 * <code>Comp</code>, <code>Qual</code>, etc.), then it is a code
 * from libSBML core.@endif
 *
 * *
 * 
<table width=\'95%\' cellspacing=\'1\' cellpadding=\'2\' border=\'0\'
       class=\'centered text-table small-font alt-row-colors\'>
 <tr style=\'background: lightgray\' class=\'normal-font\'>
     <th valign=\'bottom\'><strong>Enumerator</strong></th>
     <th valign=\'bottom\'><strong>Meaning</strong></th>
     <th align=\'center\' width=\'15\'>L 1 V 1</th>
     <th align=\'center\' width=\'15\'>L 1 V 2</th>
     <th align=\'center\' width=\'15\'>L 2 V 1</th>
     <th align=\'center\' width=\'15\'>L 2 V 2</th>
     <th align=\'center\' width=\'15\'>L 2 V 3</th>
     <th align=\'center\' width=\'15\'>L 2 V 4</th>
     <th align=\'center\' width=\'15\'>L 3 V 1</th>
 </tr>
<tr><td><code>@link libsbmlcs.libsbml.UnknownError UnknownError @endlink</code></td>
<td>Encountered unknown internal libSBML error</td>
<td class=\'s-fatal\'>F</td>
<td class=\'s-fatal\'>F</td>
<td class=\'s-fatal\'>F</td>
<td class=\'s-fatal\'>F</td>
<td class=\'s-fatal\'>F</td>
<td class=\'s-fatal\'>F</td>
<td class=\'s-fatal\'>F</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NotUTF8 NotUTF8 @endlink</code></td>
<td>File does not use UTF-8 encoding</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.UnrecognizedElement UnrecognizedElement @endlink</code></td>
<td>Encountered unrecognized element</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NotSchemaConformant NotSchemaConformant @endlink</code></td>
<td>Document does not conform to the SBML XML schema</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.L3NotSchemaConformant L3NotSchemaConformant @endlink</code></td>
<td>Document is not well-formed XML</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InvalidMathElement InvalidMathElement @endlink</code></td>
<td>Invalid MathML</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.DisallowedMathMLSymbol DisallowedMathMLSymbol @endlink</code></td>
<td>Disallowed MathML symbol found</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.DisallowedMathMLEncodingUse DisallowedMathMLEncodingUse @endlink</code></td>
<td>Use of the MathML \'encoding\' attribute is not allowed on this element</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.DisallowedDefinitionURLUse DisallowedDefinitionURLUse @endlink</code></td>
<td>Use of the MathML \'definitionURL\' attribute is not allowed on this element</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.BadCsymbolDefinitionURLValue BadCsymbolDefinitionURLValue @endlink</code></td>
<td>Invalid <code>&lt;csymbol&gt;</code> \'definitionURL\' attribute value</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.DisallowedMathTypeAttributeUse DisallowedMathTypeAttributeUse @endlink</code></td>
<td>Use of the MathML \'type\' attribute is not allowed on this element</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.DisallowedMathTypeAttributeValue DisallowedMathTypeAttributeValue @endlink</code></td>
<td>Disallowed MathML \'type\' attribute value</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LambdaOnlyAllowedInFunctionDef LambdaOnlyAllowedInFunctionDef @endlink</code></td>
<td>Use of <code>&lt;lambda&gt;</code> not permitted outside of FunctionDefinition objects</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.BooleanOpsNeedBooleanArgs BooleanOpsNeedBooleanArgs @endlink</code></td>
<td>Non-Boolean argument given to Boolean operator</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NumericOpsNeedNumericArgs NumericOpsNeedNumericArgs @endlink</code></td>
<td>Non-numerical argument given to numerical operator</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.ArgsToEqNeedSameType ArgsToEqNeedSameType @endlink</code></td>
<td>Arguments to <code>&lt;eq&gt;</code> and <code>&lt;neq&gt;</code> must have the same data types</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.PiecewiseNeedsConsistentTypes PiecewiseNeedsConsistentTypes @endlink</code></td>
<td>Terms in a <code>&lt;piecewise&gt;</code> expression must have consistent data types</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.PieceNeedsBoolean PieceNeedsBoolean @endlink</code></td>
<td>The second argument of a <code>&lt;piece&gt;</code> expression must yield a Boolean value</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.ApplyCiMustBeUserFunction ApplyCiMustBeUserFunction @endlink</code></td>
<td>A <code>&lt;ci&gt;</code> element in this context must refer to a function definition</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.ApplyCiMustBeModelComponent ApplyCiMustBeModelComponent @endlink</code></td>
<td>A <code>&lt;ci&gt;</code> element in this context must refer to a model component</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.KineticLawParametersAreLocalOnly KineticLawParametersAreLocalOnly @endlink</code></td>
<td>Cannot use a KineticLaw local parameter outside of its local scope</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.MathResultMustBeNumeric MathResultMustBeNumeric @endlink</code></td>
<td>A formula\'s result in this context must be a numerical value</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.OpsNeedCorrectNumberOfArgs OpsNeedCorrectNumberOfArgs @endlink</code></td>
<td>Incorrect number of arguments given to MathML operator</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InvalidNoArgsPassedToFunctionDef InvalidNoArgsPassedToFunctionDef @endlink</code></td>
<td>Incorrect number of arguments given to function invocation</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.DisallowedMathUnitsUse DisallowedMathUnitsUse @endlink</code></td>
<td>Attribute \'units\' is only permitted on <code>&lt;cn&gt;</code> elements</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InvalidUnitsValue InvalidUnitsValue @endlink</code></td>
<td>Invalid value given for the \'units\' attribute</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.DuplicateComponentId DuplicateComponentId @endlink</code></td>
<td>Duplicate \'id\' attribute value</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.DuplicateUnitDefinitionId DuplicateUnitDefinitionId @endlink</code></td>
<td>Duplicate unit definition \'id\' attribute value</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.DuplicateLocalParameterId DuplicateLocalParameterId @endlink</code></td>
<td>Duplicate local parameter \'id\' attribute value</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.MultipleAssignmentOrRateRules MultipleAssignmentOrRateRules @endlink</code></td>
<td>Multiple rules for the same variable are not allowed</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.MultipleEventAssignmentsForId MultipleEventAssignmentsForId @endlink</code></td>
<td>Multiple event assignments for the same variable are not allowed</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.EventAndAssignmentRuleForId EventAndAssignmentRuleForId @endlink</code></td>
<td>An event assignment and an assignment rule must not have the same value for \'variable\'</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.DuplicateMetaId DuplicateMetaId @endlink</code></td>
<td>Duplicate \'metaid\' attribute value</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InvalidSBOTermSyntax InvalidSBOTermSyntax @endlink</code></td>
<td>Invalid syntax for an \'sboTerm\' attribute value</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InvalidMetaidSyntax InvalidMetaidSyntax @endlink</code></td>
<td>Invalid syntax for a \'metaid\' attribute value</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InvalidIdSyntax InvalidIdSyntax @endlink</code></td>
<td>Invalid syntax for an \'id\' attribute value</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InvalidUnitIdSyntax InvalidUnitIdSyntax @endlink</code></td>
<td>Invalid syntax for the identifier of a unit</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InvalidNameSyntax InvalidNameSyntax @endlink</code></td>
<td>Invalid syntax for a \'name\' attribute value</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.MissingAnnotationNamespace MissingAnnotationNamespace @endlink</code></td>
<td>Missing declaration of the XML namespace for the annotation</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.DuplicateAnnotationNamespaces DuplicateAnnotationNamespaces @endlink</code></td>
<td>Multiple annotations using the same XML namespace</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.SBMLNamespaceInAnnotation SBMLNamespaceInAnnotation @endlink</code></td>
<td>The SBML XML namespace cannot be used in an Annotation object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.MultipleAnnotations MultipleAnnotations @endlink</code></td>
<td>Only one Annotation object is permitted under a given SBML object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InconsistentArgUnits InconsistentArgUnits @endlink</code></td>
<td>The units of the function call\'s arguments are not consistent with its definition</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InconsistentKineticLawUnitsL3 InconsistentKineticLawUnitsL3 @endlink</code></td>
<td>The kinetic law\'s units are inconsistent with those of other kinetic laws in the model</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.AssignRuleCompartmentMismatch AssignRuleCompartmentMismatch @endlink</code></td>
<td>Mismatched units in assignment rule for compartment</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.AssignRuleSpeciesMismatch AssignRuleSpeciesMismatch @endlink</code></td>
<td>Mismatched units in assignment rule for species</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.AssignRuleParameterMismatch AssignRuleParameterMismatch @endlink</code></td>
<td>Mismatched units in assignment rule for parameter</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.AssignRuleStoichiometryMismatch AssignRuleStoichiometryMismatch @endlink</code></td>
<td>Mismatched units in assignment rule for stoichiometry</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InitAssignCompartmenMismatch InitAssignCompartmenMismatch @endlink</code></td>
<td>Mismatched units in initial assignment to compartment</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InitAssignSpeciesMismatch InitAssignSpeciesMismatch @endlink</code></td>
<td>Mismatched units in initial assignment to species</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InitAssignParameterMismatch InitAssignParameterMismatch @endlink</code></td>
<td>Mismatched units in initial assignment to parameter</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InitAssignStoichiometryMismatch InitAssignStoichiometryMismatch @endlink</code></td>
<td>Mismatched units in initial assignment to stoichiometry</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.RateRuleCompartmentMismatch RateRuleCompartmentMismatch @endlink</code></td>
<td>Mismatched units in rate rule for compartment</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.RateRuleSpeciesMismatch RateRuleSpeciesMismatch @endlink</code></td>
<td>Mismatched units in rate rule for species</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.RateRuleParameterMismatch RateRuleParameterMismatch @endlink</code></td>
<td>Mismatched units in rate rule for parameter</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.RateRuleStoichiometryMismatch RateRuleStoichiometryMismatch @endlink</code></td>
<td>Mismatched units in rate rule for stoichiometry</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.KineticLawNotSubstancePerTime KineticLawNotSubstancePerTime @endlink</code></td>
<td>The units of the kinetic law are not \'substance\'/\'time\'</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.SpeciesInvalidExtentUnits SpeciesInvalidExtentUnits @endlink</code></td>
<td>The species\' units are not consistent with units of extent</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.DelayUnitsNotTime DelayUnitsNotTime @endlink</code></td>
<td>The units of the delay expression are not units of time</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.EventAssignCompartmentMismatch EventAssignCompartmentMismatch @endlink</code></td>
<td>Mismatched units in event assignment for compartment</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.EventAssignSpeciesMismatch EventAssignSpeciesMismatch @endlink</code></td>
<td>Mismatched units in event assignment for species</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.EventAssignParameterMismatch EventAssignParameterMismatch @endlink</code></td>
<td>Mismatched units in event assignment for parameter</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.EventAssignStoichiometryMismatch EventAssignStoichiometryMismatch @endlink</code></td>
<td>Mismatched units in event assignment for stoichiometry</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.PriorityUnitsNotDimensionless PriorityUnitsNotDimensionless @endlink</code></td>
<td>The units of a priority expression must be \'dimensionless\'</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.UpperUnitBound UpperUnitBound @endlink</code></td>
<td>Upper boundary of unit validation diagnostic codes</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.OverdeterminedSystem OverdeterminedSystem @endlink</code></td>
<td>The model is overdetermined</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InvalidModelSBOTerm InvalidModelSBOTerm @endlink</code></td>
<td>Invalid \'sboTerm\' attribute value for a Model object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InvalidFunctionDefSBOTerm InvalidFunctionDefSBOTerm @endlink</code></td>
<td>Invalid \'sboTerm\' attribute value for a FunctionDefinition object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InvalidParameterSBOTerm InvalidParameterSBOTerm @endlink</code></td>
<td>Invalid \'sboTerm\' attribute value for a Parameter object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InvalidInitAssignSBOTerm InvalidInitAssignSBOTerm @endlink</code></td>
<td>Invalid \'sboTerm\' attribute value for an InitialAssignment object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InvalidRuleSBOTerm InvalidRuleSBOTerm @endlink</code></td>
<td>Invalid \'sboTerm\' attribute value for a Rule object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InvalidConstraintSBOTerm InvalidConstraintSBOTerm @endlink</code></td>
<td>Invalid \'sboTerm\' attribute value for a Constraint object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InvalidReactionSBOTerm InvalidReactionSBOTerm @endlink</code></td>
<td>Invalid \'sboTerm\' attribute value for a Reaction object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InvalidSpeciesReferenceSBOTerm InvalidSpeciesReferenceSBOTerm @endlink</code></td>
<td>Invalid \'sboTerm\' attribute value for a SpeciesReference object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InvalidKineticLawSBOTerm InvalidKineticLawSBOTerm @endlink</code></td>
<td>Invalid \'sboTerm\' attribute value for a KineticLaw object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InvalidEventSBOTerm InvalidEventSBOTerm @endlink</code></td>
<td>Invalid \'sboTerm\' attribute value for an Event object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InvalidEventAssignmentSBOTerm InvalidEventAssignmentSBOTerm @endlink</code></td>
<td>Invalid \'sboTerm\' attribute value for an EventAssignment object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InvalidCompartmentSBOTerm InvalidCompartmentSBOTerm @endlink</code></td>
<td>Invalid \'sboTerm\' attribute value for a Compartment object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InvalidSpeciesSBOTerm InvalidSpeciesSBOTerm @endlink</code></td>
<td>Invalid \'sboTerm\' attribute value for a Species object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InvalidCompartmentTypeSBOTerm InvalidCompartmentTypeSBOTerm @endlink</code></td>
<td>Invalid \'sboTerm\' attribute value for a CompartmentType object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InvalidSpeciesTypeSBOTerm InvalidSpeciesTypeSBOTerm @endlink</code></td>
<td>Invalid \'sboTerm\' attribute value for a SpeciesType object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InvalidTriggerSBOTerm InvalidTriggerSBOTerm @endlink</code></td>
<td>Invalid \'sboTerm\' attribute value for an Event Trigger object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InvalidDelaySBOTerm InvalidDelaySBOTerm @endlink</code></td>
<td>Invalid \'sboTerm\' attribute value for an Event Delay object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NotesNotInXHTMLNamespace NotesNotInXHTMLNamespace @endlink</code></td>
<td>Notes must be placed in the XHTML XML namespace</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NotesContainsXMLDecl NotesContainsXMLDecl @endlink</code></td>
<td>XML declarations are not permitted in Notes objects</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NotesContainsDOCTYPE NotesContainsDOCTYPE @endlink</code></td>
<td>XML DOCTYPE elements are not permitted in Notes objects</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InvalidNotesContent InvalidNotesContent @endlink</code></td>
<td>Invalid notes content found</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.OnlyOneNotesElementAllowed OnlyOneNotesElementAllowed @endlink</code></td>
<td>Only one Notes subobject is permitted on a given SBML object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InvalidNamespaceOnSBML InvalidNamespaceOnSBML @endlink</code></td>
<td>Invalid XML namespace for the SBML container element</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.MissingOrInconsistentLevel MissingOrInconsistentLevel @endlink</code></td>
<td>Missing or inconsistent value for the \'level\' attribute</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.MissingOrInconsistentVersion MissingOrInconsistentVersion @endlink</code></td>
<td>Missing or inconsistent value for the \'version\' attribute</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.PackageNSMustMatch PackageNSMustMatch @endlink</code></td>
<td>Inconsistent or invalid SBML Level/Version for the package namespace declaration</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LevelPositiveInteger LevelPositiveInteger @endlink</code></td>
<td>The \'level\' attribute must have a positive integer value</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.VersionPositiveInteger VersionPositiveInteger @endlink</code></td>
<td>The \'version\' attribute must have a positive integer value</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.AllowedAttributesOnSBML AllowedAttributesOnSBML @endlink</code></td>
<td>Invalid attribute found on the SBML container element</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.L3PackageOnLowerSBML L3PackageOnLowerSBML @endlink</code></td>
<td>An L3 package ns found on the SBML container element.</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.MissingModel MissingModel @endlink</code></td>
<td>No model definition found</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.IncorrectOrderInModel IncorrectOrderInModel @endlink</code></td>
<td>Incorrect ordering of components within the Model object</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.EmptyListElement EmptyListElement @endlink</code></td>
<td>Empty ListOf___ object found</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NeedCompartmentIfHaveSpecies NeedCompartmentIfHaveSpecies @endlink</code></td>
<td>The presence of a species requires a compartment</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.OneOfEachListOf OneOfEachListOf @endlink</code></td>
<td>Only one of each kind of ListOf___ object is allowed inside a Model object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.OnlyFuncDefsInListOfFuncDefs OnlyFuncDefsInListOfFuncDefs @endlink</code></td>
<td>Only FunctionDefinition, Notes and Annotation objects are allowed in ListOfFunctionDefinitions</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.OnlyUnitDefsInListOfUnitDefs OnlyUnitDefsInListOfUnitDefs @endlink</code></td>
<td>Only UnitDefinition, Notes and Annotation objects are allowed in ListOfUnitDefinitions objects</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.OnlyCompartmentsInListOfCompartments OnlyCompartmentsInListOfCompartments @endlink</code></td>
<td>Only Compartment, Notes and Annotation objects are allowed in ListOfCompartments objects</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.OnlySpeciesInListOfSpecies OnlySpeciesInListOfSpecies @endlink</code></td>
<td>Only Species, Notes and Annotation objects are allowed in ListOfSpecies objects</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.OnlyParametersInListOfParameters OnlyParametersInListOfParameters @endlink</code></td>
<td>Only Parameter, Notes and Annotation objects are allowed in ListOfParameters objects</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.OnlyInitAssignsInListOfInitAssigns OnlyInitAssignsInListOfInitAssigns @endlink</code></td>
<td>Only InitialAssignment, Notes and Annotation objects are allowed in ListOfInitialAssignments objects</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.OnlyRulesInListOfRules OnlyRulesInListOfRules @endlink</code></td>
<td>Only Rule, Notes and Annotation objects are allowed in ListOfRules objects</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.OnlyConstraintsInListOfConstraints OnlyConstraintsInListOfConstraints @endlink</code></td>
<td>Only Constraint, Notes and Annotation objects are allowed in ListOfConstraints objects</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.OnlyReactionsInListOfReactions OnlyReactionsInListOfReactions @endlink</code></td>
<td>Only Reaction, Notes and Annotation objects are allowed in ListOfReactions objects</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.OnlyEventsInListOfEvents OnlyEventsInListOfEvents @endlink</code></td>
<td>Only Event, Notes and Annotation objects are allowed in ListOfEvents objects</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.L3ConversionFactorOnModel L3ConversionFactorOnModel @endlink</code></td>
<td>A \'conversionFactor\' attribute value must reference a Parameter object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.L3TimeUnitsOnModel L3TimeUnitsOnModel @endlink</code></td>
<td>Invalid \'timeUnits\' attribute value</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.L3VolumeUnitsOnModel L3VolumeUnitsOnModel @endlink</code></td>
<td>Invalid \'volumeUnits\' attribute value</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.L3AreaUnitsOnModel L3AreaUnitsOnModel @endlink</code></td>
<td>Invalid \'areaUnits\' attribute value</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.L3LengthUnitsOnModel L3LengthUnitsOnModel @endlink</code></td>
<td>Invalid \'lengthUnits\' attribute value</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.L3ExtentUnitsOnModel L3ExtentUnitsOnModel @endlink</code></td>
<td>Invalid \'extentUnits\' attribute value</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.AllowedAttributesOnModel AllowedAttributesOnModel @endlink</code></td>
<td>Invalid attribute found on the Model object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.AllowedAttributesOnListOfFuncs AllowedAttributesOnListOfFuncs @endlink</code></td>
<td>Invalid attribute found on the ListOfFunctionDefinitions object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.AllowedAttributesOnListOfUnitDefs AllowedAttributesOnListOfUnitDefs @endlink</code></td>
<td>Invalid attribute found on the ListOfUnitDefinitions object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.AllowedAttributesOnListOfComps AllowedAttributesOnListOfComps @endlink</code></td>
<td>Invalid attribute found on the ListOfCompartments object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.AllowedAttributesOnListOfSpecies AllowedAttributesOnListOfSpecies @endlink</code></td>
<td>Invalid attribute found on the ListOfSpecies object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.AllowedAttributesOnListOfParams AllowedAttributesOnListOfParams @endlink</code></td>
<td>Invalid attribute found on the ListOfParameters object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.AllowedAttributesOnListOfInitAssign AllowedAttributesOnListOfInitAssign @endlink</code></td>
<td>Invalid attribute found on the ListOfInitialAssignments object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.AllowedAttributesOnListOfRules AllowedAttributesOnListOfRules @endlink</code></td>
<td>Invalid attribute found on the ListOfRules object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.AllowedAttributesOnListOfConstraints AllowedAttributesOnListOfConstraints @endlink</code></td>
<td>Invalid attribute found on the ListOfConstraints object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.AllowedAttributesOnListOfReactions AllowedAttributesOnListOfReactions @endlink</code></td>
<td>Invalid attribute found on the ListOfReactions object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.AllowedAttributesOnListOfEvents AllowedAttributesOnListOfEvents @endlink</code></td>
<td>Invalid attribute found on the ListOfEvents object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.FunctionDefMathNotLambda FunctionDefMathNotLambda @endlink</code></td>
<td>Invalid expression found in the function definition</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InvalidApplyCiInLambda InvalidApplyCiInLambda @endlink</code></td>
<td>Invalid forward reference in the MathML <code>&lt;apply&gt;</code><code>&lt;ci&gt;</code>...<code>&lt;/ci&gt;</code><code>&lt;/apply&gt;</code> expression</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.RecursiveFunctionDefinition RecursiveFunctionDefinition @endlink</code></td>
<td>Recursive function definitions are not permitted</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InvalidCiInLambda InvalidCiInLambda @endlink</code></td>
<td>Invalid <code>&lt;ci&gt;</code> reference found inside the <code>&lt;lambda&gt;</code> mathematical formula</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InvalidFunctionDefReturnType InvalidFunctionDefReturnType @endlink</code></td>
<td>A function\'s return type must be either a number or a Boolean</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.OneMathElementPerFunc OneMathElementPerFunc @endlink</code></td>
<td>A FunctionDefinition object must contain one <code>&lt;math&gt;</code> element</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.AllowedAttributesOnFunc AllowedAttributesOnFunc @endlink</code></td>
<td>Invalid attribute found on the FunctionDefinition object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InvalidUnitDefId InvalidUnitDefId @endlink</code></td>
<td>Invalid \'id\' attribute value for a UnitDefinition object</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InvalidSubstanceRedefinition InvalidSubstanceRedefinition @endlink</code></td>
<td>Invalid redefinition of built-in type \'substance\'</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InvalidLengthRedefinition InvalidLengthRedefinition @endlink</code></td>
<td>Invalid redefinition of built-in type \'length\'</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InvalidAreaRedefinition InvalidAreaRedefinition @endlink</code></td>
<td>Invalid redefinition of built-in type name \'area\'</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InvalidTimeRedefinition InvalidTimeRedefinition @endlink</code></td>
<td>Invalid redefinition of built-in type name \'time\'</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InvalidVolumeRedefinition InvalidVolumeRedefinition @endlink</code></td>
<td>Invalid redefinition of built-in type name \'volume\'</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.VolumeLitreDefExponentNotOne VolumeLitreDefExponentNotOne @endlink</code></td>
<td>Must use \'exponent\'=1 when defining \'volume\' in terms of litres</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.VolumeMetreDefExponentNot3 VolumeMetreDefExponentNot3 @endlink</code></td>
<td>Must use \'exponent\'=3 when defining \'volume\' in terms of metres</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.EmptyListOfUnits EmptyListOfUnits @endlink</code></td>
<td>An empty list of Unit objects is not permitted in a UnitDefinition object</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InvalidUnitKind InvalidUnitKind @endlink</code></td>
<td>Invalid value for the \'kind\' attribute of a UnitDefinition object</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.OffsetNoLongerValid OffsetNoLongerValid @endlink</code></td>
<td>Unit attribute \'offset\' is not supported in this Level+Version of SBML</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CelsiusNoLongerValid CelsiusNoLongerValid @endlink</code></td>
<td>Unit name \'Celsius\' is not defined in this Level+Version of SBML</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.EmptyUnitListElement EmptyUnitListElement @endlink</code></td>
<td>A ListOfUnits object must not be empty</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.OneListOfUnitsPerUnitDef OneListOfUnitsPerUnitDef @endlink</code></td>
<td>At most one ListOfUnits object is allowed inside a UnitDefinition object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.OnlyUnitsInListOfUnits OnlyUnitsInListOfUnits @endlink</code></td>
<td>Only Unit, Notes and Annotation objects are allowed in ListOfUnits objects</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.AllowedAttributesOnUnitDefinition AllowedAttributesOnUnitDefinition @endlink</code></td>
<td>Invalid attribute found on the UnitDefinition object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.AllowedAttributesOnListOfUnits AllowedAttributesOnListOfUnits @endlink</code></td>
<td>Invalid attribute found on the ListOfUnits object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.AllowedAttributesOnUnit AllowedAttributesOnUnit @endlink</code></td>
<td>Invalid attribute found on the Unit object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.ZeroDimensionalCompartmentSize ZeroDimensionalCompartmentSize @endlink</code></td>
<td>Invalid use of the \'size\' attribute for a zero-dimensional compartment</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.ZeroDimensionalCompartmentUnits ZeroDimensionalCompartmentUnits @endlink</code></td>
<td>Invalid use of the \'units\' attribute for a zero-dimensional compartment</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.ZeroDimensionalCompartmentConst ZeroDimensionalCompartmentConst @endlink</code></td>
<td>Zero-dimensional compartments must be defined to be constant</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.UndefinedOutsideCompartment UndefinedOutsideCompartment @endlink</code></td>
<td>Invalid value for the \'outside\' attribute of a Compartment object</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.RecursiveCompartmentContainment RecursiveCompartmentContainment @endlink</code></td>
<td>Recursive nesting of compartments via the \'outside\' attribute is not permitted</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.ZeroDCompartmentContainment ZeroDCompartmentContainment @endlink</code></td>
<td>Invalid nesting of zero-dimensional compartments</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.Invalid1DCompartmentUnits Invalid1DCompartmentUnits @endlink</code></td>
<td>Invalid value for the \'units\' attribute of a one-dimensional compartment</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.Invalid2DCompartmentUnits Invalid2DCompartmentUnits @endlink</code></td>
<td>Invalid value for the \'units\' attribute of a two-dimensional compartment</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.Invalid3DCompartmentUnits Invalid3DCompartmentUnits @endlink</code></td>
<td>Invalid value for the \'units\' attribute of a three-dimensional compartment</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InvalidCompartmentTypeRef InvalidCompartmentTypeRef @endlink</code></td>
<td>Invalid value for the \'compartmentType\' attribute of a compartment</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.OneDimensionalCompartmentUnits OneDimensionalCompartmentUnits @endlink</code></td>
<td>No units defined for 1-D compartment</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.TwoDimensionalCompartmentUnits TwoDimensionalCompartmentUnits @endlink</code></td>
<td>No units defined for 2-D compartment</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.ThreeDimensionalCompartmentUnits ThreeDimensionalCompartmentUnits @endlink</code></td>
<td>No units defined for 3-D Compartment object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.AllowedAttributesOnCompartment AllowedAttributesOnCompartment @endlink</code></td>
<td>Invalid attribute found on Compartment object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NoUnitsOnCompartment NoUnitsOnCompartment @endlink</code></td>
<td>No units defined for Compartment object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InvalidSpeciesCompartmentRef InvalidSpeciesCompartmentRef @endlink</code></td>
<td>Invalid value found for Species \'compartment\' attribute</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.HasOnlySubsNoSpatialUnits HasOnlySubsNoSpatialUnits @endlink</code></td>
<td>Attribute \'spatialSizeUnits\' must not be set if \'hasOnlySubstanceUnits\'=\'true\'</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NoSpatialUnitsInZeroD NoSpatialUnitsInZeroD @endlink</code></td>
<td>Attribute \'spatialSizeUnits\' must not be set if the compartment is zero-dimensional</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NoConcentrationInZeroD NoConcentrationInZeroD @endlink</code></td>
<td>Attribute \'initialConcentration\' must not be set if the compartment is zero-dimensional</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.SpatialUnitsInOneD SpatialUnitsInOneD @endlink</code></td>
<td>Invalid value for \'spatialSizeUnits\' attribute of a one-dimensional compartment</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.SpatialUnitsInTwoD SpatialUnitsInTwoD @endlink</code></td>
<td>Invalid value for the \'spatialSizeUnits\' attribute of a two-dimensional compartment</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.SpatialUnitsInThreeD SpatialUnitsInThreeD @endlink</code></td>
<td>Invalid value for the \'spatialSizeUnits\' attribute of a three-dimensional compartment</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InvalidSpeciesSusbstanceUnits InvalidSpeciesSusbstanceUnits @endlink</code></td>
<td>Invalid value for a Species \'units\' attribute</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.BothAmountAndConcentrationSet BothAmountAndConcentrationSet @endlink</code></td>
<td>Cannot set both \'initialConcentration\' and \'initialAmount\' attributes simultaneously</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NonBoundarySpeciesAssignedAndUsed NonBoundarySpeciesAssignedAndUsed @endlink</code></td>
<td>Cannot use a non-boundary species in both reactions and rules simultaneously</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NonConstantSpeciesUsed NonConstantSpeciesUsed @endlink</code></td>
<td>Cannot use a constant, non-boundary species as a reactant or product</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InvalidSpeciesTypeRef InvalidSpeciesTypeRef @endlink</code></td>
<td>Invalid value for the \'speciesType\' attribute of a species</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.MultSpeciesSameTypeInCompartment MultSpeciesSameTypeInCompartment @endlink</code></td>
<td>Cannot have multiple species of the same species type in the same compartment</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.MissingSpeciesCompartment MissingSpeciesCompartment @endlink</code></td>
<td>Missing value for the \'compartment\' attribute</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.SpatialSizeUnitsRemoved SpatialSizeUnitsRemoved @endlink</code></td>
<td>Attribute \'spatialSizeUnits\' is not supported in this Level+Version of SBML</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.SubstanceUnitsOnSpecies SubstanceUnitsOnSpecies @endlink</code></td>
<td>No substance units defined for the species</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.ConversionFactorOnSpecies ConversionFactorOnSpecies @endlink</code></td>
<td>Invalid value for the \'conversionFactor\' attribute</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.AllowedAttributesOnSpecies AllowedAttributesOnSpecies @endlink</code></td>
<td>Invalid attribute found on Species object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InvalidParameterUnits InvalidParameterUnits @endlink</code></td>
<td>Invalid value for the \'units\' attribute of a Parameter object</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.ParameterUnits ParameterUnits @endlink</code></td>
<td>No units defined for the parameter</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.ConversionFactorMustConstant ConversionFactorMustConstant @endlink</code></td>
<td>A conversion factor must reference a Parameter object declared to be a constant</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.AllowedAttributesOnParameter AllowedAttributesOnParameter @endlink</code></td>
<td>Invalid attribute found on Parameter object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InvalidInitAssignSymbol InvalidInitAssignSymbol @endlink</code></td>
<td>Invalid value for the \'symbol\' attribute of an InitialAssignment object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.MultipleInitAssignments MultipleInitAssignments @endlink</code></td>
<td>Multiple initial assignments for the same \'symbol\' value are not allowed</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InitAssignmentAndRuleForSameId InitAssignmentAndRuleForSameId @endlink</code></td>
<td>Cannot set a value using both an initial assignment and an assignment rule simultaneously</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.OneMathElementPerInitialAssign OneMathElementPerInitialAssign @endlink</code></td>
<td>An InitialAssignment object must contain one <code>&lt;math&gt;</code> element</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.AllowedAttributesOnInitialAssign AllowedAttributesOnInitialAssign @endlink</code></td>
<td>Invalid attribute found on an InitialAssignment object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InvalidAssignRuleVariable InvalidAssignRuleVariable @endlink</code></td>
<td>Invalid value for the \'variable\' attribute of an AssignmentRule object</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InvalidRateRuleVariable InvalidRateRuleVariable @endlink</code></td>
<td>Invalid value for the \'variable\' attribute of a RateRule object</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.AssignmentToConstantEntity AssignmentToConstantEntity @endlink</code></td>
<td>An assignment rule cannot assign an entity declared to be constant</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.RateRuleForConstantEntity RateRuleForConstantEntity @endlink</code></td>
<td>A rate rule cannot assign an entity declared to be constant</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CircularRuleDependency CircularRuleDependency @endlink</code></td>
<td>Circular dependencies involving rules and reactions are not permitted</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.OneMathElementPerRule OneMathElementPerRule @endlink</code></td>
<td>A rule object must contain one <code>&lt;math&gt;</code> element</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.AllowedAttributesOnAssignRule AllowedAttributesOnAssignRule @endlink</code></td>
<td>Invalid attribute found on an AssignmentRule object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.AllowedAttributesOnRateRule AllowedAttributesOnRateRule @endlink</code></td>
<td>Invalid attribute found on a RateRule object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.AllowedAttributesOnAlgRule AllowedAttributesOnAlgRule @endlink</code></td>
<td>Invalid attribute found on an AlgebraicRule object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.ConstraintMathNotBoolean ConstraintMathNotBoolean @endlink</code></td>
<td>A Constraint object\'s <code>&lt;math&gt;</code> must evaluate to a Boolean value</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.IncorrectOrderInConstraint IncorrectOrderInConstraint @endlink</code></td>
<td>Subobjects inside the Constraint object are not in the prescribed order</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.ConstraintNotInXHTMLNamespace ConstraintNotInXHTMLNamespace @endlink</code></td>
<td>A Constraint\'s Message subobject must be in the XHTML XML namespace</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.ConstraintContainsXMLDecl ConstraintContainsXMLDecl @endlink</code></td>
<td>XML declarations are not permitted within Constraint\'s Message objects</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.ConstraintContainsDOCTYPE ConstraintContainsDOCTYPE @endlink</code></td>
<td>XML DOCTYPE elements are not permitted within Constraint\'s Message objects</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InvalidConstraintContent InvalidConstraintContent @endlink</code></td>
<td>Invalid content for a Constraint object\'s Message object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.OneMathElementPerConstraint OneMathElementPerConstraint @endlink</code></td>
<td>A Constraint object must contain one <code>&lt;math&gt;</code> element</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.OneMessageElementPerConstraint OneMessageElementPerConstraint @endlink</code></td>
<td>A Constraint object must contain one Message subobject</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.AllowedAttributesOnConstraint AllowedAttributesOnConstraint @endlink</code></td>
<td>Invalid attribute found on Constraint object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NoReactantsOrProducts NoReactantsOrProducts @endlink</code></td>
<td>Cannot have a reaction with neither reactants nor products</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.IncorrectOrderInReaction IncorrectOrderInReaction @endlink</code></td>
<td>Subobjects inside the Reaction object are not in the prescribed order</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.EmptyListInReaction EmptyListInReaction @endlink</code></td>
<td>Reaction components, if present, cannot be empty</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InvalidReactantsProductsList InvalidReactantsProductsList @endlink</code></td>
<td>Invalid object found in the list of reactants or products</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InvalidModifiersList InvalidModifiersList @endlink</code></td>
<td>Invalid object found in the list of modifiers</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.OneSubElementPerReaction OneSubElementPerReaction @endlink</code></td>
<td>A Reaction object can only contain one of each allowed type of object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompartmentOnReaction CompartmentOnReaction @endlink</code></td>
<td>Invalid value for the Reaction \'compartment\' attribute</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.AllowedAttributesOnReaction AllowedAttributesOnReaction @endlink</code></td>
<td>Invalid attribute for a Reaction object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InvalidSpeciesReference InvalidSpeciesReference @endlink</code></td>
<td>Invalid \'species\' attribute value in SpeciesReference object</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.BothStoichiometryAndMath BothStoichiometryAndMath @endlink</code></td>
<td>The \'stoichiometry\' attribute and StoichiometryMath subobject are mutually exclusive</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.AllowedAttributesOnSpeciesReference AllowedAttributesOnSpeciesReference @endlink</code></td>
<td>Invalid attribute found on the SpeciesReference object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.AllowedAttributesOnModifier AllowedAttributesOnModifier @endlink</code></td>
<td>Invalid attribute found on the ModifierSpeciesReference object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.UndeclaredSpeciesRef UndeclaredSpeciesRef @endlink</code></td>
<td>Unknown species referenced in the kinetic law <code>&lt;math&gt;</code> formula</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.IncorrectOrderInKineticLaw IncorrectOrderInKineticLaw @endlink</code></td>
<td>Incorrect ordering of components in the KineticLaw object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.EmptyListInKineticLaw EmptyListInKineticLaw @endlink</code></td>
<td>The list of parameters, if present, cannot be empty</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NonConstantLocalParameter NonConstantLocalParameter @endlink</code></td>
<td>Parameters local to a KineticLaw object must have a \'constant\' attribute value of \'true\'</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.SubsUnitsNoLongerValid SubsUnitsNoLongerValid @endlink</code></td>
<td>Attribute \'substanceUnits\' is not supported in this Level+Version of SBML</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.TimeUnitsNoLongerValid TimeUnitsNoLongerValid @endlink</code></td>
<td>Attribute \'timeUnits\' is not supported in this Level+Version of SBML</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.OneListOfPerKineticLaw OneListOfPerKineticLaw @endlink</code></td>
<td>Only one ListOfLocalParameters object is permitted within a KineticLaw object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.OnlyLocalParamsInListOfLocalParams OnlyLocalParamsInListOfLocalParams @endlink</code></td>
<td>Only LocalParameter, Notes and Annotation objects are allowed in ListOfLocalParameter objects</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.AllowedAttributesOnListOfLocalParam AllowedAttributesOnListOfLocalParam @endlink</code></td>
<td>Invalid attribute found on the ListOfLocalParameters object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.OneMathPerKineticLaw OneMathPerKineticLaw @endlink</code></td>
<td>Only one <code>&lt;math&gt;</code> element is allowed in a KineticLaw object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.UndeclaredSpeciesInStoichMath UndeclaredSpeciesInStoichMath @endlink</code></td>
<td>Unknown species referenced in the StoichiometryMath object\'s <code>&lt;math&gt;</code> formula</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.AllowedAttributesOnKineticLaw AllowedAttributesOnKineticLaw @endlink</code></td>
<td>Invalid attribute found on the KineticLaw object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.AllowedAttributesOnListOfSpeciesRef AllowedAttributesOnListOfSpeciesRef @endlink</code></td>
<td>Invalid attribute found on the ListOfSpeciesReferences object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.AllowedAttributesOnListOfMods AllowedAttributesOnListOfMods @endlink</code></td>
<td>Invalid attribute found on the ListOfModifiers object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.AllowedAttributesOnLocalParameter AllowedAttributesOnLocalParameter @endlink</code></td>
<td>Invalid attribute found on the LocalParameter object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.MissingTriggerInEvent MissingTriggerInEvent @endlink</code></td>
<td>The Event object is missing a Trigger subobject</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.TriggerMathNotBoolean TriggerMathNotBoolean @endlink</code></td>
<td>A Trigger object\'s <code>&lt;math&gt;</code> expression must evaluate to a Boolean value</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.MissingEventAssignment MissingEventAssignment @endlink</code></td>
<td>The Event object is missing an EventAssignment subobject</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.TimeUnitsEvent TimeUnitsEvent @endlink</code></td>
<td>Units referenced by \'timeUnits\' attribute are not compatible with units of time</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.IncorrectOrderInEvent IncorrectOrderInEvent @endlink</code></td>
<td>Incorrect ordering of components in Event object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.ValuesFromTriggerTimeNeedDelay ValuesFromTriggerTimeNeedDelay @endlink</code></td>
<td>Attribute \'useValuesFromTriggerTime\'=\'false\', but the Event object does not define a delay</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.DelayNeedsValuesFromTriggerTime DelayNeedsValuesFromTriggerTime @endlink</code></td>
<td>The use of a Delay object requires the Event attribute \'useValuesFromTriggerTime\'</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.OneMathPerTrigger OneMathPerTrigger @endlink</code></td>
<td>A Trigger object must have one <code>&lt;math&gt;</code> element</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.OneMathPerDelay OneMathPerDelay @endlink</code></td>
<td>A Delay object must have one <code>&lt;math&gt;</code> element</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InvalidEventAssignmentVariable InvalidEventAssignmentVariable @endlink</code></td>
<td>Invalid \'variable\' attribute value in Event object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.EventAssignmentForConstantEntity EventAssignmentForConstantEntity @endlink</code></td>
<td>An EventAssignment object cannot assign to a component having attribute \'constant\'=\'true\'</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.OneMathPerEventAssignment OneMathPerEventAssignment @endlink</code></td>
<td>An EventAssignment object must have one <code>&lt;math&gt;</code> element</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.AllowedAttributesOnEventAssignment AllowedAttributesOnEventAssignment @endlink</code></td>
<td>Invalid attribute found on the EventAssignment object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.OnlyOneDelayPerEvent OnlyOneDelayPerEvent @endlink</code></td>
<td>An Event object can only have one Delay subobject</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.OneListOfEventAssignmentsPerEvent OneListOfEventAssignmentsPerEvent @endlink</code></td>
<td>An Event object can only have one ListOfEventAssignments subobject</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.OnlyEventAssignInListOfEventAssign OnlyEventAssignInListOfEventAssign @endlink</code></td>
<td>Only EventAssignment, Notes and Annotation objects are allowed in ListOfEventAssignments</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.AllowedAttributesOnListOfEventAssign AllowedAttributesOnListOfEventAssign @endlink</code></td>
<td>Invalid attribute found on the ListOfEventAssignments object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.AllowedAttributesOnEvent AllowedAttributesOnEvent @endlink</code></td>
<td>Invalid attribute found on the Event object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.AllowedAttributesOnTrigger AllowedAttributesOnTrigger @endlink</code></td>
<td>Invalid attribute found on the Trigger object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.AllowedAttributesOnDelay AllowedAttributesOnDelay @endlink</code></td>
<td>Invalid attribute found on the Delay object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.PersistentNotBoolean PersistentNotBoolean @endlink</code></td>
<td>The Trigger attribute \'persistent\' must evaluate to a Boolean value</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InitialValueNotBoolean InitialValueNotBoolean @endlink</code></td>
<td>The Trigger attribute \'initialValue\' must evaluate to a Boolean value</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.OnlyOnePriorityPerEvent OnlyOnePriorityPerEvent @endlink</code></td>
<td>An Event object can only have one Priority subobject</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.OneMathPerPriority OneMathPerPriority @endlink</code></td>
<td>A Priority object must have one <code>&lt;math&gt;</code> element</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.AllowedAttributesOnPriority AllowedAttributesOnPriority @endlink</code></td>
<td>Invalid attribute found on the Priority object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.GeneralWarningNotSpecified GeneralWarningNotSpecified @endlink</code></td>
<td>Unknown error</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompartmentShouldHaveSize CompartmentShouldHaveSize @endlink</code></td>
<td>It\'s best to define a size for every compartment in a model</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.SpeciesShouldHaveValue SpeciesShouldHaveValue @endlink</code></td>
<td>It\'s best to define an initial amount or initial concentration for every species in a model</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.ParameterShouldHaveUnits ParameterShouldHaveUnits @endlink</code></td>
<td>It\'s best to declare units for every parameter in a model</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LocalParameterShadowsId LocalParameterShadowsId @endlink</code></td>
<td>Local parameters defined within a kinetic law shadow global object symbols</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CannotConvertToL1V1 CannotConvertToL1V1 @endlink</code></td>
<td>Cannot convert to SBML Level 1 Version 1</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NoEventsInL1 NoEventsInL1 @endlink</code></td>
<td>SBML Level 1 does not support events</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NoFunctionDefinitionsInL1 NoFunctionDefinitionsInL1 @endlink</code></td>
<td>SBML Level 1 does not support function definitions</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NoConstraintsInL1 NoConstraintsInL1 @endlink</code></td>
<td>SBML Level 1 does not support constraints</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NoInitialAssignmentsInL1 NoInitialAssignmentsInL1 @endlink</code></td>
<td>SBML Level 1 does not support initial assignments</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NoSpeciesTypesInL1 NoSpeciesTypesInL1 @endlink</code></td>
<td>SBML Level 1 does not support species types</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NoCompartmentTypeInL1 NoCompartmentTypeInL1 @endlink</code></td>
<td>SBML Level 1 does not support compartment types</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NoNon3DCompartmentsInL1 NoNon3DCompartmentsInL1 @endlink</code></td>
<td>SBML Level 1 only supports three-dimensional compartments</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NoFancyStoichiometryMathInL1 NoFancyStoichiometryMathInL1 @endlink</code></td>
<td>SBML Level 1 does not support non-integer nor non-rational stoichiometry formulas</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NoNonIntegerStoichiometryInL1 NoNonIntegerStoichiometryInL1 @endlink</code></td>
<td>SBML Level 1 does not support non-integer \'stoichiometry\' attribute values</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NoUnitMultipliersOrOffsetsInL1 NoUnitMultipliersOrOffsetsInL1 @endlink</code></td>
<td>SBML Level 1 does not support multipliers or offsets in unit definitions</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.SpeciesCompartmentRequiredInL1 SpeciesCompartmentRequiredInL1 @endlink</code></td>
<td>In SBML Level 1, a value for \'compartment\' is mandatory in species definitions</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NoSpeciesSpatialSizeUnitsInL1 NoSpeciesSpatialSizeUnitsInL1 @endlink</code></td>
<td>SBML Level 1 does not support species \'spatialSizeUnits\' settings</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NoSBOTermsInL1 NoSBOTermsInL1 @endlink</code></td>
<td>SBML Level 1 does not support the \'sboTerm\' attribute</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.StrictUnitsRequiredInL1 StrictUnitsRequiredInL1 @endlink</code></td>
<td>SBML Level 1 requires strict unit consistency</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.ConversionFactorNotInL1 ConversionFactorNotInL1 @endlink</code></td>
<td>SBML Level 1 does not support the \'conversionFactor\' attribute</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompartmentNotOnL1Reaction CompartmentNotOnL1Reaction @endlink</code></td>
<td>SBML Level 1 does not support the \'compartment\' attribute on Reaction objects</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.ExtentUnitsNotSubstance ExtentUnitsNotSubstance @endlink</code></td>
<td>Units of extent must be compatible with units of substance</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.GlobalUnitsNotDeclared GlobalUnitsNotDeclared @endlink</code></td>
<td>Global units must be refer to unit kind or unitDefinition.</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.HasOnlySubstanceUnitsNotinL1 HasOnlySubstanceUnitsNotinL1 @endlink</code></td>
<td>The concept of hasOnlySubstanceUnits was not available in SBML Level 1.</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.AvogadroNotSupported AvogadroNotSupported @endlink</code></td>
<td>Avogadro not supported in Levels 2 and 1.</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NoConstraintsInL2v1 NoConstraintsInL2v1 @endlink</code></td>
<td>SBML Level 2 Version 1 does not support Constraint objects</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NoInitialAssignmentsInL2v1 NoInitialAssignmentsInL2v1 @endlink</code></td>
<td>SBML Level 2 Version 1 does not support InitialAssignment objects</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NoSpeciesTypeInL2v1 NoSpeciesTypeInL2v1 @endlink</code></td>
<td>SBML Level 2 Version 1 does not support SpeciesType objects</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NoCompartmentTypeInL2v1 NoCompartmentTypeInL2v1 @endlink</code></td>
<td>SBML Level 2 Version 1 does not support CompartmentType objects</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NoSBOTermsInL2v1 NoSBOTermsInL2v1 @endlink</code></td>
<td>SBML Level 2 Version 1 does not support the \'sboTerm\' attribute</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NoIdOnSpeciesReferenceInL2v1 NoIdOnSpeciesReferenceInL2v1 @endlink</code></td>
<td>SBML Level 2 Version 1 does not support the \'id\' attribute on SpeciesReference objects</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NoDelayedEventAssignmentInL2v1 NoDelayedEventAssignmentInL2v1 @endlink</code></td>
<td>SBML Level 2 Version 1 does not support the \'useValuesFromTriggerTime\' attribute</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.StrictUnitsRequiredInL2v1 StrictUnitsRequiredInL2v1 @endlink</code></td>
<td>SBML Level 2 Version 1 requires strict unit consistency</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.IntegerSpatialDimensions IntegerSpatialDimensions @endlink</code></td>
<td>SBML Level 2 Version 1 requires that compartments have spatial dimensions of 0-3</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.StoichiometryMathNotYetSupported StoichiometryMathNotYetSupported @endlink</code></td>
<td>Conversion to StoichiometryMath objects not yet supported</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.PriorityLostFromL3 PriorityLostFromL3 @endlink</code></td>
<td>SBML Level 2 Version 1 does not support priorities on Event objects</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NonPersistentNotSupported NonPersistentNotSupported @endlink</code></td>
<td>SBML Level 2 Version 1 does not support the \'persistent\' attribute on Trigger objects</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InitialValueFalseEventNotSupported InitialValueFalseEventNotSupported @endlink</code></td>
<td>SBML Level 2 Version 1 does not support the \'initialValue\' attribute on Trigger objects</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.SBOTermNotUniversalInL2v2 SBOTermNotUniversalInL2v2 @endlink</code></td>
<td>The \'sboTerm\' attribute is invalid for this component in SBML Level 2 Version 2</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NoUnitOffsetInL2v2 NoUnitOffsetInL2v2 @endlink</code></td>
<td>This Level+Version of SBML does not support the \'offset\' attribute on Unit objects</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NoKineticLawTimeUnitsInL2v2 NoKineticLawTimeUnitsInL2v2 @endlink</code></td>
<td>This Level+Version of SBML does not support the \'timeUnits\' attribute on KineticLaw objects</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NoKineticLawSubstanceUnitsInL2v2 NoKineticLawSubstanceUnitsInL2v2 @endlink</code></td>
<td>This Level+Version of SBML does not support the \'substanceUnits\' attribute on KineticLaw objects</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NoDelayedEventAssignmentInL2v2 NoDelayedEventAssignmentInL2v2 @endlink</code></td>
<td>This Level+Version of SBML does not support the \'useValuesFromTriggerTime\' attribute</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.ModelSBOBranchChangedBeyondL2v2 ModelSBOBranchChangedBeyondL2v2 @endlink</code></td>
<td>The allowable \'sboTerm\' attribute values for Model objects differ for this SBML Level+Version</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.StrictUnitsRequiredInL2v2 StrictUnitsRequiredInL2v2 @endlink</code></td>
<td>SBML Level 2 Version 2 requires strict unit consistency</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.StrictSBORequiredInL2v2 StrictSBORequiredInL2v2 @endlink</code></td>
<td>SBML Level 2 Version 2 requires strict SBO term consistency</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.DuplicateAnnotationInvalidInL2v2 DuplicateAnnotationInvalidInL2v2 @endlink</code></td>
<td>Duplicate top-level annotations are invalid in SBML Level 2 Version 2</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NoUnitOffsetInL2v3 NoUnitOffsetInL2v3 @endlink</code></td>
<td>This Level+Version of SBML does not support the \'offset\' attribute on Unit objects</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NoKineticLawTimeUnitsInL2v3 NoKineticLawTimeUnitsInL2v3 @endlink</code></td>
<td>This Level+Version of SBML does not support the \'timeUnits\' attribute on KineticLaw objects</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NoKineticLawSubstanceUnitsInL2v3 NoKineticLawSubstanceUnitsInL2v3 @endlink</code></td>
<td>This Level+Version of SBML does not support the \'substanceUnits\' attribute on KineticLaw objects</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NoSpeciesSpatialSizeUnitsInL2v3 NoSpeciesSpatialSizeUnitsInL2v3 @endlink</code></td>
<td>This Level+Version of SBML does not support the \'spatialSizeUnit\' attribute on Species objects</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NoEventTimeUnitsInL2v3 NoEventTimeUnitsInL2v3 @endlink</code></td>
<td>This Level+Version of SBML does not support the \'timeUnits\' attribute on Event objects</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NoDelayedEventAssignmentInL2v3 NoDelayedEventAssignmentInL2v3 @endlink</code></td>
<td>This Level+Version of SBML does not support the \'useValuesFromTriggerTime\' attribute</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.ModelSBOBranchChangedBeyondL2v3 ModelSBOBranchChangedBeyondL2v3 @endlink</code></td>
<td>The allowable \'sboTerm\' attribute values for Model objects differ for this SBML Level+Version</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.StrictUnitsRequiredInL2v3 StrictUnitsRequiredInL2v3 @endlink</code></td>
<td>SBML Level 2 Version 3 requires strict unit consistency</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.StrictSBORequiredInL2v3 StrictSBORequiredInL2v3 @endlink</code></td>
<td>SBML Level 2 Version 3 requires strict SBO term consistency</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.DuplicateAnnotationInvalidInL2v3 DuplicateAnnotationInvalidInL2v3 @endlink</code></td>
<td>Duplicate top-level annotations are invalid in SBML Level 2 Version 3</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NoUnitOffsetInL2v4 NoUnitOffsetInL2v4 @endlink</code></td>
<td>This Level+Version of SBML does not support the \'offset\' attribute on Unit objects</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NoKineticLawTimeUnitsInL2v4 NoKineticLawTimeUnitsInL2v4 @endlink</code></td>
<td>This Level+Version of SBML does not support the \'timeUnits\' attribute on KineticLaw objects</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NoKineticLawSubstanceUnitsInL2v4 NoKineticLawSubstanceUnitsInL2v4 @endlink</code></td>
<td>This Level+Version of SBML does not support the \'substanceUnits\' attribute on KineticLaw objects</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NoSpeciesSpatialSizeUnitsInL2v4 NoSpeciesSpatialSizeUnitsInL2v4 @endlink</code></td>
<td>This Level+Version of SBML does not support the \'spatialSizeUnit\' attribute on Species objects</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NoEventTimeUnitsInL2v4 NoEventTimeUnitsInL2v4 @endlink</code></td>
<td>This Level+Version of SBML does not support the \'timeUnits\' attribute on Event objects</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.ModelSBOBranchChangedInL2v4 ModelSBOBranchChangedInL2v4 @endlink</code></td>
<td>The allowable \'sboTerm\' attribute values for Model objects differ for this SBML Level+Version</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.DuplicateAnnotationInvalidInL2v4 DuplicateAnnotationInvalidInL2v4 @endlink</code></td>
<td>Duplicate top-level annotations are invalid in SBML Level 2 Version 4</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NoSpeciesTypeInL3v1 NoSpeciesTypeInL3v1 @endlink</code></td>
<td>SBML Level 3 Version 1 does not support SpeciesType objects</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NoCompartmentTypeInL3v1 NoCompartmentTypeInL3v1 @endlink</code></td>
<td>SBML Level 3 Version 1 does not support CompartmentType objects</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NoUnitOffsetInL3v1 NoUnitOffsetInL3v1 @endlink</code></td>
<td>This Level+Version of SBML does not support the \'offset\' attribute on Unit objects</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NoKineticLawTimeUnitsInL3v1 NoKineticLawTimeUnitsInL3v1 @endlink</code></td>
<td>This Level+Version of SBML does not support the \'timeUnits\' attribute on KineticLaw objects</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NoKineticLawSubstanceUnitsInL3v1 NoKineticLawSubstanceUnitsInL3v1 @endlink</code></td>
<td>This Level+Version of SBML does not support the \'substanceUnits\' attribute on KineticLaw objects</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NoSpeciesSpatialSizeUnitsInL3v1 NoSpeciesSpatialSizeUnitsInL3v1 @endlink</code></td>
<td>This Level+Version of SBML does not support the \'spatialSizeUnit\' attribute on Species objects</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NoEventTimeUnitsInL3v1 NoEventTimeUnitsInL3v1 @endlink</code></td>
<td>This Level+Version of SBML does not support the \'timeUnits\' attribute on Event objects</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.ModelSBOBranchChangedInL3v1 ModelSBOBranchChangedInL3v1 @endlink</code></td>
<td>The allowable \'sboTerm\' attribute values for Model objects differ for this SBML Level+Version</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.DuplicateAnnotationInvalidInL3v1 DuplicateAnnotationInvalidInL3v1 @endlink</code></td>
<td>Duplicate top-level annotations are invalid in SBML Level 3 Version 1</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NoCompartmentOutsideInL3v1 NoCompartmentOutsideInL3v1 @endlink</code></td>
<td>This Level+Version of SBML does not support the \'outside\' attribute on Compartment objects</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NoStoichiometryMathInL3v1 NoStoichiometryMathInL3v1 @endlink</code></td>
<td>This Level+Version of SBML does not support the StoichiometryMath object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InvalidSBMLLevelVersion InvalidSBMLLevelVersion @endlink</code></td>
<td>Unknown Level+Version combination of SBML</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.AnnotationNotesNotAllowedLevel1 AnnotationNotesNotAllowedLevel1 @endlink</code></td>
<td>Annotation objects on the SBML container element are not permitted in SBML Level 1</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InvalidRuleOrdering InvalidRuleOrdering @endlink</code></td>
<td>Invalid ordering of rules</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.RequiredPackagePresent RequiredPackagePresent @endlink</code></td>
<td>The SBML document requires an SBML Level 3 package unavailable in this software</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.UnrequiredPackagePresent UnrequiredPackagePresent @endlink</code></td>
<td>The SBML document uses an SBML Level 3 package unavailable in this software</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.PackageRequiredShouldBeFalse PackageRequiredShouldBeFalse @endlink</code></td>
<td>This package expects required to be false.</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.SubsUnitsAllowedInKL SubsUnitsAllowedInKL @endlink</code></td>
<td>Disallowed value for attribute \'substanceUnits\' on KineticLaw object</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.TimeUnitsAllowedInKL TimeUnitsAllowedInKL @endlink</code></td>
<td>Disallowed value for attribute \'timeUnits\' on KineticLaw object</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.FormulaInLevel1KL FormulaInLevel1KL @endlink</code></td>
<td>Only predefined functions are allowed in SBML Level 1 formulas</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.L3SubstanceUnitsOnModel L3SubstanceUnitsOnModel @endlink</code></td>
<td>Invalid \'substanceUnits\' attribute value</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.TimeUnitsRemoved TimeUnitsRemoved @endlink</code></td>
<td>This Level+Version of SBML does not support the \'timeUnits\' attribute on Event objects</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.BadMathML BadMathML @endlink</code></td>
<td>Invalid MathML expression</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.FailedMathMLReadOfDouble FailedMathMLReadOfDouble @endlink</code></td>
<td>Missing or invalid floating-point number in MathML expression</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.FailedMathMLReadOfInteger FailedMathMLReadOfInteger @endlink</code></td>
<td>Missing or invalid integer in MathML expression</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.FailedMathMLReadOfExponential FailedMathMLReadOfExponential @endlink</code></td>
<td>Missing or invalid exponential expression in MathML</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.FailedMathMLReadOfRational FailedMathMLReadOfRational @endlink</code></td>
<td>Missing or invalid rational expression in MathML</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.BadMathMLNodeType BadMathMLNodeType @endlink</code></td>
<td>Invalid MathML element</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NoTimeSymbolInFunctionDef NoTimeSymbolInFunctionDef @endlink</code></td>
<td>Use of <code>&lt;csymbol&gt;</code> for \'time\' not allowed within FunctionDefinition objects</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NoBodyInFunctionDef NoBodyInFunctionDef @endlink</code></td>
<td>There must be a <code>&lt;lambda&gt;</code> body within the <code>&lt;math&gt;</code> element of a FunctionDefinition object</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.DanglingUnitSIdRef DanglingUnitSIdRef @endlink</code></td>
<td>Units must refer to valid unit or unitDefinition</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.RDFMissingAboutTag RDFMissingAboutTag @endlink</code></td>
<td>RDF missing the <code>&lt;about&gt;</code> tag.</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.RDFEmptyAboutTag RDFEmptyAboutTag @endlink</code></td>
<td>RDF empty <code>&lt;about&gt;</code> tag.</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.RDFAboutTagNotMetaid RDFAboutTagNotMetaid @endlink</code></td>
<td>RDF <code>&lt;about&gt;</code> tag is not metaid.</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.RDFNotCompleteModelHistory RDFNotCompleteModelHistory @endlink</code></td>
<td>RDF does not contain valid ModelHistory.</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.RDFNotModelHistory RDFNotModelHistory @endlink</code></td>
<td>RDF does not result in a ModelHistory.</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.AnnotationNotElement AnnotationNotElement @endlink</code></td>
<td>Annotation must contain element.</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.UndeclaredUnits UndeclaredUnits @endlink</code></td>
<td>Missing unit declarations on parameters or literal numbers in expression</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.UndeclaredTimeUnitsL3 UndeclaredTimeUnitsL3 @endlink</code></td>
<td>Unable to verify consistency of units: the unit of time has not been declared</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.UndeclaredExtentUnitsL3 UndeclaredExtentUnitsL3 @endlink</code></td>
<td>Unable to verify consistency of units: the units of reaction extent have not been declared</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.UndeclaredObjectUnitsL3 UndeclaredObjectUnitsL3 @endlink</code></td>
<td>Unable to verify consistency of units: encountered a model entity with no declared units</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.UnrecognisedSBOTerm UnrecognisedSBOTerm @endlink</code></td>
<td>Unrecognized \'sboTerm\' attribute value</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.ObseleteSBOTerm ObseleteSBOTerm @endlink</code></td>
<td>Obsolete \'sboTerm\' attribute value</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.IncorrectCompartmentSpatialDimensions IncorrectCompartmentSpatialDimensions @endlink</code></td>
<td>In SBML Level 1, only three-dimensional compartments are allowed</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompartmentTypeNotValidAttribute CompartmentTypeNotValidAttribute @endlink</code></td>
<td>CompartmentType objects are not available in this Level+Version of SBML</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.ConstantNotValidAttribute ConstantNotValidAttribute @endlink</code></td>
<td>This Level+Version of SBML does not support the \'constant\' attribute on this component</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.MetaIdNotValidAttribute MetaIdNotValidAttribute @endlink</code></td>
<td>Attribute \'metaid\' is not available in SBML Level 1</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.SBOTermNotValidAttributeBeforeL2V3 SBOTermNotValidAttributeBeforeL2V3 @endlink</code></td>
<td>The \'sboTerm\' attribute is not available on this component before SBML Level 2 Version 3</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InvalidL1CompartmentUnits InvalidL1CompartmentUnits @endlink</code></td>
<td>Invalid units for a compartment in SBML Level 1</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.L1V1CompartmentVolumeReqd L1V1CompartmentVolumeReqd @endlink</code></td>
<td>In SBML Level 1, a compartment\'s volume must be specified</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompartmentTypeNotValidComponent CompartmentTypeNotValidComponent @endlink</code></td>
<td>CompartmentType objects are not available in this Level+Version of SBML</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.ConstraintNotValidComponent ConstraintNotValidComponent @endlink</code></td>
<td>Constraint objects are not available in this Level+Version of SBML</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.EventNotValidComponent EventNotValidComponent @endlink</code></td>
<td>Event objects are not available in this Level+Version of SBML</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.SBOTermNotValidAttributeBeforeL2V2 SBOTermNotValidAttributeBeforeL2V2 @endlink</code></td>
<td>The \'sboTerm\' attribute is invalid for this component before Level 2 Version 2</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.FuncDefNotValidComponent FuncDefNotValidComponent @endlink</code></td>
<td>FunctionDefinition objects are not available in this Level+Version of SBML</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InitialAssignNotValidComponent InitialAssignNotValidComponent @endlink</code></td>
<td>InitialAssignment objects are not available in this Level+Version of SBML</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.VariableNotValidAttribute VariableNotValidAttribute @endlink</code></td>
<td>Attribute \'variable\' is not available on this component in this Level+Version of SBML</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.UnitsNotValidAttribute UnitsNotValidAttribute @endlink</code></td>
<td>Attribute \'units\' is not available on this component in this Level+Version of SBML</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.ConstantSpeciesNotValidAttribute ConstantSpeciesNotValidAttribute @endlink</code></td>
<td>Attribute \'constant\' is not available on Species objects in SBML Level 1</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.SpatialSizeUnitsNotValidAttribute SpatialSizeUnitsNotValidAttribute @endlink</code></td>
<td>Attribute \'spatialSizeUnits\' is not available on Species objects in SBML Level 1</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.SpeciesTypeNotValidAttribute SpeciesTypeNotValidAttribute @endlink</code></td>
<td>Attribute \'speciesType\' is not available on Species objects in SBML Level 1</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.HasOnlySubsUnitsNotValidAttribute HasOnlySubsUnitsNotValidAttribute @endlink</code></td>
<td>Attribute \'hasOnlySubstanceUnits\' is not available on Species objects in SBML Level 1</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.IdNotValidAttribute IdNotValidAttribute @endlink</code></td>
<td>Attribute \'id\' is not available on SpeciesReference objects in SBML Level 1</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.NameNotValidAttribute NameNotValidAttribute @endlink</code></td>
<td>Attribute \'name\' is not available on SpeciesReference objects in SBML Level 1</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.SpeciesTypeNotValidComponent SpeciesTypeNotValidComponent @endlink</code></td>
<td>The SpeciesType object is not supported in SBML Level 1</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.StoichiometryMathNotValidComponent StoichiometryMathNotValidComponent @endlink</code></td>
<td>The StoichiometryMath object is not supported in SBML Level 1</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.MultiplierNotValidAttribute MultiplierNotValidAttribute @endlink</code></td>
<td>Attribute \'multiplier\' on Unit objects is not supported in SBML Level 1</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.OffsetNotValidAttribute OffsetNotValidAttribute @endlink</code></td>
<td>Attribute \'offset\' on Unit objects is only available in SBML Level 2 Version 1</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.L3SpatialDimensionsUnset L3SpatialDimensionsUnset @endlink</code></td>
<td>No value given for \'spatialDimensions\' attribute; assuming a value of 3</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.PackageConversionNotSupported PackageConversionNotSupported @endlink</code></td>
<td>Conversion of SBML Level 3 package constructs is not yet supported</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.InvalidTargetLevelVersion InvalidTargetLevelVersion @endlink</code></td>
<td>The requested SBML Level/Version combination is not known to exist</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.L3NotSupported L3NotSupported @endlink</code></td>
<td>SBML Level 3 is not yet supported</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompUnknown CompUnknown @endlink</code></td>
<td> Unknown error from comp </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompNSUndeclared CompNSUndeclared @endlink</code></td>
<td> The comp ns is not correctly declared </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompElementNotInNs CompElementNotInNs @endlink</code></td>
<td> Element not in comp namespace </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompDuplicateComponentId CompDuplicateComponentId @endlink</code></td>
<td> Duplicate \'id\' attribute value </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompUniqueModelIds CompUniqueModelIds @endlink</code></td>
<td> Model and ExternalModelDefinitions must have unique ids </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompUniquePortIds CompUniquePortIds @endlink</code></td>
<td> Ports must have unique ids </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompInvalidSIdSyntax CompInvalidSIdSyntax @endlink</code></td>
<td> Invalid SId syntax </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompInvalidSubmodelRefSyntax CompInvalidSubmodelRefSyntax @endlink</code></td>
<td> Invalid submodelRef syntax </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompInvalidDeletionSyntax CompInvalidDeletionSyntax @endlink</code></td>
<td> Invalid deletion syntax </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompInvalidConversionFactorSyntax CompInvalidConversionFactorSyntax @endlink</code></td>
<td> Invalid conversionFactor syntax </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompInvalidNameSyntax CompInvalidNameSyntax @endlink</code></td>
<td> Invalid name syntax </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompReplacedUnitsShouldMatch CompReplacedUnitsShouldMatch @endlink</code></td>
<td> Units of replaced elements should match replacement units. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompOneListOfReplacedElements CompOneListOfReplacedElements @endlink</code></td>
<td> Only one <code>&lt;listOfReplacedElements&gt;</code> allowed. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompLOReplaceElementsAllowedElements CompLOReplaceElementsAllowedElements @endlink</code></td>
<td> Allowed children of <code>&lt;listOfReplacedElements&gt;</code> </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompLOReplacedElementsAllowedAttribs CompLOReplacedElementsAllowedAttribs @endlink</code></td>
<td> Allowed <code>&lt;listOfReplacedElements&gt;</code> attributes </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompEmptyLOReplacedElements CompEmptyLOReplacedElements @endlink</code></td>
<td> <code>&lt;listOfReplacedElements&gt;</code> must not be empty </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompOneReplacedByElement CompOneReplacedByElement @endlink</code></td>
<td> Only one <code>&lt;replacedBy&gt;</code> object allowed. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompAttributeRequiredMissing CompAttributeRequiredMissing @endlink</code></td>
<td> Required comp:required attribute on <code>&lt;sbml&gt;</code> </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompAttributeRequiredMustBeBoolean CompAttributeRequiredMustBeBoolean @endlink</code></td>
<td> The comp:required attribute must be Boolean </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompRequiredTrueIfElementsRemain CompRequiredTrueIfElementsRemain @endlink</code></td>
<td> The comp:required attribute must be \'true\' if math changes. NOTE:  Deprecated </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompRequiredFalseIfAllElementsReplaced CompRequiredFalseIfAllElementsReplaced @endlink</code></td>
<td> The comp:required attribute must be \'false\' if math does not change. NOTE:  Deprecated </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompOneListOfModelDefinitions CompOneListOfModelDefinitions @endlink</code></td>
<td> Only one <code>&lt;listOfModelDefinitions&gt;</code> allowed. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompEmptyLOModelDefs CompEmptyLOModelDefs @endlink</code></td>
<td> <code>&lt;listOfModelDefinitions&gt;</code> and <code>&lt;listOfExternalModelDefinitions&gt;</code> must not be empty </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompLOModelDefsAllowedElements CompLOModelDefsAllowedElements @endlink</code></td>
<td> Only <code>&lt;modelDefinitions&gt;</code> in <code>&lt;listOfModelDefinitions&gt;</code> </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompLOExtModelDefsAllowedElements CompLOExtModelDefsAllowedElements @endlink</code></td>
<td> Only <code>&lt;externalModelDefinitions&gt;</code> in <code>&lt;listOfExternalModelDefinitions&gt;</code> </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompLOModelDefsAllowedAttributes CompLOModelDefsAllowedAttributes @endlink</code></td>
<td> Allowed <code>&lt;listOfModelDefinitions&gt;</code> attributes </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompLOExtModDefsAllowedAttributes CompLOExtModDefsAllowedAttributes @endlink</code></td>
<td> Allowed <code>&lt;listOfExternalModelDefinitions&gt;</code> attributes </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompOneListOfExtModelDefinitions CompOneListOfExtModelDefinitions @endlink</code></td>
<td> Only one <code>&lt;listOfExternalModelDefinitions&gt;</code> allowed. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompAttributeRequiredMustBeTrue CompAttributeRequiredMustBeTrue @endlink</code></td>
<td> The comp:required attribute must be \'true\' </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompExtModDefAllowedCoreAttributes CompExtModDefAllowedCoreAttributes @endlink</code></td>
<td> Allowed <code>&lt;externalModelDefinitions&gt;</code> core attributes </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompExtModDefAllowedElements CompExtModDefAllowedElements @endlink</code></td>
<td> Allowed <code>&lt;externalModelDefinitions&gt;</code> elements </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompExtModDefAllowedAttributes CompExtModDefAllowedAttributes @endlink</code></td>
<td> Allowed <code>&lt;externalModelDefinitions&gt;</code> attributes </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompReferenceMustBeL3 CompReferenceMustBeL3 @endlink</code></td>
<td> External models must be L3 </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompModReferenceMustIdOfModel CompModReferenceMustIdOfModel @endlink</code></td>
<td> \'modelRef\' must be the \'id\' of a model in the \'source\' document </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompExtModMd5DoesNotMatch CompExtModMd5DoesNotMatch @endlink</code></td>
<td> MD5 checksum does not match the \'source\' document </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompInvalidSourceSyntax CompInvalidSourceSyntax @endlink</code></td>
<td> The \'comp:source\' attribute must be of type \'anyURI\' </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompInvalidModelRefSyntax CompInvalidModelRefSyntax @endlink</code></td>
<td> The \'comp:modelRef\' attribute must have the syntax of \'SId\' </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompInvalidMD5Syntax CompInvalidMD5Syntax @endlink</code></td>
<td> The \'comp:md5\' attribute must have the syntax of \'string\' </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompCircularExternalModelReference CompCircularExternalModelReference @endlink</code></td>
<td> Circular reference in <code>&lt;externalModelDefinitiongt;</code> </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompOneListOfOnModel CompOneListOfOnModel @endlink</code></td>
<td> Only one <code>&lt;listOfSubmodels&gt;</code> and one <code>&lt;listOfPorts&gt;</code> allowed </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompNoEmptyListOfOnModel CompNoEmptyListOfOnModel @endlink</code></td>
<td> No empty listOf elements allowed </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompLOSubmodelsAllowedElements CompLOSubmodelsAllowedElements @endlink</code></td>
<td> Allowed elements on <code>&lt;listOfSubmodels&gt;</code> </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompLOPortsAllowedElements CompLOPortsAllowedElements @endlink</code></td>
<td> Allowed elements on <code>&lt;listOfPorts&gt;</code> </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompLOSubmodelsAllowedAttributes CompLOSubmodelsAllowedAttributes @endlink</code></td>
<td> Allowed attributes on <code>&lt;listOfSubmodels&gt;</code> </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompLOPortsAllowedAttributes CompLOPortsAllowedAttributes @endlink</code></td>
<td> Allowed attributes on <code>&lt;listOfPorts&gt;</code> </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompSubmodelAllowedCoreAttributes CompSubmodelAllowedCoreAttributes @endlink</code></td>
<td> Allowed core attributes on <code>&lt;submodel&gt;</code> </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompSubmodelAllowedElements CompSubmodelAllowedElements @endlink</code></td>
<td> Allowed elements on <code>&lt;submodel&gt;</code> </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompOneListOfDeletionOnSubmodel CompOneListOfDeletionOnSubmodel @endlink</code></td>
<td> Only one <code>&lt;listOfDeletions&gt;</code> on a <code>&lt;submodel&gt;</code> allowed </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompSubmodelNoEmptyLODeletions CompSubmodelNoEmptyLODeletions @endlink</code></td>
<td> No empty listOfDeletions elements allowed </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompLODeletionsAllowedElements CompLODeletionsAllowedElements @endlink</code></td>
<td> Allowed elements on <code>&lt;listOfDeletions&gt;</code> </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompLODeletionAllowedAttributes CompLODeletionAllowedAttributes @endlink</code></td>
<td> Allowed <code>&lt;listOfDeletions&gt;</code> attributes </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompSubmodelAllowedAttributes CompSubmodelAllowedAttributes @endlink</code></td>
<td> Allowed <code>&lt;submodel&gt;</code> attributes </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompModReferenceSyntax CompModReferenceSyntax @endlink</code></td>
<td> \'comp:modelRef\' must conform to SId syntax </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompInvalidTimeConvFactorSyntax CompInvalidTimeConvFactorSyntax @endlink</code></td>
<td> \'comp:timeConversionFactor\' must conform to SId syntax </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompInvalidExtentConvFactorSyntax CompInvalidExtentConvFactorSyntax @endlink</code></td>
<td> \'comp:extentConversionFactor\' must conform to SId syntax </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompSubmodelMustReferenceModel CompSubmodelMustReferenceModel @endlink</code></td>
<td> The \'comp:modelRef\' attribute must reference a model </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompSubmodelCannotReferenceSelf CompSubmodelCannotReferenceSelf @endlink</code></td>
<td> The \'comp:modelRef\' attribute cannot reference own model </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompModCannotCircularlyReferenceSelf CompModCannotCircularlyReferenceSelf @endlink</code></td>
<td> <code>&lt;model&gt;</code> may not reference <code>&lt;submodel&gt;</code> that references itself. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompTimeConversionMustBeParameter CompTimeConversionMustBeParameter @endlink</code></td>
<td> The \'comp:timeConversionFactor\' must reference a parameter </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompExtentConversionMustBeParameter CompExtentConversionMustBeParameter @endlink</code></td>
<td> The \'comp:extentConversionFactor\' must reference a parameter </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompPortRefMustReferencePort CompPortRefMustReferencePort @endlink</code></td>
<td> The \'comp:portRef\' attribute must be the \'id\' of a <code>&lt;port&gt;</code> </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompIdRefMustReferenceObject CompIdRefMustReferenceObject @endlink</code></td>
<td> The \'comp:idRef\' attribute must be the \'id\' of a model element </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompUnitRefMustReferenceUnitDef CompUnitRefMustReferenceUnitDef @endlink</code></td>
<td> The \'comp:unitRef\' attribute must be the \'id\' of a UnitDefinition </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompMetaIdRefMustReferenceObject CompMetaIdRefMustReferenceObject @endlink</code></td>
<td> The \'comp:metaIdRef\' attribute must be the \'metaid\' of an object </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompParentOfSBRefChildMustBeSubmodel CompParentOfSBRefChildMustBeSubmodel @endlink</code></td>
<td> If <code>&lt;sBaseRef&gt;</code> has a child <code>&lt;sBaseRef&gt;</code> its parent must be a <code>&lt;submodel&gt;</code> </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompInvalidPortRefSyntax CompInvalidPortRefSyntax @endlink</code></td>
<td> The \'comp:portRef\' attribute must have the syntax of an SBML SId </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompInvalidIdRefSyntax CompInvalidIdRefSyntax @endlink</code></td>
<td> The \'comp:idRef\' attribute must have the syntax of an SBML SId </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompInvalidUnitRefSyntax CompInvalidUnitRefSyntax @endlink</code></td>
<td> The \'comp:unitRef\' attribute must have the syntax of an SBML SId </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompInvalidMetaIdRefSyntax CompInvalidMetaIdRefSyntax @endlink</code></td>
<td> The \'comp:metaIdRef\' attribute must have the syntax of an XML ID </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompOneSBaseRefOnly CompOneSBaseRefOnly @endlink</code></td>
<td> Only one <code>&lt;sbaseRef&gt;</code> </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompDeprecatedSBaseRefSpelling CompDeprecatedSBaseRefSpelling @endlink</code></td>
<td> The spelling \'sbaseRef\' is deprecated </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompSBaseRefMustReferenceObject CompSBaseRefMustReferenceObject @endlink</code></td>
<td> An SBaseRef must reference an object. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompSBaseRefMustReferenceOnlyOneObject CompSBaseRefMustReferenceOnlyOneObject @endlink</code></td>
<td> An SBaseRef must reference only one other object. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompNoMultipleReferences CompNoMultipleReferences @endlink</code></td>
<td> Objects may not be referenced by mutiple SBaseRef constructs. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompPortMustReferenceObject CompPortMustReferenceObject @endlink</code></td>
<td> Port must reference an object </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompPortMustReferenceOnlyOneObject CompPortMustReferenceOnlyOneObject @endlink</code></td>
<td> Port must reference only one other object. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompPortAllowedAttributes CompPortAllowedAttributes @endlink</code></td>
<td> Allowed attributes on a Port </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompPortReferencesUnique CompPortReferencesUnique @endlink</code></td>
<td> Port definitions must be unique. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompDeletionMustReferenceObject CompDeletionMustReferenceObject @endlink</code></td>
<td> Deletion must reference an object </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompDeletionMustReferOnlyOneObject CompDeletionMustReferOnlyOneObject @endlink</code></td>
<td> Deletion must reference only one other object. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompDeletionAllowedAttributes CompDeletionAllowedAttributes @endlink</code></td>
<td> Allowed attributes on a Deletion </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompReplacedElementMustRefObject CompReplacedElementMustRefObject @endlink</code></td>
<td> ReplacedElement must reference an object </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompReplacedElementMustRefOnlyOne CompReplacedElementMustRefOnlyOne @endlink</code></td>
<td> ReplacedElement must reference only one other object. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompReplacedElementAllowedAttributes CompReplacedElementAllowedAttributes @endlink</code></td>
<td> Allowed attributes on <code>&lt;replacedElement&gt;</code> </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompReplacedElementSubModelRef CompReplacedElementSubModelRef @endlink</code></td>
<td> The \'comp:submodelRef\' attribute must point to a <code>&lt;submodel&gt;</code> </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompReplacedElementDeletionRef CompReplacedElementDeletionRef @endlink</code></td>
<td> The \'comp:deletion\' attribute must point to a <code>&lt;deletion&gt;</code> </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompReplacedElementConvFactorRef CompReplacedElementConvFactorRef @endlink</code></td>
<td> The \'comp:conversionFactor attribute must point to a <code>&lt;parameter&gt;</code> </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompReplacedElementSameReference CompReplacedElementSameReference @endlink</code></td>
<td> No <code>&lt;replacedElement&gt;</code> refer to same object </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompReplacedElementNoDelAndConvFact CompReplacedElementNoDelAndConvFact @endlink</code></td>
<td> No <code>&lt;replacedElement&gt;</code> with deletion and conversionfactor </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompReplacedByMustRefObject CompReplacedByMustRefObject @endlink</code></td>
<td> ReplacedBy must reference an object </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompReplacedByMustRefOnlyOne CompReplacedByMustRefOnlyOne @endlink</code></td>
<td> ReplacedBy must reference only one other object. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompReplacedByAllowedAttributes CompReplacedByAllowedAttributes @endlink</code></td>
<td> Allowed attributes on <code>&lt;replacedBy&gt;</code> </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompReplacedBySubModelRef CompReplacedBySubModelRef @endlink</code></td>
<td> The \'comp:submodelRef\' attribute must point to a <code>&lt;submodel&gt;</code> </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompMustReplaceSameClass CompMustReplaceSameClass @endlink</code></td>
<td> Replaced classes must match. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompMustReplaceIDs CompMustReplaceIDs @endlink</code></td>
<td> Replaced IDs must be replaced with IDs. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompMustReplaceMetaIDs CompMustReplaceMetaIDs @endlink</code></td>
<td> Replaced metaids must be replaced with metaids. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompMustReplacePackageIDs CompMustReplacePackageIDs @endlink</code></td>
<td> Replaced package IDs must be replaced with package IDs. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompUnresolvedReference CompUnresolvedReference @endlink</code></td>
<td> Unresolved reference. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompNoModelInReference CompNoModelInReference @endlink</code></td>
<td> No model in referenced document. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompExtModDefBad CompExtModDefBad @endlink</code></td>
<td> Referenced <code>&lt;externalModelDefinitiongt;</code> unresolvable. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompModelFlatteningFailed CompModelFlatteningFailed @endlink</code></td>
<td> Model failed to flatten. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompFlatModelNotValid CompFlatModelNotValid @endlink</code></td>
<td> Flat model not valid. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompLineNumbersUnreliable CompLineNumbersUnreliable @endlink</code></td>
<td> Line numbers unreliable. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompFlatteningNotRecognisedReqd CompFlatteningNotRecognisedReqd @endlink</code></td>
<td> Flattening not implemented for required package. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompFlatteningNotRecognisedNotReqd CompFlatteningNotRecognisedNotReqd @endlink</code></td>
<td> Flattening not implemented for unrequired package. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompFlatteningNotImplementedNotReqd CompFlatteningNotImplementedNotReqd @endlink</code></td>
<td> Flattening not implemented for unrequired package. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompFlatteningNotImplementedReqd CompFlatteningNotImplementedReqd @endlink</code></td>
<td> Flattening not implemented for required package. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompFlatteningWarning CompFlatteningWarning @endlink</code></td>
<td> Flattening reference may come from package. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompDeprecatedDeleteFunction CompDeprecatedDeleteFunction @endlink</code></td>
<td> The performDeletions functions is deprecated. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompDeprecatedReplaceFunction CompDeprecatedReplaceFunction @endlink</code></td>
<td> The performReplacementsAndConversions fuctions is deprecated. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompDeletedReplacement CompDeletedReplacement @endlink</code></td>
<td> Element deleted before a subelement could be replaced. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompIdRefMayReferenceUnknownPackage CompIdRefMayReferenceUnknownPackage @endlink</code></td>
<td> The \'comp:idRef\' attribute must be the \'id\' of a model element </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.CompMetaIdRefMayReferenceUnknownPkg CompMetaIdRefMayReferenceUnknownPkg @endlink</code></td>
<td> The \'comp:metaIdRef\' attribute must be the \'metaid\' of a model element </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.FbcUnknown FbcUnknown @endlink</code></td>
<td> Unknown error from fbc </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.FbcNSUndeclared FbcNSUndeclared @endlink</code></td>
<td> The fbc ns is not correctly declared </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.FbcElementNotInNs FbcElementNotInNs @endlink</code></td>
<td> Element not in fbc namespace </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.FbcDuplicateComponentId FbcDuplicateComponentId @endlink</code></td>
<td> Duplicate \'id\' attribute value </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.FbcSBMLSIdSyntax FbcSBMLSIdSyntax @endlink</code></td>
<td> Invalid \'id\' attribute </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.FbcAttributeRequiredMissing FbcAttributeRequiredMissing @endlink</code></td>
<td> Required fbc:required attribute on <code>&lt;sbml&gt;</code> </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.FbcAttributeRequiredMustBeBoolean FbcAttributeRequiredMustBeBoolean @endlink</code></td>
<td> The fbc:required attribute must be Boolean </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.FbcRequiredFalse FbcRequiredFalse @endlink</code></td>
<td> The fbc:required attribute must be \'false\' </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.FbcOnlyOneEachListOf FbcOnlyOneEachListOf @endlink</code></td>
<td> One of each list of allowed </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.FbcNoEmptyListOfs FbcNoEmptyListOfs @endlink</code></td>
<td> ListOf elements cannot be empty </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.FbcLOFluxBoundsAllowedElements FbcLOFluxBoundsAllowedElements @endlink</code></td>
<td> Allowed elements on ListOfFluxBounds </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.FbcLOObjectivesAllowedElements FbcLOObjectivesAllowedElements @endlink</code></td>
<td> Allowed elements on ListOfObjectives </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.FbcLOFluxBoundsAllowedAttributes FbcLOFluxBoundsAllowedAttributes @endlink</code></td>
<td> Allowed attributes on ListOfFluxBounds </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.FbcLOObjectivesAllowedAttributes FbcLOObjectivesAllowedAttributes @endlink</code></td>
<td> Allowed attributes on ListOfObjectives </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.FbcActiveObjectiveSyntax FbcActiveObjectiveSyntax @endlink</code></td>
<td> Type of activeObjective attribute </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.FbcActiveObjectiveRefersObjective FbcActiveObjectiveRefersObjective @endlink</code></td>
<td> ActiveObjective must reference Objective </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.FbcSpeciesAllowedL3Attributes FbcSpeciesAllowedL3Attributes @endlink</code></td>
<td> Species allowed attributes </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.FbcSpeciesChargeMustBeInteger FbcSpeciesChargeMustBeInteger @endlink</code></td>
<td> Charge must be integer </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.FbcSpeciesFormulaMustBeString FbcSpeciesFormulaMustBeString @endlink</code></td>
<td> Chemical formula must be string </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.FbcFluxBoundAllowedL3Attributes FbcFluxBoundAllowedL3Attributes @endlink</code></td>
<td> <code>&lt;fluxBound&gt;</code> may only have \'metaId\' and \'sboTerm\' from L3 namespace </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.FbcFluxBoundAllowedElements FbcFluxBoundAllowedElements @endlink</code></td>
<td> <code>&lt;fluxBound&gt;</code> may only have <code>&lt;notes&gt;</code> and <code>&lt;annotations&gt;</code> from L3 Core </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.FbcFluxBoundRequiredAttributes FbcFluxBoundRequiredAttributes @endlink</code></td>
<td> Invalid attribute found on <code>&lt;fluxBound&gt;</code> object </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.FbcFluxBoundRectionMustBeSIdRef FbcFluxBoundRectionMustBeSIdRef @endlink</code></td>
<td> Datatype for \'fbc:reaction\' must be SIdRef </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.FbcFluxBoundNameMustBeString FbcFluxBoundNameMustBeString @endlink</code></td>
<td> The attribute \'fbc:name\' must be of the data type string </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.FbcFluxBoundOperationMustBeEnum FbcFluxBoundOperationMustBeEnum @endlink</code></td>
<td> The attribute \'fbc:operation\' must be of data type FbcOperation </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.FbcFluxBoundValueMustBeDouble FbcFluxBoundValueMustBeDouble @endlink</code></td>
<td> The attribute \'fbc:value\' must be of the data type double </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.FbcFluxBoundReactionMustExist FbcFluxBoundReactionMustExist @endlink</code></td>
<td> \'fbc:reaction\' must refer to valid reaction </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.FbcFluxBoundsForReactionConflict FbcFluxBoundsForReactionConflict @endlink</code></td>
<td> Conflicting set of FluxBounds for a reaction </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.FbcObjectiveAllowedL3Attributes FbcObjectiveAllowedL3Attributes @endlink</code></td>
<td> <code>&lt;objective&gt;</code> may only have \'metaId\' and \'sboTerm\' from L3 namespace </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.FbcObjectiveAllowedElements FbcObjectiveAllowedElements @endlink</code></td>
<td> <code>&lt;objective&gt;</code> may only have <code>&lt;notes&gt;</code> and <code>&lt;annotations&gt;</code> from L3 Core </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.FbcObjectiveRequiredAttributes FbcObjectiveRequiredAttributes @endlink</code></td>
<td> Invalid attribute found on <code>&lt;objective&gt;</code> object </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.FbcObjectiveNameMustBeString FbcObjectiveNameMustBeString @endlink</code></td>
<td> The attribute \'fbc:name\' must be of the data type string </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.FbcObjectiveTypeMustBeEnum FbcObjectiveTypeMustBeEnum @endlink</code></td>
<td> The attribute \'fbc:type\' must be of data type FbcType. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.FbcObjectiveOneListOfObjectives FbcObjectiveOneListOfObjectives @endlink</code></td>
<td> An <code>&lt;objective&gt;</code> must have one <code>&lt;listOfFluxObjectives&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.FbcObjectiveLOFluxObjMustNotBeEmpty FbcObjectiveLOFluxObjMustNotBeEmpty @endlink</code></td>
<td> <code>&lt;listOfFluxObjectives&gt;</code> subobject must not be empty </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.FbcObjectiveLOFluxObjOnlyFluxObj FbcObjectiveLOFluxObjOnlyFluxObj @endlink</code></td>
<td> Invalid element found in <code>&lt;listOfFluxObjectives&gt;</code> </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.FbcObjectiveLOFluxObjAllowedAttribs FbcObjectiveLOFluxObjAllowedAttribs @endlink</code></td>
<td> <code>&lt;listOfFluxObjectives&gt;</code> may only have \'metaId\' and \'sboTerm\' from L3 core </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.FbcFluxObjectAllowedL3Attributes FbcFluxObjectAllowedL3Attributes @endlink</code></td>
<td> <code>&lt;fluxObjectivegt;</code> may only have \'metaId\' and \'sboTerm\' from L3 namespace </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.FbcFluxObjectAllowedElements FbcFluxObjectAllowedElements @endlink</code></td>
<td> <code>&lt;fluxObjectivegt;</code> may only have <code>&lt;notes&gt;</code> and <code>&lt;annotations&gt;</code> from L3 Core </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.FbcFluxObjectRequiredAttributes FbcFluxObjectRequiredAttributes @endlink</code></td>
<td> Invalid attribute found on <code>&lt;fluxObjectivegt;</code> object </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.FbcFluxObjectNameMustBeString FbcFluxObjectNameMustBeString @endlink</code></td>
<td> The attribute \'fbc:name\' must be of the data type string </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.FbcFluxObjectReactionMustBeSIdRef FbcFluxObjectReactionMustBeSIdRef @endlink</code></td>
<td> Datatype for \'fbc:reaction\' must be SIdRef </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.FbcFluxObjectReactionMustExist FbcFluxObjectReactionMustExist @endlink</code></td>
<td> \'fbc:reaction\' must refer to valid reaction </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.FbcFluxObjectCoefficientMustBeDouble FbcFluxObjectCoefficientMustBeDouble @endlink</code></td>
<td> The attribute \'fbc:coefficient\' must be of the data type double </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutUnknownError LayoutUnknownError @endlink</code></td>
<td> Unknown error from layout </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutNSUndeclared LayoutNSUndeclared @endlink</code></td>
<td> The layout ns is not correctly declared </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutElementNotInNs LayoutElementNotInNs @endlink</code></td>
<td> Element not in layout namespace </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutDuplicateComponentId LayoutDuplicateComponentId @endlink</code></td>
<td> Duplicate \'id\' attribute value </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutSIdSyntax LayoutSIdSyntax @endlink</code></td>
<td> \'id\' attribute incorrect syntax </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutXsiTypeAllowedLocations LayoutXsiTypeAllowedLocations @endlink</code></td>
<td> \'xsi:type\' allowed locations </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutXsiTypeSyntax LayoutXsiTypeSyntax @endlink</code></td>
<td> \'xsi:type\' attribute incorrect syntax </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutAttributeRequiredMissing LayoutAttributeRequiredMissing @endlink</code></td>
<td> Required layout:required attribute on <code>&lt;sbml&gt;</code> </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutAttributeRequiredMustBeBoolean LayoutAttributeRequiredMustBeBoolean @endlink</code></td>
<td> The layout:required attribute must be Boolean </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutRequiredFalse LayoutRequiredFalse @endlink</code></td>
<td> The layout:required attribute must be \'false\' </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutOnlyOneLOLayouts LayoutOnlyOneLOLayouts @endlink</code></td>
<td> Only one listOfLayouts on <code>&lt;model&gt;</code> </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutLOLayoutsNotEmpty LayoutLOLayoutsNotEmpty @endlink</code></td>
<td> ListOf elements cannot be empty </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutLOLayoutsAllowedElements LayoutLOLayoutsAllowedElements @endlink</code></td>
<td> Allowed elements on ListOfLayouts </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutLOLayoutsAllowedAttributes LayoutLOLayoutsAllowedAttributes @endlink</code></td>
<td> Allowed attributes on ListOfLayouts </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutLayoutAllowedElements LayoutLayoutAllowedElements @endlink</code></td>
<td> Allowed elements on Layout </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutLayoutAllowedCoreAttributes LayoutLayoutAllowedCoreAttributes @endlink</code></td>
<td> Allowed core attributes on Layout </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutOnlyOneEachListOf LayoutOnlyOneEachListOf @endlink</code></td>
<td> Only one each listOf on <code>&lt;layout&gt;</code> </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutNoEmptyListOfs LayoutNoEmptyListOfs @endlink</code></td>
<td> ListOf elements cannot be empty </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutLayoutAllowedAttributes LayoutLayoutAllowedAttributes @endlink</code></td>
<td> <code>&lt;layout&gt;</code> must have \'id\' and may have \'name\' </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutLayoutNameMustBeString LayoutLayoutNameMustBeString @endlink</code></td>
<td> \'name\' must be string </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutLOCompGlyphAllowedAttributes LayoutLOCompGlyphAllowedAttributes @endlink</code></td>
<td> Attributes allowed on <code>&lt;listOfCompartmentGlyphs&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutLOCompGlyphAllowedElements LayoutLOCompGlyphAllowedElements @endlink</code></td>
<td> Elements allowed on <code>&lt;listOfCompartmentGlyphs&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutLOSpeciesGlyphAllowedAttributes LayoutLOSpeciesGlyphAllowedAttributes @endlink</code></td>
<td> Attributes allowed on <code>&lt;listOfSpeciesGlyphs&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutLOSpeciesGlyphAllowedElements LayoutLOSpeciesGlyphAllowedElements @endlink</code></td>
<td> Elements allowed on <code>&lt;listOfSpeciesGlyphs&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutLORnGlyphAllowedAttributes LayoutLORnGlyphAllowedAttributes @endlink</code></td>
<td> Attributes allowed on <code>&lt;listOfReactionGlyphs&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutLORnGlyphAllowedElements LayoutLORnGlyphAllowedElements @endlink</code></td>
<td> Elements allowed on <code>&lt;listOfReactionGlyphs&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutLOAddGOAllowedAttribut LayoutLOAddGOAllowedAttribut @endlink</code></td>
<td> Attributes allowed on <code>&lt;listOfAdditionalGraphicalObjectGlyphs&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutLOAddGOAllowedElements LayoutLOAddGOAllowedElements @endlink</code></td>
<td> Elements allowed on <code>&lt;listOfAdditionalGraphicalObjectGlyphs&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutLayoutMustHaveDimensions LayoutLayoutMustHaveDimensions @endlink</code></td>
<td> Layout must have <code>&lt;dimensions&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutLOTextGlyphAllowedAttributes LayoutLOTextGlyphAllowedAttributes @endlink</code></td>
<td> Attributes allowed on <code>&lt;listOfTextGlyphs&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutLOTextGlyphAllowedElements LayoutLOTextGlyphAllowedElements @endlink</code></td>
<td> Elements allowed on <code>&lt;listOfTextGlyphs&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutGOAllowedCoreElements LayoutGOAllowedCoreElements @endlink</code></td>
<td> Core elements allowed on <code>&lt;graphicalObject&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutGOAllowedCoreAttributes LayoutGOAllowedCoreAttributes @endlink</code></td>
<td> Core attributes allowed on <code>&lt;graphicalObject&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutGOAllowedElements LayoutGOAllowedElements @endlink</code></td>
<td> %Layout elements allowed on <code>&lt;graphicalObject&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutGOAllowedAttributes LayoutGOAllowedAttributes @endlink</code></td>
<td> %Layout attributes allowed on <code>&lt;graphicalObject&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutGOMetaIdRefMustBeIDREF LayoutGOMetaIdRefMustBeIDREF @endlink</code></td>
<td> Layout \'metIdRef\' must be IDREF. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutGOMetaIdRefMustReferenceObject LayoutGOMetaIdRefMustReferenceObject @endlink</code></td>
<td> Layout \'metIdRef\' must reference existing object. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutGOMustContainBoundingBox LayoutGOMustContainBoundingBox @endlink</code></td>
<td> A <code>&lt;graphicalObject&gt;</code> must contain a <code>&lt;boundingBox&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutCGAllowedCoreElements LayoutCGAllowedCoreElements @endlink</code></td>
<td> Core elements allowed on <code>&lt;compartmentGlyph&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutCGAllowedCoreAttributes LayoutCGAllowedCoreAttributes @endlink</code></td>
<td> Core attributes allowed on <code>&lt;compartmentGlyph&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutCGAllowedElements LayoutCGAllowedElements @endlink</code></td>
<td> %Layout elements allowed on <code>&lt;compartmentGlyph&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutCGAllowedAttributes LayoutCGAllowedAttributes @endlink</code></td>
<td> %Layout attributes allowed on <code>&lt;compartmentGlyph&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutCGMetaIdRefMustBeIDREF LayoutCGMetaIdRefMustBeIDREF @endlink</code></td>
<td> Layout \'metIdRef\' must be IDREF. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutCGMetaIdRefMustReferenceObject LayoutCGMetaIdRefMustReferenceObject @endlink</code></td>
<td> Layout \'metIdRef\' must reference existing object. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutCGCompartmentSyntax LayoutCGCompartmentSyntax @endlink</code></td>
<td> CompartmentGlyph \'compartment\' must have SIdRef syntax. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutCGCompartmentMustRefComp LayoutCGCompartmentMustRefComp @endlink</code></td>
<td> CompartmentGlyph compartment must reference existing compartment. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutCGNoDuplicateReferences LayoutCGNoDuplicateReferences @endlink</code></td>
<td> CompartmentGlyph cannot reference two objects. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutCGOrderMustBeDouble LayoutCGOrderMustBeDouble @endlink</code></td>
<td> CompartmentGlyph order must be double. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutSGAllowedCoreElements LayoutSGAllowedCoreElements @endlink</code></td>
<td> Core elements allowed on <code>&lt;speciesGlyph&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutSGAllowedCoreAttributes LayoutSGAllowedCoreAttributes @endlink</code></td>
<td> Core attributes allowed on <code>&lt;speciesGlyph&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutSGAllowedElements LayoutSGAllowedElements @endlink</code></td>
<td> %Layout elements allowed on <code>&lt;speciesGlyph&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutSGAllowedAttributes LayoutSGAllowedAttributes @endlink</code></td>
<td> %Layout attributes allowed on <code>&lt;speciesGlyph&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutSGMetaIdRefMustBeIDREF LayoutSGMetaIdRefMustBeIDREF @endlink</code></td>
<td> Layout \'metIdRef\' must be IDREF. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutSGMetaIdRefMustReferenceObject LayoutSGMetaIdRefMustReferenceObject @endlink</code></td>
<td> Layout \'metIdRef\' must reference existing object. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutSGSpeciesSyntax LayoutSGSpeciesSyntax @endlink</code></td>
<td> SpeciesGlyph \'species\' must have SIdRef syntax. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutSGSpeciesMustRefSpecies LayoutSGSpeciesMustRefSpecies @endlink</code></td>
<td> SpeciesGlyph species must reference existing species. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutSGNoDuplicateReferences LayoutSGNoDuplicateReferences @endlink</code></td>
<td> SpeciesGlyph cannot reference two objects. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutRGAllowedCoreElements LayoutRGAllowedCoreElements @endlink</code></td>
<td> Core elements allowed on <code>&lt;reactionGlyph&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutRGAllowedCoreAttributes LayoutRGAllowedCoreAttributes @endlink</code></td>
<td> Core attributes allowed on <code>&lt;reactionGlyph&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutRGAllowedElements LayoutRGAllowedElements @endlink</code></td>
<td> %Layout elements allowed on <code>&lt;reactionGlyph&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutRGAllowedAttributes LayoutRGAllowedAttributes @endlink</code></td>
<td> %Layout attributes allowed on <code>&lt;reactionGlyph&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutRGMetaIdRefMustBeIDREF LayoutRGMetaIdRefMustBeIDREF @endlink</code></td>
<td> Layout \'metIdRef\' must be IDREF. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutRGMetaIdRefMustReferenceObject LayoutRGMetaIdRefMustReferenceObject @endlink</code></td>
<td> Layout \'metIdRef\' must reference existing object. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutRGReactionSyntax LayoutRGReactionSyntax @endlink</code></td>
<td> ReactionGlyph \'reaction\' must have SIdRef syntax. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutRGReactionMustRefReaction LayoutRGReactionMustRefReaction @endlink</code></td>
<td> ReactionGlyph reaction must reference existing reaction. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutRGNoDuplicateReferences LayoutRGNoDuplicateReferences @endlink</code></td>
<td> ReactionGlyph cannot reference two objects. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutLOSpeciesRefGlyphAllowedElements LayoutLOSpeciesRefGlyphAllowedElements @endlink</code></td>
<td> Allowed elements on ListOfSpeciesReferenceGlyphs </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutLOSpeciesRefGlyphAllowedAttribs LayoutLOSpeciesRefGlyphAllowedAttribs @endlink</code></td>
<td> Allowed attributes on ListOfSpeciesReferenceGlyphs </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutLOSpeciesRefGlyphNotEmpty LayoutLOSpeciesRefGlyphNotEmpty @endlink</code></td>
<td> ListOfSpeciesReferenceGlyphs not empty </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutGGAllowedCoreElements LayoutGGAllowedCoreElements @endlink</code></td>
<td> Core elements allowed on <code>&lt;generalGlyph&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutGGAllowedCoreAttributes LayoutGGAllowedCoreAttributes @endlink</code></td>
<td> Core attributes allowed on <code>&lt;generalGlyph&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutGGAllowedElements LayoutGGAllowedElements @endlink</code></td>
<td> %Layout elements allowed on <code>&lt;generalGlyph&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutGGAllowedAttributes LayoutGGAllowedAttributes @endlink</code></td>
<td> %Layout attributes allowed on <code>&lt;generalGlyph&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutGGMetaIdRefMustBeIDREF LayoutGGMetaIdRefMustBeIDREF @endlink</code></td>
<td> Layout \'metIdRef\' must be IDREF. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutGGMetaIdRefMustReferenceObject LayoutGGMetaIdRefMustReferenceObject @endlink</code></td>
<td> Layout \'metIdRef\' must reference existing object. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutGGReferenceSyntax LayoutGGReferenceSyntax @endlink</code></td>
<td> GeneralGlyph \'reference\' must have SIdRef syntax. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutGGReferenceMustRefObject LayoutGGReferenceMustRefObject @endlink</code></td>
<td> GeneralGlyph \'reference\' must reference existing element. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutGGNoDuplicateReferences LayoutGGNoDuplicateReferences @endlink</code></td>
<td> GeneralGlyph cannot reference two objects. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutLOReferenceGlyphAllowedElements LayoutLOReferenceGlyphAllowedElements @endlink</code></td>
<td> Allowed elements on ListOfReferenceGlyphs </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutLOReferenceGlyphAllowedAttribs LayoutLOReferenceGlyphAllowedAttribs @endlink</code></td>
<td> Allowed attributes on ListOfReferenceGlyphs </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutLOSubGlyphAllowedElements LayoutLOSubGlyphAllowedElements @endlink</code></td>
<td> Allowed elements on ListOfSubGlyphs </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutLOSubGlyphAllowedAttribs LayoutLOSubGlyphAllowedAttribs @endlink</code></td>
<td> Allowed attributes on ListOfSubGlyphs </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutTGAllowedCoreElements LayoutTGAllowedCoreElements @endlink</code></td>
<td> Core elements allowed on <code>&lt;textGlyph&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutTGAllowedCoreAttributes LayoutTGAllowedCoreAttributes @endlink</code></td>
<td> Core attributes allowed on <code>&lt;textGlyph&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutTGAllowedElements LayoutTGAllowedElements @endlink</code></td>
<td> %Layout elements allowed on <code>&lt;textGlyph&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutTGAllowedAttributes LayoutTGAllowedAttributes @endlink</code></td>
<td> %Layout attributes allowed on <code>&lt;textGlyph&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutTGMetaIdRefMustBeIDREF LayoutTGMetaIdRefMustBeIDREF @endlink</code></td>
<td> Layout \'metIdRef\' must be IDREF. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutTGMetaIdRefMustReferenceObject LayoutTGMetaIdRefMustReferenceObject @endlink</code></td>
<td> Layout \'metIdRef\' must reference existing object. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutTGOriginOfTextSyntax LayoutTGOriginOfTextSyntax @endlink</code></td>
<td> TextGlyph \'originOfText\' must have SIdRef syntax. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutTGOriginOfTextMustRefObject LayoutTGOriginOfTextMustRefObject @endlink</code></td>
<td> TextGlyph \'originOfText\' must reference existing element. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutTGNoDuplicateReferences LayoutTGNoDuplicateReferences @endlink</code></td>
<td> TextGlyph cannot reference two objects. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutTGGraphicalObjectSyntax LayoutTGGraphicalObjectSyntax @endlink</code></td>
<td> TextGlyph \'graphicalObject\' must have SIdRef syntax. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutTGGraphicalObjectMustRefObject LayoutTGGraphicalObjectMustRefObject @endlink</code></td>
<td> TextGlyph \'graphicalObject\' must reference existing element. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutTGTextMustBeString LayoutTGTextMustBeString @endlink</code></td>
<td> TextGlyph \'text\' must be string. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutSRGAllowedCoreElements LayoutSRGAllowedCoreElements @endlink</code></td>
<td> Core elements allowed on <code>&lt;speciesReferenceGlyphgt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutSRGAllowedCoreAttributes LayoutSRGAllowedCoreAttributes @endlink</code></td>
<td> Core attributes allowed on <code>&lt;speciesReferenceGlyphgt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutSRGAllowedElements LayoutSRGAllowedElements @endlink</code></td>
<td> %Layout elements allowed on <code>&lt;speciesReferenceGlyphgt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutSRGAllowedAttributes LayoutSRGAllowedAttributes @endlink</code></td>
<td> %Layout attributes allowed on <code>&lt;speciesReferenceGlyphgt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutSRGMetaIdRefMustBeIDREF LayoutSRGMetaIdRefMustBeIDREF @endlink</code></td>
<td> Layout \'metIdRef\' must be IDREF. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutSRGMetaIdRefMustReferenceObject LayoutSRGMetaIdRefMustReferenceObject @endlink</code></td>
<td> Layout \'metIdRef\' must reference existing object. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutSRGSpeciesReferenceSyntax LayoutSRGSpeciesReferenceSyntax @endlink</code></td>
<td> SpeciesReferenceGlyph \'speciesReference\' must have SIdRef syntax. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutSRGSpeciesRefMustRefObject LayoutSRGSpeciesRefMustRefObject @endlink</code></td>
<td> SpeciesReferenceGlyph \'speciesReference\' must reference existing element. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutSRGNoDuplicateReferences LayoutSRGNoDuplicateReferences @endlink</code></td>
<td> SpeciesReferenceGlyph cannot reference two objects. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutSRGSpeciesGlyphSyntax LayoutSRGSpeciesGlyphSyntax @endlink</code></td>
<td> SpeciesReferenceGlyph \'speciesGlyph\' must have SIdRef syntax. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutSRGSpeciesGlyphMustRefObject LayoutSRGSpeciesGlyphMustRefObject @endlink</code></td>
<td> SpeciesReferenceGlyph \'speciesGlyph\' must reference existing element. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutSRGRoleSyntax LayoutSRGRoleSyntax @endlink</code></td>
<td> SpeciesReferenceGlyph \'role\' must be string from enumeration. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutREFGAllowedCoreElements LayoutREFGAllowedCoreElements @endlink</code></td>
<td> Core elements allowed on <code>&lt;referenceGlyph&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutREFGAllowedCoreAttributes LayoutREFGAllowedCoreAttributes @endlink</code></td>
<td> Core attributes allowed on <code>&lt;referenceGlyph&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutREFGAllowedElements LayoutREFGAllowedElements @endlink</code></td>
<td> %Layout elements allowed on <code>&lt;referenceGlyph&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutREFGAllowedAttributes LayoutREFGAllowedAttributes @endlink</code></td>
<td> %Layout attributes allowed on <code>&lt;referenceGlyph&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutREFGMetaIdRefMustBeIDREF LayoutREFGMetaIdRefMustBeIDREF @endlink</code></td>
<td> Layout \'metIdRef\' must be IDREF. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutREFGMetaIdRefMustReferenceObject LayoutREFGMetaIdRefMustReferenceObject @endlink</code></td>
<td> Layout \'metIdRef\' must reference existing object. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutREFGReferenceSyntax LayoutREFGReferenceSyntax @endlink</code></td>
<td> ReferenceGlyph \'reference\' must have SIdRef syntax. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutREFGReferenceMustRefObject LayoutREFGReferenceMustRefObject @endlink</code></td>
<td> ReferenceGlyph \'reference\' must reference existing element. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutREFGNoDuplicateReferences LayoutREFGNoDuplicateReferences @endlink</code></td>
<td> ReferenceGlyph cannot reference two objects. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutREFGGlyphSyntax LayoutREFGGlyphSyntax @endlink</code></td>
<td> ReferenceGlyph \'glyph\' must have SIdRef syntax. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutREFGGlyphMustRefObject LayoutREFGGlyphMustRefObject @endlink</code></td>
<td> ReferenceGlyph \'glyph\' must reference existing element. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutREFGRoleSyntax LayoutREFGRoleSyntax @endlink</code></td>
<td> ReferenceGlyph \'role\' must be string. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutPointAllowedCoreElements LayoutPointAllowedCoreElements @endlink</code></td>
<td> Core elements allowed on <code>&lt;point&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutPointAllowedCoreAttributes LayoutPointAllowedCoreAttributes @endlink</code></td>
<td> Core attributes allowed on <code>&lt;point&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutPointAllowedAttributes LayoutPointAllowedAttributes @endlink</code></td>
<td> %Layout attributes allowed on <code>&lt;point&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutPointAttributesMustBeDouble LayoutPointAttributesMustBeDouble @endlink</code></td>
<td> Layout \'x\', \'y\' and \'z\' must be double. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutBBoxAllowedCoreElements LayoutBBoxAllowedCoreElements @endlink</code></td>
<td> Core elements allowed on <code>&lt;boundingBox&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutBBoxAllowedCoreAttributes LayoutBBoxAllowedCoreAttributes @endlink</code></td>
<td> Core attributes allowed on <code>&lt;boundingBox&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutBBoxAllowedElements LayoutBBoxAllowedElements @endlink</code></td>
<td> %Layout elements allowed on <code>&lt;boundingBox&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutBBoxAllowedAttributes LayoutBBoxAllowedAttributes @endlink</code></td>
<td> %Layout attributes allowed on <code>&lt;boundingBox&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutBBoxConsistent3DDefinition LayoutBBoxConsistent3DDefinition @endlink</code></td>
<td> Layout consistent dimensions on a <code>&lt;boundingBox&gt;</code> </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutCurveAllowedCoreElements LayoutCurveAllowedCoreElements @endlink</code></td>
<td> Core elements allowed on <code>&lt;curve&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutCurveAllowedCoreAttributes LayoutCurveAllowedCoreAttributes @endlink</code></td>
<td> Core attributes allowed on <code>&lt;curve&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutCurveAllowedElements LayoutCurveAllowedElements @endlink</code></td>
<td> %Layout elements allowed on <code>&lt;curve&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutCurveAllowedAttributes LayoutCurveAllowedAttributes @endlink</code></td>
<td> %Layout attributes allowed on <code>&lt;curve&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutLOCurveSegsAllowedAttributes LayoutLOCurveSegsAllowedAttributes @endlink</code></td>
<td> Allowed attributes on ListOfCurveSegments </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutLOCurveSegsAllowedElements LayoutLOCurveSegsAllowedElements @endlink</code></td>
<td> Allowed elements on ListOfCurveSegments </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutLOCurveSegsNotEmpty LayoutLOCurveSegsNotEmpty @endlink</code></td>
<td> No empty ListOfCurveSegments </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutLSegAllowedCoreElements LayoutLSegAllowedCoreElements @endlink</code></td>
<td> Core elements allowed on <code>&lt;lineSegment&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutLSegAllowedCoreAttributes LayoutLSegAllowedCoreAttributes @endlink</code></td>
<td> Core attributes allowed on <code>&lt;lineSegment&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutLSegAllowedElements LayoutLSegAllowedElements @endlink</code></td>
<td> %Layout elements allowed on <code>&lt;lineSegment&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutLSegAllowedAttributes LayoutLSegAllowedAttributes @endlink</code></td>
<td> %Layout attributes allowed on <code>&lt;lineSegment&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutCBezAllowedCoreElements LayoutCBezAllowedCoreElements @endlink</code></td>
<td> Core elements allowed on <code>&lt;cubicBezier&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutCBezAllowedCoreAttributes LayoutCBezAllowedCoreAttributes @endlink</code></td>
<td> Core attributes allowed on <code>&lt;cubicBezier&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutCBezAllowedElements LayoutCBezAllowedElements @endlink</code></td>
<td> %Layout elements allowed on <code>&lt;cubicBezier&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutCBezAllowedAttributes LayoutCBezAllowedAttributes @endlink</code></td>
<td> %Layout attributes allowed on <code>&lt;cubicBezier&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutDimsAllowedCoreElements LayoutDimsAllowedCoreElements @endlink</code></td>
<td> Core elements allowed on <code>&lt;dimensions&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutDimsAllowedCoreAttributes LayoutDimsAllowedCoreAttributes @endlink</code></td>
<td> Core attributes allowed on <code>&lt;dimensions&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutDimsAllowedAttributes LayoutDimsAllowedAttributes @endlink</code></td>
<td> %Layout attributes allowed on <code>&lt;dimensions&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.LayoutDimsAttributesMustBeDouble LayoutDimsAttributesMustBeDouble @endlink</code></td>
<td> Layout \'width\', \'height\' and \'depth\' must be double. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualUnknown QualUnknown @endlink</code></td>
<td> Unknown error from qual. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualNSUndeclared QualNSUndeclared @endlink</code></td>
<td> The qual ns is not correctly declared. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualElementNotInNs QualElementNotInNs @endlink</code></td>
<td> Element not in qual namespace. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualFunctionTermBool QualFunctionTermBool @endlink</code></td>
<td> FunctionTerm should return bool. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualMathCSymbolDisallowed QualMathCSymbolDisallowed @endlink</code></td>
<td> CSymbol time or delay not allowed. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-warning\'>W</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualDuplicateComponentId QualDuplicateComponentId @endlink</code></td>
<td> Duplicate \'id\' attribute value. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualAttributeRequiredMissing QualAttributeRequiredMissing @endlink</code></td>
<td> Required qual:required attribute on <code>&lt;sbml&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualAttributeRequiredMustBeBoolean QualAttributeRequiredMustBeBoolean @endlink</code></td>
<td> The qual:required attribute must be Boolean. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualRequiredTrueIfTransitions QualRequiredTrueIfTransitions @endlink</code></td>
<td> The qual:required attribute must be \'true\' if math changes. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualOneListOfTransOrQS QualOneListOfTransOrQS @endlink</code></td>
<td> Only one <code>&lt;listOfTransitions&gt;</code> or <code>&lt;listOfQualitativeSpeciesgt;</code> allowed. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualEmptyLONotAllowed QualEmptyLONotAllowed @endlink</code></td>
<td> Empty <code>&lt;listOfTransitions&gt;</code> or <code>&lt;listOfQualitativeSpeciesgt;</code> not allowed. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualLOTransitiondAllowedElements QualLOTransitiondAllowedElements @endlink</code></td>
<td> Elements allowed on <code>&lt;listOfTransitions&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualLOQualSpeciesAllowedElements QualLOQualSpeciesAllowedElements @endlink</code></td>
<td> Elements allowed on <code>&lt;listOfTransitions&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualLOQualSpeciesAllowedAttributes QualLOQualSpeciesAllowedAttributes @endlink</code></td>
<td> Attributes allowed on <code>&lt;listOfQualitativeSpeciesgt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualLOTransitionsAllowedAttributes QualLOTransitionsAllowedAttributes @endlink</code></td>
<td> Attributes allowed on <code>&lt;listOfTransitions&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualQualSpeciesAllowedCoreAttributes QualQualSpeciesAllowedCoreAttributes @endlink</code></td>
<td> Core attributes allowed on <code>&lt;qualitativeSpeciesgt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualQualSpeciesAllowedElements QualQualSpeciesAllowedElements @endlink</code></td>
<td> Elements allowed on <code>&lt;qualitativeSpeciesgt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualQualSpeciesAllowedAttributes QualQualSpeciesAllowedAttributes @endlink</code></td>
<td> Attributes allowed on <code>&lt;qualitativeSpeciesgt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualConstantMustBeBool QualConstantMustBeBool @endlink</code></td>
<td> Attribute \'constant\' on <code>&lt;qualitativeSpeciesgt;</code> must be bool. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualNameMustBeString QualNameMustBeString @endlink</code></td>
<td> Attribute \'name\' on <code>&lt;qualitativeSpeciesgt;</code> must be string. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualInitialLevelMustBeInt QualInitialLevelMustBeInt @endlink</code></td>
<td> Attribute \'initialLevel\' on <code>&lt;qualitativeSpeciesgt;</code> must be integer. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualMaxLevelMustBeInt QualMaxLevelMustBeInt @endlink</code></td>
<td> Attribute \'maxLevel\' on <code>&lt;qualitativeSpeciesgt;</code> must be integer. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualCompartmentMustReferExisting QualCompartmentMustReferExisting @endlink</code></td>
<td> Attribute \'compartment\' on <code>&lt;qualitativeSpeciesgt;</code> must reference compartment. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualInitialLevelCannotExceedMax QualInitialLevelCannotExceedMax @endlink</code></td>
<td> Attribute \'initialLevel\' on <code>&lt;qualitativeSpeciesgt;</code> cannot exceed maxLevel. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualConstantQSCannotBeOutput QualConstantQSCannotBeOutput @endlink</code></td>
<td> Constant <code>&lt;qualitativeSpeciesgt;</code> cannot be an Output. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualQSAssignedOnlyOnce QualQSAssignedOnlyOnce @endlink</code></td>
<td> A <code>&lt;qualitativeSpeciesgt;</code> can only be assigned once. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualInitalLevelNotNegative QualInitalLevelNotNegative @endlink</code></td>
<td> Attribute \'initialLevel\' on <code>&lt;qualitativeSpeciesgt;</code> cannot be negative. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualMaxLevelNotNegative QualMaxLevelNotNegative @endlink</code></td>
<td> Attribute \'maxLevel\' on <code>&lt;qualitativeSpeciesgt;</code> cannot be negative. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualTransitionAllowedCoreAttributes QualTransitionAllowedCoreAttributes @endlink</code></td>
<td> Core attributes allowed on <code>&lt;transition&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualTransitionAllowedElements QualTransitionAllowedElements @endlink</code></td>
<td> Elements allowed on <code>&lt;transition&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualTransitionAllowedAttributes QualTransitionAllowedAttributes @endlink</code></td>
<td> Attributes allowed on <code>&lt;transition&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualTransitionNameMustBeString QualTransitionNameMustBeString @endlink</code></td>
<td> Attribute \'name\' on <code>&lt;transition&gt;</code> must be string. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualTransitionLOElements QualTransitionLOElements @endlink</code></td>
<td> ListOf elements on <code>&lt;transition&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualTransitionEmptyLOElements QualTransitionEmptyLOElements @endlink</code></td>
<td> ListOf elements on <code>&lt;transition&gt;</code> not empty. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualTransitionLOInputElements QualTransitionLOInputElements @endlink</code></td>
<td> Elements on <code>&lt;listOfInputs&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualTransitionLOOutputElements QualTransitionLOOutputElements @endlink</code></td>
<td> Elements on <code>&lt;listOfOutputs&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualTransitionLOFuncTermElements QualTransitionLOFuncTermElements @endlink</code></td>
<td> Elements on <code>&lt;listOfFunctionTerms&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualTransitionLOInputAttributes QualTransitionLOInputAttributes @endlink</code></td>
<td> Attributes allowed on <code>&lt;listOfInputs&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualTransitionLOOutputAttributes QualTransitionLOOutputAttributes @endlink</code></td>
<td> Attributes allowed on <code>&lt;listOfOutputs&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualTransitionLOFuncTermAttributes QualTransitionLOFuncTermAttributes @endlink</code></td>
<td> Attributes allowed on <code>&lt;listOfFunctionTerms&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualTransitionLOFuncTermExceedMax QualTransitionLOFuncTermExceedMax @endlink</code></td>
<td> <code>&lt;listOfFunctionTerms&gt;</code> cannot make qualitativeSpecies exceed maxLevel. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualTransitionLOFuncTermNegative QualTransitionLOFuncTermNegative @endlink</code></td>
<td> <code>&lt;listOfFunctionTerms&gt;</code> cannot make qualitativeSpecies negative. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualInputAllowedCoreAttributes QualInputAllowedCoreAttributes @endlink</code></td>
<td> Core attributes allowed on <code>&lt;input&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualInputAllowedElements QualInputAllowedElements @endlink</code></td>
<td> Elements allowed on <code>&lt;input&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualInputAllowedAttributes QualInputAllowedAttributes @endlink</code></td>
<td> Attributes allowed on <code>&lt;input&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualInputNameMustBeString QualInputNameMustBeString @endlink</code></td>
<td> Attribute \'name\' on <code>&lt;input&gt;</code> must be string. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualInputSignMustBeSignEnum QualInputSignMustBeSignEnum @endlink</code></td>
<td> Attribute \'sign\' on <code>&lt;input&gt;</code> must be enum. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualInputTransEffectMustBeInputEffect QualInputTransEffectMustBeInputEffect @endlink</code></td>
<td> Attribute \'transitionEffect\' on <code>&lt;input&gt;</code> must be enum. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualInputThreshMustBeInteger QualInputThreshMustBeInteger @endlink</code></td>
<td> Attribute \'thresholdLevel\' on <code>&lt;input&gt;</code> must be non negative integer. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualInputQSMustBeExistingQS QualInputQSMustBeExistingQS @endlink</code></td>
<td> Attribute \'qualitativeSpecies\' on <code>&lt;input&gt;</code> must refer to existing. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualInputConstantCannotBeConsumed QualInputConstantCannotBeConsumed @endlink</code></td>
<td> Constant <code>&lt;input&gt;</code> cannot be consumed. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualInputThreshMustBeNonNegative QualInputThreshMustBeNonNegative @endlink</code></td>
<td> Attribute \'thresholdLevel\' on <code>&lt;input&gt;</code> must be non negative integer. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualOutputAllowedCoreAttributes QualOutputAllowedCoreAttributes @endlink</code></td>
<td> Core attributes allowed on <code>&lt;output&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualOutputAllowedElements QualOutputAllowedElements @endlink</code></td>
<td> Elements allowed on <code>&lt;output&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualOutputAllowedAttributes QualOutputAllowedAttributes @endlink</code></td>
<td> Attributes allowed on <code>&lt;output&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualOutputNameMustBeString QualOutputNameMustBeString @endlink</code></td>
<td> Attribute \'name\' on <code>&lt;output&gt;</code> must be string. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualOutputTransEffectMustBeOutput QualOutputTransEffectMustBeOutput @endlink</code></td>
<td> Attribute \'transitionEffect\' on <code>&lt;output&gt;</code> must be enum. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualOutputLevelMustBeInteger QualOutputLevelMustBeInteger @endlink</code></td>
<td> Attribute \'outputLevel\' on <code>&lt;output&gt;</code> must be non negative integer. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualOutputQSMustBeExistingQS QualOutputQSMustBeExistingQS @endlink</code></td>
<td> Attribute \'qualitativeSpecies\' on <code>&lt;output&gt;</code> must refer to existing. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualOutputConstantMustBeFalse QualOutputConstantMustBeFalse @endlink</code></td>
<td> Constant \'qualitativeSpecies\' cannot be <code>&lt;output&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualOutputProductionMustHaveLevel QualOutputProductionMustHaveLevel @endlink</code></td>
<td> <code>&lt;output&gt;</code> being produced must have level. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualOutputLevelMustBeNonNegative QualOutputLevelMustBeNonNegative @endlink</code></td>
<td> Attribute \'outputLevel\' on <code>&lt;output&gt;</code> must be non negative integer. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualDefaultTermAllowedCoreAttributes QualDefaultTermAllowedCoreAttributes @endlink</code></td>
<td> Core attributes allowed on <code>&lt;defaultTerm&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualDefaultTermAllowedElements QualDefaultTermAllowedElements @endlink</code></td>
<td> Elements allowed on <code>&lt;defaultTerm&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualDefaultTermAllowedAttributes QualDefaultTermAllowedAttributes @endlink</code></td>
<td> Attributes allowed on <code>&lt;defaultTerm&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualDefaultTermResultMustBeInteger QualDefaultTermResultMustBeInteger @endlink</code></td>
<td> Attribute \'resultLevel\' on <code>&lt;defaultTerm&gt;</code> must be non negative integer. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualDefaultTermResultMustBeNonNeg QualDefaultTermResultMustBeNonNeg @endlink</code></td>
<td> Attribute \'resultLevel\' on <code>&lt;defaultTerm&gt;</code> must be non negative integer. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualFuncTermAllowedCoreAttributes QualFuncTermAllowedCoreAttributes @endlink</code></td>
<td> Core attributes allowed on <code>&lt;functionTerm&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualFuncTermAllowedElements QualFuncTermAllowedElements @endlink</code></td>
<td> Elements allowed on <code>&lt;functionTerm&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualFuncTermAllowedAttributes QualFuncTermAllowedAttributes @endlink</code></td>
<td> Attributes allowed on <code>&lt;functionTerm&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualFuncTermOnlyOneMath QualFuncTermOnlyOneMath @endlink</code></td>
<td> Only one <code>&lt;math&gt;</code> on <code>&lt;functionTerm&gt;</code>. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualFuncTermResultMustBeInteger QualFuncTermResultMustBeInteger @endlink</code></td>
<td> Attribute \'resultLevel\' on <code>&lt;functionTerm&gt;</code> must be non negative integer. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
<tr><td><code>@link libsbmlcs.libsbml.QualFuncTermResultMustBeNonNeg QualFuncTermResultMustBeNonNeg @endlink</code></td>
<td> Attribute \'resultLevel\' on <code>&lt;functionTerm&gt;</code> must be non negative integer.. </td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-na\'>N</td>
<td class=\'s-error\'>E</td></tr>
</table>
 * 
 * @if clike <h3><a class=\'anchor\' name=\'SBMLErrorCategory_t\'>SBMLErrorCategory_t</a></h3>
 *
 * SBMLErrorCategory_t is an enumeration of category codes for SBMLError
 * diagnostics.  The category can be retrieved from an SBMLError object
 * using the method SBMLError::getCategory().  These enumeration values are
 * distinct from (and in addition to) the @link
 * XMLError::XMLErrorCategory_t XMLErrorCategory_t @endlink codes used by
 * the parent XMLError object.  User programs receiving an SBMLError object
 * can use this distinction to check whether the error represents a
 * low-level XML problem or an SBML problem.
 *
 * The following table lists each possible value and a brief description of
 * its meaning.
 * 
 * @endif@if python <h3><a class=\'anchor\' name=\'SBMLErrorCategory_t\'>Category codes associated with SBMLError objects</a></h3>
 *
 * As discussed above, each SBMLError object contains a value for a
 * category identifier, describing the type of issue that the SBMLError
 * object represents.  The category can be retrieved from an SBMLError
 * object using the method SBMLError::getCategory().  The following table
 * lists each possible value and a brief description of its meaning.
 *
 * As is the case with the error codes, in the libSBML Python language
 * interface, the category identifiers are currently implemented as static
 * integer constants defined in the interface class
 * @link libsbml libsbml@endlink. 
 *
 * The following table lists each possible value and a brief description of
 * its meaning.
 * 
 * @endif@if java <h3><a class=\'anchor\'
 * name=\'SBMLErrorCategory_t\'>Category codes associated with SBMLError objects</a></h3>
 * 
 * As discussed above, each SBMLError object contains a value for a
 * category identifier, describing the type of issue that the SBMLError
 * object represents.  The category can be retrieved from an SBMLError
 * object using the method SBMLError::getCategory().  The following table
 * lists each possible value and a brief description of its meaning.
 * 
 * As is the case with the error codes, in the libSBML Java language
 * interface, the category identifiers are currently implemented as static
 * integer constants defined in the interface class
 * {@link libsbmlConstants}.
 *
 * The following table lists each possible value and a brief description of
 * its meaning.
 * 
 * @endif@if csharp <h3><a class=\'anchor\'
 * name=\'SBMLErrorCategory_t\'>Category codes associated with SBMLError objects</a></h3>
 * 
 * As discussed above, each SBMLError object contains a value for a
 * category identifier, describing the type of issue that the SBMLError
 * object represents.  The category can be retrieved from an SBMLError
 * object using the method SBMLError::getCategory().  The following table
 * lists each possible value and a brief description of its meaning.
 * 
 * As is the case with the error codes, in the libSBML C# language
 * interface, the category identifiers are currently implemented as static
 * integer constants defined in the interface class
 * {@link libsbmlcs.libsbml}.
 *
 * The following table lists each possible value and a brief description of
 * its meaning.
 * 
 * @endif
 * 
 * <center>
 * <table width=\'90%\' cellspacing=\'1\' cellpadding=\'4\' border=\'0\'  class=\'text-table normal-font alt-row-colors\'>
 *  <tr style=\'background: lightgray\' class=\'normal-font\'>
 *      <th>Enumerator</td>
 *      <th>Meaning</td>
 *  </tr>
 * <tr><td>@link libsbmlcs.libsbml.LIBSBML_CAT_SBML LIBSBML_CAT_SBML@endlink</td><td>General error not falling into
 * another category below.</td></tr> 
 * <tr><td>@link libsbmlcs.libsbml.LIBSBML_CAT_SBML_L1_COMPAT LIBSBML_CAT_SBML_L1_COMPAT@endlink</td><td>Category of errors
 * that can only occur during attempted translation from one Level/Version
 * of SBML to another.  This particular category applies to errors
 * encountered while trying to convert a model from SBML Level&nbsp;2 to SBML
 * Level&nbsp;1.</td></tr> 
 * <tr><td>@link libsbmlcs.libsbml.LIBSBML_CAT_SBML_L2V1_COMPAT LIBSBML_CAT_SBML_L2V1_COMPAT@endlink</td><td>Category of errors
 * that can only occur during attempted translation from one Level/Version
 * of SBML to another.  This particular category applies to errors
 * encountered while trying to convert a model to SBML Level&nbsp;2
 * Version&nbsp;1.</td></tr> 
 * <tr><td>@link libsbmlcs.libsbml.LIBSBML_CAT_SBML_L2V2_COMPAT LIBSBML_CAT_SBML_L2V2_COMPAT@endlink</td><td>Category of errors
 * that can only occur during attempted translation from one Level/Version
 * of SBML to another.  This particular category applies to errors
 * encountered while trying to convert a model to SBML Level&nbsp;2
 * Version&nbsp;2.</td></tr> 
 * <tr><td>@link libsbmlcs.libsbml.LIBSBML_CAT_GENERAL_CONSISTENCY LIBSBML_CAT_GENERAL_CONSISTENCY@endlink</td><td>Category of
 * errors that can occur while validating general SBML constructs.  With
 * respect to the SBML specification, these concern failures in applying
 * the validation rules numbered 2xxxx in the Level&nbsp;2 Versions&nbsp;2&ndash;4
 * and Level&nbsp;3 Version&nbsp;1 specifications.</td></tr>
 * <tr><td>@link libsbmlcs.libsbml.LIBSBML_CAT_IDENTIFIER_CONSISTENCY LIBSBML_CAT_IDENTIFIER_CONSISTENCY@endlink</td><td>Category of
 * errors that can occur while validating symbol identifiers in a model.
 * With respect to the SBML specification, these concern failures in
 * applying the validation rules numbered 103xx in the Level&nbsp;2 Versions&nbsp;2&ndash;4
 * and Level&nbsp;3 Version&nbsp;1 specifications.</td></tr>  
 * <tr><td>@link libsbmlcs.libsbml.LIBSBML_CAT_UNITS_CONSISTENCY LIBSBML_CAT_UNITS_CONSISTENCY@endlink</td><td>Category of
 * errors that can occur while validating the units of measurement on
 * quantities in a model.  With respect to the SBML specification, these
 * concern failures in applying the validation rules numbered 105xx in the
 * Level&nbsp;2 Versions&nbsp;2&ndash;4
 * and Level&nbsp;3 Version&nbsp;1 specifications.</td></tr> 
 * <tr><td>@link libsbmlcs.libsbml.LIBSBML_CAT_MATHML_CONSISTENCY LIBSBML_CAT_MATHML_CONSISTENCY@endlink</td><td>Category of
 * errors that can occur while validating MathML formulas in a model.  With
 * respect to the SBML specification, these concern failures in applying
 * the validation rules numbered 102xx in the Level&nbsp;2 Versions&nbsp;2&ndash;4
 * and Level&nbsp;3 Version&nbsp;1 specifications.</td></tr> 
 * <tr><td>@link libsbmlcs.libsbml.LIBSBML_CAT_SBO_CONSISTENCY LIBSBML_CAT_SBO_CONSISTENCY@endlink</td><td>Category of errors
 * that can occur while validating SBO identifiers in a model.  With
 * respect to the SBML specification, these concern failures in applying
 * the validation rules numbered 107xx in the Level&nbsp;2 Versions&nbsp;2&ndash;4
 * and Level&nbsp;3 Version&nbsp;1 specifications.</td></tr> 
 * <tr><td>@link libsbmlcs.libsbml.LIBSBML_CAT_OVERDETERMINED_MODEL LIBSBML_CAT_OVERDETERMINED_MODEL@endlink</td><td>Error in the
 * system of equations in the model: the system is overdetermined,
 * therefore violating a tenet of proper SBML.  With respect to the SBML
 * specification, this is validation rule #10601 in the SBML Level&nbsp;2 Versions&nbsp;2&ndash;4
 * and Level&nbsp;3 Version&nbsp;1 specifications.</td></tr> 
 * <tr><td>@link libsbmlcs.libsbml.LIBSBML_CAT_SBML_L2V3_COMPAT LIBSBML_CAT_SBML_L2V3_COMPAT@endlink</td><td>Category of errors
 * that can only occur during attempted translation from one Level/Version
 * of SBML to another.  This particular category applies to errors
 * encountered while trying to convert a model to SBML Level&nbsp;2
 * Version&nbsp;3.</td></tr> 
 * <tr><td>@link libsbmlcs.libsbml.LIBSBML_CAT_MODELING_PRACTICE LIBSBML_CAT_MODELING_PRACTICE@endlink</td><td>Category of
 * warnings about recommended good practices involving SBML and
 * computational modeling.  (These are tests performed by libSBML and do
 * not have equivalent SBML validation rules.)</td></tr> 
 * <tr><td>@link libsbmlcs.libsbml.LIBSBML_CAT_INTERNAL_CONSISTENCY LIBSBML_CAT_INTERNAL_CONSISTENCY@endlink</td><td>Category of
 * errors that can occur while validating libSBML\'s internal representation
 * of SBML constructs. (These are tests performed by libSBML and do
 * not have equivalent SBML validation rules.)</td></tr> 
 * <tr><td>@link libsbmlcs.libsbml.LIBSBML_CAT_SBML_L2V4_COMPAT LIBSBML_CAT_SBML_L2V4_COMPAT@endlink</td><td>Category of errors
 * that can only occur during attempted translation from one Level/Version
 * of SBML to another.  This particular category applies to errors
 * encountered while trying to convert a model to SBML Level&nbsp;2
 * Version&nbsp;4.</td></tr> 
 * <tr><td>@link libsbmlcs.libsbml.LIBSBML_CAT_SBML_L3V1_COMPAT LIBSBML_CAT_SBML_L3V1_COMPAT@endlink</td><td>Category of errors
 * that can only occur during attempted translation from one Level/Version
 * of SBML to another.  This particular category applies to errors
 * encountered while trying to convert a model to SBML Level&nbsp;3
 * Version&nbsp;1.</td></tr> 
 *
 * </table>
 * </center>
 * 
 * @if clike
 * <h3><a class=\'anchor\' name=\'SBMLErrorSeverity_t\'>SBMLErrorSeverity_t</a></h3>
 *
 * This is an enumeration of severity codes for SBMLError diagnostics.
 * User programs receiving an SBMLError object can use this distinction to
 * check whether the error represents a low-level XML problem or an SBML
 * problem.
 * 
 * In libSBML version @htmlinclude libsbml-version.html
 * there are no additional severity codes in SBMLErrorSeverity_t beyond
 * those defined in @link XMLError::XMLErrorSeverity_t XMLErrorSeverity_t@endlink.
 * 
 * <hr>
 * @endif@if java <h3><a class=\'anchor\'
 * name=\'SBMLErrorSeverity_t\'>Severity codes associated with SBMLError
 * objects</h3>
 *
 * In libSBML version @htmlinclude libsbml-version.html
 * there are no additional severity codes beyond those defined by XMLError.  
 * They are implemented as static integer constants defined in the interface 
 * class <code><a href=\'libsbmlcs.libsbml.html\'>libsbmlConstants</a></code>, 
 * and have names beginning with <code>LIBSBML_SEV_</code>.
 * @endif@if python <h3><a class=\'anchor\'
 * name=\'SBMLErrorSeverity_t\'>Severity codes associated with SBMLError
 * objects</h3>
 *
 * In libSBML version @htmlinclude libsbml-version.html
 * there are no additional severity codes beyond those defined by XMLError.
 * They are implemented as static integer constants defined in the
 * interface class @link libsbml libsbml@endlink, and have names beginning
 * with <code>LIBSBML_SEV_</code>.
 * @endif
 */
"


%csmethodmodifiers SBMLError::SBMLError( const unsigned int errorId  = 0 , const unsigned int level    = SBML_DEFAULT_LEVEL , const unsigned int version  = SBML_DEFAULT_VERSION , const std::string& details  = "" , const unsigned int line     = 0 , const unsigned int column   = 0 , const unsigned int severity = LIBSBML_SEV_ERROR , const unsigned int category = LIBSBML_CAT_SBML , const std::string& package  = "core" , const unsigned int pkgVersion = 1 ) "
/**
   * Creates a new SBMLError to report that something occurred during SBML
   * processing.
   *
   * When a libSBML operation on SBML content results in a warning, error
   * or other diagnostic, the issue is reported as an SBMLError object.
   * SBMLError objects have identification numbers to indicate the nature
   * of the exception.  @if clike These numbers are drawn from
   * the enumeration <a class=\'el\'
   * href=\'#SBMLErrorCode_t\'>
   * SBMLErrorCode_t</a>.  @endif@if java These numbers are
   * defined as longeger constants in the file
   * \'libsbmlcs.libsbml.html\'.  See the <a class=\'el\'
   * href=\'#SBMLErrorCode_t\'>top of this documentation page</a> for a table
   * listing the possible values and their meanings. @endif@if python These
   * numbers are defined as longeger constants in the interface
   * class @link libsbml libsbml@endlink.  See the <a class=\'el\'
   * href=\'#SBMLErrorCode_t\'>top of this documentation page</a> for a table
   * listing the possible values and their meanings. @endif The argument 
   * @p errorId to this constructor @em can be (but does not have to be) a
   * value from this @if clike enumeration. If it @em is a value
   * from <a class=\'el\' href=\'#SBMLErrorCode_t\'>SBMLErrorCode_t</a>, the
   * SBMLError class assumes the error is a low-level system or SBML layer
   * error and <em>prepends</em> a built-in, predefined error message to
   * any string passed in the argument @p details to this constructor.  In
   * addition, all <a class=\'el\'
   * href=\'#SBMLErrorCode_t\'>SBMLErrorCode_t</a> errors have associated
   * values for the @p severity and @p category codes, and these fields are
   * filled-in as well from the enumerations <a class=\'el\'
   * href=\'#SBMLErrorSeverity_t\'>SBMLErrorSeverity_t</a> and <a class=\'el\'
   * href=\'#SBMLErrorCategory_t\'>SBMLErrorCategory_t</a>,
   * respectively. @else set of constants.  If it @em
   * is one of the predefined error identifiers, the SBMLError class
   * assumes the error is a low-level system or SBML layer error and
   * <em>prepends</em> a built-in, predefined error message to any string
   * passed in the argument @p details to this constructor.  In addition,
   * all the predefined error identifiers have associated values for the 
   * @p severity and @p category codes, and these fields are filled-in using
   * the libSBML defaults for each different error identifier. @endif
   *
   * If the error identifier @p errorId is a number greater than 99999, the
   * SBMLError class assumes the error was generated from another part of
   * the software and does not do additional filling in of values beyond
   * the default in the constructor itself.  This allows SBMLError to serve
   * as a base class for other errors, such as for user-defined validation
   * rules (see Validator).  Callers should fill in all the parameters with
   * suitable values if generating errors with codes greater than 99999 to
   * make maximum use of the SBMLError facilities.
   *
   * @if clike As mentioned above, there are two other
   * enumerations, <a class=\'el\'
   * href=\'#SBMLErrorSeverity_t\'>SBMLErrorSeverity_t</a> and <a class=\'el\'
   * href=\'#SBMLErrorCategory_t\'>SBMLErrorCategory_t</a>, used for indicating
   * the severity and category of error for the predefined SBMLError codes.
   * The values passed in @p severity and @p category override the defaults
   * assigned based on the error code.  If the value of @p errorId is a
   * value from <a class=\'el\' href=\'#SBMLErrorCode_t\'>SBMLErrorCode_t</a>,
   * callers do not need to fill in @p severity and @p category.
   * Conversely, if @p errorId is not a value from <a class=\'el\'
   * href=\'#SBMLErrorCode_t\'>SBMLErrorCode_t</a>, callers can use other
   * values (not just those from <a class=\'el\'
   * href=\'#SBMLErrorSeverity_t\'>SBMLErrorSeverity_t</a> and <a class=\'el\'
   * href=\'#SBMLErrorCategory_t\'>SBMLErrorCategory_t</a>, but their own
   * special values) for @p severity and 
   * @p category. @else As mentioned above, 
   * there are additional constants defined for <a class=\'el\'
   * href=\'#SBMLErrorSeverity_t\'>standard severity</a> and <a class=\'el\'
   * href=\'#SBMLErrorCategory_t\'>standard category</a> codes, and every predefined 
   * error in libSBML has an associated value for severity and category taken
   * from these predefined sets.  These constants have symbol names
   * prefixed with <code>LIBSBML_SEV_</code> and <code>LIBSBML_CAT_</code>,
   * respectively.  If the value of @p errorId is one of the standard error
   * codes, callers do not need to fill in @p severity and @p category in a
   * call to this constructor.  Conversely, if @p errorId is not an existing
   * SBML-level error code, callers can use other values for @p severity and
   * @p category. @endif
   *
   * Please see the top of the documentation for SBMLError for a longer
   * discussion of the possible error codes, their meanings, and their
   * applicability to different combinations of Level+Version of SBML.
   *
   * @param errorId a long integer, the identification number of the error.
   *
   * @param level the SBML Level of the SBML model
   *
   * @param version the SBML Version within the Level of the SBML model
   * 
   * @param details a string containing additional details about the error.
   * If the error code in @p errorId is one that is recognized by SBMLError,
   * the given message is @em appended to a predefined message associated
   * with the given code.  If the error code is not recognized, the message
   * is stored as-is as the text of the error.
   * 
   * @param line a long integer, the line number at which the error occured.
   * 
   * @param column a long integer, the column number at which the error occured.
   * 
   * @param severity an integer indicating severity of the error.
   * 
   * @param category an integer indicating the category to which the error
   * belongs.
   *
   * @param package the SBML Level package involved.
   *
   * @param pkgVersion the version of the @p package.
   *
   * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
   */ public
";


%csmethodmodifiers SBMLError::SBMLError(const SBMLError& orig) "
/**
   * Copy constructor; creates a copy of this SBMLError.
   */ public
";


%typemap(csimports) CVTerm "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Representation of MIRIAM-compliant controlled vocabulary
 * annotation.
 *
 * @htmlinclude not-sbml-warning.html
 *
 * The SBML Level&nbsp;2 and Level&nbsp;3 specifications define a simple
 * format for annotating models when (a) referring to controlled vocabulary
 * terms and database identifiers that define and describe biological and
 * biochemical entities, and (b) describing the creator of a model and the
 * model\'s modification history.  This SBML format is a concrete syntax that
 * conforms to the guidelines of MIRIAM (<a target=\'_blank\'
 * href=\'http://www.nature.com/nbt/journal/v23/n12/abs/nbt1156.html\'>\'Minimum Information Requested in the Annotation of
 * biochemical Models\'</a>, <i>Nature Biotechnology</i>, vol. 23, no. 12,
 * Dec. 2005).  The format uses a subset of W3C RDF (<a target=\'_blank\'
 * href=\'http://www.w3.org/RDF/\'>Resource Description Format</a>).  In order
 * to help application developers work with annotations in this format,
 * libSBML provides several helper classes that provide higher-level
 * interfaces to the data elements; these classes include CVTerm,
 * ModelCreator, ModelHistory, RDFAnnotationParser, and Date.
 *
 * @section annotation-parts Components of an SBML annotation
 *
 * The SBML annotation format consists of RDF-based content placed inside
 * an <code>&lt;annotation&gt;</code> element attached to an SBML component
 * such as Species, Compartment, etc.  The following template illustrates
 * the different parts of SBML annotations in XML form:
 * 
 <pre class=\'fragment\'>
 &lt;<span style=\'background-color: #bbb\'>SBML_ELEMENT</span> <span style=\'background-color: #d0eed0\'>+++</span> metaid=&quot;<span style=\'border-bottom: 1px solid black\'>meta id</span>&quot; <span style=\'background-color: #d0eed0\'>+++</span>&gt;
   <span style=\'background-color: #d0eed0\'>+++</span>
   &lt;annotation&gt;
     <span style=\'background-color: #d0eed0\'>+++</span>
     &lt;rdf:RDF xmlns:rdf=\'http://www.w3.org/1999/02/22-rdf-syntax-ns#\'
              xmlns:dc=\'http://purl.org/dc/elements/1.1/\'
              xmlns:dcterm=\'http://purl.org/dc/terms/\'
              xmlns:vcard=\'http://www.w3.org/2001/vcard-rdf/3.0#\'
              xmlns:bqbiol=\'http://biomodels.net/biology-qualifiers/\'
              xmlns:bqmodel=\'http://biomodels.net/model-qualifiers/\' &gt;
       &lt;rdf:Description rdf:about=&quot;#<span style=\'border-bottom: 1px solid black\'>meta id</span>&quot;&gt;
         <span style=\'background-color: #e0e0e0; border-bottom: 2px dotted #888\'>HISTORY</span>
         &lt;<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;
           &lt;rdf:Bag&gt;
             &lt;rdf:li rdf:resource=&quot;<span style=\'background-color: #d0d0ee\'>URI</span>&quot; /&gt;
             <span style=\'background-color: #edd\'>...</span>
           &lt;/rdf:Bag&gt;
         &lt;/<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;
         <span style=\'background-color: #edd\'>...</span>
       &lt;/rdf:Description&gt;
       <span style=\'background-color: #d0eed0\'>+++</span>
     &lt;/rdf:RDF&gt;
     <span style=\'background-color: #d0eed0\'>+++</span>
   &lt;/annotation&gt;
   <span style=\'background-color: #d0eed0\'>+++</span>
 &lt;/<span style=\'background-color: #bbb\'>SBML_ELEMENT</span>&gt;
 </pre>
 * 
 * In the template above, the placeholder
 * <span class=\'code\' style=\'background-color: #bbb\'>SBML_ELEMENT</span> stands for
 * the XML tag name of an SBML model component (e.g., <code>model</code>,
 * <code>reaction</code>, etc.) and the placeholder 
 * <span class=\'code\' style=\'border-bottom: 1px solid black\'>meta id</span>
 * stands for the element\'s meta identifier, which is a field available
 * on all SBML components derived from the SBase base object class.
 * The <span style=\'border-bottom: 2px dotted #888\'>dotted</span>
 * portions are optional, the symbol
 * <span class=\'code\' style=\'background-color: #d0eed0\'>+++</span> is a placeholder
 * for either no content or valid XML content that is not defined by
 * this annotation scheme, and the ellipses
 * <span class=\'code\' style=\'background-color: #edd\'>...</span>
 * are placeholders for zero or more elements of the same form as the
 * immediately preceding element.  The optional content
 * <span class=\'code\' style=\'background-color: #e0e0e0; border-bottom: 2px dotted #888\'>HISTORY</span>
 * is a creation and modification history; in libSBML, this is stored
 * using ModelHistory objects.
 *
 * The placeholder <span class=\'code\' style=\'background-color:
 * #bbb\'>RELATION_ELEMENT</span> refers to a BioModels.net qualifier element
 * name.  This is an element in either the XML namespace
 * <code>\'http://biomodels.net/model-qualifiers\'</code> (for model
 * qualifiers) or <code>\'http://biomodels.net/biology-qualifiers\'</code> (for
 * biological qualifier).  Note that these namespace URIs are only labels,
 * and not actual Web locations, which means you cannot visit an address such
 * as <code>\'http://biomodels.net/model-qualifiers\'</code> in your browser or
 * try to have your application access it.  @if Refer instead to the enumerations
 * #ModelQualifierType_t and #BiolQualifierType_t for a list of the available
 * relationship elements that can be used for <span class=\'code\'
 * style=\'background-color: #bbb\'>RELATION_ELEMENT</span>.@endif
 *
 * The <span class=\'code\' style=\'background-color: #d0d0ee\'>URI</span> is a
 * required data value that uniquely identifies a resource and data within
 * that resource to which the annotation refers.  Again, being URIs, these do
 * not refer to physical Web locations; nevertheless, applications will often
 * want a means of finding the resource to which a given <span class=\'code\'
 * style=\'background-color: #d0d0ee\'>URI</span> refers.  Providing the
 * facilities for this task is the purpose of MIRIAM Resources, described in
 * detail online at <a target=\'_blank\'
 * href=\'http://biomodels.net/miriam\'>http://biomodels.net/miriam</a>) and
 * also in the paper <a target=\'_blank\'
 * href=\'http://www.biomedcentral.com/1752-0509/1/58\'>\'MIRIAM Resources: tools to generate and
 * resolve robust cross-references in Systems Biology\'</a>, <i>BMC Systems
 * Biology</i>, 58(1), 2007.
 *
 * The relation-resource pairs above are the \'controlled vocabulary\' terms
 * that which CVTerm is designed to store and manipulate.  The next section
 * describes these parts in more detail.  For more information about
 * SBML annotations in general, please refer to Section&nbsp;6 in the
 * SBML Level&nbsp;2 (Versions 2&ndash;4) or Level&nbsp;3 specification
 * documents.
 * 
 *
 * @section cvterm-parts The parts of a CVTerm
 * 
 * Annotations that refer to controlled vocabularies are managed in libSBML
 * using CVTerm objects.  A set of RDF-based annotations attached to a
 * given SBML <code>&lt;annotation&gt;</code> element are read by
 * RDFAnnotationParser and converted into a list of these CVTerm objects.
 * Each CVTerm object instance stores the following components of an
 * annotation:
 * 
 * <ul>
 *
 * <li>The @em qualifier, which can be a BioModels.net \'biological
 * qualifier\', a BioModels.net \'model qualifier\', or an unknown qualifier
 * (as far as the CVTerm class is concerned).  Qualifiers are used in
 * MIRIAM to indicate the nature of the relationship between the object
 * being annotated and the resource.  In CVTerm, the qualifiers can be
 * manipulated using the methods CVTerm::getQualifierType(),
 * CVTerm::setQualifierType(@if java int type@endif), and related methods.
 * 
 * <li>The @em resource, represented by a URI (which, we must remind
 * developers, is not the same as a URL).  In the CVTerm class, the
 * resource component can be manipulated using the methods
 * CVTerm::addResource(@if java String resource@endif) and
 * CVTerm::removeResource(@if java String resource@endif).
 *
 * </ul>
 *
 * Note that a CVTerm contains a single qualifier, but possibly more than
 * one resource.  This corresponds to the possibility of an annotation that
 * points to multiple resources, all of which are qualified by the same
 * BioModels.net qualifier.  The CVTerm object class supports this by
 * supporting a list of resources.
 *
 * Detailed explanations of the qualifiers defined by BioModels.net can be
 * found at <a target=\'_blank\'
 * href=\'http://biomodels.net/qualifiers\'>http://biomodels.net/qualifiers</a>.
 */
"


%csmethodmodifiers CVTerm::CVTerm(QualifierType_t type = UNKNOWN_QUALIFIER) "
/**
   * Creates an empty CVTerm, optionally with the given
   * @if clike #QualifierType_t value@else qualifier@endif @p type.
   *
   * *
 * 
 * The SBML Level&nbsp;2 and Level&nbsp;3 specifications define a simple
 * format for annotating models when (a) referring to controlled
 * vocabulary terms and database identifiers that define and describe
 * biological and other entities, and (b) describing the creator of a
 * model and the model\'s modification history.  The annotation content is
 * stored in <code>&lt;annotation&gt;</code> elements attached to
 * individual SBML elements.  The format for storing the content inside
 * SBML <code>&lt;annotation&gt;</code> elements is a subset of W3C RDF
 * (<a target=\'_blank\' href=\'http://www.w3.org/RDF/\'>Resource Description
 * Format</a>) expressed in XML.  The CVTerm class provides a programming
 * interface for working directly with controlled vocabulary term (\'CV
 * term\') objects without having to deal directly with the XML form.
 * When libSBML reads in an SBML model containing RDF annotations, it
 * parses those annotations into a list of CVTerm objects, and when
 * writing a model, it parses the CVTerm objects back into the
 * appropriate SBML <code>&lt;annotation&gt;</code> structure.
 *
 * 
   *
   * This method creates an empty CVTerm object.  The possible qualifier
   * types usable as values of @p type are @link
   * libsbmlcs.libsbml.MODEL_QUALIFIER MODEL_QUALIFIER@endlink and @link
   * libsbmlcs.libsbml.BIOLOGICAL_QUALIFIER BIOLOGICAL_QUALIFIER@endlink.  If
   * an explicit value for @p type is not given, this method defaults to
   * using @link libsbmlcs.libsbml.UNKNOWN_QUALIFIER
   * UNKNOWN_QUALIFIER@endlink.  The @if clike #QualifierType_t value@else qualifier type@endif 
   * can be set later using the
   * CVTerm::setQualifierType(@if java int type@endif) method.
   *
   * Different BioModels.net qualifier elements encode different types of
   * relationships.  Please refer to the SBML specification or the <a
   * target=\'_blank\' href=\'http://biomodels.net/qualifiers/\'>BioModels.net
   * qualifiers web page</a> for an explanation of the meaning of these
   * different qualifiers.
   *
   * @param type a @if clike #QualifierType_t value@else qualifier type@endif
   *
   * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
   */ public
";


%csmethodmodifiers CVTerm::CVTerm(const XMLNode node) "
/**
   * Creates a new CVTerm from the given XMLNode.
   *
   * *
 * 
 * The SBML Level&nbsp;2 and Level&nbsp;3 specifications define a simple
 * format for annotating models when (a) referring to controlled
 * vocabulary terms and database identifiers that define and describe
 * biological and other entities, and (b) describing the creator of a
 * model and the model\'s modification history.  The annotation content is
 * stored in <code>&lt;annotation&gt;</code> elements attached to
 * individual SBML elements.  The format for storing the content inside
 * SBML <code>&lt;annotation&gt;</code> elements is a subset of W3C RDF
 * (<a target=\'_blank\' href=\'http://www.w3.org/RDF/\'>Resource Description
 * Format</a>) expressed in XML.  The CVTerm class provides a programming
 * interface for working directly with controlled vocabulary term (\'CV
 * term\') objects without having to deal directly with the XML form.
 * When libSBML reads in an SBML model containing RDF annotations, it
 * parses those annotations into a list of CVTerm objects, and when
 * writing a model, it parses the CVTerm objects back into the
 * appropriate SBML <code>&lt;annotation&gt;</code> structure.
 *
 * 
   * 
   * This method creates a CVTerm object from the given XMLNode object @p
   * node.  XMLNode is libSBML\'s representation of a node in an XML tree of
   * elements, and each such element can be placed in a namespace.  This
   * constructor looks for the element to be in the XML namespaces
   * <code>\'http://biomodels.net/model-qualifiers\'</code> (for
   * model qualifiers) and
   * <code>\'http://biomodels.net/biology-qualifiers\'</code> (for
   * biological qualifier), and if they are, creates CVTerm objects for
   * the result.
   *
   * @param node an %XMLNode representing a CVTerm.
   *
   * @note This method assumes that the given XMLNode object @p node is of
   * the correct structural form.
   */ public
";


%csmethodmodifiers CVTerm::CVTerm(const CVTerm& orig) "
/**
   * Copy constructor; creates a copy of a CVTerm object.
   * 
   * @param orig the CVTerm instance to copy.
   * 
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the argument @p orig is @c null.
   */ public
";


%csmethodmodifiers CVTerm::clone() const "
/**
   * Creates and returns a deep copy of this CVTerm object.
   * 
   * @return a (deep) copy of this CVTerm.
   */ public
";


%csmethodmodifiers CVTerm::getQualifierType "
/**
   * Returns the qualifier type of this CVTerm object.
   *
   * *
 * 
 * The RDF element used in the SBML format for referring to external entities
 * is <code>&lt;rdf:Description&gt;</code>, with a
 * <code>&lt;rdf:Bag&gt;</code> element inside of it containing one or more
 * <code>&lt;rdf:li&gt;</code> elements.  The following template illustrates
 * the structure:
 * <pre class=\'fragment\'>
 * &lt;rdf:Description rdf:about=&quot;#<span style=\'border-bottom: 1px solid black\'>meta id</span>&quot;&gt;
 * &nbsp;&nbsp;<span style=\'background-color: #ddd; border-bottom: 2px dotted #888\'>HISTORY</span>
 * &nbsp;&nbsp;&lt;<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;
 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;rdf:Bag&gt;
 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;rdf:li rdf:resource=&quot;<span style=\'background-color: #d0d0ee\'>resource URI</span>&quot; /&gt;
 * &nbsp;&nbsp;&nbsp;&nbsp;<span style=\'background-color: #edd\'>...</span>
 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;/rdf:Bag&gt;
 * &nbsp;&nbsp;&lt;/<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;
 * &nbsp;&nbsp;<span style=\'background-color: #edd\'>...</span>
 * &lt;/rdf:Description&gt;
 * </pre>
 * In the template above, the placeholder <span class=\'code\'
 * style=\'border-bottom: 1px solid black\'>meta id</span> stands for the
 * element\'s meta identifier, which is a field available on all SBML
 * components derived from the SBase base object class.  The <span
 * style=\'border-bottom: 2px dotted #888\'>dotted</span> portions are
 * optional, and the ellipses <span class=\'code\' style=\'background-color:
 * #edd\'>...</span> are placeholders for zero or more elements of the same
 * form as the immediately preceding element.
 *
   *
   * The placeholder <span class=\'code\' style=\'background-color: #bbb\'>
   * RELATION_ELEMENT</span> refers to a BioModels.net qualifier
   * element name.  This is an element in either the XML namespace
   * <code>\'http://biomodels.net/model-qualifiers\'</code> (for model
   * qualifiers) or <code>\'http://biomodels.net/biology-qualifiers\'</code>
   * (for biological qualifier).  The present method returns a code
   * identifying which one of these two relationship namespaces is being
   * used; any other qualifier in libSBML is considered unknown (as far as
   * the CVTerm class is concerned).  Consequently, this method will return
   * one of the following values:
   * 
   * @li @link libsbmlcs.libsbml.MODEL_QUALIFIER MODEL_QUALIFIER@endlink
   * @li @link libsbmlcs.libsbml.BIOLOGICAL_QUALIFIER BIOLOGICAL_QUALIFIER@endlink
   * @li @link libsbmlcs.libsbml.UNKNOWN_QUALIFIER UNKNOWN_QUALIFIER@endlink
   *
   * The specific relationship of this CVTerm to the enclosing SBML object
   * can be determined using the CVTerm methods such as
   * getModelQualifierType() and getBiologicalQualifierType().  Callers
   * will typically want to use the present method to find out which one of
   * the @em other two methods to call to find out the specific
   * relationship.
   *
   * @return the @if clike #QualifierType_t value@else qualifier type@endif
   * of this object or @link libsbmlcs.libsbml.UNKNOWN_QUALIFIER UNKNOWN_QUALIFIER@endlink
   * (the default).
   *
   * @see getResources()
   * @see getModelQualifierType()
   * @see getBiologicalQualifierType()
   */ public
";


%csmethodmodifiers CVTerm::getModelQualifierType "
/**
   * Returns the model qualifier type of this CVTerm object.
   * 
   * *
 * 
 * The RDF element used in the SBML format for referring to external entities
 * is <code>&lt;rdf:Description&gt;</code>, with a
 * <code>&lt;rdf:Bag&gt;</code> element inside of it containing one or more
 * <code>&lt;rdf:li&gt;</code> elements.  The following template illustrates
 * the structure:
 * <pre class=\'fragment\'>
 * &lt;rdf:Description rdf:about=&quot;#<span style=\'border-bottom: 1px solid black\'>meta id</span>&quot;&gt;
 * &nbsp;&nbsp;<span style=\'background-color: #ddd; border-bottom: 2px dotted #888\'>HISTORY</span>
 * &nbsp;&nbsp;&lt;<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;
 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;rdf:Bag&gt;
 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;rdf:li rdf:resource=&quot;<span style=\'background-color: #d0d0ee\'>resource URI</span>&quot; /&gt;
 * &nbsp;&nbsp;&nbsp;&nbsp;<span style=\'background-color: #edd\'>...</span>
 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;/rdf:Bag&gt;
 * &nbsp;&nbsp;&lt;/<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;
 * &nbsp;&nbsp;<span style=\'background-color: #edd\'>...</span>
 * &lt;/rdf:Description&gt;
 * </pre>
 * In the template above, the placeholder <span class=\'code\'
 * style=\'border-bottom: 1px solid black\'>meta id</span> stands for the
 * element\'s meta identifier, which is a field available on all SBML
 * components derived from the SBase base object class.  The <span
 * style=\'border-bottom: 2px dotted #888\'>dotted</span> portions are
 * optional, and the ellipses <span class=\'code\' style=\'background-color:
 * #edd\'>...</span> are placeholders for zero or more elements of the same
 * form as the immediately preceding element.
 *
   *
   * The placeholder <span class=\'code\' style=\'background-color: #bbb\'>
   * RELATION_ELEMENT</span> refers to a BioModels.net qualifier
   * element name.  This is an element in either the XML namespace
   * <code>\'http://biomodels.net/model-qualifiers\'</code> (for model
   * qualifiers) or <code>\'http://biomodels.net/biology-qualifiers\'</code>
   * (for biological qualifier).  Callers will typically use
   * getQualifierType() to find out the type of qualifier relevant to this
   * particular CVTerm object, then if it is a @em model qualifier, use the
   * present method to determine the specific qualifier.
   *
   * Annotations with model qualifiers express a relationship between an
   * annotation resource and the <em>modeling concept</em> represented by a
   * given object in the model.  The diagram below illustrates the
   * relationship in this case:
   *
   * @image html model-qualifiers.png \'Relationship expressed by model qualifiers\'
   * @image latex model-qualifiers.png \'Relationship expressed by model qualifiers\'
   *
   * <br> The set of known model qualifiers is, at the time of this libSBML
   * release, the following:
   *
   * @li @link libsbmlcs.libsbml.BQM_IS BQM_IS@endlink
   * @li @link libsbmlcs.libsbml.BQM_IS_DESCRIBED_BY BQM_IS_DESCRIBED_BY@endlink
   * @li @link libsbmlcs.libsbml.BQM_IS_DERIVED_FROM BQM_IS_DERIVED_FROM@endlink
   *
   * Any other BioModels.net qualifier found in the model is considered
   * unknown by libSBML and reported as
   * @link libsbmlcs.libsbml.BQM_UNKNOWN BQM_UNKNOWN@endlink.
   *
   * @return the @if clike #ModelQualifierType_t value@else model qualifier type@endif
   * of this object or @link libsbmlcs.libsbml.BQM_UNKNOWN BQM_UNKNOWN@endlink
   * (the default).
   */ public
";


%csmethodmodifiers CVTerm::getBiologicalQualifierType "
/**
   * Returns the biological qualifier type of this CVTerm object.
   * 
   * *
 * 
 * The RDF element used in the SBML format for referring to external entities
 * is <code>&lt;rdf:Description&gt;</code>, with a
 * <code>&lt;rdf:Bag&gt;</code> element inside of it containing one or more
 * <code>&lt;rdf:li&gt;</code> elements.  The following template illustrates
 * the structure:
 * <pre class=\'fragment\'>
 * &lt;rdf:Description rdf:about=&quot;#<span style=\'border-bottom: 1px solid black\'>meta id</span>&quot;&gt;
 * &nbsp;&nbsp;<span style=\'background-color: #ddd; border-bottom: 2px dotted #888\'>HISTORY</span>
 * &nbsp;&nbsp;&lt;<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;
 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;rdf:Bag&gt;
 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;rdf:li rdf:resource=&quot;<span style=\'background-color: #d0d0ee\'>resource URI</span>&quot; /&gt;
 * &nbsp;&nbsp;&nbsp;&nbsp;<span style=\'background-color: #edd\'>...</span>
 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;/rdf:Bag&gt;
 * &nbsp;&nbsp;&lt;/<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;
 * &nbsp;&nbsp;<span style=\'background-color: #edd\'>...</span>
 * &lt;/rdf:Description&gt;
 * </pre>
 * In the template above, the placeholder <span class=\'code\'
 * style=\'border-bottom: 1px solid black\'>meta id</span> stands for the
 * element\'s meta identifier, which is a field available on all SBML
 * components derived from the SBase base object class.  The <span
 * style=\'border-bottom: 2px dotted #888\'>dotted</span> portions are
 * optional, and the ellipses <span class=\'code\' style=\'background-color:
 * #edd\'>...</span> are placeholders for zero or more elements of the same
 * form as the immediately preceding element.
 *
   *
   * The placeholder <span class=\'code\' style=\'background-color: #bbb\'>
   * RELATION_ELEMENT</span> refers to a BioModels.net qualifier
   * element name.  This is an element in either the XML namespace
   * <code>\'http://biomodels.net/model-qualifiers\'</code> (for model
   * qualifiers) or <code>\'http://biomodels.net/biology-qualifiers\'</code>
   * (for biological qualifier).  Callers will typically use
   * getQualifierType() to find out the type of qualifier relevant to this
   * particular CVTerm object, then if it is a @em biological qualifier,
   * use the present method to determine the specific qualifier.
   *
   * Annotations with biological qualifiers express a relationship between an
   * annotation resource and the <em>biological concept</em> represented by a
   * given object in the model.    The diagram
   * below illustrates the relationship in this case:
   *
   * @image html biology-qualifiers.png \'Relationship expressed by biological qualifiers\'
   * @image latex biology-qualifiers.png \'Relationship expressed by biological qualifiers\'
   *
   * <br> The set of known biological qualifiers is, at the time of this
   * libSBML release, the following:
   *
   * @li @link libsbmlcs.libsbml.BQB_IS BQB_IS@endlink
   * @li @link libsbmlcs.libsbml.BQB_HAS_PART BQB_HAS_PART@endlink
   * @li @link libsbmlcs.libsbml.BQB_IS_PART_OF BQB_IS_PART_OF@endlink
   * @li @link libsbmlcs.libsbml.BQB_IS_VERSION_OF BQB_IS_VERSION_OF@endlink
   * @li @link libsbmlcs.libsbml.BQB_HAS_VERSION BQB_HAS_VERSION@endlink
   * @li @link libsbmlcs.libsbml.BQB_IS_HOMOLOG_TO BQB_IS_HOMOLOG_TO@endlink
   * @li @link libsbmlcs.libsbml.BQB_IS_DESCRIBED_BY BQB_IS_DESCRIBED_BY@endlink
   * @li @link libsbmlcs.libsbml.BQB_IS_ENCODED_BY BQB_IS_ENCODED_BY@endlink
   * @li @link libsbmlcs.libsbml.BQB_ENCODES BQB_ENCODES@endlink
   * @li @link libsbmlcs.libsbml.BQB_OCCURS_IN BQB_OCCURS_IN@endlink
   * @li @link libsbmlcs.libsbml.BQB_HAS_PROPERTY BQB_HAS_PROPERTY@endlink
   * @li @link libsbmlcs.libsbml.BQB_IS_PROPERTY_OF BQB_IS_PROPERTY_OF@endlink
   *
   * Any other BioModels.net qualifier found in the model is considered
   * unknown by libSBML and reported as
   * @link libsbmlcs.libsbml.BQB_UNKNOWN BQB_UNKNOWN@endlink.
   *
   * @return the @if clike #BiolQualifierType_t value@else biology qualifier type@endif
   * of this object or @link libsbmlcs.libsbml.BQB_UNKNOWN BQB_UNKNOWN@endlink
   * (the default).
   */ public
";


%csmethodmodifiers CVTerm::getResources "
/**
   * Returns the resource references for this CVTerm object.
   *
   * *
 * 
 * The RDF element used in the SBML format for referring to external entities
 * is <code>&lt;rdf:Description&gt;</code>, with a
 * <code>&lt;rdf:Bag&gt;</code> element inside of it containing one or more
 * <code>&lt;rdf:li&gt;</code> elements.  The following template illustrates
 * the structure:
 * <pre class=\'fragment\'>
 * &lt;rdf:Description rdf:about=&quot;#<span style=\'border-bottom: 1px solid black\'>meta id</span>&quot;&gt;
 * &nbsp;&nbsp;<span style=\'background-color: #ddd; border-bottom: 2px dotted #888\'>HISTORY</span>
 * &nbsp;&nbsp;&lt;<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;
 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;rdf:Bag&gt;
 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;rdf:li rdf:resource=&quot;<span style=\'background-color: #d0d0ee\'>resource URI</span>&quot; /&gt;
 * &nbsp;&nbsp;&nbsp;&nbsp;<span style=\'background-color: #edd\'>...</span>
 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;/rdf:Bag&gt;
 * &nbsp;&nbsp;&lt;/<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;
 * &nbsp;&nbsp;<span style=\'background-color: #edd\'>...</span>
 * &lt;/rdf:Description&gt;
 * </pre>
 * In the template above, the placeholder <span class=\'code\'
 * style=\'border-bottom: 1px solid black\'>meta id</span> stands for the
 * element\'s meta identifier, which is a field available on all SBML
 * components derived from the SBase base object class.  The <span
 * style=\'border-bottom: 2px dotted #888\'>dotted</span> portions are
 * optional, and the ellipses <span class=\'code\' style=\'background-color:
 * #edd\'>...</span> are placeholders for zero or more elements of the same
 * form as the immediately preceding element.
 *
   *
   * The <span class=\'code\' style=\'background-color: #d0d0ee\'>resource
   * URI</span> values shown in the template above are stored internally in
   * CVTerm objects using an XMLAttributes object.  Each attribute stored
   * inside the XMLAttributes will have the same name (specifically,
   * &quot;<code>rdf:resource</code>&quot;) but a different value, and the
   * value will be a <span class=\'code\' style=\'background-color: #d0d0ee\'>
   * resource URI</span> shown in the XML template above.
   *
   * A valid CVTerm entity must always have at least one resource and
   * a value for the relationship qualifier.
   * 
   * @return the XMLAttributes that store the resources of this CVTerm.
   *
   * @see getQualifierType()
   * @see addResource(string resource)
   * @see getResourceURI(long n)
   */ public
";


%csmethodmodifiers CVTerm::getResources() const "
/**
   * Returns the resources for this CVTerm object.
   * 
   * *
 * 
 * The RDF element used in the SBML format for referring to external entities
 * is <code>&lt;rdf:Description&gt;</code>, with a
 * <code>&lt;rdf:Bag&gt;</code> element inside of it containing one or more
 * <code>&lt;rdf:li&gt;</code> elements.  The following template illustrates
 * the structure:
 * <pre class=\'fragment\'>
 * &lt;rdf:Description rdf:about=&quot;#<span style=\'border-bottom: 1px solid black\'>meta id</span>&quot;&gt;
 * &nbsp;&nbsp;<span style=\'background-color: #ddd; border-bottom: 2px dotted #888\'>HISTORY</span>
 * &nbsp;&nbsp;&lt;<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;
 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;rdf:Bag&gt;
 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;rdf:li rdf:resource=&quot;<span style=\'background-color: #d0d0ee\'>resource URI</span>&quot; /&gt;
 * &nbsp;&nbsp;&nbsp;&nbsp;<span style=\'background-color: #edd\'>...</span>
 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;/rdf:Bag&gt;
 * &nbsp;&nbsp;&lt;/<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;
 * &nbsp;&nbsp;<span style=\'background-color: #edd\'>...</span>
 * &lt;/rdf:Description&gt;
 * </pre>
 * In the template above, the placeholder <span class=\'code\'
 * style=\'border-bottom: 1px solid black\'>meta id</span> stands for the
 * element\'s meta identifier, which is a field available on all SBML
 * components derived from the SBase base object class.  The <span
 * style=\'border-bottom: 2px dotted #888\'>dotted</span> portions are
 * optional, and the ellipses <span class=\'code\' style=\'background-color:
 * #edd\'>...</span> are placeholders for zero or more elements of the same
 * form as the immediately preceding element.
 *
   *
   * The <span class=\'code\' style=\'background-color: #d0d0ee\'>resource
   * URI</span> values shown in the template above are stored internally in
   * CVTerm objects using an XMLAttributes object.  Each attribute stored
   * inside the XMLAttributes will have the same name (specifically,
   * &quot;<code>rdf:resource</code>&quot;) but a different value, and the
   * value will be a <span class=\'code\' style=\'background-color: #d0d0ee\'>
   * resource URI</span> shown in the XML template above.
   *
   * A valid CVTerm entity must always have at least one resource and
   * a value for the relationship qualifier.
   * 
   * @return the XMLAttributes that store the resources of this CVTerm.
   *
   * @see getQualifierType()
   * @see addResource(string resource)
   * @see getResourceURI(long n)
   */ public
";


%csmethodmodifiers CVTerm::getNumResources "
/**
   * Returns the number of resources for this CVTerm object.
   * 
   * *
 * 
 * The RDF element used in the SBML format for referring to external entities
 * is <code>&lt;rdf:Description&gt;</code>, with a
 * <code>&lt;rdf:Bag&gt;</code> element inside of it containing one or more
 * <code>&lt;rdf:li&gt;</code> elements.  The following template illustrates
 * the structure:
 * <pre class=\'fragment\'>
 * &lt;rdf:Description rdf:about=&quot;#<span style=\'border-bottom: 1px solid black\'>meta id</span>&quot;&gt;
 * &nbsp;&nbsp;<span style=\'background-color: #ddd; border-bottom: 2px dotted #888\'>HISTORY</span>
 * &nbsp;&nbsp;&lt;<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;
 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;rdf:Bag&gt;
 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;rdf:li rdf:resource=&quot;<span style=\'background-color: #d0d0ee\'>resource URI</span>&quot; /&gt;
 * &nbsp;&nbsp;&nbsp;&nbsp;<span style=\'background-color: #edd\'>...</span>
 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;/rdf:Bag&gt;
 * &nbsp;&nbsp;&lt;/<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;
 * &nbsp;&nbsp;<span style=\'background-color: #edd\'>...</span>
 * &lt;/rdf:Description&gt;
 * </pre>
 * In the template above, the placeholder <span class=\'code\'
 * style=\'border-bottom: 1px solid black\'>meta id</span> stands for the
 * element\'s meta identifier, which is a field available on all SBML
 * components derived from the SBase base object class.  The <span
 * style=\'border-bottom: 2px dotted #888\'>dotted</span> portions are
 * optional, and the ellipses <span class=\'code\' style=\'background-color:
 * #edd\'>...</span> are placeholders for zero or more elements of the same
 * form as the immediately preceding element.
 *
   *
   * The fragment above illustrates that there can be more than one
   * resource referenced by a given relationship annotation (i.e., the
   * <span class=\'code\' style=\'background-color: #d0d0ee\'>resource
   * URI</span> values associated with a particular <span class=\'code\'
   * style=\'background-color: #bbb\'>RELATION_ELEMENT</span>).  The present
   * method returns a count of the resources stored in this CVTerm object.
   *
   * @return the number of resources in the set of XMLAttributes
   * of this CVTerm.
   *
   * @see getResources()
   * @see getResourceURI(long n)
   */ public
";


%csmethodmodifiers CVTerm::getResourceURI(unsigned int n) "
/**
   * Returns the value of the <em>n</em>th resource for this CVTerm object.
   *
   * *
 * 
 * The RDF element used in the SBML format for referring to external entities
 * is <code>&lt;rdf:Description&gt;</code>, with a
 * <code>&lt;rdf:Bag&gt;</code> element inside of it containing one or more
 * <code>&lt;rdf:li&gt;</code> elements.  The following template illustrates
 * the structure:
 * <pre class=\'fragment\'>
 * &lt;rdf:Description rdf:about=&quot;#<span style=\'border-bottom: 1px solid black\'>meta id</span>&quot;&gt;
 * &nbsp;&nbsp;<span style=\'background-color: #ddd; border-bottom: 2px dotted #888\'>HISTORY</span>
 * &nbsp;&nbsp;&lt;<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;
 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;rdf:Bag&gt;
 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;rdf:li rdf:resource=&quot;<span style=\'background-color: #d0d0ee\'>resource URI</span>&quot; /&gt;
 * &nbsp;&nbsp;&nbsp;&nbsp;<span style=\'background-color: #edd\'>...</span>
 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;/rdf:Bag&gt;
 * &nbsp;&nbsp;&lt;/<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;
 * &nbsp;&nbsp;<span style=\'background-color: #edd\'>...</span>
 * &lt;/rdf:Description&gt;
 * </pre>
 * In the template above, the placeholder <span class=\'code\'
 * style=\'border-bottom: 1px solid black\'>meta id</span> stands for the
 * element\'s meta identifier, which is a field available on all SBML
 * components derived from the SBase base object class.  The <span
 * style=\'border-bottom: 2px dotted #888\'>dotted</span> portions are
 * optional, and the ellipses <span class=\'code\' style=\'background-color:
 * #edd\'>...</span> are placeholders for zero or more elements of the same
 * form as the immediately preceding element.
 *
   *
   * The fragment above illustrates that there can be more than one
   * resource referenced by a given relationship annotation (i.e., the
   * <span class=\'code\' style=\'background-color: #d0d0ee\'>resource
   * URI</span> values associated with a particular <span class=\'code\'
   * style=\'background-color: #bbb\'>RELATION_ELEMENT</span>).  LibSBML
   * stores all resource URIs in a single CVTerm object for a given
   * relationship.  Callers can use getNumResources() to find out how many
   * resources are stored in this CVTerm object, then call this method to
   * retrieve the <em>n</em>th resource URI.
   * 
   * @param n the index of the resource to query
   *
   * @return string representing the value of the nth resource
   * in the set of XMLAttributes of this CVTerm.
   *
   * @see getNumResources()
   * @see getQualifierType()
   */ public
";


%csmethodmodifiers CVTerm::setQualifierType(QualifierType_t type) "
/**
   * Sets the @if clike #QualifierType_t@else qualifier code@endif of this
   * CVTerm object.
   *
   * @param type the @if clike #QualifierType_t value@else qualifier type@endif.
   * The possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS@endlink
   *
   * @see getQualifierType()
   */ public
";


%csmethodmodifiers CVTerm::setModelQualifierType(ModelQualifierType_t type) "
/**
   * Sets the @if clike #ModelQualifierType_t value@else model qualifier type@endif
   * of this CVTerm object.
   *
   * @param type the @if clike #ModelQualifierType_t value@else model qualifier type@endif
   *
   * @return integer value indicating success/failure of the
   * function. The possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS@endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE@endlink
   *
   * @note If the Qualifier Type of this object is not
   * @link libsbmlcs.libsbml.MODEL_QUALIFIER MODEL_QUALIFIER@endlink, 
   * then the ModelQualifierType_t value will default to
   * @link libsbmlcs.libsbml.BQM_UNKNOWN BQM_UNKNOWN@endlink.
   *
   * @see getQualifierType()
   * @see setQualifierType(@if java int type@endif)
   */ public
";


%csmethodmodifiers CVTerm::setBiologicalQualifierType(BiolQualifierType_t type) "
/**
   * Sets the @if clike #BiolQualifierType_t value@else biology qualifier type@endif
   * of this CVTerm object.
   *
   * @param type the @if clike #BiolQualifierType_t value@else biology qualifier type@endif.
   *
   * @return integer value indicating success/failure of the
   * function. The possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS@endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE@endlink
   *
   * @note If the Qualifier Type of this object is not
   * @link libsbmlcs.libsbml.BIOLOGICAL_QUALIFIER BIOLOGICAL_QUALIFIER@endlink,
   * then the @if clike #BiolQualifierType_t value@else biology qualifier type@endif will default
   * to @link libsbmlcs.libsbml.BQB_UNKNOWN BQB_UNKNOWN@endlink.
   *
   * @see getQualifierType()
   * @see setQualifierType(@if java int type@endif)
   */ public
";


%csmethodmodifiers CVTerm::setModelQualifierType(const std::string& qualifier) "
/**
   * Sets the @if clike #ModelQualifierType_t@endif@if java model qualifier type code@endif value of this CVTerm object.
   *
   * @param qualifier the string representing a model qualifier
   *
   * @return integer value indicating success/failure of the
   * function. The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS@endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE@endlink
   *
   * @note If the Qualifier Type of this object is not
   * @link libsbmlcs.libsbml.MODEL_QUALIFIER MODEL_QUALIFIER@endlink, 
   * then the ModelQualifierType_t value will default to
   * @link libsbmlcs.libsbml.BQM_UNKNOWN BQM_UNKNOWN@endlink.
   *
   * @see getQualifierType()
   * @see setQualifierType(@if java int type@endif)
   */ public
";


%csmethodmodifiers CVTerm::setBiologicalQualifierType(const std::string& qualifier) "
/**
   * Sets the @if clike #BiolQualifierType_t@endif@if java biology qualifier
   * type code@endif of this CVTerm object.
   *
   * @param qualifier the string representing a biology qualifier
   *
   * @return integer value indicating success/failure of the
   * function. The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS@endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE@endlink
   *
   * @note If the Qualifier Type of this object is not
   * @link libsbmlcs.libsbml.BIOLOGICAL_QUALIFIER BIOLOGICAL_QUALIFIER@endlink,
   * then the @if clike #BiolQualifierType_t@endif@if java biology qualifier type code@endif value will default
   * to @link libsbmlcs.libsbml.BQB_UNKNOWN BQB_UNKNOWN@endlink.
   *
   * @see getQualifierType()
   * @see setQualifierType(@if java int type@endif)
   */ public
";


%csmethodmodifiers CVTerm::addResource(const std::string& resource) "
/**
   * Adds a resource reference to this CVTerm object.
   *
   * *
 * 
 * The SBML Level&nbsp;2 and Level&nbsp;3 specifications define a simple
 * format for annotating models when (a) referring to controlled
 * vocabulary terms and database identifiers that define and describe
 * biological and other entities, and (b) describing the creator of a
 * model and the model\'s modification history.  The annotation content is
 * stored in <code>&lt;annotation&gt;</code> elements attached to
 * individual SBML elements.  The format for storing the content inside
 * SBML <code>&lt;annotation&gt;</code> elements is a subset of W3C RDF
 * (<a target=\'_blank\' href=\'http://www.w3.org/RDF/\'>Resource Description
 * Format</a>) expressed in XML.  The CVTerm class provides a programming
 * interface for working directly with controlled vocabulary term (\'CV
 * term\') objects without having to deal directly with the XML form.
 * When libSBML reads in an SBML model containing RDF annotations, it
 * parses those annotations into a list of CVTerm objects, and when
 * writing a model, it parses the CVTerm objects back into the
 * appropriate SBML <code>&lt;annotation&gt;</code> structure.
 *
 * 
   *
   * The specific RDF element used in this SBML format for referring to
   * external entities is <code>&lt;rdf:Description&gt;</code>, with a
   * <code>&lt;rdf:Bag&gt;</code> element containing one or more
   * <code>&lt;rdf:li&gt;</code> elements.  Each such element refers to a
   * data item in an external resource; the resource and data item are
   * together identified uniquely using a URI.  The following template
   * illustrates the structure:
   *
   <pre class=\'fragment\'>
   &lt;rdf:Description rdf:about=&quot;#<span style=\'border-bottom: 1px solid black\'>meta id</span>&quot;&gt;
     <span style=\'background-color: #e0e0e0; border-bottom: 2px dotted #888\'>HISTORY</span>
     &lt;<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;
       &lt;rdf:Bag&gt;
         &lt;rdf:li rdf:resource=&quot;<span style=\'background-color: #d0d0ee\'>resource URI</span>&quot; /&gt;
         <span style=\'background-color: #edd\'>...</span>
       &lt;/rdf:Bag&gt;
     &lt;/<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;
     <span style=\'background-color: #edd\'>...</span>
   &lt;/rdf:Description&gt;
   </pre>
   *
   * In the template above, the placeholder <span class=\'code\'
   * style=\'border-bottom: 1px solid black\'>meta id</span> stands for the
   * element\'s meta identifier, which is a field available on all SBML
   * components derived from the SBase base object class.  The <span
   * style=\'border-bottom: 2px dotted #888\'>dotted</span> portions are
   * optional, and the ellipses <span class=\'code\'
   * style=\'background-color: #edd\'>...</span> are placeholders for zero or
   * more elements of the same form as the immediately preceding element.
   * The placeholder <span class=\'code\' style=\'background-color: #bbb\'>
   * RELATION_ELEMENT</span> refers to a BioModels.net qualifier element
   * name.  This is an element in either the XML namespace
   * <code>\'http://biomodels.net/model-qualifiers\'</code> (for model
   * qualifiers) or <code>\'http://biomodels.net/biology-qualifiers\'</code>
   * (for biological qualifier).
   *
   * The <span class=\'code\' style=\'background-color: #d0d0ee\'>resource
   * URI</span> is a required data value that uniquely identifies a
   * resource and data within that resource to which the annotation refers.
   * The present method allows callers to add a reference to a resource URI
   * with the same relationship to the enclosing SBML object.  (In other
   * words, the argument to this method is a <span class=\'code\'
   * style=\'background-color: #d0d0ee\'>resource URI</span> as shown in the
   * XML fragment above.)  Resources are stored in this CVTerm object
   * within an XMLAttributes object.
   * 
   * The relationship of this CVTerm to the enclosing SBML object can be
   * determined using the CVTerm methods such as getModelQualifierType()
   * and getBiologicalQualifierType().
   *
   * @param resource a string representing the URI of the resource and data
   * item being referenced; e.g.,
   * <code>\'http://www.geneontology.org/#GO:0005892\'</code>.
   *
   * @return integer value indicating success/failure of the call. The
   * possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS@endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED@endlink
   *
   * @see getResources()
   * @see removeResource(string resource)
   * @see getQualifierType()
   * @see getModelQualifierType()
   * @see getBiologicalQualifierType()
   */ public
";


%csmethodmodifiers CVTerm::removeResource(std::string resource) "
/**
   * Removes a resource URI from the set of resources stored in this CVTerm
   * object.
   *
   * @param resource a string representing the resource URI to remove;
   * e.g., <code>\'http://www.geneontology.org/#GO:0005892\'</code>.
   *
   * @return integer value indicating success/failure of the
   * function. The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS@endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE@endlink
   *
   * @see addResource(string resource)
   */ public
";


%csmethodmodifiers CVTerm::hasRequiredAttributes "
/**
   * Predicate returning @c true if all the required elements for this
   * CVTerm object have been set.
   *
   * @note The required attributes for a CVTerm are:
   * @li a <em>qualifier type</em>, which can be either a model qualifier or a biological qualifier
   * @li at least one resource
   */ public
";


%csmethodmodifiers CVTerm::hasBeenModified "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers CVTerm::resetModifiedFlags "
/** */ /* libsbml-internal */ public
";


%typemap(csimports) Date "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Representation of MIRIAM-compliant dates used in
 * ModelHistory.
 *
 * @htmlinclude not-sbml-warning.html
 *
 * A Date object stores a reasonably complete representation of date and
 * time.  Its purpose is to serve as a way to store dates to be read and
 * written in the <a target=\'_blank\'
 * href=\'http://www.w3.org/TR/NOTE-datetime\'>W3C date format</a> used in
 * RDF Dublin Core annotations within SBML.  The W3C date format is a
 * restricted form of <a target=\'_blank\'
 * href=\'http://en.wikipedia.org/wiki/ISO_8601\'>ISO 8601</a>, the
 * international standard for the representation of dates and times.  A
 * time and date value in this W3C format takes the form
 * YYYY-MM-DDThh:mm:ssXHH:ZZ (e.g., <code>1997-07-16T19:20:30+01:00</code>)
 * where XHH:ZZ is the time zone offset.  The libSBML Date object contains
 * the following fields to represent these values:
 * 
 * @li @em year: a long integer representing the year.  This should be a
 * four-digit number such as @c 2011.
 * 
 * @li @em month: a long integer representing the month, with a range of
 * values of 1&ndash;12.  The value @c 1 represents January, and so on.
 *
 * @li @em day: a long integer representing the day of the month, with a
 * range of values of 1&ndash;31.
 * 
 * @li @em hour: a long integer representing the hour on a 24-hour clock,
 * with a range of values of 0&ndash;23.
 * 
 * @li @em minute: a long integer representing the minute, with a range
 * of 0&ndash;59.
 * 
 * @li @em second: a long integer representing the second, with a range
 * of 0&ndash;59.
 * 
 * @li @em sign: a long integer representing the sign of the offset (@c 0
 * signifying @c + and @c 1 signifying @c -).  See the paragraph below for
 * further explanations.
 * 
 * @li @em hours offset: a long integer representing the time zone\'s hour
 * offset from GMT.
 * 
 * @li @em minute offset: a long integer representing the time zone\'s
 * minute offset from GMT.
 *
 * To illustrate the time zone offset, a value of <code>-05:00</code> would
 * correspond to USA Eastern Standard Time.  In the Date object, this would
 * require a value of @c 1 for the sign field, @c 5 for the hour offset and
 * @c 0 for the minutes offset.
 *
 * In the restricted RDF annotations used in SBML, described in
 * Section&nbsp;6 of the SBML Level&nbsp;2 and Level&nbsp;3 specification
 * documents, date/time stamps can be used to indicate the time of
 * creation and modification of a model.  The following SBML model fragment
 * illustrates this:
@verbatim
<model metaid=\'_180340\' id=\'GMO\' name=\'Goldbeter1991_MinMitOscil\'>
    <annotation>
        <rdf:RDF xmlns:rdf=\'http://www.w3.org/1999/02/22-rdf-syntax-ns#\'
                 xmlns:dc=\'http://purl.org/dc/elements/1.1/\'
                 xmlns:dcterms=\'http://purl.org/dc/terms/\'
                 xmlns:vCard=\'http://www.w3.org/2001/vcard-rdf/3.0#\' >
            <rdf:Description rdf:about=\'#_180340\'>
                <dc:creator>
                    <rdf:Bag>
                        <rdf:li rdf:parseType=\'Resource\'>
                            <vCard:N rdf:parseType=\'Resource\'>
                                <vCard:Family>Shapiro</vCard:Family>
                                <vCard:Given>Bruce</vCard:Given>
                            </vCard:N>
                            <vCard:EMAIL>bshapiro@jpl.nasa.gov</vCard:EMAIL>
                            <vCard:ORG rdf:parseType=\'Resource\'>
                                <vCard:Orgname>NASA Jet Propulsion Laboratory</vCard:Orgname>
                            </vCard:ORG>
                        </rdf:li>
                    </rdf:Bag>
                </dc:creator>
                <dcterms:created rdf:parseType=\'Resource\'>
                    <dcterms:W3CDTF>2005-02-06T23:39:40+00:00</dcterms:W3CDTF>
                </dcterms:created>
                <dcterms:modified rdf:parseType=\'Resource\'>
                    <dcterms:W3CDTF>2005-09-13T13:24:56+00:00</dcterms:W3CDTF>
                </dcterms:modified>
            </rdf:Description>
        </rdf:RDF>
    </annotation>
</model>
@endverbatim
 */
"


%csmethodmodifiers Date::Date(unsigned int year = 2000, unsigned int month = 1, unsigned int day = 1, unsigned int hour = 0, unsigned int minute = 0, unsigned int second = 0, unsigned int sign = 0, unsigned int hoursOffset = 0, unsigned int minutesOffset = 0) "
/**
   * Creates a time and date representation for use in model annotations
   * and elsewhere.
   *
   * The following is the complete set of possible arguments to this
   * constructor, with default values as indicated:
   *
   * @param year a long integereger representing the year.  This should be
   * a four-digit number such as @c 2011.  (Default value used if this
   * argument is not given: @c 2000.)
   * 
   * @param month a long integereger representing the month, with a range
   * of values of 1&ndash;12.  The value @c 1 represents January, and so
   * on.  (Default value used if this argument is not given: @c 1.)
   *
   * @param day a long integereger representing the day of the month, with
   * a range of values of 1&ndash;31.  (Default value used if this argument
   * is not given: @c 1.)
   * 
   * @param hour a long integereger representing the hour on a 24-hour
   * clock, with a range of values of 0&ndash;23.  (Default value used if
   * this argument is not given: @c 0.)
   * 
   * @param minute a long integereger representing the minute, with a
   * range of 0&ndash;59.  (Default value used if this argument is not
   * given: @c 0.)
   * 
   * @param second a long integereger representing the second, with a
   * range of 0&ndash;59.  (Default value used if this argument is not
   * given: @c 0.)
   * 
   * @param sign a long integereger representing the sign of the offset
   * (@c 0 signifying @c + and @c 1 signifying @c -).  See the paragraph
   * below for further explanations.  (Default value used if this argument
   * is not given: @c 0.)
   * 
   * @param hoursOffset a long integereger representing the time zone\'s
   * hour offset from GMT.  (Default value used if this argument is not
   * given: @c 0.)
   * 
   * @param minutesOffset a long integereger representing the time zone\'s
   * minute offset from GMT.  (Default value used if this argument is not
   * given: @c 0.)
   *
   * To illustrate the time zone offset, a value of <code>-05:00</code>
   * would correspond to USA Eastern Standard Time.  In the Date object,
   * this would require a value of @c 1 for the sign field, @c 5 for the
   * hour offset and @c 0 for the minutes offset.
   * 
   * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
   */ public
";


%csmethodmodifiers Date::Date(const std::string& date) "
/**
   * Creates a Date object from a string expressing a date and time value.
   *
   * This constructor expects its argument to be in the <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/NOTE-datetime\'>W3C date format with time
   * zone offset</a>, used in RDF Dublin Core annotations within SBML.
   * 
   * *
 * 
 * The date format expresses a date and time value as a string of the form
 * YYYY-MM-DDThh:mm:ssXHH:ZZ, where
 * 
 * @li @em YYYY is a four-digit integer representing the year.  This
 * should be a four-digit number such as @c 2011.
 * 
 * @li @em MM is a two-digit integer representing the month, with a range
 * of values of 01&ndash;12.  The value @c 1 represents January, and so
 * on.
 *
 * @li @em DD is a two-digit integer representing the day of the month,
 * with a range of values of 01&ndash;31.
 * 
 * @li @em hh is a two-digit integer representing the hour on a 24-hour
 * clock, with a range of values of 00&ndash;23.
 * 
 * @li @em mm is a two-digit integer representing the minute, with a
 * range of 00&ndash;59.
 * 
 * @li @em ss is a two-digit integer representing the second, with a
 * range of 0&ndash;59.
 * 
 * @li @em X is the the sign of the time zone offset, either @c + or
 * <code>-</code>.
 *
 * @li @em HH is a two-digit integer representing the hour of the time
 * zone offset, with a range of 00&ndash;23.
 *
 * @li @em ZZ is a two-digit integer representing the minutes of the time
 * zone offset, with a range of 00&ndash;59.
 *
 * In the string format above, it is important not to forget the literal
 * character @c T in the string.  Here is an example date/time string:
 * <code>1997-07-16T19:20:30+01:00</code>, which would represent July 16,
 * 1997, at 19:20:30 in Central European Time (which is UTC +1:00). 
   *
   * If this constructor is given a @c null argument or a string of length
   * zero, it constructs a Date object with the value of January 1, 2000,
   * at time 00:00 UTC.  Otherwise, the argument @em must be in the
   * complete format described above, or unpredictable results will happen.
   *
   * @param date a string representing the date.
   */ public
";


%csmethodmodifiers Date::Date(const Date& orig) "
/**
   * Copy constructor; creates a copy of this Date.
   *
   * @param orig the object to copy.
   * 
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the argument @p orig is @c null.
   */ public
";


%csmethodmodifiers Date::clone() const "
/**
   * Returns a copy of this Date.
   *
   * @return a (deep) copy of this Date.
   */ public
";


%csmethodmodifiers Date::getYear "
/**
   * Returns the year from this Date.
   *
   * @return the year from this Date.
   */ public
";


%csmethodmodifiers Date::getMonth "
/**
   * Returns the month from this Date.
   *
   * @return the month from this Date.
   */ public
";


%csmethodmodifiers Date::getDay "
/**
   * Returns the day from this Date.
   *
   * @return the day from this Date.
   */ public
";


%csmethodmodifiers Date::getHour "
/**
   * Returns the hour from this Date.
   *
   * @return the hour from this Date.
   */ public
";


%csmethodmodifiers Date::getMinute "
/**
   * Returns the minute from this Date.
   *
   * @return the minute from this Date.
   */ public
";


%csmethodmodifiers Date::getSecond "
/**
   * Returns the seconds from this Date.
   *
   * @return the seconds from this Date.
   */ public
";


%csmethodmodifiers Date::getSignOffset "
/**
   * Returns the sign of the time zone offset from this Date.
   *
   * @return the sign of the offset from this Date.
   */ public
";


%csmethodmodifiers Date::getHoursOffset "
/**
   * Returns the hours of the time zone offset from this Date.
   *
   * @return the hours of the offset from this Date.
   */ public
";


%csmethodmodifiers Date::getMinutesOffset "
/**
   * Returns the minutes of the time zone offset from this Date.
   *
   * @return the minutes of the offset from this Date.
   */ public
";


%csmethodmodifiers Date::getDateAsString "
/**
   * Returns the current Date value in text-string form.
   *
   * The string returned will be in the <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/NOTE-datetime\'>W3C date format with time
   * zone offset</a>, used in RDF Dublin Core annotations within SBML.
   *
   * *
 * 
 * The date format expresses a date and time value as a string of the form
 * YYYY-MM-DDThh:mm:ssXHH:ZZ, where
 * 
 * @li @em YYYY is a four-digit integer representing the year.  This
 * should be a four-digit number such as @c 2011.
 * 
 * @li @em MM is a two-digit integer representing the month, with a range
 * of values of 01&ndash;12.  The value @c 1 represents January, and so
 * on.
 *
 * @li @em DD is a two-digit integer representing the day of the month,
 * with a range of values of 01&ndash;31.
 * 
 * @li @em hh is a two-digit integer representing the hour on a 24-hour
 * clock, with a range of values of 00&ndash;23.
 * 
 * @li @em mm is a two-digit integer representing the minute, with a
 * range of 00&ndash;59.
 * 
 * @li @em ss is a two-digit integer representing the second, with a
 * range of 0&ndash;59.
 * 
 * @li @em X is the the sign of the time zone offset, either @c + or
 * <code>-</code>.
 *
 * @li @em HH is a two-digit integer representing the hour of the time
 * zone offset, with a range of 00&ndash;23.
 *
 * @li @em ZZ is a two-digit integer representing the minutes of the time
 * zone offset, with a range of 00&ndash;59.
 *
 * In the string format above, it is important not to forget the literal
 * character @c T in the string.  Here is an example date/time string:
 * <code>1997-07-16T19:20:30+01:00</code>, which would represent July 16,
 * 1997, at 19:20:30 in Central European Time (which is UTC +1:00). 
   *
   * @return the date as a string.
   */ public
";


%csmethodmodifiers Date::setYear(unsigned int year) "
/**
   * Sets the value of the year of this Date object.
   *
   * The value given as argument must be between 1000 and 9999 inclusive.
   * (In the millennium during which this libSBML documentation is being
   * written, a typical value is @c 2011, but we hope that SBML will
   * continue to be used for a long time.)
   *  
   * @param year a long integer representing the year.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers Date::setMonth(unsigned int month) "
/**
   * Sets the value of the month of this Date object.
   *
   * @param month a long integer representing the month; it must be in the
   * range 1&ndash;12 or an error will be signaled.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers Date::setDay(unsigned int day) "
/**
   * Sets the value of the day of this Date object.
   *  
   * @param day a long integer representing the day; it must be in the
   * range 0&ndash;31 or an error will be signaled.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers Date::setHour(unsigned int hour) "
/**
   * Sets the value of the hour of this Date object.
   *  
   * @param hour a long integer representing the hour to set; it must be
   * in the range 0&ndash;23 or an error will be signaled.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers Date::setMinute(unsigned int minute) "
/**
   * Sets the value of the minute of this Date object.
   *  
   * @param minute a long integer representing the minute to set; it must
   * be in the range 0&ndash;59 or an error will be signaled.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers Date::setSecond(unsigned int second) "
/**
   * Sets the value of the second of the Date object.
   *  
   * @param second a long integer representing the seconds; it must
   * be in the range 0&ndash;59 or an error will be signaled.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers Date::setSignOffset(unsigned int sign) "
/**
   * Sets the value of the sign of the time zone offset of this Date object.
   *
   * The only permissible values are @c 0 and @c 1.
   *  
   * @param sign a long integer representing the sign of the offset, with
   * @c 0 signifying @c + and @c 1 signifying @c -.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers Date::setHoursOffset(unsigned int hoursOffset) "
/**
   * Sets the value of this Date object\'s time zone hour offset.
   *  
   * @param hoursOffset a long integer representing the hours of the
   * offset; it must be in the range 0&ndash;23 or an error will be
   * signaled.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers Date::setMinutesOffset(unsigned int minutesOffset) "
/**
   * Sets the value of this Date object\'s time zone minutes offset.
   *  
   * @param minutesOffset a long integer representing the minutes of the
   * offset; it must be in the range 0&ndash;59 or an error will be
   * signaled.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers Date::setDateAsString(const std::string& date) "
/**
   * Sets the value of this Date object using a date and time value
   * expressed as a text string.
   * 
   * This method expects its argument to be in the <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/NOTE-datetime\'>W3C date format with time
   * zone offset</a>, used in RDF Dublin Core annotations within SBML.
   *
   * *
 * 
 * The date format expresses a date and time value as a string of the form
 * YYYY-MM-DDThh:mm:ssXHH:ZZ, where
 * 
 * @li @em YYYY is a four-digit integer representing the year.  This
 * should be a four-digit number such as @c 2011.
 * 
 * @li @em MM is a two-digit integer representing the month, with a range
 * of values of 01&ndash;12.  The value @c 1 represents January, and so
 * on.
 *
 * @li @em DD is a two-digit integer representing the day of the month,
 * with a range of values of 01&ndash;31.
 * 
 * @li @em hh is a two-digit integer representing the hour on a 24-hour
 * clock, with a range of values of 00&ndash;23.
 * 
 * @li @em mm is a two-digit integer representing the minute, with a
 * range of 00&ndash;59.
 * 
 * @li @em ss is a two-digit integer representing the second, with a
 * range of 0&ndash;59.
 * 
 * @li @em X is the the sign of the time zone offset, either @c + or
 * <code>-</code>.
 *
 * @li @em HH is a two-digit integer representing the hour of the time
 * zone offset, with a range of 00&ndash;23.
 *
 * @li @em ZZ is a two-digit integer representing the minutes of the time
 * zone offset, with a range of 00&ndash;59.
 *
 * In the string format above, it is important not to forget the literal
 * character @c T in the string.  Here is an example date/time string:
 * <code>1997-07-16T19:20:30+01:00</code>, which would represent July 16,
 * 1997, at 19:20:30 in Central European Time (which is UTC +1:00). 
   *
   * If this method is given a @c null argument or a string of length zero,
   * it constructs a Date object with the value of January 1, 2000, at time
   * 00:00 UTC.  Otherwise, the argument @em must be in the complete format
   * described above, or unpredictable results will happen.
   *
   * @param date a string representing the date.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers Date::representsValidDate "
/**
   * Returns true or false depending on whether this date object represents
   * a valid date and time value.
   *
   * This method verifies that the date/time value stored in this object is
   * well-formed and represents plausible values.  A time and date value in
   * the W3C format takes the form YYYY-MM-DDThh:mm:ssXHH:ZZ (e.g.,
   * <code>1997-07-16T19:20:30+01:00</code>) where XHH:ZZ is the time zone
   * offset.  This method checks such things as whether the value of the
   * month number is less than or equal to 12, whether the value of the
   * minutes number is less than or equal to 59, whether a time zone offset
   * is set, etc.
   *
   * @return @c true if the date is valid, @c false otherwise.
   */ public
";


%csmethodmodifiers Date::hasBeenModified "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Date::resetModifiedFlags "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Date::parseDateStringToNumbers "
/**
   * Sets the value of the individual numbers from the date 
   * as a string.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Date::parseDateNumbersToString "
/**
   * Sets the value of the date as a string from the individual numbers.
   */ /* libsbml-internal */ public
";


%typemap(csimports) ModelCreator "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Representation of MIRIAM-compliant model creator data
 * used in ModelHistory.
 *
 * @htmlinclude not-sbml-warning.html
 *
 * The SBML specification beginning with Level&nbsp;2 Version&nbsp;2
 * defines a standard approach to recording model history and model creator
 * information in a form that complies with MIRIAM (\'Minimum Information
 * Requested in the Annotation of biochemical Models\', <i>Nature
 * Biotechnology</i>, vol. 23, no. 12, Dec. 2005).  For the model creator,
 * this form involves the use of parts of the <a target=\'_blank\'
 * href=\'http://en.wikipedia.org/wiki/VCard\'>vCard</a> representation.
 * LibSBML provides the ModelCreator class as a convenience high-level
 * interface for working with model creator data.  Objects of class
 * ModelCreator can be used to store and carry around creator data within a
 * program, and the various methods in this object class let callers
 * manipulate the different parts of the model creator representation.
 *
 * @section parts The different parts of a model creator definition
 *
 * The ModelCreator class mirrors the structure of the MIRIAM model creator
 * annotations in SBML.  The following template illustrates these different
 * fields when they are written in XML form:
 *
 <pre class=\'fragment\'>
 &lt;vCard:N rdf:parseType=\'Resource\'&gt;
   &lt;vCard:Family&gt;<span style=\'background-color: #bbb\'>family name</span>&lt;/vCard:Family&gt;
   &lt;vCard:Given&gt;<span style=\'background-color: #bbb\'>given name</span>&lt;/vCard:Given&gt;
 &lt;/vCard:N&gt;
 ...
 &lt;vCard:EMAIL&gt;<span style=\'background-color: #bbb\'>email address</span>&lt;/vCard:EMAIL&gt;
 ...
 &lt;vCard:ORG rdf:parseType=\'Resource\'&gt;
   &lt;vCard:Orgname&gt;<span style=\'background-color: #bbb\'>organization</span>&lt;/vCard:Orgname&gt;
 &lt;/vCard:ORG&gt;
 </pre>
 *
 * Each of the separate data values
 * <span class=\'code\' style=\'background-color: #bbb\'>family name</span>,
 * <span class=\'code\' style=\'background-color: #bbb\'>given name</span>,
 * <span class=\'code\' style=\'background-color: #bbb\'>email address</span>, and
 * <span class=\'code\' style=\'background-color: #bbb\'>organization</span> can
 * be set and retrieved via corresponding methods in the ModelCreator 
 * class.  These methods are documented in more detail below.
 *
 * 
 */
"


%csmethodmodifiers ModelCreator::ModelCreator "
/**
   * Creates a new ModelCreator object.
   */ public
";


%csmethodmodifiers ModelCreator::ModelCreator(const XMLNode creator) "
/**
   * Creates a new ModelCreator from an XMLNode.
   *
   * @param creator the XMLNode from which to create the ModelCreator.
   */ public
";


%csmethodmodifiers ModelCreator::ModelCreator(const ModelCreator& orig) "
/**
   * Copy constructor; creates a copy of the ModelCreator.
   *
   * @param orig the object to copy.
   * 
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the argument @p orig is @c null.
   */ public
";


%csmethodmodifiers ModelCreator::clone() const "
/**
   * Creates and returns a copy of this ModelCreator.
   *
   * @return a (deep) copy of this ModelCreator.
   */ public
";


%csmethodmodifiers ModelCreator::getFamilyName() const "
/**
   * Returns the \'family name\' stored in this ModelCreator object.
   *
   * @return the \'family name\' portion of the ModelCreator object.
   */ public
";


%csmethodmodifiers ModelCreator::getGivenName() const "
/**
   * Returns the \'given name\' stored in this ModelCreator object.
   *
   * @return the \'given name\' portion of the ModelCreator object.
   */ public
";


%csmethodmodifiers ModelCreator::getEmail() const "
/**
   * Returns the \'email\' stored in this ModelCreator object.
   *
   * @return email from the ModelCreator.
   */ public
";


%csmethodmodifiers ModelCreator::getOrganization() const "
/**
   * Returns the \'organization\' stored in this ModelCreator object.
   *
   * @return organization from the ModelCreator.
   */ public
";


%csmethodmodifiers ModelCreator::getOrganisation() const "
/**
   * (Alternate spelling) Returns the \'organization\' stored in this
   * ModelCreator object.
   *
   * @note This function is an alias of getOrganization().
   *
   * @return organization from the ModelCreator.
   *
   * @see getOrganization()
   */ public
";


%csmethodmodifiers ModelCreator::isSetFamilyName "
/**
   * Predicate returning @c true or @c false depending on whether this
   * ModelCreator\'s \'family name\' part is set.
   *
   * @return @c true if the familyName of this ModelCreator is set, @c false otherwise.
   */ public
";


%csmethodmodifiers ModelCreator::isSetGivenName "
/**
   * Predicate returning @c true or @c false depending on whether this
   * ModelCreator\'s \'given name\' part is set.
   *
   * @return @c true if the givenName of this ModelCreator is set, @c false otherwise.
   */ public
";


%csmethodmodifiers ModelCreator::isSetEmail "
/**
   * Predicate returning @c true or @c false depending on whether this
   * ModelCreator\'s \'email\' part is set.
   *
   * @return @c true if the email of this ModelCreator is set, @c false otherwise.
   */ public
";


%csmethodmodifiers ModelCreator::isSetOrganization "
/**
   * Predicate returning @c true or @c false depending on whether this
   * ModelCreator\'s \'organization\' part is set.
   *
   * @return @c true if the organization of this ModelCreator is set, @c false otherwise.
   */ public
";


%csmethodmodifiers ModelCreator::isSetOrganisation "
/**
   * (Alternate spelling) Predicate returning @c true or @c false depending
   * on whether this ModelCreator\'s \'organization\' part is set.
   *
   * @note This function is an alias of isSetOrganization().
   *
   * @return @c true if the organization of this ModelCreator is set, @c false otherwise.
   *
   * @see isSetOrganization()
   */ public
";


%csmethodmodifiers ModelCreator::setFamilyName(const std::string& familyName) "
/**
   * Sets the \'family name\' portion of this ModelCreator object.
   *  
   * @param familyName a string representing the familyName of the ModelCreator. 
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   */ public
";


%csmethodmodifiers ModelCreator::setGivenName(const std::string& givenName) "
/**
   * Sets the \'given name\' portion of this ModelCreator object.
   *  
   * @param givenName a string representing the givenName of the ModelCreator. 
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   */ public
";


%csmethodmodifiers ModelCreator::setEmail(const std::string& email) "
/**
   * Sets the \'email\' portion of this ModelCreator object.
   *  
   * @param email a string representing the email of the ModelCreator. 
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   */ public
";


%csmethodmodifiers ModelCreator::setOrganization(const std::string& organization) "
/**
   * Sets the \'organization\' portion of this ModelCreator object.
   *  
   * @param organization a string representing the organization of the 
   * ModelCreator. 
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   */ public
";


%csmethodmodifiers ModelCreator::setOrganisation(const std::string& organization) "
/**
   * (Alternate spelling) Sets the \'organization\' portion of this
   * ModelCreator object.
   *
   * @param organization a string representing the organization of the
   * ModelCreator.
   *
   * @note This function is an alias of setOrganization(string organization).
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   *
   * @see setOrganization(string organization)
   */ public
";


%csmethodmodifiers ModelCreator::unsetFamilyName "
/**
   * Unsets the \'family name\' portion of this ModelCreator object.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers ModelCreator::unsetGivenName "
/**
   * Unsets the \'given name\' portion of this ModelCreator object.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers ModelCreator::unsetEmail "
/**
   * Unsets the \'email\' portion of this ModelCreator object.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers ModelCreator::unsetOrganization "
/**
   * Unsets the \'organization\' portion of this ModelCreator object.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers ModelCreator::unsetOrganisation "
/**
   * (Alternate spelling) Unsets the \'organization\' portion of this ModelCreator object.
   *
   * @note This function is an alias of unsetOrganization().
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   *
   * @see unsetOrganization()
   */ public
";


%csmethodmodifiers ModelCreator::getAdditionalRDF "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers ModelCreator::hasRequiredAttributes "
/**
   * Predicate returning @c true if all the required elements for this
   * ModelCreator object have been set.
   *
   * The only required elements for a ModelCreator object are the \'family
   * name\' and \'given name\'.
   *
   * @return a bool value indicating whether all the required
   * elements for this object have been defined.
   */ public
";


%csmethodmodifiers ModelCreator::hasBeenModified "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers ModelCreator::resetModifiedFlags "
/** */ /* libsbml-internal */ public
";


%typemap(csimports) ModelHistory "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Representation of MIRIAM-compliant model history data.
 *
 * @htmlinclude not-sbml-warning.html
 *
 * The SBML specification beginning with Level&nbsp;2 Version&nbsp;2 defines
 * a standard approach to recording optional model history and model creator
 * information in a form that complies with MIRIAM (<a target=\'_blank\'
 * href=\'http://www.nature.com/nbt/journal/v23/n12/abs/nbt1156.html\'>\'Minimum
 * Information Requested in the Annotation of biochemical Models\'</a>,
 * <i>Nature Biotechnology</i>, vol. 23, no. 12, Dec. 2005).  LibSBML
 * provides the ModelHistory class as a convenient high-level interface for
 * working with model history data.
 *
 * Model histories in SBML consist of one or more <em>model creators</em>,
 * a single date of @em creation, and one or more @em modification dates.
 * The overall XML form of this data takes the following form:
 * 
 <pre class=\'fragment\'>
 &lt;dc:creator&gt;
   &lt;rdf:Bag&gt;
     &lt;rdf:li rdf:parseType=\'Resource\'&gt;
       <span style=\'background-color: #d0eed0\'>+++</span>
       &lt;vCard:N rdf:parseType=\'Resource\'&gt;
         &lt;vCard:Family&gt;<span style=\'background-color: #bbb\'>family name</span>&lt;/vCard:Family&gt;
         &lt;vCard:Given&gt;<span style=\'background-color: #bbb\'>given name</span>&lt;/vCard:Given&gt;
       &lt;/vCard:N&gt;
       <span style=\'background-color: #d0eed0\'>+++</span>
       <span style=\'border-bottom: 2px dotted #888\'>&lt;vCard:EMAIL&gt;<span style=\'background-color: #bbb\'>email address</span>&lt;/vCard:EMAIL&gt;</span>
       <span style=\'background-color: #d0eed0\'>+++</span>
       <span style=\'border-bottom: 2px dotted #888\'>&lt;vCard:ORG rdf:parseType=\'Resource\'&gt;</span>
        <span style=\'border-bottom: 2px dotted #888\'>&lt;vCard:Orgname&gt;<span style=\'background-color: #bbb\'>organization name</span>&lt;/vCard:Orgname&gt;</span>
       <span style=\'border-bottom: 2px dotted #888\'>&lt;/vCard:ORG&gt;</span>
       <span style=\'background-color: #d0eed0\'>+++</span>
     &lt;/rdf:li&gt;
     <span style=\'background-color: #edd\'>...</span>
   &lt;/rdf:Bag&gt;
 &lt;/dc:creator&gt;
 &lt;dcterms:created rdf:parseType=\'Resource\'&gt;
   &lt;dcterms:W3CDTF&gt;<span style=\'background-color: #bbb\'>creation date</span>&lt;/dcterms:W3CDTF&gt;
 &lt;/dcterms:created&gt;
 &lt;dcterms:modified rdf:parseType=\'Resource\'&gt;
   &lt;dcterms:W3CDTF&gt;<span style=\'background-color: #bbb\'>modification date</span>&lt;/dcterms:W3CDTF&gt;
 &lt;/dcterms:modified&gt;
 <span style=\'background-color: #edd\'>...</span>
 </pre>
 *
 * In the template above, the <span style=\'border-bottom: 2px dotted #888\'>underlined</span>
 * portions are optional, the symbol
 * <span class=\'code\' style=\'background-color: #d0eed0\'>+++</span> is a placeholder
 * for either no content or valid XML content that is not defined by
 * the annotation scheme, and the ellipses
 * <span class=\'code\' style=\'background-color: #edd\'>...</span>
 * are placeholders for zero or more elements of the same form as the
 * immediately preceding element.  The various placeholders for content, namely
 * <span class=\'code\' style=\'background-color: #bbb\'>family name</span>,
 * <span class=\'code\' style=\'background-color: #bbb\'>given name</span>,
 * <span class=\'code\' style=\'background-color: #bbb\'>email address</span>,
 * <span class=\'code\' style=\'background-color: #bbb\'>organization</span>,
 * <span class=\'code\' style=\'background-color: #bbb\'>creation date</span>, and
 * <span class=\'code\' style=\'background-color: #bbb\'>modification date</span>
 * are data that can be filled in using the various methods on
 * the ModelHistory class described below.
 *
 * @see ModelCreator
 * @see Date
 */
"


%csmethodmodifiers ModelHistory::ModelHistory "
/**
   * Creates a new ModelHistory object.
   */ public
";


%csmethodmodifiers ModelHistory::ModelHistory(const ModelHistory& orig) "
/**
   * Copy constructor; creates a copy of this ModelHistory object.
   *
   * @param orig the object to copy.
   * 
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the argument @p orig is @c null.
   */ public
";


%csmethodmodifiers ModelHistory::clone() const "
/**
   * Creates and returns a copy of this ModelHistory object
   *
   * @return a (deep) copy of this ModelHistory object.
   */ public
";


%csmethodmodifiers ModelHistory::getCreatedDate "
/**
   * Returns the \'creation date\' portion of this ModelHistory object.
   *
   * @return a Date object representing the creation date stored in
   * this ModelHistory object.
   */ public
";


%csmethodmodifiers ModelHistory::getModifiedDate "
/**
   * Returns the \'modified date\' portion of this ModelHistory object.
   * 
   * Note that in the MIRIAM format for annotations, there can be multiple
   * modification dates.  The libSBML ModelHistory class supports this by
   * storing a list of \'modified date\' values.  If this ModelHistory object
   * contains more than one \'modified date\' value in the list, this method
   * will return the first one in the list.
   *
   * @return a Date object representing the date of modification
   * stored in this ModelHistory object.
   */ public
";


%csmethodmodifiers ModelHistory::isSetCreatedDate "
/**
   * Predicate returning @c true or @c false depending on whether this
   * ModelHistory\'s \'creation date\' is set.
   *
   * @return @c true if the creation date value of this ModelHistory is
   * set, @c false otherwise.
   */ public
";


%csmethodmodifiers ModelHistory::isSetModifiedDate "
/**
   * Predicate returning @c true or @c false depending on whether this
   * ModelHistory\'s \'modified date\' is set.
   *
   * @return @c true if the modification date value of this ModelHistory
   * object is set, @c false otherwise.
   */ public
";


%csmethodmodifiers ModelHistory::setCreatedDate(Date* date) "
/**
   * Sets the creation date of this ModelHistory object.
   *  
   * @param date a Date object representing the date to which the \'created
   * date\' portion of this ModelHistory should be set.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   */ public
";


%csmethodmodifiers ModelHistory::setModifiedDate(Date* date) "
/**
   * Sets the modification date of this ModelHistory object.
   *  
   * @param date a Date object representing the date to which the \'modified
   * date\' portion of this ModelHistory should be set.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   */ public
";


%csmethodmodifiers ModelHistory::addModifiedDate(Date* date) "
/**
   * Adds a copy of a Date object to the list of \'modified date\' values
   * stored in this ModelHistory object.
   *
   * In the MIRIAM format for annotations, there can be multiple
   * modification dates.  The libSBML ModelHistory class supports this by
   * storing a list of \'modified date\' values.
   *  
   * @param date a Date object representing the \'modified date\' that should
   * be added to this ModelHistory object.
   * 
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   */ public
";


%csmethodmodifiers ModelHistory::getListModifiedDates "
/**
   * Returns the list of \'modified date\' values (as Date objects) stored in
   * this ModelHistory object.
   * 
   * In the MIRIAM format for annotations, there can be multiple
   * modification dates.  The libSBML ModelHistory class supports this by
   * storing a list of \'modified date\' values.
   * 
   * @return the list of modification dates for this ModelHistory object.
   */ public
";


%csmethodmodifiers ModelHistory::getModifiedDate(unsigned int n) "
/**
   * Get the nth Date object in the list of \'modified date\' values stored
   * in this ModelHistory object.
   * 
   * In the MIRIAM format for annotations, there can be multiple
   * modification dates.  The libSBML ModelHistory class supports this by
   * storing a list of \'modified date\' values.
   * 
   * @return the nth Date in the list of ModifiedDates of this
   * ModelHistory.
   */ public
";


%csmethodmodifiers ModelHistory::getNumModifiedDates "
/**
   * Get the number of Date objects in this ModelHistory object\'s list of
   * \'modified dates\'.
   * 
   * In the MIRIAM format for annotations, there can be multiple
   * modification dates.  The libSBML ModelHistory class supports this by
   * storing a list of \'modified date\' values.
   * 
   * @return the number of ModifiedDates in this ModelHistory.
   */ public
";


%csmethodmodifiers ModelHistory::addCreator(ModelCreator * mc) "
/**
   * Adds a copy of a ModelCreator object to the list of \'model creator\'
   * values stored in this ModelHistory object.
   *
   * In the MIRIAM format for annotations, there can be multiple model
   * creators.  The libSBML ModelHistory class supports this by storing a
   * list of \'model creator\' values.
   * 
   * @param mc the ModelCreator to add
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers ModelHistory::getListCreators "
/**
   * Returns the list of ModelCreator objects stored in this ModelHistory
   * object.
   *
   * In the MIRIAM format for annotations, there can be multiple model
   * creators.  The libSBML ModelHistory class supports this by storing a
   * list of \'model creator\' values.
   * 
   * @return the list of ModelCreator objects.
   */ public
";


%csmethodmodifiers ModelHistory::getCreator(unsigned int n) "
/**
   * Get the nth ModelCreator object stored in this ModelHistory object.
   *
   * In the MIRIAM format for annotations, there can be multiple model
   * creators.  The libSBML ModelHistory class supports this by storing a
   * list of \'model creator\' values.
   * 
   * @return the nth ModelCreator object.
   */ public
";


%csmethodmodifiers ModelHistory::getNumCreators "
/**
   * Get the number of ModelCreator objects stored in this ModelHistory
   * object.
   *
   * In the MIRIAM format for annotations, there can be multiple model
   * creators.  The libSBML ModelHistory class supports this by storing a
   * list of \'model creator\' values.
   * 
   * @return the number of ModelCreators objects.
   */ public
";


%csmethodmodifiers ModelHistory::hasRequiredAttributes "
/**
   * Predicate returning @c true if all the required elements for this
   * ModelHistory object have been set.
   *
   * The required elements for a ModelHistory object are \'created
   * name\', \'modified date\', and at least one \'model creator\'.
   *
   * @return a bool value indicating whether all the required
   * elements for this object have been defined.
   */ public
";


%csmethodmodifiers ModelHistory::hasBeenModified "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers ModelHistory::resetModifiedFlags "
/** */ /* libsbml-internal */ public
";


%typemap(csimports) RDFAnnotationParser "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Read/write/manipulate RDF annotations stored in SBML
 * annotation elements.
 *
 * @htmlinclude not-sbml-warning.html
 *
 * RDFAnnotationParser is a libSBML construct used as part of the libSBML
 * support for annotations conforming to the guidelines specified by MIRIAM
 * (<a target=\'_blank\'
 * href=\'http://www.nature.com/nbt/journal/v23/n12/abs/nbt1156.html\'>\'Minimum
 * Information Requested in the Annotation of biochemical Models\'</a>,
 * <i>Nature Biotechnology</i>, vol. 23, no. 12, Dec. 2005).  Section 6 of
 * the SBML Level&nbsp;2 and Level&nbsp;3 specification documents defines a
 * recommended way of encoding MIRIAM information using a subset of RDF (<a
 * target=\'_blank\' href=\'http://www.w3.org/RDF/\'>Resource Description
 * Format</a>).  The general scheme is as follows.  A set of RDF-based
 * annotations attached to a given SBML <code>&lt;annotation&gt;</code>
 * element are read by RDFAnnotationParser and converted into a list of
 * CVTerm objects.  There are different versions of the main method, @if clike RDFAnnotationParser::parseRDFAnnotation(XMLNode annotation, %List *CVTerms) @endif@if java RDFAnnotationParser::parseRDFAnnotation(XMLNode annotation, %CVTermList CVTerms) @endif and
 * RDFAnnotationParser::parseRDFAnnotation(XMLNode annotation), used
 * depending on whether the annotation in question concerns the MIRIAM model
 * history or other MIRIAM resource annotations.  A special object class,
 * ModelHistory, is used to make it easier to manipulate model history
 * annotations.
 *
 * All of the methods on RDFAnnotationParser are static; the class exists
 * only to encapsulate the annotation and CVTerm parsing and manipulation
 * functionality.
 */
"


%csmethodmodifiers RDFAnnotationParser::parseRDFAnnotation(const XMLNode *annotation, List *CVTerms, const char* metaId = NULL, XMLInputStream* stream = NULL) "
/**
   * Parses an annotation (given as an XMLNode tree) into a list of
   * CVTerm objects.
   *
   * This is used to take an annotation that has been read into an SBML
   * model, identify the RDF elements within it, and create a list of
   * corresponding CVTerm (controlled vocabulary term) objects.
   *
   * @param annotation XMLNode containing the annotation.
   * 
   * @param CVTerms list of CVTerm objects to be created.
   * @param stream optional XMLInputStream that facilitates error logging
   * @param metaId optional metaId, if set only the rdf annotation for this metaId will be returned.
   *
   * @if notclike @note Because this is a @em static method, the non-C++
   * language interfaces for libSBML will contain two variants.  One will
   * be a static method on the class (i.e., RDFAnnotationParser), and the
   * other will be a standalone top-level function with the name
   * RDFAnnotationParser_parseRDFAnnotation(). They are functionally
   * identical. @endif
   *
   * @see @if clike parseRDFAnnotation(XMLNode annotation) @else RDFAnnotationParser::parseRDFAnnotation(XMLNode annotation) @endif
   */ public
";


%csmethodmodifiers RDFAnnotationParser::parseRDFAnnotation(const XMLNode *annotation, const char* metaId = NULL, XMLInputStream* stream = NULL) "
/**
   * Parses an annotation into a ModelHistory class instance.
   *
   * This is used to take an annotation that has been read into an SBML
   * model, identify the RDF elements representing model history
   * information, and create a list of corresponding CVTerm objects.
   *
   * @param annotation XMLNode containing the annotation.
   * @param stream optional XMLInputStream that facilitates error logging
   * @param metaId optional metaId, if set only the rdf annotation for this metaId will be returned.
   *
   * @if notclike @note Because this is a @em static method, the non-C++
   * language interfaces for libSBML will contain two variants.  One will
   * be a static method on the class (i.e., RDFAnnotationParser), and the
   * other will be a standalone top-level function with the name
   * RDFAnnotationParser_parseRDFAnnotation(). They are functionally
   * identical. @endif
   *
   * @return a pointer to the ModelHistory created.
   */ public
";


%csmethodmodifiers RDFAnnotationParser::createAnnotation "
/**
   * Creates a blank annotation and returns its root XMLNode object.
   *
   * This creates a completely empty SBML <code>&lt;annotation&gt;</code>
   * element.  It is not attached to any SBML element.  An example of how
   * this might be used is illustrated in the following code fragment.  In
   * this example, suppose that @c content is an XMLNode object previously
   * created, containing MIRIAM-style annotations, and that @c sbmlObject
   * is an SBML object derived from SBase (e.g., a Model, or a Species, or
   * a Compartment, etc.).  Then:@if clike
@verbatim
int success;                              // Status code variable, used below.

XMLNode RDF = createRDFAnnotation();     // Create RDF annotation XML structure.
success = RDF->addChild(...content...);   // Put some content into it.
...                                       // Check \'success\' return code value.

XMLNode ann = createAnnotation();        // Create <annotation> container.
success = ann->addChild(RDF);             // Put the RDF annotation into it.
...                                       // Check \'success\' return code value.

success = sbmlObject->setAnnotation(ann); // Set object\'s annotation to what we built.
...                                       // Check \'success\' return code value.
@endverbatim
   * @endif@if java
@verbatim
int success;                                   // Status code variable, used below.

XMLNode RDF = createRDFAnnotation();          // Create RDF annotation XML structure.
success      = RDF.addChild(...content...);    // Put some content into it.
...                                            // Check \'success\' return code value.

XMLNode ann = createAnnotation();             // Create <annotation> container.
success      = ann.addChild(RDF);              // Put the RDF annotation into it.
...                                            // Check \'success\' return code value.

success      = sbmlObject.setAnnotation(ann); // Set object\'s annotation to what we built.
...                                            // Check \'success\' return code value.
@endverbatim
   * @endif@if python
@verbatim
RDF     = RDFAnnotationParser.createRDFAnnotation() # Create RDF annotation XML structure.
success = RDF.addChild(...content...)               # Put some content into it.
...                                                 # Check \'success\' return code value.

annot   = RDFAnnotationParser.createAnnotation()    # Create <annotation> container.
success = annot.addChild(RDF)                       # Put the RDF annotation into it.
...                                                 # Check \'success\' return code value.

success = sbmlObject.setAnnotation(annot)           # Set object\'s annotation to what we built.
...                                                 # Check \'success\' return code value.
@endverbatim
   * @endif
   * The SBML specification contains more information about the format of
   * annotations.  We urge readers to consult Section&nbsp;6 of the SBML
   * Level&nbsp;2 (Versions 2&ndash;4) and SBML Level&nbsp;3 specification
   * documents.
   *
   * @return a pointer to an XMLNode for the annotation
   *
   * @if notclike @note Because this is a @em static method, the non-C++
   * language interfaces for libSBML will contain two variants.  One will
   * be a static method on the class (i.e., RDFAnnotationParser), and the
   * other will be a standalone top-level function with the name
   * RDFAnnotationParser_createAnnotation(). They are functionally
   * identical. @endif
   *
   * @see @if clike createRDFAnnotation() @else RDFAnnotationParser::createRDFAnnotation() @endif
   */ public
";


%csmethodmodifiers RDFAnnotationParser::createRDFAnnotation "
/**
   * Creates a blank RDF element suitable for use in SBML annotations.
   *
   * The annotation created by this method has namespace declarations for
   * all the relevant XML namespaces used in RDF annotations and also has
   * an empty RDF element.  The result is the following XML:
@verbatim
<rdf:RDF xmlns:rdf=\'http://www.w3.org/1999/02/22-rdf-syntax-ns#\'
         xmlns:dc=\'http://purl.org/dc/elements/1.1/\'
         xmlns:dcterms=\'http://purl.org/dc/terms/\'
         xmlns:vCard=\'http://www.w3.org/2001/vcard-rdf/3.0#\'
         xmlns:bqbiol=\'http://biomodels.net/biology-qualifiers/\'
         xmlns:bqmodel=\'http://biomodels.net/model-qualifiers/\' >

</rdf:RDF>
@endverbatim
   *
   * Note that this does not create the containing SBML
   * <code>&lt;annotation&gt;</code> element; the method
   * @if clike createAnnotation()@else RDFAnnotationParser::createAnnotation()@endif
   * is available for creating the container.
   *
   * @return a pointer to an XMLNode
   *
   * @if notclike @note Because this is a @em static method, the non-C++
   * language interfaces for libSBML will contain two variants.  One will
   * be a static method on the class (i.e., RDFAnnotationParser), and the
   * other will be a standalone top-level function with the name
   * RDFAnnotationParser_createRDFAnnotation(). They are functionally
   * identical. @endif
   *
   * @see @if clike createAnnotation() @else RDFAnnotationParser::createAnnotation() @endif
   */ public
";


%csmethodmodifiers RDFAnnotationParser::createRDFDescription(const SBase *obj) "
/**
   * Takes an SBML object and creates an empty XMLNode corresponding to an
   * RDF \'Description\' element.
   *
   * This method is a handy way of creating RDF description objects linked
   * by the appropriate \'metaid\' field to the given @p object, for
   * insertion into RDF annotations in a model.  The method retrieves the
   * \'metaid\' attribute from the @p object passed in as argument, then
   * creates an empty element having the following form
   * (where <span class=\'code\' style=\'background-color: #eed0d0\'>metaid</span> 
   * the value of the \'metaid\' attribute of the argument):
   * 
 <pre class=\'fragment\'>
 &lt;rdf:Description rdf:about=&quot;#<span style=\'background-color: #eed0d0\'>metaid</span>&quot; xmlns:rdf=\'http://www.w3.org/1999/02/22-rdf-syntax-ns#\'&gt;
 ...
 &lt;/rdf:Description&gt;
 </pre>
   * Note that this method does @em not create a complete annotation or
   * even an RDF element; it only creates the \'Description\' portion.  Callers
   * will need to use other methods such as
   * @if clike createRDFAnnotation()@else RDFAnnotationParser::createRDFAnnotation()@endif
   * to create the rest of the structure for an annotation.
   *
   * @param obj the object to which the \'Description\' refers
   *
   * @return a new XMLNode containing the \'rdf:Description\' element with
   * its \'about\' attribute value set to the @p object meta identifier.
   *
   * @if notclike @note Because this is a @em static method, the non-C++
   * language interfaces for libSBML will contain two variants.  One will
   * be a static method on the class (i.e., RDFAnnotationParser), and the
   * other will be a standalone top-level function with the name
   * RDFAnnotationParser_createRDFDescription(). They are functionally
   * identical. @endif
   *
   * @see @if clike createRDFAnnotation() @else RDFAnnotationParser::createRDFAnnotation() @endif
   */ public
";


%csmethodmodifiers RDFAnnotationParser::createCVTerms(const SBase *obj) "
/**
   * Takes a list of CVTerm objects and creates a the RDF \'Description\'
   * element.
   *
   * This essentially takes the given SBML object, reads out the CVTerm
   * objects attached to it, creates an RDF \'Description\' element to hold
   * the terms, and adds each term with appropriate qualifiers.
   *
   * @param obj the SBML object to start from
   *
   * @return the XMLNode tree corresponding to the Description element of
   * an RDF annotation.
   *
   * @if notclike @note Because this is a @em static method, the non-C++
   * language interfaces for libSBML will contain two variants.  One will
   * be a static method on the class (i.e., RDFAnnotationParser), and the
   * other will be a standalone top-level function with the name
   * createRDFDescription(@if java SBase obj@endif). They are functionally
   * identical. @endif
   */ public
";


%csmethodmodifiers RDFAnnotationParser::parseCVTerms(const SBase * obj) "
/**
   * Takes a list of CVTerm objects and creates a complete SBML annotation
   * around it.
   *
   * This essentially takes the given SBML object, reads out the CVTerm
   * objects attached to it, calls @if clike createRDFAnnotation()@else
   * RDFAnnotationParser::createRDFAnnotation()@endif to create an RDF
   * annotation to hold the terms, and finally calls @if clike
   * createAnnotation()@else
   * RDFAnnotationParser::createAnnotation()@endif to wrap the result as
   * an SBML <code>&lt;annotation&gt;</code> element.
   *
   * @param obj the SBML object to start from
   *
   * @return the XMLNode tree corresponding to the annotation.
   *
   * @if notclike @note Because this is a @em static method, the non-C++
   * language interfaces for libSBML will contain two variants.  One will
   * be a static method on the class (i.e., RDFAnnotationParser), and the
   * other will be a standalone top-level function with the name
   * RDFAnnotationParser_parseCVTerms(). They are functionally
   * identical. @endif
   */ public
";


%csmethodmodifiers RDFAnnotationParser::parseModelHistory(const SBase * obj) "
/**
   * Reads the model history and cvTerms stored in @p obj and creates the
   * XML structure for an SBML annotation representing that metadata if 
   * there is a model history stored in @p obj.
   *
   * @param obj any SBase object
   *
   * @return the XMLNode corresponding to an annotation containing 
   * MIRIAM-compliant model history and CV term information in RDF format.
   *
   * @note If the object does not have a history element stored then
   * @c null is returned even if CVTerms are present.
   *
   * @if notclike @note Because this is a @em static method, the non-C++
   * language interfaces for libSBML will contain two variants.  One will
   * be a static method on the class (i.e., RDFAnnotationParser), and the
   * other will be a standalone top-level function with the name
   * RDFAnnotationParser_parseModelHistory(@if java Sbase obj@endif). They
   * are functionally identical. @endif
   */ public
";


%csmethodmodifiers RDFAnnotationParser::parseOnlyModelHistory(const SBase * obj) "
/**
   * Reads the model history stored in @p obj and creates the
   * XML structure for an SBML annotation representing that history.
   *
   * @param obj any SBase object
   *
   * @return the XMLNode corresponding to an annotation containing 
   * MIRIAM-compliant model history information in RDF format.
   *
   * @if notclike @note Because this is a @em static method, the non-C++
   * language interfaces for libSBML will contain two variants.  One will
   * be a static method on the class (i.e., RDFAnnotationParser), and the
   * other will be a standalone top-level function with the name
   * RDFAnnotationParser_parseOnlyModelHistory(). They are functionally
   * identical. @endif
   */ public
";


%csmethodmodifiers RDFAnnotationParser::deleteRDFAnnotation(const XMLNode *annotation) "
/**
   * Deletes any SBML MIRIAM RDF annotation found in the given XMLNode 
   * tree and returns
   * any remaining annotation content.
   *
   * The name of the XMLNode given as parameter @p annotation must be
   * \'annotation\', or else this method returns @c null.  The method will
   * walk down the XML structure looking for elements that are in the
   * RDF XML namespace, and remove them if they conform to the syntax
   * of a History or CVTerm element.
   *
   * @param annotation the XMLNode tree within which the RDF annotation is
   * to be found and deleted
   *
   * @return the XMLNode structure that is left after RDF annotations are
   * deleted.
   *
   * @if notclike @note Because this is a @em static method, the non-C++
   * language interfaces for libSBML will contain two variants.  One will
   * be a static method on the class (i.e., RDFAnnotationParser), and the
   * other will be a standalone top-level function with the name
   * RDFAnnotationParser_deleteRDFAnnotation(). They are functionally
   * identical. @endif
   */ public
";


%csmethodmodifiers RDFAnnotationParser::deleteRDFHistoryAnnotation(const XMLNode *annotation) "
/**
   * Deletes any SBML MIRIAM RDF \'History\' annotation found in the given 
   * XMLNode tree and returns
   * any remaining annotation content.
   *
   * The name of the XMLNode given as parameter @p annotation must be
   * \'annotation\', or else this method returns @c null.  The method will
   * walk down the XML structure looking for elements that are in the
   * RDF XML namespace, and remove any that conform to the syntax of a
   * History element.
   *
   * @param annotation the XMLNode tree within which the RDF annotation is
   * to be found and deleted
   *
   * @return the XMLNode structure that is left after RDF annotations are
   * deleted.
   *
   * @if notclike @note Because this is a @em static method, the non-C++
   * language interfaces for libSBML will contain two variants.  One will
   * be a static method on the class (i.e., RDFAnnotationParser), and the
   * other will be a standalone top-level function with the name
   * RDFAnnotationParser_deleteRDFAnnotation(). They are functionally
   * identical. @endif
   */ public
";


%csmethodmodifiers RDFAnnotationParser::deleteRDFCVTermAnnotation(const XMLNode *annotation) "
/**
   * Deletes any SBML MIRIAM RDF \'CVTerm\' annotation found in the given 
   * XMLNode tree and returns
   * any remaining annotation content.
   *
   * The name of the XMLNode given as parameter @p annotation must be
   * \'annotation\', or else this method returns @c null.  The method will
   * walk down the XML structure looking for elements that are in the
   * RDF XML namespace, and remove any that conform to the syntax of a
   * CVTerm element.
   *
   * @param annotation the XMLNode tree within which the RDF annotation is
   * to be found and deleted
   *
   * @return the XMLNode structure that is left after RDF annotations are
   * deleted.
   *
   * @if notclike @note Because this is a @em static method, the non-C++
   * language interfaces for libSBML will contain two variants.  One will
   * be a static method on the class (i.e., RDFAnnotationParser), and the
   * other will be a standalone top-level function with the name
   * RDFAnnotationParser_deleteRDFAnnotation(). They are functionally
   * identical. @endif
   */ public
";


%csmethodmodifiers RDFAnnotationParser::hasRDFAnnotation(const XMLNode *annotation) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers RDFAnnotationParser::hasAdditionalRDFAnnotation(const XMLNode *annotation) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers RDFAnnotationParser::hasCVTermRDFAnnotation(const XMLNode *annotation) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers RDFAnnotationParser::hasHistoryRDFAnnotation(const XMLNode *annotation) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers RDFAnnotationParser::createRDFDescription(const std::string& metaid) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers RDFAnnotationParser::createRDFDescriptionWithCVTerms(const SBase *obj) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers RDFAnnotationParser::createRDFDescriptionWithHistory(const SBase *obj) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers RDFAnnotationParser::deriveCVTermsFromAnnotation(const XMLNode *annotation, List *CVTerms) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers RDFAnnotationParser::deriveHistoryFromAnnotation(const XMLNode *annotation) "
/** */ /* libsbml-internal */ public
";


%typemap(csimports) ISBMLExtensionNamespaces "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
 */
"


%typemap(csimports) SBaseExtensionPoint "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Representation of an extension point of SBML\'s package
 * extension.
 *
 * SBaseExtensionPoint represents an element to be extended (extension point) and the
 * extension point is identified by a combination of a package name and a typecode of the 
 * element.
 * 
 * <p>
 * For example, an SBaseExtensionPoint object which represents an extension point of the model
 * element defined in the <em>core</em> package can be created as follows:
 *
@verbatim
      SBaseExtensionPoint  modelextp(\'core\', SBML_MODEL);
@endverbatim
 * 
 * Similarly, an SBaseExtensionPoint object which represents an extension point of
 * the layout element defined in the layout extension can be created as follows:
 * 
@verbatim
      SBaseExtensionPoint  layoutextp(\'layout\', SBML_LAYOUT_LAYOUT);
@endverbatim
 * 
 * SBaseExtensionPoint object is required as one of arguments of the constructor 
 * of SBasePluginCreator&lt;class SBasePluginType, class SBMLExtensionType&gt;
 * template class to identify an extension poitnt to which the plugin object created
 * by the creator class is plugged in.
 * For example, the SBasePluginCreator class which creates a LayoutModelPlugin object
 * of the layout extension which is plugged in to the model element of the <em>core</em>
 * package can be created with the corresponding SBaseExtensionPoint object as follows:
 *
@verbatim
  // std::vector object that contains a list of URI (package versions) supported 
  // by the plugin object.
  std::vector<string> packageURIs;
  packageURIs.push_back(getXmlnsL3V1V1());
  packageURIs.push_back(getXmlnsL2());  

  // creates an extension point (model element of the \'core\' package)
  SBaseExtensionPoint  modelExtPoint(\'core\',SBML_MODEL);
   
  // creates an SBasePluginCreator object 
  SBasePluginCreator<LayoutModelPlugin, LayoutExtension>  modelPluginCreator(modelExtPoint,packageURIs);
@endverbatim
 *
 * This kind of code is implemented in init() function of each SBMLExtension derived classes.
 */
"


%csmethodmodifiers SBaseExtensionPoint::SBaseExtensionPoint(const std::string& pkgName, int typeCode) "
/**
   * constructor
   */ public
";


%csmethodmodifiers SBaseExtensionPoint::SBaseExtensionPoint(const SBaseExtensionPoint& rhs) "
/**
   * copy constructor
   */ public
";


%csmethodmodifiers SBaseExtensionPoint::clone() const "
/**
   * Creates and returns a deep copy of this SBaseExtensionPoint.
   * 
   * @return a (deep) copy of this SBaseExtensionPoint.
   */ public
";


%csmethodmodifiers SBaseExtensionPoint::getPackageName() const "
/**
   * Returns the package name of this extension point.
   */ public
";


%csmethodmodifiers SBaseExtensionPoint::getTypeCode() const "
/**
   * Returns the typecode of this extension point.
   */ public
";


%typemap(csimports) SBasePlugin "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Representation of a plug-in object of SBML\'s package
 * extension.
 * 
 * Additional attributes and/or elements of a package extension which are directly 
 * contained by some pre-defined element are contained/accessed by <a href=\'#SBasePlugin\'> 
 * SBasePlugin </a> class which is extended by package developers for each extension point.
 * The extension point, which represents an element to be extended, is identified by a 
 * combination of a Package name and a typecode of the element, and is represented by
 * SBaseExtensionPoint class.
 * </p>
 *
 * <p>
 * For example, the layout extension defines <em>&lt;listOfLayouts&gt;</em> element which is 
 * directly contained in <em>&lt;model&gt;</em> element of the core package. 
 * In the layout package (provided as one of example packages in libSBML-5), the additional 
 * element for the model element is implemented as ListOfLayouts class (an SBase derived class) and 
 * the object is contained/accessed by a LayoutModelPlugin class (an SBasePlugin derived class). 
 * </p>
 *
 * <p>
 * SBasePlugin class defines basic virtual functions for reading/writing/checking 
 * additional attributes and/or top-level elements which should or must be overridden by 
 * subclasses like SBase class and its derived classes.
 * </p>
 *
 * <p>
 *  Package developers must implement an SBasePlugin exntended class for 
 *  each element to be extended (e.g. SBMLDocument, Model, ...) in which additional 
 *  attributes and/or top-level elements of the package extension are directly contained.
 *</p>
 *
 *  To implement reading/writing functions for attributes and/or top-level 
 *  elements of the SBsaePlugin extended class, package developers should or must
 *  override the corresponding virtual functions below provided in the SBasePlugin class:
 *
 *   <ul>
 *     <li> <p>reading elements : </p>
 *       <ol>
 *         <li> <code>virtual SBase createObject (XMLInputStream stream) </code>
 *         <p>This function must be overridden if one or more additional elements are defined.</p>
 *         </li>
 *         <li> <code>virtual bool readOtherXML (SBase parentObject, XMLInputStream stream)</code>
 *         <p>This function should be overridden if elements of annotation, notes, MathML, etc. need 
 *            to be directly parsed from the given XMLInputStream object @if clike instead of the
 *            SBase::readAnnotation(XMLInputStream stream)
 *            and/or SBase::readNotes(XMLInputStream stream) functions@endif.
 *         </p> 
 *         </li>
 *       </ol>
 *     </li>
 *     <li> <p>reading attributes (must be overridden if additional attributes are defined) :</p>
 *       <ol>
 *         <li><code>virtual void addExpectedAttributes(ExpectedAttributes& attributes) </code></li>
 *         <li><code>virtual void readAttributes (XMLAttributes attributes, ExpectedAttributes& expectedAttributes)</code></li>
 *       </ol>
 *     </li>
 *     <li> <p>writing elements (must be overridden if additional elements are defined) :</p>
 *       <ol>
 *         <li><code>virtual void writeElements (XMLOutputStream stream) </code></li>
 *       </ol>
 *     </li>
 *     <li> <p>writing attributes : </p>
 *       <ol>
 *        <li><code>virtual void writeAttributes (XMLOutputStream stream) </code>
 *         <p>This function must be overridden if one or more additional attributes are defined.</p>
 *        </li>
 *        <li><code>virtual void writeXMLNS (XMLOutputStream stream) </code>
 *         <p>This function must be overridden if one or more additional xmlns attributes are defined.</p>
 *        </li>
 *       </ol>
 *     </li>
 *
 *     <li> <p>checking elements (should be overridden) :</p>
 *       <ol>
 *         <li><code>virtual bool hasRequiredElements() </code></li>
 *       </ol>
 *     </li>
 *
 *     <li> <p>checking attributes (should be overridden) :</p>
 *       <ol>
 *         <li><code>virtual bool hasRequiredAttributes() </code></li>
 *       </ol>
 *     </li>
 *   </ul>
 *
 *<p>
 *   To implement package-specific creating/getting/manipulating functions of the
 *   SBasePlugin derived class (e.g., getListOfLayouts(), createLyout(), getLayout(),
 *   and etc are implemented in LayoutModelPlugin class of the layout package), package
 *   developers must newly implement such functions (as they like) in the derived class.
 *</p>
 *
 *<p>
 *   SBasePlugin class defines other virtual functions of internal implementations
 *   such as:
 *
 *   <ul>
 *    <li><code> virtual void setSBMLDocument(SBMLDocument d) </code>
 *    <li><code> virtual void connectToParent(SBase sbase) </code>
 *    <li><code> virtual void enablePackageInternal(string pkgURI, string pkgPrefix, bool flag) </code>
 *   </ul>
 *
 *   These functions must be overridden by subclasses in which one or more top-level elements are defined.
 *</p>
 *
 *<p>
 *   For example, the following three SBasePlugin extended classes are implemented in
 *   the layout extension:
 *</p>
 *
 *<ol>
 *
 *  <li> <p><a href=\'class_s_b_m_l_document_plugin.html\'> SBMLDocumentPlugin </a> class for SBMLDocument element</p>
 *
 *    <ul>
 *         <li> <em> required </em> attribute is added to SBMLDocument object.
 *         </li>
 *    </ul>
 *
 *<p>
 *(<a href=\'class_s_b_m_l_document_plugin.html\'> SBMLDocumentPlugin </a> class is a common SBasePlugin 
 *extended class for SBMLDocument class. Package developers can use this class as-is if no additional 
 *elements/attributes (except for <em> required </em> attribute) is needed for the SBMLDocument class 
 *in their packages, otherwise package developers must implement a new SBMLDocumentPlugin derived class.)
 *</p>
 *
 *  <li> <p>LayoutModelPlugin class for Model element</p>
 *    <ul>
 *       <li> &lt;listOfLayouts&gt; element is added to Model object.
 *       </li>
 *
 *       <li> <p>
 *            The following virtual functions for reading/writing/checking
 *            are overridden: (type of arguments and return values are omitted)
 *            </p>
 *           <ul>
 *              <li> <code> createObject() </code> : (read elements)
 *              </li>
 *              <li> <code> readOtherXML() </code> : (read elements in annotation of SBML L2)
 *              </li>
 *              <li> <code> writeElements() </code> : (write elements)
 *              </li>
 *           </ul>
 *       </li>
 *
 *        <li> <p>
 *             The following virtual functions of internal implementations
 *             are overridden: (type of arguments and return values are omitted)
 *            </p>  
 *            <ul>
 *              <li> <code> setSBMLDocument() </code> 
 *              </li>
 *              <li> <code> connectToParent() </code>
 *              </li>
 *              <li> <code> enablePackageInternal() </code>
 *              </li>
 *            </ul>
 *        </li>
 *
 *
 *        <li> <p>
 *             The following creating/getting/manipulating functions are newly 
 *             implemented: (type of arguments and return values are omitted)
 *            </p>
 *            <ul>
 *              <li> <code> getListOfLayouts() </code>
 *              </li>
 *              <li> <code> getLayout ()  </code>
 *              </li>
 *              <li> <code> addLayout() </code>
 *              </li>
 *              <li> <code> createLayout() </code>
 *              </li>
 *              <li> <code> removeLayout() </code>
 *              </li>	   
 *              <li> <code> getNumLayouts() </code>
 *              </li>
 *           </ul>
 *        </li>
 *
 *    </ul>
 *  </li>
 *
 *  <li> <p>LayoutSpeciesReferencePlugin class for SpeciesReference element (used only for SBML L2V1) </p>
 *
 *      <ul>
 *        <li>
 *         <em> id </em> attribute is internally added to SpeciesReference object
 *          only for SBML L2V1 
 *        </li>
 *
 *        <li>
 *         The following virtual functions for reading/writing/checking
 *          are overridden: (type of arguments and return values are omitted)
 *        </li>
 *
 *         <ul>
 *          <li>
 *          <code> readOtherXML() </code>
 *          </li>
 *          <li>
 *          <code> writeAttributes() </code>
 *          </li>
 *        </ul>
 *      </ul>
 *    </li>
 *
 * </ol>
 */
"


%csmethodmodifiers SBasePlugin::getElementNamespace() const "
/**
   * Returns the XML namespace (URI) of the package extension
   * of this plugin object.
   *
   * @return the URI of the package extension of this plugin object.
   */ public
";


%csmethodmodifiers SBasePlugin::getPrefix() const "
/**
   * Returns the prefix of the package extension of this plugin object.
   *
   * @return the prefix of the package extension of this plugin object.
   */ public
";


%csmethodmodifiers SBasePlugin::getPackageName() const "
/**
   * Returns the package name of this plugin object.
   *
   * @return the package name of this plugin object.
   */ public
";


%csmethodmodifiers SBasePlugin::clone() const "
/**
   * Creates and returns a deep copy of this SBasePlugin object.
   * 
   * @return a (deep) copy of this SBase object
   */ public
";


%csmethodmodifiers SBasePlugin::getElementBySId(const std::string& id) "
/**
   * Returns the first child element found that has the given @p id in the model-wide SId namespace, or @c null if no such object is found.
   *
   * @param id string representing the id of objects to find
   *
   * @return pointer to the first element found with the given @p id.
   */ public
";


%csmethodmodifiers SBasePlugin::getElementByMetaId(const std::string& metaid) "
/**
   * Returns the first child element it can find with the given @p metaid, or @c null if no such object is found.
   *
   * @param metaid string representing the metaid of objects to find
   *
   * @return pointer to the first element found with the given @p metaid.
   */ public
";


%csmethodmodifiers SBasePlugin::getAllElements(ElementFilter* filter=NULL) "
/**
   * Returns a List of all child SBase objects, including those nested to an arbitrary depth
   *
   * @return a List of pointers to all children objects.
   */ public
";


%csmethodmodifiers SBasePlugin::setSBMLDocument(SBMLDocument* d) "
/**
   * Sets the parent SBMLDocument of this plugin object.
   *
   * Subclasses which contain one or more SBase derived elements must
   * override this function.
   *
   * @param d the SBMLDocument object to use
   *
   * @see connectToParent()
   * @see enablePackageInternal()
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBasePlugin::connectToParent(SBase *sbase) "
/**
   * Sets the parent SBML object of this plugin object to
   * this object and child elements (if any).
   * (Creates a child-parent relationship by this plugin object)
   *
   * This function is called when this object is created by
   * the parent element.
   * Subclasses must override this this function if they have one
   * or more child elements. Also, SBasePlugin::connectToParent(@if java SBase sbase@endif)
   * must be called in the overridden function.
   *
   * @param sbase the SBase object to use
   *
   * @if cpp 
   * @see setSBMLDocument()
   * @see enablePackageInternal()
   * @endif
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBasePlugin::enablePackageInternal(const std::string& pkgURI, const std::string& pkgPrefix, bool flag) "
/**
   * Enables/Disables the given package with child elements in this plugin 
   * object (if any).
   * (This is an internal implementation invoked from 
   *  SBase::enablePackageInternal() function)
   *
   * Subclasses which contain one or more SBase derived elements should 
   * override this function if elements defined in them can be extended by
   * some other package extension.
   *
   * @if cpp 
   * @see setSBMLDocument()
   * @see connectToParent()
   * @endif
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBasePlugin::stripPackage(const std::string& pkgPrefix, bool flag) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers SBasePlugin::getSBMLDocument "
/**
   * Returns the parent SBMLDocument of this plugin object.
   *
   * @return the parent SBMLDocument object of this plugin object.
   */ public
";


%csmethodmodifiers SBasePlugin::getSBMLDocument() const "
/**
   * Returns the parent SBMLDocument of this plugin object.
   *
   * @return the parent SBMLDocument object of this plugin object.
   */ public
";


%csmethodmodifiers SBasePlugin::getURI() const "
/**
   * Gets the URI to which this element belongs to.
   * For example, all elements that belong to SBML Level 3 Version 1 Core
   * must would have the URI \'http://www.sbml.org/sbml/level3/version1/core\'; 
   * all elements that belong to Layout Extension Version 1 for SBML Level 3
   * Version 1 Core must would have the URI
   * \'http://www.sbml.org/sbml/level3/version1/layout/version1/\'
   *
   * Unlike getElementNamespace, this function first returns the URI for this 
   * element by looking into the SBMLNamespaces object of the document with 
   * the its package name. if not found it will return the result of 
   * getElementNamespace
   *
   * @return the URI this elements  
   *
   * @see getPackageName()
   * @see getElementNamespace()
   * @see SBMLDocument::getSBMLNamespaces()
   * @see getSBMLDocument()
   */ public
";


%csmethodmodifiers SBasePlugin::getParentSBMLObject "
/**
   * Returns the parent SBase object to which this plugin 
   * object connected.
   *
   * @return the parent SBase object to which this plugin 
   * object connected.
   */ public
";


%csmethodmodifiers SBasePlugin::getParentSBMLObject() const "
/**
   * Returns the parent SBase object to which this plugin 
   * object connected.
   *
   * @return the parent SBase object to which this plugin 
   * object connected.
   */ public
";


%csmethodmodifiers SBasePlugin::setElementNamespace(const std::string &uri) "
/**
   * Sets the XML namespace to which this element belongs to.
   * For example, all elements that belong to SBML Level 3 Version 1 Core
   * must set the namespace to \'http://www.sbml.org/sbml/level3/version1/core\'; 
   * all elements that belong to Layout Extension Version 1 for SBML Level 3
   * Version 1 Core must set the namespace to 
   * \'http://www.sbml.org/sbml/level3/version1/layout/version1/\'
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers SBasePlugin::getLevel() const "
/**
   * Returns the SBML level of the package extension of 
   * this plugin object.
   *
   * @return the SBML level of the package extension of
   * this plugin object.
   */ public
";


%csmethodmodifiers SBasePlugin::getVersion() const "
/**
   * Returns the SBML version of the package extension of
   * this plugin object.
   *
   * @return the SBML version of the package extension of
   * this plugin object.
   */ public
";


%csmethodmodifiers SBasePlugin::getPackageVersion() const "
/**
   * Returns the package version of the package extension of
   * this plugin object.
   *
   * @return the package version of the package extension of
   * this plugin object.
   */ public
";


%csmethodmodifiers SBasePlugin::replaceSIDWithFunction(const std::string& id, const ASTNode* function) "
/**
   * If this object has a child \'math\' object (or anything with ASTNodes in general), replace all nodes with the name \'id\' with the provided function. 
   *
   * @note This function does nothing itself--subclasses with ASTNode subelements must override this function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBasePlugin::divideAssignmentsToSIdByFunction(const std::string& id, const ASTNode* function) "
/**
   * If the function of this object is to assign a value has a child \'math\' object (or anything with ASTNodes in general), replace  the \'math\' object with the function (existing/function).  
   *
   * @note This function does nothing itself--subclasses with ASTNode subelements must override this function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBasePlugin::multiplyAssignmentsToSIdByFunction(const std::string& id, const ASTNode* function) "
/**
   * If this assignment assigns a value to the \'id\' element, replace the \'math\' object with the function (existing*function). 
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBasePlugin::hasIdentifierBeginningWith(const std::string& prefix) "
/**
   * Check to see if the given prefix is used by any of the IDs defined by extension elements.  A package that defines its own \'id\' attribute for a core element would check that attribute here.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBasePlugin::prependStringToAllIdentifiers(const std::string& prefix) "
/**
   * Add the given string to all identifiers in the object.  If the string is added to anything other than an id or a metaid, this code is responsible for tracking down and renaming all *idRefs in the package extention that identifier comes from.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBasePlugin::transformIdentifiers(IdentifierTransformer* sidTransformer) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers SBasePlugin::getLine() const "
/**
   * Returns the line number on which this object first appears in the XML
   * representation of the SBML document.
   * 
   * @return the line number of the underlying SBML object.
   *
   * @note The line number for each construct in an SBML model is set upon
   * reading the model.  The accuracy of the line number depends on the
   * correctness of the XML representation of the model, and on the
   * particular XML parser library being used.  The former limitation
   * relates to the following problem: if the model is actually invalid
   * XML, then the parser may not be able to interpret the data correctly
   * and consequently may not be able to establish the real line number.
   * The latter limitation is simply that different parsers seem to have
   * their own accuracy limitations, and out of all the parsers supported
   * by libSBML, none have been 100% accurate in all situations. (At this
   * time, libSBML supports the use of <a target=\'_blank\'
   * href=\'http://xmlsoft.org\'>libxml2</a>, <a target=\'_blank\'
   * href=\'http://expat.sourceforge.net/\'>Expat</a> and <a target=\'_blank\'
   * href=\'http://xerces.apache.org/xerces-c/\'>Xerces</a>.)
   *
   * @see getColumn()
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBasePlugin::getColumn() const "
/**
   * Returns the column number on which this object first appears in the XML
   * representation of the SBML document.
   * 
   * @return the column number of the underlying SBML object.
   * 
   * @note The column number for each construct in an SBML model is set
   * upon reading the model.  The accuracy of the column number depends on
   * the correctness of the XML representation of the model, and on the
   * particular XML parser library being used.  The former limitation
   * relates to the following problem: if the model is actually invalid
   * XML, then the parser may not be able to interpret the data correctly
   * and consequently may not be able to establish the real column number.
   * The latter limitation is simply that different parsers seem to have
   * their own accuracy limitations, and out of all the parsers supported
   * by libSBML, none have been 100% accurate in all situations. (At this
   * time, libSBML supports the use of <a target=\'_blank\'
   * href=\'http://xmlsoft.org\'>libxml2</a>, <a target=\'_blank\'
   * href=\'http://expat.sourceforge.net/\'>Expat</a> and <a target=\'_blank\'
   * href=\'http://xerces.apache.org/xerces-c/\'>Xerces</a>.)
   * 
   * @see getLine()
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBasePlugin::getSBMLNamespaces() const "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers SBasePlugin::logUnknownElement(const std::string &element, const unsigned int sbmlLevel, const unsigned int sbmlVersion, const unsigned int pkgVersion ) "
/**
   * Helper to log a common type of error for elements.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBasePlugin::SBasePlugin(const std::string &uri, const std::string &prefix, SBMLNamespaces *sbmlns) "
/**
   * Constructor. Creates an SBasePlugin object with the URI and 
   * prefix of an package extension.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBasePlugin::SBasePlugin(const SBasePlugin& orig) "
/**
   * Copy constructor. Creates a copy of this SBase object.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBasePlugin::getErrorLog "
/**
   * Returns the SBMLErrorLog used to log errors while reading and
   * validating SBML.
   *
   * @return the SBMLErrorLog used to log errors while reading and
   * validating SBML.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBasePlugin::logUnknownAttribute(const std::string &attribute, const unsigned int sbmlLevel, const unsigned int sbmlVersion, const unsigned int pkgVersion, const std::string& element) "
/**
   * Helper to log a common type of error.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBasePlugin::logEmptyString(const std::string &attribute, const unsigned int sbmlLevel, const unsigned int sbmlVersion, const unsigned int pkgVersion, const std::string& element) "
/**
   * Helper to log a common type of error.
   */ /* libsbml-internal */ public
";


%typemap(csimports) SBMLDocumentPlugin "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Template class for the %SBMLDocument Plugin class needed
 * by all packages.
 *
 * Plugin objects for the SBMLDocument element must be this class or a
 * derived class of this class.  Package developers should use this class
 * as-is if only \'required\' attribute is added in the SBMLDocument element by
 * their packages.  Otherwise, developers must implement a derived class of
 * this class and use that class as the plugin object for the SBMLDocument
 * element.
 */
"


%csmethodmodifiers SBMLDocumentPlugin::SBMLDocumentPlugin(const std::string &uri, const std::string &prefix, SBMLNamespaces *sbmlns) "
/**
   *  Constructor
   *
   * @param uri the URI of package 
   * @param prefix the prefix for the given package
   * @param sbmlns the SBMLNamespaces object for the package
   */ public
";


%csmethodmodifiers SBMLDocumentPlugin::SBMLDocumentPlugin(const SBMLDocumentPlugin& orig) "
/**
   * Copy constructor. Creates a copy of this object.
   */ public
";


%csmethodmodifiers SBMLDocumentPlugin::clone() const "
/**
   * Creates and returns a deep copy of this SBMLDocumentPlugin object.
   * 
   * @return a (deep) copy of this object
   */ public new
";


%csmethodmodifiers SBMLDocumentPlugin::setRequired(bool value) "
/**
   *
   * Sets the bool value of \'required\' attribute of corresponding package
   * in SBMLDocument element.
   *
   * @param value the bool value of \'required\' attribute of corresponding 
   * package in SBMLDocument element.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   */ public
";


%csmethodmodifiers SBMLDocumentPlugin::getRequired() const "
/**
   *
   * Returns the bool value of \'required\' attribute of corresponding 
   * package in SBMLDocument element.
   *
   * @return the bool value of \'required\' attribute of corresponding
   * package in SBMLDocument element.
   */ public
";


%csmethodmodifiers SBMLDocumentPlugin::isSetRequired() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * SBMLDocumentPlugin\'s \'required\' attribute has been set.
   *
   * @return @c true if the \'required\' attribute of this SBMLDocument has been
   * set, @c false otherwise.
   */ public
";


%csmethodmodifiers SBMLDocumentPlugin::unsetRequired "
/**
   * Unsets the value of the \'required\' attribute of this SBMLDocumentPlugin.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers SBMLDocumentPlugin::isCompFlatteningImplemented() const "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers SBMLDocumentPlugin::checkConsistency "
/**
   * Check consistency function.
   */ /* libsbml-internal */ public
";


%typemap(csimports) SBMLExtension "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html The core component of SBML\'s package extension.
 *
 * SBMLExtension class (abstract class) is a core component of package extension
 * which needs to be extended by package developers. 
 * The class provides functions for getting common attributes of package extension 
 * (e.g., package name, package version, and etc.), functions for adding (registering) 
 * each instantiated SBasePluginCreator object, and a static function (defined in each 
 * SBMLExtension extended class) for initializing/registering the package extension 
 * when the library of the package is loaded.
 *
 * @section howto How to implement an SBMLExtension extended class for each package extension
 *
 * Package developers must implement an SBMLExtension extended class for
 * their packages (e.g. GroupsExtension class is implemented for groups extension).
 * The extended class is implemented based on the following steps:
 *
 * (NOTE: 
 *   \'src/packages/groups/extension/GroupsExtension.{h,cpp}\' and
 *   \'src/packages/layout/extension/LayoutExtension.{h,cpp}\' are
 *   example files in which SBMLExtension derived classes are implemented)
 *
 * <ol>
 *
 * <li> Define the following static functions in the extended class:
 *      (examples of groups extension are shown respectively)
 *   <ol>
 *     <li> <p>A string of package name (label) (The function name must be \'getPackageName\'.)</p>
 *         
@verbatim
  string GroupsExtension::getPackageName ()
  {
	static string pkgName = \'groups\';
	return pkgName;
  }
@endverbatim
 *     </li>
 *
 *     <li> <p>
 *        Methods returning an integer of Default SBML level, version, and package version
 *        (The method names must be \'getDefaultLevel()\', \'getDefaultVersion()\', and 
 *        \'getDefaultPackageVersion()\' respectively.)
 *        </p>
@verbatim
  long GroupsExtension::getDefaultLevel()
  {
	return 3;
  }  
  long GroupsExtension::getDefaultVersion()
  {
	return 1; 
  }
  long GroupsExtension::getDefaultPackageVersion()
  {
	return 1;
  }  
@endverbatim
 *     </li>
 *     <li> <p> Methods returning Strings that represent the URI of packages </p>
@verbatim
  string GroupsExtension::getXmlnsL3V1V1 ()
  {
	static string xmlns = \'http://www.sbml.org/sbml/level3/version1/groups/version1\';
	return xmlns;
  }
@endverbatim 
 *     </li>
 *     <li> <p>Strings that represent the other URI needed in this package (if any) </p>
 *     </li>
 *   </ol> 
 * </li>
 *
 * <li> Override the following pure virtual functions
      <ul>
       <li> <code>virtual string getName () =0</code>. This function returns the name of the package (e.g., \'layout\', \'groups\'). </li>
       <li> <code>virtual long getLevel (string uri) =0</code>. This function returns the SBML level with the given URI of this package. </li>
       <li> <code>virtual long getVersion (string uri) =0</code>. This function returns the SBML version with the given URI of this package. </li>
       <li> <code>virtual long getPackageVersion (string uri) =0</code>. This function returns the package version with the given URI of this package.</li>
       <li> <code>virtual long getURI (long sbmlLevel, long sbmlVersion, long pkgVersion) =0</code>. 
             This function returns the URI (namespace) of the package corresponding to the combination of the given sbml level, sbml version, and pacakege version</li>
       <li> <code>virtual SBMLExtension clone () = 0</code>. This function creates and returns a deep copy of this derived object.</li>
      </ul>
      <p>For example, the above functions are overridden in the groups
	package (\'src/packages/groups/extension/GroupsExtension.cpp\') as follows:</p>
@verbatim
string
GroupsExtension::getName() const
{
  return getPackageName();
}

long 
GroupsExtension::getLevel(string uri) const
{
  if (uri == getXmlnsL3V1V1())
  {
    return 3;
  }
  
  return 0;
}

long 
GroupsExtension::getVersion(string uri) const
{
  if (uri == getXmlnsL3V1V1())
  {
    return 1;
  }

  return 0;
}

long
GroupsExtension::getPackageVersion(string uri) const
{
  if (uri == getXmlnsL3V1V1())
  {
    return 1;
  }

  return 0;
}

string 
GroupsExtension::getURI(long sbmlLevel, long sbmlVersion, long pkgVersion) const
{
  if (sbmlLevel == 3)
  {
    if (sbmlVersion == 1)
    {
      if (pkgVersion == 1)
      {
        return getXmlnsL3V1V1();
      }
    }
  }

  static string empty = \'\';

  return empty;
}

GroupsExtension* 
GroupsExtension::clone () const
{
  return new GroupsExtension(*this);  
}
@endverbatim
 *
 * Constructor, copy Constructor, and destructor also must be overridden
 * if additional data members are defined in the derived class.
 *
 * </li>
 *
 * <li> <p>
 *  Define typedef and template instantiation code for the package specific SBMLExtensionNamespaces template class
 *  </p>
 *
 *   <ol>
 *     <li> typedef for the package specific SBMLExtensionNamespaces template class
 *       <p> For example, the typedef for GroupsExtension (defined in the groups package) is implemented in GroupsExtension.h as follows:</p>
@verbatim
  // GroupsPkgNamespaces is derived from the SBMLNamespaces class and used when creating an object of 
  // SBase derived classes defined in groups package.
  typedef SBMLExtensionNamespaces<GroupsExtension> GroupsPkgNamespaces;
@endverbatim
 *     </li>
 *
 *     <li> template instantiation code for the above typedef definition in the implementation file (i.e., *.cpp file).
 *       <p> For example, the template instantiation code for GroupsExtension is implemented in GroupsExtension.cpp 
 *           as follows:
 *       </p>
 *
@verbatim
  // Instantiate SBMLExtensionNamespaces<GroupsExtension> (GroupsPkgNamespaces) for DLL.
  template class LIBSBML_EXTERN SBMLExtensionNamespaces<GroupsExtension>;
@endverbatim
 *
 *     </li>
 *  </ol>
 *
 *  <p> The SBMLExtensionNamespaces template class is a derived class of
 *      SBMLNamespaces and can be used as an argument of constructors 
 *      of SBase derived classes defined in the package extensions.
 *      For example, a GroupsPkgNamespaces object can be used when creating a group 
 *      object as follows:
 *  </P>
@verbatim
   GroupPkgNamespaces gpns(3,1,1);  // The arguments are SBML Level, SBML Version, and Groups Package Version.

   Group g = new Group(&gpns);      // Creates a group object of L3V1 Groups V1.
@endverbatim
 *
 *   <p>
 *     Also, the GroupsPkgNamespaces object can be used when creating an
 *     SBMLDocument object with the groups package as follows:
 *   </p>
 *
@verbatim
   GroupsPkgNamespaces gpns(3,1,1);
   SBMLDocument doc;

   doc  = new SBMLDocument(&gnps); // Creates an SBMLDocument of L3V1 with Groups V1.
@endverbatim
 *
 * </li>
 *
 * <li> Override the following pure virtual function which returns the SBMLNamespaces derived object 
@verbatim
       virtual SBMLNamespaces getSBMLExtensionNamespaces (string uri) =0
@endverbatim
 *    <p> For example, the function is overridden in GroupsExtension
 class as follows:</p>
@verbatim
SBMLNamespaces
GroupsExtension::getSBMLExtensionNamespaces(string uri) const
{
  GroupsPkgNamespaces* pkgns = null;
  if ( uri == getXmlnsL3V1V1())
  {
    pkgns = new GroupsPkgNamespaces(3,1,1);    
  }  
  return pkgns;
}
@endverbatim
   </li>
 *  
 *
 *  <li> Define an enum type for representing the typecode of elements (SBase extended classes) defined in the package extension
 *
 *   <p>  For example, SBMLGroupsTypeCode_t for groups package is
 *  defined in GroupsExtension.h as follows: </p>
@verbatim
      typedef enum
      {
         SBML_GROUPS_GROUP  = 200
       , SBML_GROUPS_MEMBER = 201
      } SBMLGroupsTypeCode_t;
@endverbatim    
 *
 *  <p> <em>SBML_GROUPS_GROUP</em> corresponds to the Group class (&lt;group&gt;)
 * and <em>SBML_GROUPS_MEMBER</em> corresponds to the Member (&lt;member&gt;) class, respectively.
 *
 *
 *  <p> Similarly, #SBMLLayoutTypeCode_t 
 *   for layout package is defined in LayoutExtension.h as follows: </p>
 *
@verbatim  
      typedef enum
      {
         SBML_LAYOUT_BOUNDINGBOX           = 100
       , SBML_LAYOUT_COMPARTMENTGLYPH      = 101
       , SBML_LAYOUT_CUBICBEZIER           = 102
       , SBML_LAYOUT_CURVE                 = 103
       , SBML_LAYOUT_DIMENSIONS            = 104
       , SBML_LAYOUT_GRAPHICALOBJECT       = 105
       , SBML_LAYOUT_LAYOUT                = 106   
       , SBML_LAYOUT_LINESEGMENT           = 107   
       , SBML_LAYOUT_POINT                 = 108    
       , SBML_LAYOUT_REACTIONGLYPH         = 109    
       , SBML_LAYOUT_SPECIESGLYPH          = 110    
       , SBML_LAYOUT_SPECIESREFERENCEGLYPH = 111
       , SBML_LAYOUT_TEXTGLYPH             = 112
      } SBMLLayoutTypeCode_t;
@endverbatim
 *
 *  <p>
 *   These enum values are returned by corresponding getTypeCode() functions.
 *   (e.g. SBML_GROUPS_GROUP is returned in Group::getTypeCode())
 *  </p>
 *
 *  <p>
 *   The value of each typecode can be duplicated between those of different 
 *   packages (In the above SBMLayoutTypeCode_t and SBMLGroupsTypeCode_t types, 
 *   unique values are assigned to enum values, but this is not mandatory.)
 *  </p>
 *
 *  <p>
 *   Thus, to distinguish the typecodes of different packages, not only the return
 *   value of getTypeCode() function but also that of getPackageName()
 *   function should be checked as follows:
 *  </p>
@verbatim
          void example (SBase sb)
          {
            string pkgName = sb->getPackageName();
            if (pkgName == \'core\') {
              switch (sb->getTypeCode()) {
                case SBML_MODEL:
                   ....
                   break;
                case SBML_REACTION:
                   ....
              }
            } 
            else if (pkgName == \'layout\') {
              switch (sb->getTypeCode()) {
                case SBML_LAYOUT_LAYOUT:
                   ....
                   break;
                case SBML_LAYOUT_REACTIONGLYPH:
                   ....
              }
            } 
            else if (pkgName == \'groups\') {
              switch (sb->getTypeCode()) {
                case SBML_GROUPS_GROUP:
                   ....
                   break;
                case SBML_GROUPS_MEMBER:
                   ....
              }
            }
            ...
          } 
@endverbatim
 *
 *  </li>
 *  <li> Override the following pure virtual function which returns a string corresponding to the given typecode:
 *  
@verbatim  
       virtual string SBMLExtension::getStringFromTypeCode(int typeCode) const;
@endverbatim 
 *
 *   <p> For example, the function for groups extension is implemented as follows: </p>
@verbatim  
static
string SBML_GROUPS_TYPECODE_STRINGS[] =
{
    \'Group\'
  , \'Member\'
};

string 
GroupsExtension::getStringFromTypeCode(int typeCode) const
{
  int min = SBML_GROUPS_GROUP;
  int max = SBML_GROUPS_MEMBER;

  if ( typeCode < min || typeCode > max)
  {
    return \'(Unknown SBML Groups Type)\';  
  }

  return SBML_GROUPS_TYPECODE_STRINGS[typeCode - min];
}
@endverbatim 
 *
 *  </li>
 *
 * <li> Implements a \'static void init()\' function in the derived class
 *
 * <p> In the init() function, initialization code which creates an instance of 
 *     the derived class and registering code which registers the instance to 
 *     SBMLExtensionRegistry class are implemented.
 * </p>
 * 
 * For example, the init() function for groups package is implemented as follows: 
@verbatim
void 
GroupsExtension::init()
{
  //-------------------------------------------------------------------------
  //
  // 1. Checks if the groups package has already been registered.
  //
  //-------------------------------------------------------------------------

  if ( SBMLExtensionRegistry::getInstance().isRegistered(getPackageName()) )
  {
    // do nothing;
    return;
  }

  //-------------------------------------------------------------------------
  //
  // 2. Creates an SBMLExtension derived object.
  //
  //-------------------------------------------------------------------------

  GroupsExtension groupsExtension;

  //-------------------------------------------------------------------------------------
  //
  // 3. Creates SBasePluginCreatorBase derived objects required for this 
  //    extension. The derived classes can be instantiated by using the following 
  //     template class.
  //
  //    temaplate<class SBasePluginType> class SBasePluginCreator
  //
  //    The constructor of the creator class has two arguments:
  //
  //        (1) SBaseExtensionPoint : extension point to which the plugin object connected
  //        (2) std::vector<string> : a std::vector object that contains a list of URI
  //                                       (package versions) supported by the plugin object.
  //
  //    For example, two plugin objects (plugged in SBMLDocument and Model elements) are 
  //    required for the groups extension.
  //
  //    Since only \'required\' attribute is used in SBMLDocument by the groups package, and
  //    the \'required\' flag must always be \'false\', the existing
  //    SBMLDocumentPluginNotRequired class can be used as-is for the plugin.
  //
  //    Since the lists of supported package versions (currently only L3V1-groups-V1 supported )
  //    are equal in the both plugin objects, the same vector object is given to each 
  //    constructor.
  //
  //---------------------------------------------------------------------------------------

  std::vector<string> packageURIs;
  packageURIs.push_back(getXmlnsL3V1V1());

  SBaseExtensionPoint sbmldocExtPoint(\'core\',SBML_DOCUMENT);
  SBaseExtensionPoint modelExtPoint(\'core\',SBML_MODEL);

  SBasePluginCreator<SBMLDocumentPluginNotRequired, GroupsExtension> sbmldocPluginCreator(sbmldocExtPoint,packageURIs);
  SBasePluginCreator<GroupsModelPlugin,   GroupsExtension> modelPluginCreator(modelExtPoint,packageURIs);

  //--------------------------------------------------------------------------------------
  //
  // 3. Adds the above SBasePluginCreatorBase derived objects to the SBMLExtension derived object.
  //
  //--------------------------------------------------------------------------------------

  groupsExtension.addSBasePluginCreator(&sbmldocPluginCreator);
  groupsExtension.addSBasePluginCreator(&modelPluginCreator);

  //-------------------------------------------------------------------------
  //
  // 4. Registers the SBMLExtension derived object to SBMLExtensionRegistry
  //
  //-------------------------------------------------------------------------

  int result = SBMLExtensionRegistry::getInstance().addExtension(&groupsExtension);

  if (result != LIBSBML_OPERATION_SUCCESS)
  {
    std::cerr << \'[Error] GroupsExtension::init() failed.\' << std::endl;
  }
}
@endverbatim
 *    </p> 
 * </li>
 *
 * <li> Instantiate a global SBMLExtensionRegister variable in appropriate 
 *      implementation file
 *       
 * <p> For example, the global variable for the groups extension is instantiated in GroupsExtension.cpp as follows: </p>
@verbatim
  static SBMLExtensionRegister<GroupsExtension> groupsExtensionRegister;
@endverbatim
 *    The init() function is invoked when the global variable is instantiated,
 *    by which initialization and registering the package extension are performed.
 * </li>
 *
 *
 * </ol>
 * 
 */
"


%csmethodmodifiers getNumOfSBasePlugins() const "
/**
   * Returns the number of SBasePlugin objects stored in this object.
   *
   * @return the number of SBasePlugin objects stored in this object.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers getNumOfSupportedPackageURI() const "
/**
   * Returns the number of supported package Namespace (package versions) of this 
   * package extension.
   *
   * @return the number of supported package Namespace (package versions) of this 
   * package extension.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers isSupported(const std::string& uri) const "
/**
   * Returns a flag indicating, whether the given URI (package version) is 
   * supported by this package extension.
   *
   * @return true if the given URI (package version) is supported by this 
   * package extension, otherwise false is returned.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers getSupportedPackageURI "
/**
   *
   * Returns the ith URI (the supported package version)
   *
   * @param i the index of the list of URI (the list of supporeted package versions)
   * @return the URI of supported package version with the given index.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers clone() const "
/**
   *  (NOTICE) Package developers MUST OVERRIDE this pure virtual function 
   *           in their derived class.
   *
   * Creates and returns a deep copy of this SBMLExtension object.
   *
   * @return a (deep) copy of this SBase object
   */ /* libsbml-internal */ public
";


%csmethodmodifiers getName() const "
/**
   *  (NOTICE) Package developers MUST OVERRIDE this pure virtual function 
   *           in their derived class.
   *
   * Returns the name of this package (e.g. \'layout\', \'multi\').
   *
   * @return the name of package extension
   */ /* libsbml-internal */ public
";


%csmethodmodifiers getURI "
/**
   *  (NOTICE) Package developers MUST OVERRIDE this pure virtual function 
   *           in their derived class.
   *
   * Returns the uri corresponding to the given SBML level, SBML version, and package version.
   *
   * @param sbmlLevel the level of SBML
   * @param sbmlVersion the version of SBML
   * @param pkgVersion the version of package
   *
   * @return a string of the package URI
   */ /* libsbml-internal */ public
";


%csmethodmodifiers getLevel(const std::string &uri) const "
/**
   *  (NOTICE) Package developers MUST OVERRIDE this pure virtual function 
   *           in their derived class.
   *
   * Returns the SBML level associated with the given URI of this package.
   *
   * @param uri the string of URI that represents a versions of the package
   * @return the SBML level associated with the given URI of this package.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers getVersion(const std::string &uri) const "
/**
   *  (NOTICE) Package developers MUST OVERRIDE this pure virtual function 
   *           in their derived class.
   *
   * Returns the SBML version associated with the given URI of this package.
   *
   * @param uri the string of URI that represents a versions of the package
   * @return the SBML version associated with the given URI of this package.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers getPackageVersion(const std::string &uri) const "
/**
   *  (NOTICE) Package developers MUST OVERRIDE this pure virtual function 
   *           in their derived class.
   *
   * Returns the package version associated with the given URI of this package.
   *
   * @param uri the string of URI that represents a versions of this package
   * @return the package version associated with the given URI of this package.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers getStringFromTypeCode(int typeCode) const "
/**
   *  (NOTICE) Package developers MUST OVERRIDE this pure virtual function 
   *           in their derived class.
   *
   * This method takes a type code of this package and returns a string 
   * representing the code.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers getSBMLExtensionNamespaces(const std::string &uri) const "
/**
   *  (NOTICE) Package developers MUST OVERRIDE this pure virtual function in 
   *           their derived class.
   *
   * Returns an SBMLExtensionNamespaces<class SBMLExtensionType> object 
   * (e.g. SBMLExtensionNamespaces<LayoutExtension> whose alias type is 
   * LayoutPkgNamespaces) corresponding to the given uri.
   * Null will be returned if the given uri is not defined in the corresponding 
   * package.
   *
   * @param uri the string of URI that represents one of versions of the package
   * @return an SBMLExtensionNamespaces<class SBMLExtensionType> object. null
   *         will be returned if the given uri is not defined in the corresponding 
   *         package. 
   */ /* libsbml-internal */ public
";


%csmethodmodifiers setEnabled(bool isEnabled) "
/**
   * enable/disable this package.
   * Returned value is the result of this function.
   *
   * @param isEnabled the bool value: true (enabled) or false (disabled)
   *
   * @return true if this function call succeeded, otherwise false is returned.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers isEnabled() const "
/**
   * Check if this package is enabled (true) or disabled (false).
   *
   * @return true if this package is enabled, otherwise false is returned.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers removeL2Namespaces(XMLNamespaces* xmlns) const "
/**
   * Removes the L2 Namespaces. 
   *
   * This method should be overridden by all extensions that want to serialize
   * to an L2 annotation.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers addL2Namespaces(XMLNamespaces *xmlns) const "
/**
   * Adds all L2 Extension namespaces to the namespace list. 
   * 
   * This method should be overridden by all extensions that want to serialize
   * to an L2 annotation.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers enableL2NamespaceForDocument(SBMLDocument* doc) const "
/**
   * Adds the L2 Namespace to the document and enables the extension.
   *
   * If the extension supports serialization to SBML L2 Annotations, this 
   * method should be overrridden, so it will be activated.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers isInUse(SBMLDocument *doc) const "
/** 
   * Indicates whether this extension is being used by the given SBMLDocument.
   *
   * The default implementation returns true. This means that when a document
   * had this extension enabled, it will not be possible to convert it to L2
   * as we cannot make sure that the extension can be converted.
   * 
   * @param doc the SBML document to test. 
   * 
   * @return a bool indicating whether the extension is actually being used
   *         by the document. 
   */ /* libsbml-internal */ public
";


%csmethodmodifiers getErrorTableIndex "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers SBMLExtensionException::SBMLExtensionException(const std::string& errmsg) throw() "
/** 
   * constructor 
   */ public
";


%typemap(csimports) SBMLExtensionNamespaces "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Class to store the Level, Version and XML namespace
 * information of an SBML extension package.
 *
 */
"


%csmethodmodifiers SBMLExtensionNamespaces::SBMLExtensionNamespaces(const SBMLExtensionNamespaces& orig) "
/**
   * Copy constructor; creates a copy of a SBMLExtensionNamespaces.
   * 
   * @param orig the SBMLExtensionNamespaces instance to copy.
   */ public
";


%typemap(csimports) SBMLExtensionRegistry "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{core}
 *
@htmlinclude pkg-marker-core.html Registry class in which extension packages are registered.
 *
 */
"


%csmethodmodifiers SBMLExtensionRegistry::getInstance "
/**
   *
   * Returns an instance (singleton) of the SBMLExtensionRegistry class.
   * This function needs to be invoked when manipulating the SBMLExtensionRegistry class. 
   *
   * @return the instance of the SBMLExtensionRegistry object.
   */ public
";


%csmethodmodifiers SBMLExtensionRegistry::addExtension(const SBMLExtension* ext) "
/**
   * Add the given SBMLExtension to this SBMLExtensionRegistry.
   *
   * @param ext the SBMLExtension object to be added.
   *   
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_PKG_CONFLICT LIBSBML_PKG_CONFLICT @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers SBMLExtensionRegistry::getExtension(const std::string& package) "
/**
   * Returns an SBMLExtension object with the given package URI or package name (string).
   *
   * @param package the URI or name of the package extension
   *
   * @return a clone of the SBMLExtension object with the given package URI or name. The returned 
   *         extension is to be freed (i.e.: deleted) by the caller!
   */ public
";


%csmethodmodifiers SBMLExtensionRegistry::removeL2Namespaces(XMLNamespaces *xmlns) const "
/**
   * Remove all L2 Extension namespaces from the namespace list. This will call all 
   * overriden SBMLExtension::removeL2Namespaces methods.
   */ public
";


%csmethodmodifiers SBMLExtensionRegistry::addL2Namespaces(XMLNamespaces *xmlns) const "
/**
   * adds all L2 Extension namespaces to the namespace list. This will call all 
   * overriden SBMLExtension::addL2Namespaces methods.
   */ public
";


%csmethodmodifiers SBMLExtensionRegistry::enableL2NamespaceForDocument(SBMLDocument* doc) const "
/**
   * Enables all extensions that support serialization / deserialization with
   * SBML Annotations.
   */ public
";


%csmethodmodifiers SBMLExtensionRegistry::disableUnusedPackages(SBMLDocument *doc) "
/** 
   * Goes through all extensions in the list of plugins of the given document
   * and disables all plugins that are not being used. 
   */ public
";


%csmethodmodifiers SBMLExtensionRegistry::disablePackage(const std::string& package) "
/**
   * Disables the package with the given URI / name.
   */ public
";


%csmethodmodifiers SBMLExtensionRegistry::getNumExtension(const SBaseExtensionPoint& extPoint) "
/**
   * Returns the number of SBMLExtension with the given extension point.
   *
   * @param extPoint the SBaseExtensionPoint
   *
   * @return the number of SBMLExtension with the given extension point.
   */ public
";


%csmethodmodifiers SBMLExtensionRegistry::setEnabled(const std::string& uri, bool isEnabled) "
/**
   * Enable/disable the package with the given uri.
   *
   * @param uri the URI of the target package.
   * @param isEnabled the bool value corresponding to enabled (true) or 
   * disabled (false)
   *
   * @return false will be returned if the given bool value is false 
   * or the given package is not registered, otherwise true will be
   * returned.
   */ public
";


%csmethodmodifiers SBMLExtensionRegistry::isEnabled(const std::string& uri) "
/**
   * Checks if the extension with the given URI is enabled (true) or 
   * disabled (false)
   *
   * @param uri the URI of the target package.
   *
   * @return false will be returned if the given package is disabled 
   * or not registered, otherwise true will be returned.
   */ public
";


%csmethodmodifiers SBMLExtensionRegistry::isRegistered(const std::string& uri) "
/**
   * Checks if the extension with the given URI is registered (true) 
   * or not (false)
   *
   * @param uri the URI of the target package.
   *
   * @return true will be returned if the package with the given URI
   * is registered, otherwise false will be returned.
   */ public
";


%csmethodmodifiers SBMLExtensionRegistry::getRegisteredPackageNames "
/** 
   * Returns a list of registered packages (such as \'layout\', \'fbc\' or \'comp\')
   * the list contains char* strings and has to be freed by the caller. 
   * 
   * @return the names of the registered packages in a list
   */ public
";


%csmethodmodifiers SBMLExtensionRegistry::getNumRegisteredPackages "
/** 
   * Returns the number of registered packages.
   * 
   * @return the number of registered packages.
   */ public
";


%csmethodmodifiers SBMLExtensionRegistry::getRegisteredPackageName(unsigned int index) "
/** 
   * Returns the registered package name at the given index
   * 
   * @param index zero based index of the package name to return
   * 
   * @return the package name with the given index or null
   */ public
";


%csmethodmodifiers SBMLExtensionRegistry::SBMLExtensionRegistry "
/** */ public
";


%csmethodmodifiers SBMLExtensionRegistry::SBMLExtensionRegistry(const SBMLExtensionRegistry& orig) "
/** */ public
";


%typemap(csimports) OStream "
 using System;
 using System.Runtime.InteropServices;

/** 
 * Wrapper class for the C++ standard streams <code>cout</code>,
 * <code>cerr</code>, and <code>clog</code>.
 *
 * A few libSBML methods accept an argument for indicating where to send
 * text string output.  An example is the SBMLDocument::printErrors(OStream
 * stream) method. However, the methods use C++ style streams and not Java
 * stream objects.  The OStream object exists to bridge the Java and
 * underlying native implementation.  It is a simple wrapper around the
 * underlying stream object and provides a few basic methods for
 * manipulating it.
 * 
 */
"


%typemap(csimports) OFStream "
 using System;
 using System.Runtime.InteropServices;

/** 
 * Wrapper class for the C++ standard file stream <code>ofstream</code>.
 *
 * The C++ <code>ofstream</code> (\'output file stream\') provides an
 * interface for writing data to files as output streams.  This class,
 * OFStream, wraps the C++ <code>ofstream</code> and provides an OStream
 * interface to it.  The file to be associated with the stream can be
 * specified as a parameter to the constructors in this class.
 *
 * This class may be useful because some libSBML methods accept an argument
 * for indicating where to send text string output.  An example is the
 * SBMLDocument::printErrors(OStream stream) method.  The methods use C++ style streams
 * and not Java stream objects.  The OStream object exists to bridge the
 * Java and underlying native implementation.  It is a simple wrapper
 * around the underlying stream object and provides a few basic methods for
 * manipulating it.
 *
 */
"


%typemap(csimports) OStringStream "
 using System;
 using System.Runtime.InteropServices;

/** 
 * Wrapper class for the C++ standard stream <code>ostringstream</code>.
 * 
 * The C++ <code>ostringstream</code> (\'output string stream class\')
 * provides an interface to manipulating strings as if they were output
 * streams.  This class class, OStringStream, wraps the
 * <code>ostringstream</code> and provides an OStream interface to it.
 * 
 * This class may be useful because some libSBML methods accept an argument
 * for indicating where to send text string output.  An example is the 
 * SBMLDocument::printErrors(OStream stream) method.  The methods use
 * C++ style streams and not Java stream objects.  The OStream object
 * exists to bridge the Java and underlying native implementation.  It is a
 * simple wrapper around the underlying stream object and provides a few
 * basic methods for manipulating it.
 */
"


%csmethodmodifiers OStream::OStream(StdOSType sot = COUT) "
/**
      * Creates a new OStream object with one of standard output stream objects.
      * 
      * @param sot a value from the StdOSType enumeration(COUT, CERR, or CLOG) 
			* indicating the type of stream to create.
      */ public
";


%csmethodmodifiers OStream::get_ostream "
/**
     * Returns the stream object.
     * <p>
     * @return the stream object
     */ public
";


%csmethodmodifiers OStream::endl "
/**
     * Writes an end-of-line character on this tream.
     */ public
";


%csmethodmodifiers OFStream::OFStream(const std::string& filename, bool is_append = false) "
/**
     * Creates a new OFStream object for a file.
     * <p>
     * This opens the given file @p filename with the @p is_append flag
     * (default is <code>false</code>), and creates an OFStream object
     * instance that associates the file\'s content with an OStream object.
     * <p>
     * @param filename the name of the file to open
     * @param is_append whether to open the file for appending (default:
     * <code>false</code>, meaning overwrite the content instead)
     * 
     * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
     */ public
";


%csmethodmodifiers OFStream::open(const std::string& filename, bool is_append = false) "
/**
     * Opens a file and associates this stream object with it.
     * <p>
     * This method opens a given file @p filename with the given
     * @p is_append flag (whose default value is <code>false</code>),
     * and associates <i>this</i> stream object with the file\'s content.
     * <p>
     * @param filename the name of the file to open
     * @param is_append whether to open the file for appending (default:
     * <code>false</code>, meaning overwrite the content instead)
     * 
     * @if notcpp @htmlinclude warn-default-args-in-docs.html @endif
     */ public
";


%csmethodmodifiers OFStream::close "
/**
     * Closes the file currently associated with this stream object.
     */ public
";


%csmethodmodifiers OFStream::is_open "
/**
     * Returns <code>true</code> if this stream object is currently
     * associated with a file.
     * <p>
     * @return <code>true</code> if the stream object is currently
     * associated with a file, <code>false</code> otherwise
     */ public
";


%csmethodmodifiers OStringStream::OStringStream "
/**
     * Creates a new OStringStream object
     */ public
";


%csmethodmodifiers OStringStream::str "
/**
     * Returns the copy of the string object currently assosiated 
     * with this <code>ostringstream</code> buffer.
     * <p>
     * @return a copy of the string object for this stream
     */ public
";


%csmethodmodifiers OStringStream::str(const std::string& s) "
/**
     * Sets string @p s to the string object currently assosiated with
     * this stream buffer.
     * <p>
     * @param s the string to write to this stream
     */ public
";


%typemap(csimports) CompExtension "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{comp}
 *
@htmlinclude pkg-marker-comp.html The core module of the &ldquo;comp&rdquo; package
 * extension.
 *
 */
"


%typemap(csimports) CompPkgNamespaces "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{comp}
 *
@htmlinclude pkg-marker-comp.html Extension of SBMLNamespaces for the SBML Level&nbsp;3
 * \'comp\' package.
 */
"


%csmethodmodifiers CompExtension::getPackageName "
/**
   * Returns the package name of this extension.
   */ public
";


%csmethodmodifiers CompExtension::getDefaultLevel "
/**
   * Returns the default SBML Level this extension.
   */ public
";


%csmethodmodifiers CompExtension::getDefaultVersion "
/**
   * Returns the default SBML Version this extension.
   */ public
";


%csmethodmodifiers CompExtension::getDefaultPackageVersion "
/**
   * Returns the default SBML version this extension.
   */ public
";


%csmethodmodifiers CompExtension::getXmlnsL3V1V1 "
/**
   * Returns URI of supported versions of this package.
   */ public
";


%csmethodmodifiers CompExtension::CompExtension "
/**
   * Constructor
   */ public
";


%csmethodmodifiers CompExtension::CompExtension(const CompExtension&) "
/**
   * Copy constructor.
   */ public
";


%csmethodmodifiers CompExtension::clone() const "
/**
   * Creates and returns a deep copy of this CompExtension object.
   * 
   * @return a (deep) copy of this CompExtension object
   */ public new
";


%csmethodmodifiers CompExtension::getName() const "
/**
   * Returns the name of this package as a short-form label
   * (&quot;<code>comp</code>&quot;).
   *
   * @return the name of this package.
   */ public
";


%csmethodmodifiers CompExtension::getURI "
/**
   * Returns the namespace URI corresponding to the combination of the given
   * SBML Level, Version, and package version.
   *
   * @param sbmlLevel the level of SBML
   * @param sbmlVersion the version of SBML
   * @param pkgVersion the version of package
   *
   * @return a string of the package URI, or an empty string if no
   * corresponding URI exists.
   */ public
";


%csmethodmodifiers CompExtension::getLevel(const std::string &uri) const "
/**
   * Returns the SBML Level for the given URI of this package.
   *
   * @param uri the string of URI that represents one of versions of the
   * &ldquo;comp&rdquo; package
   *
   * @return the SBML Level with the given URI of this package, or @c 0 if
   * the given URI is invalid.
   */ public
";


%csmethodmodifiers CompExtension::getVersion(const std::string &uri) const "
/**
   * Returns the SBML Version for the given URI of this package.
   *
   * @param uri the string of URI that represents one of versions of the
   * &ldquo;comp&rdquo; package
   *
   * @return the SBML version with the given URI of this package, or @c 0 if
   * the given URI is invalid.
   */ public
";


%csmethodmodifiers CompExtension::getPackageVersion(const std::string &uri) const "
/**
   * Returns the package version for the given URI of this package.
   *
   * @param uri the string of URI that represents one of versions of the
   * &ldquo;comp&rdquo; package
   *
   * @return the package version with the given URI of this package, or @c 0
   * if the given URI is invalid.
   */ public
";


%csmethodmodifiers CompExtension::getSBMLExtensionNamespaces(const std::string &uri) const "
/**
   * Returns an CompPkgNamespaces object.
   *
   * @param uri the string of URI that represents one of versions of the
   * &ldquo;comp&rdquo; package
   *
   * @return an CompPkgNamespace object corresponding to the given @p uri, or
   * @c null if the URI is not defined in the Hierarchical %Model Composition
   * package.
   */ public
";


%csmethodmodifiers CompExtension::getStringFromTypeCode(int typeCode) const "
/**
   * Takes a type code of the &ldquo;comp&rdquo; package and returns a string
   * describing the code.
   */ public
";


%csmethodmodifiers CompExtension::init "
/**
   * Initializes comp extension by creating an object of this class with 
   * required SBasePlugin derived objects and registering the object 
   * to the SBMLExtensionRegistry class.
   *
   * (NOTE) This function is automatically invoked when creating the following
   *        global object in CompExtension.cpp
   *
   *        static SBMLExtensionRegister<CompExtension> compExtensionRegistry;
   *
   */ /* libsbml-internal */ public
";


%csmethodmodifiers CompExtension::getErrorTable "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers CompExtension::getErrorTableIndex "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers CompExtension::getErrorIdOffset() const "
/** */ /* libsbml-internal */ public new
";


%typemap(csimports) CompSBasePlugin "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{comp}
 *
@htmlinclude pkg-marker-comp.html Implementation of the &ldquo;comp&rdquo; package
 * extention to the %SBase construct.
 *
 * The CompSBasePlugin class inherits from the SBasePlugin class, 
 * and codifies the extentions to the SBase class defined in the
 * @ref comp @if java \'Hierarchical %Model Composition\'@endif 
 * package (&ldquo;comp&rdquo;).  This extention allows the modeler to define
 * one or more submodel elements which the parent SBase object replaces,
 * and/or a single submodel element which replaces the parent SBase object.

 * This is accomplished through the addition of an optional ListOfReplacedElements
 * child, which may contain one or more ReplacedElement objects, each of which 
 * references a submodel object to be replaced by the containing SBase object, 
 * and through the addition of a single optional ReplacedBy child, which 
 * references a submodel object which is to replace the containing SBase object.

 * If a single SBase element both contains a ListOfReplacedElements and has a ReplacedBy
 * child, it and all the referenced ReplacedElement objects are to be replaced
 * by the object referenced by the ReplacedBy element.
 *
 * @see ReplacedElement
 * @see ReplacedBy
 */
"


%csmethodmodifiers CompSBasePlugin::CompSBasePlugin(const std::string &uri, const std::string &prefix, CompPkgNamespaces *compns) "
/**
   * Constructor.
   */ public
";


%csmethodmodifiers CompSBasePlugin::CompSBasePlugin(const CompSBasePlugin& orig) "
/**
   * Copy constructor. Creates a copy of this CompSBasePlugin object.
   */ public
";


%csmethodmodifiers CompSBasePlugin::clone() const "
/**
   * Creates and returns a deep copy of this CompSBasePlugin object.
   * 
   * @return a (deep) copy of this CompSBasePlugin object
   */ public
";


%csmethodmodifiers CompSBasePlugin::createObject(XMLInputStream& stream) "
/**
   * Create and return an SBML object of this class, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or @c null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers CompSBasePlugin::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses must override this method to write out their contained
   * SBML objects as XML elements if they have their specific elements.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers CompSBasePlugin::getElementBySId(const std::string& id) "
/**
   * Returns the first child element found that has the given @p id in the
   * model-wide SId namespace, or @c null if no such object is found.
   *
   * @param id string representing the id of objects to find
   *
   * @return a pointer to the SBase element with the given @p id.
   */ public
";


%csmethodmodifiers CompSBasePlugin::getElementByMetaId(const std::string& metaid) "
/**
   * Returns the first child element it can find with the given @p metaid, or
   * itself if it has the given @p metaid, or @c null if no such object is
   * found.
   *
   * @param metaid string representing the metaid of objects to find
   *
   * @return a pointer to the SBase element with the given @p metaid.
   */ public
";


%csmethodmodifiers CompSBasePlugin::getAllElements(ElementFilter* filter=NULL) "
/**
   * Returns a List of all child SBase objects, including those nested to an
   * arbitrary depth.
   *
   * @return a List of pointers to all children objects.
   */ public
";


%csmethodmodifiers CompSBasePlugin::getListOfReplacedElements() const "
/**
   * Returns the ListOf object that holds all replacedElements.
   *
   * @return the ListOf object that holds all replacedElements.
   */ public
";


%csmethodmodifiers CompSBasePlugin::getReplacedElement(unsigned int n) "
/**
   * Returns the ReplacedElement with the given index.
   *
   * @param n the index number of the ReplacedElement to get.
   *
   * @return the nth ReplacedElement in the ListOfReplacedElements.  If the
   * index is invalid, @c null is returned.
   */ public
";


%csmethodmodifiers CompSBasePlugin::getReplacedElement "
/**
   * Returns the ReplacedElement with the given index.
   *
   * @param n the index number of the ReplacedElement to get.
   *
   * @return the nth ReplacedElement in the ListOfReplacedElements.  If the
   * index is invalid, @c null is returned.
   */ public
";


%csmethodmodifiers CompSBasePlugin::addReplacedElement(const ReplacedElement* replacedElement) "
/**
   * Adds a copy of the given ReplacedElement object to the list of ReplacedElements.
   *
   * @param replacedElement the ReplacedElement object to be added to the
   * list of ReplacedElements.  Fails if the added ReplacedElement is @c null,
   * does not match the level/version/package of the parent object, or cannot
   * be added to the list of replaced elements.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_PKG_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH @endlink
   */ public
";


%csmethodmodifiers CompSBasePlugin::getNumReplacedElements() const "
/**
   * Returns the number of ReplacedElements for this CompSBasePlugin.
   *
   * @return the number of ReplacedElements for this CompSBasePlugin.
   */ public
";


%csmethodmodifiers CompSBasePlugin::clearReplacedElements "
/**
   * Remove all ReplacedElements, if any exist.
   */ public
";


%csmethodmodifiers CompSBasePlugin::createReplacedElement "
/**
   * Creates a ReplacedElement object, adds it to the end of the
   * ReplacedElement objects list and returns a pointer to the newly
   * created object.
   *
   * @return a newly created ReplacedElement object
   */ public
";


%csmethodmodifiers CompSBasePlugin::removeReplacedElement(unsigned int index) "
/**
   * Removes the ReplacedElement with the given index.
   *
   * A pointer to the ReplacedElement that was removed is returned.
   * If no ReplacedElement has been removed, @c null is returned.
   *
   * @param index the index of the ReplacedElement object to remove
   *
   * @return the ReplacedElement object removed.  As mentioned above, 
   * the caller owns the returned object. @c null is returned if 
   * the given index is out of range.
   */ public
";


%csmethodmodifiers CompSBasePlugin::getReplacedBy() const "
/**
   * Get the child ReplacedBy of this SBase.
   * 
   * @return the ReplacedBy child of this SBase
   */ public
";


%csmethodmodifiers CompSBasePlugin::getReplacedBy "
/**
   * Get the child ReplacedBy of this SBase.
   * 
   * @return the ReplacedBy child of this SBase.
   */ public
";


%csmethodmodifiers CompSBasePlugin::isSetReplacedBy() const "
/**
   * Predicate for testing whether the ReplacedBy for this SBase is set.
   *
   * @return @c true if the ReplacedBy of this SBase is set, @c false
   * otherwise.
   */ public
";


%csmethodmodifiers CompSBasePlugin::setReplacedBy(const ReplacedBy* replacedBy) "
/**
   * Sets the ReplacedBy definition of this SBase to a copy of the given
   * ReplacedBy object instance.
   *
   * This method fails if the added ReplacedBy does not match the
   * level/version/package of the parent object or if the added ReplacedBy
   * cannot be copied.
   *
   * @param replacedBy the ReplacedBy object instance to use.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_PKG_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH @endlink
   */ public
";


%csmethodmodifiers CompSBasePlugin::createReplacedBy "
/**
   * Creates a new, empty ReplacedBy, adds it to this CompSBasePlugin and 
   * returns the created ReplacedBy.
   *
   * @return the newly created ReplacedBy object instance
   */ public
";


%csmethodmodifiers CompSBasePlugin::unsetReplacedBy "
/**
   * Unsets the child ReplacedBy of this SBase.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers CompSBasePlugin::logInvalidId(const std::string& attribute, const std::string& wrongattribute) "
/**
   * Helper to log a common type of error.
   */ public
";


%csmethodmodifiers CompSBasePlugin::setSBMLDocument(SBMLDocument* d) "
/**
   * Sets the parent SBMLDocument of this plugin object.
   *
   * Subclasses which contain one or more SBase derived elements must
   * override this function.
   *
   * @param d the SBMLDocument object to use
   *
   * @see connectToParent
   * @see enablePackageInternal
   */ /* libsbml-internal */ public
";


%csmethodmodifiers CompSBasePlugin::connectToChild "
/**
   * Sets the *parent* of this SBML object to child SBML objects (if any).
   * (Creates a child-parent relationship by the parent)
   *
   * @see setSBMLDocument
   * @see enablePackageInternal
   */ /* libsbml-internal */ public
";


%csmethodmodifiers CompSBasePlugin::connectToParent(SBase* parent) "
/**
   * Sets the parent SBML object of this SBML object.
   * (Creates a child-parent relationship by the child)
   * This function is called when a child element is
   * set/added/created by its parent element (e.g. by setXXX,
   * addXXX, createXXX, and connectToChild functions of the
   * parent element).
   *
   * @param parent the SBML object to use
   */ /* libsbml-internal */ public
";


%csmethodmodifiers CompSBasePlugin::enablePackageInternal(const std::string& pkgURI, const std::string& pkgPrefix, bool flag) "
/**
   * Enables/Disables the given package with child elements in this plugin
   * object (if any).
   * (This is an internal implementation invoked from
   *  SBase::enablePackageInternal() function)
   *
   * @note Subclasses in which one or more SBase derived elements are
   * defined must override this function.
   *
   * @see setSBMLDocument
   * @see connectToParent
   */ /* libsbml-internal */ public
";


%csmethodmodifiers CompSBasePlugin::accept(SBMLVisitor& v) const "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers CompSBasePlugin::createListOfReplacedElements "
/** */ public
";


%typemap(csimports) CompModelPlugin "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{comp}
 *
@htmlinclude pkg-marker-comp.html Implementation of the &ldquo;comp&rdquo; package
 * extention to the %Model construct.
 *
 * The CompModelPlugin class inherits from the SBMLSBasePlugin class, and
 * codifies the extentions to the Model class defined in the SBML
 * Level&nbsp;3 @ref comp @if java \'Hierarchical %Model Composition\'@endif 
 * package (&ldquo;comp&rdquo;).  This extention allows a Model to define
 * Submodels (other Models that are instantiated as new parts of the parent
 * Model), and Ports, a defined interface for including the given Model as a
 * Submodel of a different Model.
 *
 * Submodels are stored in an optional child ListOfSubmodels object, which, 
 * if present, must contain one or more Submodel objects.  All of the Submodels
 * present in the ListOfSubmodels are defined to be instantiated in the
 * \'complete\' Model.
 *
 * Ports are stored in an optional child ListOfPorts object, which, 
 * if present, must contain one or more Port objects.  All of the Ports
 * present in the ListOfPorts collectively define the \'port interface\'
 * of the Model.
 */
"


%csmethodmodifiers CompModelPlugin::CompModelPlugin(const std::string &uri, const std::string &prefix, CompPkgNamespaces *compns) "
/**
   * Constructor.
   */ public
";


%csmethodmodifiers CompModelPlugin::CompModelPlugin(const CompModelPlugin& orig) "
/**
   * Copy constructor. Creates a copy of this CompModelPlugin object.
   */ public
";


%csmethodmodifiers CompModelPlugin::clone() const "
/**
   * Creates and returns a deep copy of this CompModelPlugin object.
   * 
   * @return a (deep) copy of this CompModelPlugin object
   */ public
";


%csmethodmodifiers CompModelPlugin::createObject(XMLInputStream& stream) "
/**
   * Create and return an SBML object of this class, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers CompModelPlugin::writeElements(XMLOutputStream& stream) const "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers CompModelPlugin::getElementBySId(const std::string& id) "
/**
   * Returns the first child element found that has the given @p id in the
   * model-wide SId namespace, or @c null if no such object is found.
   *
   * @param id a string representing the id of objects to find.
   *
   * @return a pointer to the SBase element with the given @p id.
   */ public
";


%csmethodmodifiers CompModelPlugin::getElementByMetaId(const std::string& metaid) "
/**
   * Returns the first child element it can find with the given meta
   * identifier, or itself if it has the given @p metaid, or @c null if no
   * such object is found.
   *
   * @param metaid a string representing the metaid of objects to find.
   *
   * @return a pointer to the SBase element with the given @p metaid.
   */ public
";


%csmethodmodifiers CompModelPlugin::getAllElements(ElementFilter* filter=NULL) "
/**
   * Returns a List of all child SBase objects, including those nested to an
   * arbitrary depth.
   *
   * @return a List of pointers to all children objects.
   */ public
";


%csmethodmodifiers CompModelPlugin::getListOfSubmodels() const "
/**
   * Returns the ListOf object that holds all submodels.
   *
   * @return the ListOf object that holds all submodels.
   */ public
";


%csmethodmodifiers CompModelPlugin::getSubmodel(unsigned int n) "
/**
   * Returns the submodel with the given index.
   * If the index is invalid, @c null is returned.
   *
   * @param n the index number of the Submodel to get.
   *
   * @return the nth Submodel in the ListOfSubmodels.
   */ public
";


%csmethodmodifiers CompModelPlugin::getSubmodel "
/**
   * Returns the submodel with the given index.
   *
   * @param n the index number of the Submodel to get.
   *
   * @return the nth Submodel in the ListOfSubmodels.  If the index @p n is
   * invalid, @c null is returned.
   */ public
";


%csmethodmodifiers CompModelPlugin::getSubmodel(std::string id) "
/**
   * Returns the submodel with the given identifier.
   *
   * @param id the identifier of the Submodel to get.
   *
   * @return the Submodel in the ListOfSubmodels with the given identifier.
   * If no such submodel with identifier @p id exists, @c null is returned.
   */ public
";


%csmethodmodifiers CompModelPlugin::getSubmodel(std::string id) const "
/**
   * Returns the submodel with the given identifier.
   *
   * @param id the identifier of the Submodel to get.
   *
   * @return the Submodel in the ListOfSubmodels with the given
   * identifier. If no submodel with identifier @p id exists, @c null is
   * returned.

   */ public
";


%csmethodmodifiers CompModelPlugin::addSubmodel(const Submodel* submodel) "
/**
   * Adds a copy of the given Submodel object to the list of submodels.
   *
   * Fails if the added submodel is @c null, does not match the
   * level/version/package of the parent object, or cannot be added to the
   * list of submodels.
   *
   * @param submodel the Submodel object to be added to the list of
   * submodels.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_PKG_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH @endlink
   */ public
";


%csmethodmodifiers CompModelPlugin::getNumSubmodels() const "
/**
   * Returns the number of submodels for this CompModelPlugin.
   *
   * @return the number of submodels for this CompModelPlugin.
   */ public
";


%csmethodmodifiers CompModelPlugin::createSubmodel "
/**
   * Creates a Submodel object, adds it to the end of the
   * submodel objects list and returns a pointer to the newly
   * created object.
   *
   * @return a newly created Submodel object
   */ public
";


%csmethodmodifiers CompModelPlugin::removeSubmodel(unsigned int index) "
/**
   * Removes the submodel with the given index.
   * A pointer to the submodel that was removed is returned.
   * 
   * @param index the index of the Submodel object to remove
   *
   * @return the Submodel object removed.  As mentioned above, the caller
   * owns the returned object. @c null is returned if the given @p index is
   * out of range and no submodel has been removed, @c null is returned.
   */ public
";


%csmethodmodifiers CompModelPlugin::getListOfPorts() const "
/**
   * Returns the ListOf object that holds all ports.
   *
   * @return the ListOf object that holds all ports.
   */ public
";


%csmethodmodifiers CompModelPlugin::getPort(unsigned int n) "
/**
   * Returns the port with the given index.
   *
   * @param n the index number of the Port to get.
   *
   * @return the nth Port in the ListOfPorts.  If the index @p n is invalid,
   * @c null is returned.
   */ public
";


%csmethodmodifiers CompModelPlugin::getPort "
/**
   * Returns the port with the given index.
   *
   * @param n the index number of the Port to get.
   *
   * @return the nth Port in the ListOfPorts. If the index @p n is invalid,
   * @c null is returned.
   */ public
";


%csmethodmodifiers CompModelPlugin::getPort(std::string id) "
/**
   * Returns the port with the given identifier.
   *
   * @param id the id of the Port to get.
   *
   * @return the Port in the ListOfPorts with the given identifier.  If the
   * identifier is invalid, @c null is returned.
   */ public
";


%csmethodmodifiers CompModelPlugin::getPort(std::string id) const "
/**
   * Returns the port with the given identifier.
   *
   * @param id the id of the Port to get.
   *
   * @return the Port in the ListOfPorts with the given identifier.  If the
   * identifier is invalid, @c null is returned.
   */ public
";


%csmethodmodifiers CompModelPlugin::addPort(const Port* port) "
/**
   * Adds a copy of the given Port object to the list of ports.
   *
   * @param port the Port object to be added to the list of ports.  Fails if
   * the added port is @c null, does not match the level/version/package of the
   * parent object, or cannot be added to the list of ports.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_PKG_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH @endlink
   */ public
";


%csmethodmodifiers CompModelPlugin::getNumPorts() const "
/**
   * Returns the number of ports for this CompModelPlugin.
   *
   * @return the number of ports for this CompModelPlugin.
   */ public
";


%csmethodmodifiers CompModelPlugin::createPort "
/**
   * Creates a Port object, adds it to the end of the
   * port objects list and returns a pointer to the newly
   * created object.
   *
   * @return a newly created Port object
   */ public
";


%csmethodmodifiers CompModelPlugin::removePort(unsigned int index) "
/**
   * Removes the port with the given index.
   *
   * @param index the index of the Port object to remove
   *
   * @return the Port object removed.  As mentioned above, 
   * the caller owns the returned object. @c null is returned if 
   * the given index is out of range.
   */ public
";


%csmethodmodifiers CompModelPlugin::setDivider(const std::string& divider) "
/**
   * Set the string used as the divider between names when renaming and
   * flattening models.
   *
   * The divider string consists of two underscore characters
   * (&quot;<code>__</code>&quot;) by default.  This method will fail if called
   * with an empty @p divider, or a @p divider that cannot be used internally as part
   * of a valid SBML SId.
   * 
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers CompModelPlugin::getDivider "
/**
   * Get the string used as the divider between names when renaming and
   * flattening models.
   *
   * The divider string consists of two underscore characters
   * (&quot;<code>__</code>&quot;) by default, and can be overridden
   * with the setDivider() function.
   *
   * @see setDivider(string divider)
   */ public
";


%csmethodmodifiers CompModelPlugin::setSBMLDocument(SBMLDocument* d) "
/**
   * Sets the parent SBMLDocument of this plugin object.
   *
   * Subclasses which contain one or more SBase derived elements must
   * override this function.
   *
   * @param d the SBMLDocument object to use
   *
   * @see connectToParent
   * @see enablePackageInternal
   */ /* libsbml-internal */ public
";


%csmethodmodifiers CompModelPlugin::connectToChild "
/**
   * Sets the *parent* of this SBML object to child SBML objects (if any).
   * (Creates a child-parent relationship by the parent)
   *
   * @see setSBMLDocument
   * @see enablePackageInternal
   */ /* libsbml-internal */ public
";


%csmethodmodifiers CompModelPlugin::connectToParent(SBase* parent) "
/**
   * Sets the parent SBML object of this SBML object.
   * (Creates a child-parent relationship by the child)
   * This function is called when a child element is
   * set/added/created by its parent element (e.g. by setXXX,
   * addXXX, createXXX, and connectToChild functions of the
   * parent element).
   *
   * @param parent the SBML object to use
   */ /* libsbml-internal */ public
";


%csmethodmodifiers CompModelPlugin::enablePackageInternal(const std::string& pkgURI, const std::string& pkgPrefix, bool flag) "
/**
   * Enables/Disables the given package with child elements in this plugin
   * object (if any).
   * (This is an internal implementation invoked from
   *  SBase::enablePackageInternal() function)
   *
   * @note Subclasses in which one or more SBase derived elements are
   * defined must override this function.
   *
   * @see setSBMLDocument
   * @see connectToParent
   */ /* libsbml-internal */ public
";


%csmethodmodifiers CompModelPlugin::accept(SBMLVisitor& v) const "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers CompModelPlugin::flattenModel() const "
/**
   * Flatten and return a copy of this hierarchical model.
   *
   * Follows all the rules of the hierarchical model composition package and
   * returns a version with all submodels copied into the main model, with all
   * deletions removed and all replaced elements replaced, following any and
   * all rules of conversion factors.  Only the ports created for this model
   * will remain.
   *
   *@return a Model object with no submodels.  On failure, return @c null.
   */ public
";


%csmethodmodifiers CompModelPlugin::removeCollectedElements(std::set<SBase*>* removed, std::set<SBase*>* toremove) "
/**
   * Deletes any elements in \'toremove\' that do not already exist in \'removed\', 
   * while taking care to not double-delete any element.  Intended for use with
   * collectDeletionsAndDeleteCompConstructs and 
   * collectRenameAndConvertReplacements.
   */ public
";


%csmethodmodifiers CompModelPlugin::instantiateSubmodels "
/**
   * Loop through all Submodels in this Model, instantiate all of them,
   * perform all deletions, and synchronize all replacements, including using
   * any conversion factors that may exist.  The resulting models are stored
   * in the Submodel objects, and available from
   * \'Submodel::getInstantiation()\'
   *
   * @return an integer value indicating success/failure of the operation.
   * Possible return values from this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   * In this case, \'invalid object\' means that this Submodel itself is invalid, and no Model can be instantiated from it.
   */ public
";


%csmethodmodifiers CompModelPlugin::getRemovedSet "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers CompModelPlugin::appendFrom(const Model* model) "
/** */ public
";


%csmethodmodifiers CompModelPlugin::saveAllReferencedElements "
/** */ public
";


%csmethodmodifiers CompModelPlugin::renameAllIDsAndPrepend(const std::string& prefix) "
/** */ public
";


%csmethodmodifiers CompModelPlugin::performDeletions "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers CompModelPlugin::collectDeletionsAndDeleteSome(std::set<SBase*>* removed, std::set<SBase*>* toremove) "
/**
   * Collects all elements from instantiated submodels slated to be deleted,
   * and stores them in \'toremove\', and also actually deletes the comp constructs
   * Deletions, ReplacedElements, and ReplacedBy\'s.  This is so that
   * it is possible to delete a deletion or replacement, and end up with a model 
   * that still has the element that would have otherwise been deleted.
   * Also, actually deletes local parameters, because this potentially affects
   * the naming conventions when replacing.
   *
   * Any comp elements or local parameters that have been removed will be added to \'removed\', and
   * any elements that are to be removed will be added to \'toremove\'.
   */ public
";


%csmethodmodifiers CompModelPlugin::performReplacementsAndConversions "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers CompModelPlugin::collectRenameAndConvertReplacements(std::set<SBase*>* removed, std::set<SBase*>* toremove) "
/**
   * Removes all elements from instantiated submodels slated to be replaced,
   * and points all old references to that element to the replacement
   * element.  Also takes any \'replacedBy\' construct, deleting the original
   * object, renaming the replacement object with the replaced object\'s
   * identifiers, and points all old references to the replacement object\'s
   * old identifiers to the new identifiers.
   */ public
";


%csmethodmodifiers CompModelPlugin::findUniqueSubmodPrefixes(std::vector<std::string>& submodids, List* allElements) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers CompModelPlugin::renameIDs(List* allElements, const std::string& prefix) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers CompModelPlugin::resetPorts "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers CompModelPlugin::saveAllReferencedElements(std::set<SBase*> uniqueRefs, std::set<SBase*> replacedBys) "
/** */ /* libsbml-internal */ public
";


%typemap(csimports) CompSBMLDocumentPlugin "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{comp}
 *
@htmlinclude pkg-marker-comp.html Implementation of the &ldquo;comp&rdquo; package
 * extention to the %SBMLDocument construct.
 *
 * The CompSBMLDocumentPlugin class inherits from the SBMLDocumentPlugin
 * class, and codifies the extentions to the SBMLDocument class defined in
 * the SBML Level&nbsp;3 @ref comp
 * @if java \'Hierarchical %Model Composition\'@endif 
 * package (&ldquo;comp&rdquo;).  This extention allows multiple Model
 * objects to be defined in a single SBMLDocument, stored in an optional
 * child ListOfModelDefinitions object, as well as define references to Model
 * objects in other files, stored in the optional child
 * ListOfExternalModelDefinitions object.  These model definitions, if
 * present, allow Submodel objects to reference other Models to instantiate.
 *
 * The presence of ModelDefinitions and ExternalModelDefinitions in an
 * SBMLDocument does not change the default Model in the file.  If a
 * SBMLDocument is submitted somewhere to be simulated, it is still the
 * <code>&lt;model&gt;</code> child of the <code>&lt;sbml&gt;</code> element
 * that should be simulated.
 *
 * In addition, as all packages do, the CompSBMLDocumentPlugin defines a
 * required flag named <code>required</code>, which indicates whether 
 * &ldquo;comp&rdquo; constructs can be used to change the core mathematics of the
 * <code>&lt;model&gt;</code> child of the <code>&lt;sbml&gt;</code> element.
 * Because they can, this attribute must be set @c true.
 */
"


%csmethodmodifiers CompSBMLDocumentPlugin::CompSBMLDocumentPlugin(const std::string &uri, const std::string &prefix, CompPkgNamespaces *compns) "
/**
   * Constructor.
   */ public
";


%csmethodmodifiers CompSBMLDocumentPlugin::CompSBMLDocumentPlugin(const CompSBMLDocumentPlugin& orig) "
/**
   * Copy constructor. Creates a copy of this CompSBMLDocumentPlugin object.
   */ public
";


%csmethodmodifiers CompSBMLDocumentPlugin::clone() const "
/**
   * Creates and returns a deep copy of this CompSBMLDocumentPlugin object.
   * 
   * @return a (deep) copy of this CompSBMLDocumentPlugin object
   */ public
";


%csmethodmodifiers CompSBMLDocumentPlugin::getElementBySId(const std::string& id) "
/**
   * Returns the first child element found that has the given @p id in the
   * model-wide SId namespace, or @c null if no such object is found.
   *
   * @param id string representing the identifier of objects to find
   *
   * @return a pointer to the SBase element with the given @p id.
   *
   * @note The comp SBML document plugin has multiple model-wide SId
   * namespaces, so a valid document may well contain multiple elements with
   * the same SId that reside in separate models.  It is not recommended to
   * ever call this function&mdash;instead, call the function on the child
   * ModelDefinition objects.
   */ public
";


%csmethodmodifiers CompSBMLDocumentPlugin::getElementByMetaId(const std::string& metaid) "
/**
   * Returns the first child element it can find with the given @p metaid, or
   * itself if it has the given @p metaid, or @c null if no such object is
   * found.
   *
   * @param metaid string representing the meta identifier of objects to find
   *
   * @return a pointer to the SBase element with the given @p metaid.
   */ public
";


%csmethodmodifiers CompSBMLDocumentPlugin::getAllElements(ElementFilter* filter=NULL) "
/**
   * Returns a List of all child SBase objects, including those nested to an
   * arbitrary depth
   *
   * @return a List of pointers to all children objects.
   */ public
";


%csmethodmodifiers CompSBMLDocumentPlugin::createObject(XMLInputStream& stream) "
/**
   * Create and return an SBML object of this class, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or @c null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers CompSBMLDocumentPlugin::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses must override this method to write out their contained
   * SBML objects as XML elements if they have their specific elements.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers CompSBMLDocumentPlugin::checkConsistency "
/**
   * Check consistency function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers CompSBMLDocumentPlugin::accept(SBMLVisitor& v) const "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers CompSBMLDocumentPlugin::getListOfModelDefinitions() const "
/**
   * Returns the ListOf object that holds all ModelDefinitions.
   *
   * @return the ListOf object that holds all ModelDefinitions.
   */ public
";


%csmethodmodifiers CompSBMLDocumentPlugin::getModelDefinition(unsigned int n) "
/**
   * Returns the ModelDefinition with the given index.
   *
   * @param n the index number of the ModelDefinition to get.
   *
   * @return the nth ModelDefinition in the ListOfModelDefinitions.  If the
   * index is invalid, @c null is returned.
   */ public
";


%csmethodmodifiers CompSBMLDocumentPlugin::getModelDefinition "
/**
   * Returns the ModelDefinition with the given index.
   *
   * @param n the index number of the ModelDefinition to get.
   *
   * @return the nth ModelDefinition in the ListOfModelDefinitions.  If the
   * index @p n is invalid, @c null is returned.
   */ public
";


%csmethodmodifiers CompSBMLDocumentPlugin::getModelDefinition(const std::string& sid) "
/**
   * Returns the model definition object based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the model definition to get.
   * 
   * @return ModelDefinition in the ListOfModelDefinitions with the given @p sid
   * or @c null if no such ModelDefinition exists.
   *
   * @see getModelDefinition(long n)
   * @see getListOfModelDefinitions()
   */ public
";


%csmethodmodifiers CompSBMLDocumentPlugin::getModelDefinition(const std::string& sid) const "
/**
   * Returns the model definition object based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the model definition to get.
   * 
   * @return ModelDefinition in the ListOfModelDefinitions with the given @p sid
   * or @c null if no such ModelDefinition exists.
   *
   * @see getModelDefinition(long n)
   * @see getListOfModelDefinitions()
   */ public
";


%csmethodmodifiers CompSBMLDocumentPlugin::addModelDefinition(const ModelDefinition* modelDefinition) "
/**
   * Adds a copy of the given ModelDefinition object to the list of
   * ModelDefinitions.
   *
   * @param modelDefinition the ModelDefinition object to be added to the
   * list of ModelDefinitions.  Fails if the added ModelDefinition is @c null,
   * does not match the level/version/package of the parent object, or cannot
   * be added to the list of replaced elements.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_PKG_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH @endlink
   */ public
";


%csmethodmodifiers CompSBMLDocumentPlugin::getNumModelDefinitions() const "
/**
   * Returns the number of ModelDefinitions for this SBMLDocumentPlugin.
   *
   * @return the number of ModelDefinitions.
   */ public
";


%csmethodmodifiers CompSBMLDocumentPlugin::createModelDefinition "
/**
   * Creates a ModelDefinition object, adds it to the end of the
   * ModelDefinition objects list and returns a pointer to the newly
   * created object.
   *
   * @return a newly created ModelDefinition object
   */ public
";


%csmethodmodifiers CompSBMLDocumentPlugin::removeModelDefinition(unsigned int index) "
/**
   * Removes the ModelDefinition with the given index from the CompSBMLDocumentPlugin.
   *
   * A pointer to the ModelDefinition that was removed is returned.
   * If no ModelDefinition has been removed, @c null is returned.
   *
   * @param index the index of the ModelDefinition object to remove
   *
   * @return the ModelDefinition object removed.  As mentioned above, 
   * the caller owns the returned object. @c null is returned if 
   * the given index is out of range.
   */ public
";


%csmethodmodifiers CompSBMLDocumentPlugin::removeModelDefinition(std::string id) "
/**
   * Removes the ModelDefinition with the given @p id from the CompSBMLDocumentPlugin.
   *
   * A pointer to the ModelDefinition that was removed is returned.
   * If no ModelDefinition has been removed, @c null is returned.
   *
   * @param id the id of the ModelDefinition object to remove
   *
   * @return the ModelDefinition object removed.  As mentioned above, 
   * the caller owns the returned object. @c null is returned if 
   * the given index is out of range.
   */ public
";


%csmethodmodifiers CompSBMLDocumentPlugin::getListOfExternalModelDefinitions() const "
/**
   * Returns the ListOf object that holds all ExternalModelDefinitions.
   *
   * @return the ListOf object that holds all ExternalModelDefinitions.
   */ public
";


%csmethodmodifiers CompSBMLDocumentPlugin::getExternalModelDefinition(unsigned int n) "
/**
   * Returns the ExternalModelDefinition with the given index.
   *
   * @param n the index number of the ExternalModelDefinition to get.
   *
   * @return the nth ExternalModelDefinition in the
   * ListOfExternalModelDefinitions.  If the index is invalid, @c null is
   * returned.
   */ public
";


%csmethodmodifiers CompSBMLDocumentPlugin::getExternalModelDefinition "
/**
   * Returns the ExternalModelDefinition with the given index.
   *
   * @param n the index number of the ExternalModelDefinition to get.
   *
   * @return the nth ExternalModelDefinition in the
   * ListOfExternalModelDefinitions.  If the index is invalid, @c null is
   * returned.
   */ public
";


%csmethodmodifiers CompSBMLDocumentPlugin::getExternalModelDefinition(const std::string& sid) "
/**
   * Returns the model definition object based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the model definition to get.
   * 
   * @return ExternalModelDefinition in the ListOfExternalModelDefinitions with the given @p sid
   * or @c null if no such ExternalModelDefinition exists.
   *
   * @see getExternalModelDefinition(long n)
   * @see getListOfExternalModelDefinitions()
   */ public
";


%csmethodmodifiers CompSBMLDocumentPlugin::getExternalModelDefinition(const std::string& sid) const "
/**
   * Returns the model definition object based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the model definition to get.
   * 
   * @return ExternalModelDefinition in the ListOfExternalModelDefinitions with the given @p sid
   * or @c null if no such ExternalModelDefinition exists.
   *
   * @see getExternalModelDefinition(long n)
   * @see getListOfExternalModelDefinitions()
   */ public
";


%csmethodmodifiers CompSBMLDocumentPlugin::getModel(const std::string& sid) const "
/**
   * Searches the model namespace of the document and returns the Model,
   * ModelDefinition, or ExternalModelDefintion object with the given
   * identifier.
   *
   * @param sid a string representing the identifier of the model definition to get.
   *
   * @return The SBase corresponding to the given @p sid or @c null if no such
   * model exists.  If no such model exists, this will return @c null.
   */ public
";


%csmethodmodifiers CompSBMLDocumentPlugin::getModel(const std::string& sid) "
/**
   * Searches the model namespace of the document and returns the Model,
   * ModelDefinition, or ExternalModelDefintion object with the given
   * identifier.
   *
   * @param sid a string representing the identifier of the model definition to get.
   *
   * @return The SBase corresponding to the given @p sid or @c null if no such
   * model exists.  If no such model exists, this will return @c null.
   */ public
";


%csmethodmodifiers CompSBMLDocumentPlugin::setRequired(bool value) "
/**
   *
   * Sets the bool value of \'required\' attribute of corresponding package
   * in SBMLDocument element.  The only legal value is \'true\' for the 
   * Hierarchical Model Composition package.
   *
   * @param value the bool value of \'required\' attribute of corresponding 
   * package in SBMLDocument element.
   *
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers CompSBMLDocumentPlugin::addExternalModelDefinition(const ExternalModelDefinition* externalModelDefinition) "
/**
   * Adds a copy of the given ExternalModelDefinition object to the list of
   * ExternalModelDefinitions.
   *
   * @param externalModelDefinition the ExternalModelDefinition object to be
   * added to the list of ExternalModelDefinitions.  Fails if the added
   * ExternalModelDefinition is @c null, does not match the
   * level/version/package of the parent object, or cannot be added to the
   * list of external model definitions.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_PKG_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH @endlink
   */ public
";


%csmethodmodifiers CompSBMLDocumentPlugin::getNumExternalModelDefinitions() const "
/**
   * Returns the number of ExternalModelDefinitions for this SBMLDocumentPlugin.
   *
   * @return the number of ExternalModelDefinitions for this SBMLDocumentPlugin.
   */ public
";


%csmethodmodifiers CompSBMLDocumentPlugin::createExternalModelDefinition "
/**
   * Creates a ExternalModelDefinition object, adds it to the end of the
   * ExternalModelDefinition objects list and returns a pointer to the newly
   * created object.
   *
   * @return a newly created ExternalModelDefinition object
   */ public
";


%csmethodmodifiers CompSBMLDocumentPlugin::removeExternalModelDefinition(unsigned int index) "
/**
   * Removes the ExternalModelDefinition with the given index.
   *
   * A pointer to the ExternalModelDefinition that was removed is returned.
   * If no ExternalModelDefinition has been removed, @c null is returned.
   *
   * @param index the index of the ExternalModelDefinition object to remove
   *
   * @return the ExternalModelDefinition object removed.  As mentioned above, 
   * the caller owns the returned object. @c null is returned if 
   * the given index is out of range.
   */ public
";


%csmethodmodifiers CompSBMLDocumentPlugin::removeExternalModelDefinition(std::string id) "
/**
   * Removes the ExternalModelDefinition with the given @p id.
   *
   * A pointer to the ExternalModelDefinition that was removed is returned.
   * If no ExternalModelDefinition has been removed, @c null is returned.
   *
   * @param id the id of the ExternalModelDefinition object to remove
   *
   * @return the ExternalModelDefinition object removed.  As mentioned above, 
   * the caller owns the returned object. @c null is returned if 
   * the given index is out of range.
   */ public
";


%csmethodmodifiers CompSBMLDocumentPlugin::setSBMLDocument(SBMLDocument* d) "
/**
   * Sets the parent SBMLDocument of this plugin object.
   *
   * Subclasses which contain one or more SBase derived elements must
   * override this function.
   *
   * @param d the SBMLDocument object to use
   *
   * @see connectToParent
   * @see enablePackageInternal
   */ /* libsbml-internal */ public
";


%csmethodmodifiers CompSBMLDocumentPlugin::connectToChild "
/**
   * Sets the *parent* of this SBML object to child SBML objects (if any).
   * (Creates a child-parent relationship by the parent)
   *
   * @see setSBMLDocument
   * @see enablePackageInternal
   */ /* libsbml-internal */ public
";


%csmethodmodifiers CompSBMLDocumentPlugin::connectToParent(SBase* parent) "
/**
   * Sets the parent SBML object of this SBML object.
   * (Creates a child-parent relationship by the child)
   * This function is called when a child element is
   * set/added/created by its parent element (e.g. by setXXX,
   * addXXX, createXXX, and connectToChild functions of the
   * parent element).
   *
   * @param parent the SBML object to use
   */ /* libsbml-internal */ public
";


%csmethodmodifiers CompSBMLDocumentPlugin::enablePackageInternal(const std::string& pkgURI, const std::string& pkgPrefix, bool flag) "
/**
   * Enables/Disables the given package with child elements in this plugin
   * object (if any).
   * (This is an internal implementation invoked from
   *  SBase::enablePackageInternal() function)
   *
   * @note Subclasses in which one or more SBase derived elements are
   * defined must override this function.
   *
   * @see setSBMLDocument
   * @see connectToParent
   */ /* libsbml-internal */ public
";


%csmethodmodifiers CompSBMLDocumentPlugin::getOverrideCompFlattening() const "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers CompSBMLDocumentPlugin::setOverrideCompFlattening(bool overrideCompFlattening) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers CompSBMLDocumentPlugin::getSBMLDocumentFromURI(const std::string& uri) "
/**
   * Uses the suite of URI resolvers to find the document referenced by the
   * URI, or @c null if no document can be found.  The pointer returned is a
   * *non-owning* pointer: this CompSBMLDocumentPlugin owns the document in
   * question, and will return the same pointer if the same URI is requested
   * later.  This is so that when Model objects are returned by
   * ExternalModelDefinition functions, the document the model is from will
   * persist.  The public interface for this function is therefore to use
   * ExternalModelDefinition::getReferencedModel() function.
   */ public
";


%csmethodmodifiers CompSBMLDocumentPlugin::getResolvedURI(const std::string& uri) "
/**
   * Used by getSBMDocumentFromURI to first resolve the URI into its
   * canonical form, for example, from \'model.xml\' to
   * \'file:/path/to/model.xml\'.
   */ public
";


%csmethodmodifiers CompSBMLDocumentPlugin::clearStoredURIDocuments "
/**
   * Clears the internal list of SBMLDocuments kept when resolving URIs.  May
   * invalidate distributed pointers, and therefore should only be used if a
   * call to getSBMLDocumentFromURI has returned an incorrect document, and
   * the URI resolvers have since been tweaked so as to no longer return the
   * same result.
   */ public
";


%typemap(csimports) SBMLUri "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{comp}
 *
@htmlinclude pkg-marker-comp.html utility class for handling URIs.
 *
 * @htmlinclude libsbml-facility-only-warning.html
 *
 * This class implements functionality for parsing URIs and extracting
 * information about them.
 *
 * @see SBMLResolver
 * @see SBMLFileResolver
 */
"


%csmethodmodifiers SBMLUri::SBMLUri(const std::string& uri) "
/**
   * Creates a new SBMLUri from the given string URI.
   */ public
";


%csmethodmodifiers SBMLUri::SBMLUri(const SBMLUri& orig) "
/**
   * Copy constructor.  Creates a copy of an SBMLUri object.
   *
   * @param orig the SBMLUri object to copy.
   *
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the argument @p orig is @c null.
   */ public
";


%csmethodmodifiers SBMLUri::clone() const "
/**
   * Creates and returns a deep copy of this SBMLUri object.
   *
   * @return a (deep) copy of this SBMLFileResolver object.
   */ public
";


%csmethodmodifiers SBMLUri::getScheme() const "
/**
   * Returns the scheme of the stored URI.
   *
   * The @em scheme of the URI is the text before the first colon character.
   * Typical examples of what this might return are the strings @c \'file\' or
   * @c \'http\'.  If the current URI does not have a scheme, this method
   * returns an empty string.
   *
   * @return the parsed scheme, such as @c \'http\', or an empty string if no
   * scheme exists for the current URI.
   */ public
";


%csmethodmodifiers SBMLUri::getHost() const "
/**
   * Returns the host portion of the stored URI.
   *
   * For a scheme such as @c \'http\', this method returns the part of the URI
   * after @c \'http://\' and before the next @c \'/\' character.  URIs with file
   * or URN schemes have no host; in that case, this method returns an empty
   * string.
   *
   * @return the host of the URI, or an empty string in the case of files
   * or URNs schemes that do not possess a host portion.
   */ public
";


%csmethodmodifiers SBMLUri::getPath() const "
/**
   * Returns the path and filename portion of the stored URI.
   *
   * This method returns the text after the scheme, colon, and host (if
   * present), and before the next @c \'?\' character.  The result may be an
   * empty string for some URIs.
   *
   * @return the path of the URI (i.e., the full filename with path)
   */ public
";


%csmethodmodifiers SBMLUri::getQuery() const "
/**
   * Returns the query portion of the stored URI.
   *
   * The equery portion of a URI is the text after a filename, starting with
   * the character @c \'?\'.  For many URIs, this is an empty string.
   *
   * @return the query of the URI (i.e., the part after the full filename
   * with path)
   */ public
";


%csmethodmodifiers SBMLUri::getUri() const "
/**
   * Returns the full stored URI, after replacing backslashes with slashes.
   *
   * @return the original URI, with backslashes replaced with slashes.
   */ public
";


%csmethodmodifiers SBMLUri::relativeTo(const std::string& uri) const "
/**
   * Constructs a new URI relative to this object and the given URI. 
   * 
   * For example,
   @verbatim
SBMLUri(\'c:\\test\').relativeTo(\'test.xml\')
@endverbatim
   * would construct a new file URI, with path
   * <code>c:/test/test.xml</code>.
   * 
   * @param uri a URI to be added to this object
   * 
   * @return the resulting new URI
   */ public
";


%csmethodmodifiers SBMLUri::parse(const std::string& uri) "
/** */ public
";


%typemap(csimports) SBMLResolver "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{comp}
 *
@htmlinclude pkg-marker-comp.html Base class for SBML resolvers.
 *
 * @htmlinclude libsbml-facility-only-warning.html
 *
 * The SBMLResolver class is the base class for the various SBML @em
 * resolvers: facilities that take a unique identifier as input and return
 * the document associated with that identifier.  In SBML, resolvers come
 * into play with the SBML Level&nbsp;3 Hierarchical Model Composition
 * package; this package includes features that allow a model to be composed
 * from pieces that are external to a given SBML document, which implies the
 * need to be able to identify and locate those external pieces.  The
 * SBMLResolver class and its subclasses provide facilities for software
 * applications to be able to do these tasks.
 *
 * LibSBML provides a number of built-in resolvers, and applications can
 * create their own by subclassing SBMLResolver and following the examples
 * of the existing resolvers.  The following are the built-in resolvers
 * in libSBML @htmlinclude libsbml-version.html:
 * @li SBMLFileResolver
 *
 * More resolvers may be provided by libSBML in the future.  Application
 * authors may also write their own.  @if cpp An example of how to create
 * an HTTP resolver is included with the libSBML distribution in the file
 * @ref SBMLHttpResolverExample.cpp \'SBMLHttpResolverExample.cpp\'.@endif
 *
 * @see SBMLUri 
 */
"


%csmethodmodifiers SBMLResolver::SBMLResolver "
/**
   * Creates a new SBMLResolver object.
   */ public
";


%csmethodmodifiers SBMLResolver::SBMLResolver(const SBMLResolver& c) "
/**
   * Copy constructor.  Creates a copy of an SBMLResolver object.
   *
   * @param c the SBMLResolver object to copy.
   *
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the argument @p orig is @c null.
   */ public
";


%csmethodmodifiers SBMLResolver::clone() const "
/**
   * Creates and returns a deep copy of this SBMLResolver object.
   *
   * @return a (deep) copy of this SBMLResolver object.
   */ public
";


%csmethodmodifiers SBMLResolver::resolve(const std::string &uri, const std::string& baseUri="") const "
/**
   * Resolves the document for the given URI.
   *
   * @param uri the URI to the target document
   * @param baseUri base URI, in case the URI is a relative one
   *
   * @return  the document, if this resolver can resolve the document or null.
   */ public
";


%csmethodmodifiers SBMLResolver::resolveUri(const std::string &uri, const std::string& baseUri="") const "
/**
   * Resolves the full URI for the given URI without actually reading the
   * document.
   *
   * @param uri the URI to the target document
   * @param baseUri base URI, in case the URI is a relative one
   *
   * @return  the full URI to the document, if this resolver can resolve the document or null.
   */ public
";


%typemap(csimports) SBMLFileResolver "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{comp}
 *
@htmlinclude pkg-marker-comp.html A resolver for documents stored on a file system.
 *
 * @htmlinclude libsbml-facility-only-warning.html
 *
 * In SBML, @em resolvers come into play with the SBML Level&nbsp;3
 * Hierarchical Model Composition package (&ldquo;comp&rdquo;); this package
 * includes features that allow a model to be composed from pieces that are
 * external to a given SBML document, which implies the need to be able to
 * identify and locate those external pieces.  The identifiers used in
 * &ldquo;comp&rdquo; are URIs (<a target=\'_blank\'
 * href=\'http://en.wikipedia.org/wiki/Uniform_resource_identifier\'>Uniform
 * Resource Identifiers</a>).
 *
 * SBMLFileResolver is a class implementing the ability to resolve URIs to
 * files.  It works on the local file system only.  It can resolve relative
 * and absolute paths, and directories to be searched can be specified using
 * the methods @if clike SBMLFileResolver::setAdditionalDirs(), @endif
 * SBMLFileResolver::addAdditionalDir(@if java String dir@endif) and
 * SBMLFileResolver::clearAdditionalDirs().
 *
 * @see SBMLResolver
 * @see SBMLUri
 */
"


%csmethodmodifiers SBMLFileResolver::SBMLFileResolver "
/**
   * Creates a new SBMLFileResolver object.
   */ public
";


%csmethodmodifiers SBMLFileResolver::SBMLFileResolver(const SBMLFileResolver& c) "
/**
   * Copy constructor.  Creates a copy of an SBMLFileResolver object.
   *
   * @param c the SBMLFileResolver object to copy.
   *
   * @throws @if python ValueError @else SBMLConstructorException @endif
   * Thrown if the argument @p orig is @c null.
   */ public
";


%csmethodmodifiers SBMLFileResolver::clone() const "
/**
   * Creates and returns a deep copy of this SBMLFileResolver object.
   *
   * @return a (deep) copy of this SBMLFileResolver object.
   */ public
";


%csmethodmodifiers SBMLFileResolver::resolve(const std::string &uri, const std::string& baseUri="") const "
/**
   * Resolves the document for the given URI.
   *
   * @param uri the URI to the target document
   * @param baseUri base URI, in case the URI is a relative one
   *
   * @return the document, if this resolver can resolve the document or null.
   */ public
";


%csmethodmodifiers SBMLFileResolver::resolveUri(const std::string &uri, const std::string& baseUri="") const "
/**
   * Resolves the full URI for a given URI without actually reading the
   * document.
   *
   * @param uri the URI to the target document
   * @param baseUri base URI, in case the URI is a relative one
   *
   * @return the full URI to the document, if this resolver can resolve the
   * document or null.
   */ public
";


%csmethodmodifiers SBMLFileResolver::setAdditionalDirs(const std::vector<std::string>& dirs) "
/**
   * Sets the list of directories in which to search for files to resolve.
   *
   * Unlike the similar
   * SBMLFileResolver::addAdditionalDir(@if java String dir@endif), this
   * method replaces any current list of search directories with the given
   * list of @p dirs.
   *
   * @param dirs A vector of strings which contain directories
   *
   * @see addAdditionalDir(@if java String dir@endif)
   * @see clearAdditionalDirs()
   */ public
";


%csmethodmodifiers SBMLFileResolver::clearAdditionalDirs "
/**
   * Removes the list of directories to search for files to resolve.
   *
   * After this method is called,
   * SBMLFileResolver::resolve(string uri, string baseUri)
   * will only search absolute or relative directories.  New directories can
   * be added using SBMLFileResolver::addAdditionalDir(@if java String
   * dir@endif) @if clike or setAdditionalDirs()@endif.
   *
   * @see addAdditionalDir(@if java String dir@endif)
   * @if clike @see setAdditionalDirs()@endif
   */ public
";


%csmethodmodifiers SBMLFileResolver::addAdditionalDir(const std::string& dir) "
/**
   * Adds a directory to the list of directories to search for files to
   * resolve.
   *
   * @param dir the directory to add.
   *
   * @see clearAdditionalDirs()
   * @if clike @see setAdditionalDirs()@endif
   */ public
";


%typemap(csimports) SBMLResolverRegistry "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{comp}
 *
@htmlinclude pkg-marker-comp.html Registry of all SBML resolvers.
 *
 * @htmlinclude libsbml-facility-only-warning.html
 *
 * LibSBML provides facilities for resolving SBML documents in various ways
 * from a given URI. Resolvers are implemented as objects derived from the
 * class SBMLResolver.
 *
 * The resolver registry maintains a list of known resolvers and provides
 * methods for discovering them.  It is implemented as a singleton object of
 * class SBMLResolverRegistry.  Callers can use the method
 * SBMLResolverRegistry::getNumResolvers() to find out how many resolvers are
 * registered, then use SBMLResolverRegistry::getResolverByIndex(@if java int
 * index@endif) to iterate over each one;
 *
 * @see SBMLFileResolver
 */
"


%csmethodmodifiers SBMLResolverRegistry::getInstance "
/**
   * Returns the singleton instance for the resolver registry.
   *
   * Prior to using the registry, callers have to obtain a copy of the
   * registry.  This static method provides the means for doing that.
   *
   * @return the singleton for the resolver registry.
   */ public
";


%csmethodmodifiers SBMLResolverRegistry::addResolver(const SBMLResolver* resolver) "
/**
   * Adds the given resolver to the registry of SBML resolvers.
   *
   * @param resolver the resolver to add to the registry.
   *
   * @return integer value indicating the success/failure of the operation.
   * @if clike The value is drawn from the enumeration
   * #OperationReturnValues_t. @endif The possible values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   */ public
";


%csmethodmodifiers SBMLResolverRegistry::removeResolver(int index) "
/**
   * Removes the resolver with the given index.
   * 
   * @param index the index of the resolver to be removed
   *
   * @return integer value indicating the success/failure of the operation.
   * @if clike The value is drawn from the enumeration
   * #OperationReturnValues_t. @endif The possible values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   */ public
";


%csmethodmodifiers SBMLResolverRegistry::getResolverByIndex(int index) const "
/**
   * Returns the resolver with the given index number.
   *
   * Resolvers are given arbitrary index numbers by the registry.  Callers
   * can use the method SBMLResolverRegistry::getNumResolvers() to find
   * out how many resolvers are registered, then use this method to
   * iterate over the list and obtain each one in turn.
   *
   * @param index the zero-based index of the resolver to fetch.
   *
   * @return the resolver with the given index number, or @c null if the
   * number is less than @c 0 or there is no resolver at the given index
   * position.
   */ public
";


%csmethodmodifiers SBMLResolverRegistry::getNumResolvers() const "
/**
   * Returns the number of resolvers known by the registry.
   *
   * @return the number of registered resolvers.
   *
   * @see getResolverByIndex(@if java int index@endif)
   */ public
";


%csmethodmodifiers SBMLResolverRegistry::resolve(const std::string &uri, const std::string& baseUri="") const "
/**
   * Resolves the document for the given URI.
   *
   * @param uri the URI to the target document
   * @param baseUri base URI, in case the URI is a relative one
   *
   * @return  the document, if this resolver can resolve the document or null.
   */ public
";


%csmethodmodifiers SBMLResolverRegistry::resolveUri(const std::string &uri, const std::string& baseUri="") const "
/**
   * Resolves the full URI for the given URI without actually reading the
   * document.
   *
   * @param uri the URI to the target document
   * @param baseUri base URI, in case the URI is a relative one
   *
   * @return  the full URI to the document, if this resolver can resolve the document or null.
   */ public
";


%csmethodmodifiers SBMLResolverRegistry::SBMLResolverRegistry "
/**
   * protected constructor, use the getInstance() method to access the registry.
   */ /* libsbml-internal */ public
";


%typemap(csimports) CompBase "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{comp}
 *
@htmlinclude pkg-marker-comp.html A convenience subclass of &ldquo;comp&rdquo; package
 * SBase-derived classes
 *
 * The CompBase class derives from SBase, and defines a few functions
 * and features common to all SBase-derived classes in the SBML Level&nbsp;3
 * @ref comp @if java \'Hierarchical %Model Composition\'@endif package
 * (&ldquo;comp&rdquo;).
 */
"


%csmethodmodifiers CompBase::CompBase(unsigned int level        = CompExtension::getDefaultLevel(), unsigned int version      = CompExtension::getDefaultVersion(), unsigned int pkgVersion   = CompExtension::getDefaultPackageVersion()) "
/**
   * Creates a new CompBase with the given level, version, and package version.
   *
   * @param level the SBML Level
   * @param version the Version within the SBML Level
   * @param pkgVersion the version of the package
   */ public
";


%csmethodmodifiers CompBase::CompBase(CompPkgNamespaces* compns) "
/**
   * Creates a new CompBase with the given SBMLExtensionNamespaces object.
   *
   * @param compns the namespace object.
   */ public
";


%csmethodmodifiers CompBase::CompBase(const CompBase& source) "
/**
   * Copy constructor.
   *
   * @param source the object to copy.
   */ public
";


%csmethodmodifiers CompBase::getPackageURI() const "
/**
   * Returns the XML namespace (URI) of the package extension
   * of this object.
   *
   * @return the URI of the package extension of this plugin object.
   */ public
";


%csmethodmodifiers CompBase::getPackageName() const "
/**
   * Returns the package name of this plugin object.
   *
   * @return the package name of this plugin object.
   */ public
";


%csmethodmodifiers CompBase::getPackageVersion() const "
/**
   * Returns the package version of the package extension of
   * this plugin object.
   *
   * @return the package version of the package extension of
   * this plugin object.
   */ public
";


%csmethodmodifiers CompBase::getParentModel(SBase* child) "
/**
   * Returns the Model object to which the referenced child object belongs.
   */ public
";


%csmethodmodifiers CompBase::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Subclasses should override this method to read values from the given
   * XMLAttributes set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers CompBase::writeAttributes(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.  For example:
   *
   *   SBase::writeAttributes(stream);
   *   stream.writeAttribute( \'submodel\' , mSubmodel );
   *   ...
   */ /* libsbml-internal */ public
";


%csmethodmodifiers CompBase::logUnknownElement(const std::string &element ) "
/**
   * Helper to log a common type of error for elements.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers CompBase::logUnknownAttribute(const std::string &attribute, const std::string& element) "
/**
   * Helper to log a common type of error.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers CompBase::logEmptyString(const std::string &attribute, const std::string& element) "
/**
   * Helper to log a common type of error.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers CompBase::logInvalidId(const std::string& attribute, const std::string& wrongattribute, const std::string& object = "") "
/**
   * Helper to log a common type of error.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers CompBase::logMissingAttribute(const std::string& attribute, const std::string& element) "
/**
   * Helper to log a common type of error.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers CompBase::hasValidLevelVersionNamespaceCombination "
/**
   * Predicate returning @c true if this
   * object\'s level/version and namespace values correspond to a valid
   * SBML specification.
   *
   * The valid combination of SBML Level and Version, &ldquo;comp&rdquo; package version, and Namespace as of this
   * release of libSBML is the following:
   * <ul>
   * <li> Level&nbsp;3 Version&nbsp;1 Package&nbsp;Version&nbsp;1: <code>\'http://www.sbml.org/sbml/level3/version1/comp/version1\'</code>
   * </ul>
   *
   * @param typecode the typecode for this element
   * @param xmlns the namespaces used by this element.
   *
   * @note  This function is provided as convenience method to be called from constructors. This 
   *        allows to use it in scenarios where the namespaces or typecode have not yet been initialized. 
   * 
   * @return @c true if the level, version and namespace values of this 
   * SBML object correspond to a valid set of values, @c false otherwise.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers CompBase::removeFromParentAndPorts(SBase* todelete, std::set<SBase*>* removed) "
/**
   * Remove the given SBase object, and any Ports that point to it.
   * A static function for removing elements--it is illegal to reference
   * an element from a port that has been deleted or replaced, but if 
   * it happens, we need to not actually crash.  This function finds and 
   * deletes all such invalid ports before deleting the object.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers CompBase::removeFromParentAndPorts(SBase* todelete) "
/**
   * DEPRECATED FUNCTION:  DO NOT USE
   *
   * Remove the given SBase object, and any Ports that point to it.  Unsafe,
   * because the program might later attempt to delete any removed Port.
   */ /* libsbml-internal */ public
";


%typemap(csimports) SBaseRef "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{comp}
 *
@htmlinclude pkg-marker-comp.html Implementation of the %SBaseRef construct from the
 * &ldquo;comp&rdquo; package.
 *
 * The SBaseRef class was introduced by the SBML Level&nbsp;3 @ref comp
 * @if java \'Hierarchical %Model Composition\'@endif package
 * (&ldquo;comp&rdquo;) as the principle way by which submodel elements may
 * be referenced.  The SBaseRef class is usually found as the base class of a
 * Port, Deletion, ReplacedElement, or ReplacedBy class, but may appear as an
 * child of one of the above classes if the parent object references a
 * Submodel.
 *
 * An SBaseRef object must reference an element using exactly one of the
 * optional attributes of the class.  Subclasses of SBaseRef may define
 * additional optional attributes that are legal ways to reference an element.
 *
 * SBaseRef objects may reference elements that do not live in the Model parent 
 * of the SBaseRef object.  However, the SBaseRef class itself does not 
 * provide a method of determining which Model or Submodel is being referenced.
 * The subclasses of SBaseRef provide methods for this instead.
 *
 * Once the Model to which the SBaseRef object is referencing has been established,
 * there are four optional attributes defined in the SBaseRef class that
 * are each methods of referencing an element:
 *
 * @li \'portRef\' (type PortSIdRef):  As its name implies, this attribute is used to
 * refer to a port identifier, in the case when the reference being
 * constructed with the SBaseRef is intended to refer to a port on a
 * submodel.  The namespace of the PortSIdRef value is the set
 * of identifiers of type PortSId defined in the submodel, not
 * the parent model.
 * @li \'idRef\' (type SIdRef): As its name implies, this attribute is used to
 * refer to a regular identifier (i.e., the value of an \'id\'
 * attribute on some other object), in the case when the reference being
 * constructed with the SBaseRef is intended to refer to an object that
 * does not have a port identifier.  The namespace of the SIdRef
 * value is the set of identifiers of type SId defined in the
 * submodel, not the parent model.
 * @li \'unitRef\' (type UnitSIdRef): This attribute is used to refer to the identifier
 * of a UnitDefinition object.  The namespace of the UnitSIdRef
 * value is the set of unit identifiers defined in the submodel, not the
 * parent model. (Note that even though this attribute is of type UnitSIdRef,
 * the reserved unit identifiers that are defined by SBML Level 3 (see
 * Section 3.1.10 of the core specification) are
 * *not* permitted as values of \'unitRef\'.  Reserved unit
 * identifiers may not be replaced or deleted.)
 * @li \'metaIdRef\' (type IDREF): This attribute is used to refer to a \'metaid\'
 * attribute value on some other object, in the case when the reference
 * being constructed with the SBaseRef is intended to refer to an object
 * that does not have a port identifier.  The namespace of the \'metaIdRef\'
 * value is the entire document in which the referenced model resides, but
 * must refer to a subelement of the referenced model.  Since meta identifiers are
 * optional attributes of SBase, all SBML objects have the potential to
 * have a meta identifier value.
 *
 * An SBaseRef object may have up to one subcomponent named \'sBaseRef\', of
 * type SBaseRef.  This permits recursive structures to be constructed so
 * that objects inside submodels can be referenced.
 *
 * The form of such recursive references must be as follows.  The
 * highest-level SBaseRef object of such a chain (which will necessarily
 * be an object of class Port, Deletion, ReplacedElement or ReplacedBy,
 * because they are the only classes derived from the class SBaseRef) must
 * refer to a Submodel object in the containing model.  All child
 * SBaseRef objects in the chain must refer to components inside the
 * Model instance to which the Submodel refers.
 */
"


%csmethodmodifiers SBaseRef::SBaseRef(unsigned int level      = CompExtension::getDefaultLevel(), unsigned int version    = CompExtension::getDefaultVersion(), unsigned int pkgVersion = CompExtension::getDefaultPackageVersion()) "
/**
   * Creates a new SBaseRef with the given level, version, and package version.
   *
   * @param level the SBML Level
   * @param version the Version within the SBML Level
   * @param pkgVersion the version of the package
   */ public
";


%csmethodmodifiers SBaseRef::SBaseRef(CompPkgNamespaces* compns) "
/**
   * Creates a new SBaseRef with the given CompPkgNamespaces object.
   *
   * @param compns the namespace to use
   */ public
";


%csmethodmodifiers SBaseRef::SBaseRef(const SBaseRef& source) "
/**
   * Copy constructor.
   */ public
";


%csmethodmodifiers SBaseRef::clone() const "
/**
   * Creates and returns a deep copy of this SBaseRef object.
   * 
   * @return a (deep) copy of this SBaseRef object
   */ public
";


%csmethodmodifiers SBaseRef::getElementBySId(const std::string& id) "
/**
   * Returns the first child element found that has the given @p id in the
   * model-wide SId namespace, or @c null if no such object is found.
   *
   * @param id string representing the id of objects to find
   *
   * @return a pointer to the SBase element with the given @p id.
   */ public
";


%csmethodmodifiers SBaseRef::getElementByMetaId(const std::string& metaid) "
/**
   * Returns the first child element it can find with the given @p metaid, or
   * itself if it has the given @p metaid, or @c null if no such object is found.
   *
   * @param metaid string representing the metaid of objects to find
   *
   * @return a pointer to the SBase element with the given @p metaid.
   */ public
";


%csmethodmodifiers SBaseRef::getAllElements(ElementFilter* filter=NULL) "
/**
   * Returns a List of all child SBase objects, including those nested to an
   * arbitrary depth.
   *
   * @return a List* of pointers to all children objects.
   */ public
";


%csmethodmodifiers SBaseRef::getMetaIdRef() const "
/**
   * Returns the value of the \'metaIdRef\' attribute of this SBaseRef.
   *
   * @return the value of the \'metaIdRef\' attribute of this SBaseRef.
   */ public
";


%csmethodmodifiers SBaseRef::isSetMetaIdRef() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * SBaseRef\'s \'metaIdRef\' attribute has been set.
   *
   * @return @c true if this SBaseRef\'s \'metaIdRef\' attribute has been set, 
   * otherwise @c false is returned.
   */ public
";


%csmethodmodifiers SBaseRef::setMetaIdRef(const std::string& id) "
/**
   * Sets the value of the \'metaIdRef\' attribute of this SBaseRef.
   *
   * This method fails if the id is not a valid syntax for an IDREF (@link
   * libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE
   * LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink), or if the SBaseRef already
   * points to an element of the submodel using a different interface (@link
   * libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED
   * LIBSBML_OPERATION_FAILED @endlink).  An sBaseRef must use exactly one
   * method to point to a submodel element.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers SBaseRef::unsetMetaIdRef "
/**
   * Unsets the value of the \'metaIdRef\' attribute of this SBaseRef.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers SBaseRef::getPortRef() const "
/**
   * Returns the value of the \'portRef\' attribute of this SBaseRef.
   *
   * @return the value of the \'portRef\' attribute of this SBaseRef.
   */ public
";


%csmethodmodifiers SBaseRef::isSetPortRef() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * SBaseRef\'s \'portRef\' attribute has been set.
   *
   * @return @c true if this SBaseRef\'s \'portRef\' attribute has been set, 
   * otherwise @c false is returned.
   */ public
";


%csmethodmodifiers SBaseRef::setPortRef(const std::string& id) "
/**
   * Sets the value of the \'portRef\' attribute of this SBaseRef.  Fails if
   * the id is not a valid syntax for a PortSIdRef (@link
   * libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE
   * LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink), or if the SBaseRef already
   * points to an element of the submodel using a different interface (@link
   * libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED
   * LIBSBML_OPERATION_FAILED @endlink).  An SBaseRef must use exactly one
   * method to point to a submodel element.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers SBaseRef::unsetPortRef "
/**
   * Unsets the value of the \'portRef\' attribute of this SBaseRef.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers SBaseRef::getIdRef() const "
/**
   * Returns the value of the \'idRef\' attribute of this SBaseRef.
   *
   * @return the value of the \'idRef\' attribute of this SBaseRef.
   */ public
";


%csmethodmodifiers SBaseRef::isSetIdRef() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * SBaseRef\'s \'idRef\' attribute has been set.
   *
   * @return @c true if this SBaseRef\'s \'idRef\' attribute has been set, 
   * otherwise @c false is returned.
   */ public
";


%csmethodmodifiers SBaseRef::setIdRef(const std::string& id) "
/**
   * Sets the value of the \'idRef\' attribute of this SBaseRef.
   *
   * This method fails if the id is not a valid syntax for an SIdRef (@link
   * libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE
   * LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink), or if the SBaseRef already
   * points to an element of the submodel using a different interface (@link
   * libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED
   * LIBSBML_OPERATION_FAILED @endlink).  A sBaseRef must use exactly one
   * method to point to a submodel element.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers SBaseRef::unsetIdRef "
/**
   * Unsets the value of the \'idRef\' attribute of this SBaseRef.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers SBaseRef::getUnitRef() const "
/**
   * Returns the value of the \'unitRef\' attribute of this SBaseRef.
   *
   * @return the value of the \'unitRef\' attribute of this SBaseRef.
   */ public
";


%csmethodmodifiers SBaseRef::isSetUnitRef() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * SBaseRef\'s \'unitRef\' attribute has been set.
   *
   * @return @c true if this SBaseRef\'s \'unitRef\' attribute has been set, 
   * otherwise @c false is returned.
   */ public
";


%csmethodmodifiers SBaseRef::setUnitRef(const std::string& id) "
/**
   * Sets the value of the \'unitRef\' attribute of this SBaseRef.
   *
   * This method fails if the id is not a valid syntax for a UnitSIdRef (@link
   * libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE
   * LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink), or if the SBaseRef already
   * points to an element of the submodel using a different interface (@link
   * libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED
   * LIBSBML_OPERATION_FAILED @endlink).  A sBaseRef must use exactly one
   * method to point to a submodel element.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers SBaseRef::unsetUnitRef "
/**
   * Unsets the value of the \'unitRef\' attribute of this SBaseRef.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers SBaseRef::getSBaseRef() const "
/**
   * Get the child sBaseRef of this sBaseRef.
   * 
   * @return the SBaseRef child of this SBaseRef, or null if none exists.
   */ public
";


%csmethodmodifiers SBaseRef::getSBaseRef "
/**
   * Get the child sBaseRef of this SBaseRef.
   * 
   * @return the SBaseRef child of this SBaseRef, or null if none exists.
   */ public
";


%csmethodmodifiers SBaseRef::isSetSBaseRef() const "
/**
   * Predicate for testing whether the sBaseRef for this SBaseRef is set.
   *
   * @return @c true if the sBaseRef of this SBaseRef is set, @c false
   * otherwise.
   */ public
";


%csmethodmodifiers SBaseRef::setSBaseRef(const SBaseRef* sBaseRef) "
/**
   * Sets the sBaseRef definition of this SBaseRef to a copy of the given
   * SBaseRef object instance.
   *
   * This method fails if the added sBaseRef does not match the
   * level/version/package of the parent object or if the added sBaseRef cannot
   * be copied.
   *
   * @param sBaseRef the SBaseRef object instance to use.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_PKG_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH @endlink
   */ public
";


%csmethodmodifiers SBaseRef::createSBaseRef "
/**
   * Creates a new, empty SBaseRef, adds it to this SBaseRef and 
   * returns the created SBaseRef.
   *
   * @return the newly created SBaseRef object instance.
   */ public
";


%csmethodmodifiers SBaseRef::unsetSBaseRef "
/**
   * Unsets the child SBaseRef of this SBaseRef.  Deletes the former SBaseRef child,
   * if one existed.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers SBaseRef::getNumReferents() const "
/**
   * Returns how many elements are being referred to by this SBaseRef.  A
   * valid SBaseRef will have exactly one.  Possible referents are portRef,
   * idRef, unitRef, and metaIdRef.
   *
   * @return integer value between 0 and 4: the number of different ways this element points to its referent.
   */ public
";


%csmethodmodifiers SBaseRef::hasRequiredAttributes() const "
/**
   * Returns true if getNumReferents() is exactly 1.
   *
   * @return bool: \'true\' if the attributes are correctly set; \'false\' if not.
   */ public
";


%csmethodmodifiers SBaseRef::renameSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames all the SIdRef attributes on this element if they match
   * @p oldid, but not any found in child or plugin elements.
   */ public
";


%csmethodmodifiers SBaseRef::getElementName() const "
/**
   * Returns the XML element name of
   * this SBML object.
   *
   * @return the string of the name of this element.
   */ public
";


%csmethodmodifiers SBaseRef::getTypeCode() const "
/**
   * Returns the libSBML type code of this object instance.
   *
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object:
   * @link libsbmlcs.libsbml.SBML_COMP_SBASEREF SBML_COMP_SBASEREF@endlink
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers SBaseRef::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.  For example:
   *
   *   SBase::writeElements(stream);
   *   mReactants.write(stream);
   *   mProducts.write(stream);
   *   ...
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBaseRef::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor.
   *
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether or not the Visitor would like to visit the SBML object\'s next
   * sibling object (if available).
   */ public
";


%csmethodmodifiers SBaseRef::setSBMLDocument(SBMLDocument* d) "
/**
   * Sets the parent SBMLDocument of this SBML object.
   *
   * @param d the SBMLDocument object to use
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBaseRef::connectToChild "
/**
   * Sets this SBML object to child SBML objects (if any).
   * (Creates a child-parent relationship by the parent)
   *
   * Subclasses must override this function if they define
   * one ore more child elements.
   * Basically, this function needs to be called in
   * constructor, copy constructor, assignment operator.
   *
   * @see setSBMLDocument
   * @see enablePackageInternal
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBaseRef::getReferencedElementFrom(Model* model) "
/**
   * Examines the referenced Model for the referenced object, and returns it, if found.
   *
   * @param model the Model in which to look for the object referenced by
   * this SBaseRef.
   *
   * @return the element in the referenced Model to which this SBaseRef
   * refers.  If this object references an object in a Submodel, the returned
   * object will be in the instantiated Model in that Submodel.
   *
   */ public
";


%csmethodmodifiers SBaseRef::saveReferencedElement "
/**
   * Finds and stores the referenced object by finding the Model it needs to
   * point to, calling \'saveReferencedElement\' on its parent (which will also
   * be a SBaseRef or one of its subclasses), and the storing the result.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers SBaseRef::getReferencedElement "
/**
   * Returns the object pointed to by this element.  If that element was
   * previously found and set with \'saveReferencedElement\', that element is
   * returned; otherwise, \'saveReferencedElement\' is called first, and the
   * found element is returned.
   */ public
";


%csmethodmodifiers SBaseRef::clearReferencedElement "
/**
   * Removes the saved referenced element, if it had been saved earlier.
   */ public
";


%csmethodmodifiers SBaseRef::performDeletion "
/**
   * DEPRECATED FUNCTION:  DO NOT USE
   *
   * Deletes the referenced object,
   * plus any other elements that element points to through ReplacedElement
   * or ReplacedBy children.  Instead of calling this function directly, use
   * \'CompModelPlugin::instantiateSubmodels\' instead, which deals with all the
   * intricacies of replacements and deletions, and gives you access to the
   * non-flattened hierarchical form of the model.
   */ public
";


%csmethodmodifiers SBaseRef::removeFromParentAndDelete "
/**
   * Finds this SBaseRef\'s parent, which can either be a List or can be
   * another SBaseRef, and tells it to remove this.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers SBaseRef::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBaseRef::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Subclasses should override this method to read values from the given
   * XMLAttributes set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBaseRef::createObject(XMLInputStream& stream) "
/**
   * Create and return an SBML object of this class, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or @c null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBaseRef::writeAttributes(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.  For example:
   *
   *   SBase::writeAttributes(stream);
   *   stream.writeAttribute( \'metaIdRef\', mMetaIdRef );
   *   ...
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBaseRef::getDirectReference "
/**
   * Get the *direct* referenced object, which might be a Port.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SBaseRef::collectDeletions(std::set<SBase*>* removed, std::set<SBase*>* toremove) "
/**
   * Collects (in \'toremove\') the referenced object,
   * plus any other elements that element points to through ReplacedElement
   * or ReplacedBy children.  Does not delete the object directly; this should
   * be done carefully to avoid double-deletions or misinterpretation of 
   * nested replacements/deletions.  Any element already in \'removed\' will
   * not be added to \'toremove\', nor will its children be checked.
   */ public
";


%typemap(csimports) Replacing "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{comp}
 *
@htmlinclude pkg-marker-comp.html A convenience subclass of the %ReplacedElement and
 * %ReplacedBy constructs from the &ldquo;comp&rdquo; package.
 *
 * The Replacing class does not exist officialy in the the @ref comp
 * @if java \'Hierarchical %Model Composition\'@endif package
 * (&ldquo;comp&rdquo;), but is implemented here as a convenience subclass of
 * the ReplacedElement and ReplacedBy classes, since both of those classes
 * define a \'submodelRef\' attribute.
 *
 * The required attribute \'submodelRef\' takes a value of type
 * SIdRef, which must be the identifier of a Submodel object in
 * the containing model.  The model referenced by the
 * Submodel object establishes the object namespaces for the
 * \'portRef\', \'idRef\', \'unitRef\' and \'metaIdRef\'
 * attributes: only objects within the Model object may be referenced by
 * those attributes.
 */
"


%csmethodmodifiers Replacing::Replacing(unsigned int level      = CompExtension::getDefaultLevel(), unsigned int version    = CompExtension::getDefaultVersion(), unsigned int pkgVersion = CompExtension::getDefaultPackageVersion()) "
/**
   * Creates a new Replacing with the given level, version, and package
   * version.
   *
   * @param level the SBML Level
   * @param version the Version within the SBML Level
   * @param pkgVersion the version of the package
   */ public
";


%csmethodmodifiers Replacing::Replacing(CompPkgNamespaces* compns) "
/**
   * Creates a new Replacing with the given CompPkgNamespaces object.
   *
   * @param compns the namespace to use
   */ public
";


%csmethodmodifiers Replacing::Replacing(const Replacing& source) "
/**
   * Copy constructor.
   */ public
";


%csmethodmodifiers Replacing::getSubmodelRef() const "
/**
   * Returns the value of the \'submodelRef\' attribute of this SBaseRef.
   *
   * @return the value of the \'submodelRef\' attribute of this SBaseRef.
   */ public
";


%csmethodmodifiers Replacing::isSetSubmodelRef() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * SBaseRef\'s \'submodelRef\' attribute has been set.
   *
   * @return @c true if this SBaseRef\'s \'submodelRef\' attribute has been set, 
   * otherwise @c false is returned.
   */ public
";


%csmethodmodifiers Replacing::setSubmodelRef(const std::string& id) "
/**
   * Sets the value of the \'submodelRef\' attribute of this SBaseRef.  Fails
   * if the id is not a valid syntax for an SIdRef.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers Replacing::unsetSubmodelRef "
/**
   * Unsets the value of the \'SubmodelRef\' attribute of this SBaseRef.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers Replacing::hasRequiredAttributes() const "
/**
   * Returns true if getNumReferents() is exactly 1 and if the submodelRef is set.
   *
   * @return bool: \'true\' if the attributes are correctly set; \'false\' if not.
   */ public
";


%csmethodmodifiers Replacing::saveReferencedElement "
/**
   * Finds and stores the referenced object.  Finds the Submodel to which
   * it refers, getting the instantiated Model inside that Submodel, calling
   * \'getReferencedElementFrom\' on that model, and storing the result.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers Replacing::renameSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames all the SIdRef attributes on this element if they match
   * @p oldid, but not any found in child or plugin elements.
   */ public
";


%csmethodmodifiers Replacing::performReplacement "
/**
   * DEPRECATED FUNCTION:  DO NOT USE
   * 
   * To retain old functionality, this function calls performReplacementAndCollect,
   * and then actually removes the now-redundant element.  However, this can lead
   * to doubly-deleted elements, as well as the incorrect interpretation of some
   * models.  The replacement function performReplacementAndCollect
   * has been marked protected, in the hopes that people will instead simply
   * use CompModelPlugin::instantiateSubmodels, which hides all the complexity while
   * still allowing access to a non-flattened version of a hierarchical model.
   */ public
";


%csmethodmodifiers Replacing::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.  For example:
   *
   *   SBase::writeElements(stream);
   *   mReactants.write(stream);
   *   mProducts.write(stream);
   *   ...
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Replacing::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor.
   *
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether or not the Visitor would like to visit the SBML object\'s next
   * sibling object (if available).
   */ public
";


%csmethodmodifiers Replacing::setSBMLDocument(SBMLDocument* d) "
/**
   * Sets the parent SBMLDocument of this SBML object.
   *
   * @param d the SBMLDocument object to use
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Replacing::replaceWithAndMaybeDelete(SBase* replacement, bool deleteme, ASTNode* conversionFactor) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Replacing::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Replacing::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Subclasses should override this method to read values from the given
   * XMLAttributes set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Replacing::writeAttributes(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.  For example:
   *
   *   SBase::writeAttributes(stream);
   *   stream.writeAttribute( \'conversionFactor\', mConversionFactor );
   *   ...
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Replacing::updateIDs(SBase* oldnames, SBase* newnames) "
/**
   * Searches the model that @p oldnames came from for references to any of its ids,
   * and replaces them with references to @p newnames.  
   *
   * @param oldnames the object being replaced, and whose parent Model contains
   * the references that need to be updated.
   *
   * @param newnames the object that should now be referenced instead, to which 
   * any references to @p oldnames should now point.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Replacing::performConversions(SBase* replacement, ASTNode*& conversionFactor) "
/**
   * Modify mathematical references to the referenced object according to the @p conversionFactor.  
   *
   * Find all idrefs in the Model that have mathematical meaning, and convert 
   * them to instead reference the @p replacement, modified according to the 
   * @p conversionFactor.  Will modify the referenced object\'s use in MathML 
   * nodes according to replacementID/conversionFactor, and will multiply the 
   * MathML of elements that assign to the referenced object by the @p conversionFactor.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Replacing::convertConversionFactor(ASTNode*& conversionFactor) "
/**
   * Multiply this element\'s conversion factor (if present) to the @p conversionFactor.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Replacing::performReplacementAndCollect(std::set<SBase*>* removed, std::set<SBase*>* toremove) "
/**
   * An internal flattening routine, necessarily overridden by any subclass, to 
   * rename the necessary elements, perform any conversions, and add the now-redundant
   * element to the \'toremove\' list.
   */ public
";


%typemap(csimports) Deletion "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{comp}
 *
@htmlinclude pkg-marker-comp.html Implementation of the %Deletion construct from the
 * &ldquo;comp&rdquo; package.
 *
 * The Deletion class was introduced by the SBML Level&nbsp;3 @ref comp
 * @if java \'Hierarchical %Model Composition\'@endif package
 * (&ldquo;comp&rdquo;) to allow elements of submodels to be removed before
 * instantiation.

 * The Deletion object class is used to define a deletion operation
 * to be applied when a submodel instantiates a model definition.
 * Deletions may be useful in hierarchical model composition scenarios for
 * various reasons.  For example, some components in a submodel may be
 * redundant in the composed model, perhaps because the same features are
 * implemented in a different way in the new model.

 * Deletions function as follows.  When the Model to which the Submodel
 * object refers (via the \'modelRef\' attribute) is read and processed for
 * inclusion into the composed model, each Deletion object identifies an
 * object to remove from that Model instance.  The resulting submodel
 * instance consists of everything in the Model object instance minus the
 * entities referenced by the list of Deletion objects.
 * 
 * As might be expected, deletions can have wide-ranging implications,
 * especially when the object deleted has substantial substructure, as in
 * the case of reactions.  The following are rules regarding deletions and
 * their effects.
 * 
 * @li An object that has been deleted is considered inaccessible.
 * Any element that has been deleted (or replaced)
 * may not be referenced by an SBaseRef object.
 * @li If the deleted object has child objects and other structures, the
 * child objects and substructure are also considered to be deleted.
 * @li It is not an error to delete explicitly an object that is already
 * deleted by implication (for example as a result of the second point
 * above).  The resulting model is the same.
 * @li If the deleted object is from an SBML namespace that is not
 * understood by the interpreter, the deletion must be ignored&mdash;the 
 * object will not need to be deleted, as the interpreter could not
 * understand the package.  If an interpreter cannot tell whether 
 * a referenced object does not exist or if exists in an unparsed namespace
 * it may produce a warning.
 *
 * The Deletion object class is subclassed from SBaseRef, and reuses all the 
 * machinery provided by SBaseRef.  In addition, it defines two optional 
 * attributes, \'id\' and \'name\'.  The \'id\' attribute can be used to give an
 * identifier to a given deletion operation.  The identifier has no
 * mathematical meaning, but it may be useful for creating submodels that
 * can be manipulated more directly by other submodels.  (Indeed, it is
 * legitimate for an enclosing model definition to delete a deletion!)
 *
 * The optional \'name\' attribute is provided on Deletion for the
 * same reason it is provided on other elements that have identifiers;
 * viz., to provide for the possibility of giving a human-readable name to
 * the object.  The name may be useful in situations when deletions are
 * displayed to modelers.
 */
"


%csmethodmodifiers Deletion::Deletion(unsigned int level      = CompExtension::getDefaultLevel(), unsigned int version    = CompExtension::getDefaultVersion(), unsigned int pkgVersion = CompExtension::getDefaultPackageVersion()) "
/**
   * Creates a new Deletion with the given level, version, and package version.
   *
   * @param level the SBML Level
   * @param version the Version within the SBML Level
   * @param pkgVersion the version of the package
   */ public
";


%csmethodmodifiers Deletion::Deletion(CompPkgNamespaces* compns) "
/**
   * Creates a new Deletion with the given CompPkgNamespaces object.
   */ public
";


%csmethodmodifiers Deletion::Deletion(const Deletion& source) "
/**
   * Copy constructor.
   */ public
";


%csmethodmodifiers Deletion::clone() const "
/**
   * Creates and returns a deep copy of this Deletion object.
   * 
   * @return a (deep) copy of this Deletion object
   */ public
";


%csmethodmodifiers Deletion::setId(const std::string& id) "
/**
   * Sets the value of the \'id\' attribute of this Deletion.
   *
   * This method fails if the @p id is not a valid syntax for an SId.
   *
   * @param id the identifier to use
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers Deletion::getId() const "
/**
   * Returns the value of the \'id\' attribute of this Deletion.
   * 
   * @return the name of this Deletion.
   */ public
";


%csmethodmodifiers Deletion::isSetId() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * object\'s \'id\' attribute has been set.
   *
   * @htmlinclude comment-set-methods.html
   * 
   * @return @c true if the \'id\' attribute of this object has been
   * set, @c false otherwise.
   */ public
";


%csmethodmodifiers Deletion::unsetId "
/**
   * Unsets the value of the \'id\' attribute of this Deletion.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers Deletion::setName(const std::string& name) "
/**
   * Sets the value of the \'name\' attribute of this Deletion.
   *
   * The string in @p name is copied.
   *
   * @param name the new name for the Deletion
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers Deletion::getName() const "
/**
   * Returns the value of the \'name\' attribute of this Deletion.
   * 
   * @return the name of this Deletion.
   */ public
";


%csmethodmodifiers Deletion::isSetName() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * object\'s \'name\' attribute has been set.
   *
   * @htmlinclude comment-set-methods.html
   * 
   * @return @c true if the \'name\' attribute of this object has been set, @c
   * false otherwise.
   */ public
";


%csmethodmodifiers Deletion::unsetName "
/**
   * Unsets the value of the \'name\' attribute of this Deletion.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers Deletion::getElementName() const "
/**
   * Returns the XML element name of this SBML object.
   *
   * @return the string of the name of this element.
   */ public
";


%csmethodmodifiers Deletion::getTypeCode() const "
/**
   * Returns the libSBML type code of this object instance.
   *
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object:
   * @link libsbmlcs.libsbml.SBML_COMP_DELETION SBML_COMP_DELETION@endlink
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers Deletion::saveReferencedElement "
/**
   * Finds and stores the referenced object.  It finds its Submodel parent,
   * gets its instantiated Model object, calls
   * \'getReferencedElementFrom\' on that model, and stores the result.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers Deletion::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor.
   *
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether or not the Visitor would like to visit the SBML object\'s next
   * sibling object (if available).
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Deletion::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Deletion::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Subclasses should override this method to read values from the given
   * XMLAttributes set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Deletion::writeAttributes(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.  For example:
   *
   *   SBase::writeAttributes(stream);
   *   stream.writeAttribute( \'id\'  , mId   );
   *   ...
   */ /* libsbml-internal */ public
";


%typemap(csimports) ExternalModelDefinition "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{comp}
 *
@htmlinclude pkg-marker-comp.html Implementation of the %ExternalModelDefinition construct
 * from the &ldquo;comp&rdquo; package.
 *
 * The ExternalModelDefinition class was introduced by the SBML Level&nbsp;3
 * @ref comp @if java \'Hierarchical %Model Composition\'@endif 
 * package (&ldquo;comp&rdquo;) to define references to Model
 * objects defined in other files.
 * 
 * ExternalModelDefinition objects are model definitions&mdash;in and of
 * themselves, they are definitions of models but not uses of those models.
 * The class provides a way to declare and identify them so that Model
 * objects in the present SBML document can use them in Submodel objects.
 * 
 * ExternalModelDefinition contains two required attributes
 * (\'source\' and \'id\') and three optional attributes
 * (\'modelRef\', \'md5\' and \'name\').
 *  
 * The \'id\' attribute serves to provide a handle for the external
 * model reference so that Submodel objects can refer to it.  Crucially,
 * it is not the identifier of the model being referenced; rather,
 * it is an identifier for this ExternalModelDefinition object within the
 * current SBML document.  The \'id\' attribute takes a required value
 * of type SId, and must be unique across all Model and ExternalModelDefinition
 * objects present in the document.
 * 
 * ExternalModelDefinition also has an optional \'name\' attribute, of
 * type \'string\'.  The \'name\' attribute may be used to provide
 * a human-readable description of the ExternalModelDefintion object.
 * 
 * The required attribute \'source\' is used to locate the SBML document
 * containing an external model definition.  The value of this attribute must
 * be of type anyURI.  Since URIs may be either URLs, URNs, or relative or
 * absolute file locations, this offers flexibility in referencing SBML
 * documents.  In all cases, the \'source\' attribute value must refer
 * specifically to an SBML Level&nbsp;3 Version&nbsp;1 document; prior
 * Levels/Versions of SBML are not supported by this package.  The entire
 * file at the given location is referenced.  The \'source\' attribute must
 * have a value for every ExternalModelDefinition instance.
 * 
 * ExternalModelDefinition\'s optional attribute \'modelRef\', of type
 * SIdRef, is used to identify a Model or
 * ExternalModelDefinition object within the SBML document located at
 * \'source\'.  The object referenced may be the main model in the
 * document, or it may be a model definition contained in the SBML
 * document\'s ListOfModelDefinitions or
 * ListOfExternalModelDefinitions lists.  Loops are not allowed: it
 * must be possible to follow a chain of ExternalModelDefinition objects
 * to its end in a Model object.
 * 
 * In core SBML, the \'id\' on Model is an optional attribute, and therefore,
 * it is possible that the Model object in a given SBML document does not
 * have an identifier.  In that case, there is no value to give to the
 * \'modelRef\' attribute in ExternalModelDefinition.  If \'modelRef\' does not
 * have a value, then the main model (i.e., the <code>&lt;model&gt;</code>
 * element within the <code>&lt;sbml&gt;</code> element) in the referenced
 * file is interpreted as being the model referenced by this
 * ExternalModelDefinition instance.
 * 
 * Finally, the optional \'md5\' attribute takes a string value.  If
 * set, it must be an MD5 checksum value computed over the document
 * referenced by \'source\'.  This checksum can serve as a data
 * integrity check over the contents of the \'source\'.  Applications
 * may use this to verify that the contents have not changed since the time
 * that the ExternalModelDefinition reference was constructed.
 */
"


%csmethodmodifiers ExternalModelDefinition::ExternalModelDefinition(unsigned int level      = CompExtension::getDefaultLevel(), unsigned int version    = CompExtension::getDefaultVersion(), unsigned int pkgVersion = CompExtension::getDefaultPackageVersion()) "
/**
   * Creates a new ExternalModelDefinition with the given level, version, and
   * package version.
   *
   * @param level the SBML Level
   * @param version the Version within the SBML Level
   * @param pkgVersion the version of the package
   */ public
";


%csmethodmodifiers ExternalModelDefinition::ExternalModelDefinition(CompPkgNamespaces* compns) "
/**
   * Creates a new ExternalModelDefinition with the given CompPkgNamespaces
   * object.
   *
   * @param compns the namespace to use.
   */ public
";


%csmethodmodifiers ExternalModelDefinition::ExternalModelDefinition(const ExternalModelDefinition& source) "
/**
   * Copy constructor.
   *
   * @param source the object to copy.
   */ public
";


%csmethodmodifiers ExternalModelDefinition::clone() const "
/**
   * Creates and returns a deep copy of this ExternalModelDefinition object.
   * 
   * @return a (deep) copy of this ExternalModelDefinition object
   */ public
";


%csmethodmodifiers ExternalModelDefinition::setId(const std::string &id) "
/**
   * Sets the value of the \'id\' attribute of this ExternalModelDefinition.
   *
   * This method fails if the @p id is not a valid syntax for an SId.
   *
   * @param id the identifier to use
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers ExternalModelDefinition::getId() const "
/**
   * Returns the value of the \'id\' attribute of this ExternalModelDefinition.
   * 
   * @return the name of this ExternalModelDefinition.
   */ public
";


%csmethodmodifiers ExternalModelDefinition::isSetId() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * object\'s \'id\' attribute has been set.
   *
   * @htmlinclude comment-set-methods.html
   * 
   * @return @c true if the \'id\' attribute of this object has been
   * set, @c false otherwise.
   */ public
";


%csmethodmodifiers ExternalModelDefinition::unsetId "
/**
   * Unsets the value of the \'id\' attribute of this ExternalModelDefinition.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers ExternalModelDefinition::setName(const std::string& name) "
/**
   * Sets the value of the \'name\' attribute of this ExternalModelDefinition.
   *
   * The string in @p name is copied.
   *
   * @param name the new name for the ExternalModelDefinition
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers ExternalModelDefinition::getName() const "
/**
   * Returns the value of the \'name\' attribute of this
   * ExternalModelDefinition.
   * 
   * @return the name of this ExternalModelDefinition.
   */ public
";


%csmethodmodifiers ExternalModelDefinition::isSetName() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * object\'s \'name\' attribute has been set.
   *
   * @htmlinclude comment-set-methods.html
   * 
   * @return @c true if the \'name\' attribute of this object has been
   * set, @c false otherwise.
   */ public
";


%csmethodmodifiers ExternalModelDefinition::unsetName "
/**
   * Unsets the value of the \'name\' attribute of this
   * ExternalModelDefinition.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers ExternalModelDefinition::getModelRef() const "
/**
   * Returns the value of the \'modelRef\' attribute of this
   * ExternalModelDefinition.
   *
   * @return the value of the \'modelRef\' attribute of this
   * ExternalModelDefinition.
   */ public
";


%csmethodmodifiers ExternalModelDefinition::isSetModelRef() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * ExternalModelDefinition\'s \'modelRef\' attribute has been set.
   *
   * @return @c true if this ExternalModelDefinition\'s \'modelRef\' attribute
   * has been set, otherwise @c false is returned.
   */ public
";


%csmethodmodifiers ExternalModelDefinition::setModelRef(const std::string& id) "
/**
   * Sets the value of the \'modelRef\' attribute of this
   * ExternalModelDefinition.  Fails if the @p id is not a valid syntax for an
   * SIdRef.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers ExternalModelDefinition::unsetModelRef "
/**
   * Unsets the value of the \'modelRef\' attribute of this
   * ExternalModelDefinition.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers ExternalModelDefinition::getMd5() const "
/**
   * Returns the value of the \'md5\' attribute of this
   * ExternalModelDefinition.
   *
   * @return the value of the \'md5\' attribute of this
   * ExternalModelDefinition.
   */ public
";


%csmethodmodifiers ExternalModelDefinition::isSetMd5() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * ExternalModelDefinition\'s \'md5\' attribute has been set.
   *
   * @return @c true if this ExternalModelDefinition\'s \'md5\' attribute has
   * been set, otherwise @c false is returned.
   */ public
";


%csmethodmodifiers ExternalModelDefinition::setMd5(const std::string& md5) "
/**
   * Sets the value of the \'md5\' attribute of this ExternalModelDefinition.
   * 
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers ExternalModelDefinition::unsetMd5 "
/**
   * Unsets the value of the \'md5\' attribute of this ExternalModelDefinition.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers ExternalModelDefinition::getSource() const "
/**
   * Returns the value of the \'source\' attribute of this
   * ExternalModelDefinition.
   *
   * @return the value of the \'source\' attribute of this
   * ExternalModelDefinition.
   */ public
";


%csmethodmodifiers ExternalModelDefinition::isSetSource() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * ExternalModelDefinition\'s \'source\' attribute has been set.
   *
   * @return @c true if this ExternalModelDefinition\'s \'source\' attribute has
   * been set, otherwise @c false is returned.
   */ public
";


%csmethodmodifiers ExternalModelDefinition::setSource(const std::string& source) "
/**
   * Sets the value of the \'source\' attribute of this
   * ExternalModelDefinition.
   *
   * @param source the value to use for the \'source\' attribute.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers ExternalModelDefinition::unsetSource "
/**
   * Unsets the value of the \'source\' attribute of this
   * ExternalModelDefinition.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers ExternalModelDefinition::hasRequiredAttributes() const "
/**
   * Returns true if the \'modelRef\' and \'id\' attributes are set, and false if not.
   *
   * This method does not check to see if the referred-to model actually
   * exists.
   *
   * @return bool: @c true if the attributes are correctly set; @c false
   * if not.
   */ public
";


%csmethodmodifiers ExternalModelDefinition::getElementName() const "
/**
   * Returns the XML element name of this SBML object.
   *
   * @return the string of the name of this element.
   */ public
";


%csmethodmodifiers ExternalModelDefinition::getTypeCode() const "
/**
   * Returns the libSBML type code of this object instance.
   *
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object:
   * @link libsbmlcs.libsbml.SBML_COMP_EXTERNALMODELDEFINITION SBML_COMP_EXTERNALMODELDEFINITION@endlink
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers ExternalModelDefinition::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.  For example:
   * <pre>
   *   SBase::writeElements(stream);
   *   mReactants.write(stream);
   *   mProducts.write(stream);
   *   ...
   * <pre>
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ExternalModelDefinition::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor.
   *
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether or not the Visitor would like to visit the SBML object\'s next
   * sibling object (if available).
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ExternalModelDefinition::getReferencedModel "
/**
   * Resolves and returns the referenced Model object of this ExternalModelDefinition.
   * If none can be found, an error is set and null is returned.  The
   * returned Model is a non-owning pointer to the model; the original
   * Model is saved (along with the SBMLDocument from which it comes) as
   * a child of the CompSBMLDocumentPlugin of the SBMLDocument to which this
   * Model belongs.  If this ExternalModelDefinition is not part of any
   * SBMLDocument, null will be returned.
   */ public
";


%csmethodmodifiers ExternalModelDefinition::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ExternalModelDefinition::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Subclasses should override this method to read values from the given
   * XMLAttributes set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ExternalModelDefinition::writeAttributes(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.  For example:
   *
   *   SBase::writeAttributes(stream);
   *   stream.writeAttribute( \'submodel\' , mSubmodel );
   *   ...
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ExternalModelDefinition::getReferencedModel(SBMLDocument* errordoc, std::set<std::pair<std::string, std::string> > parents) "
/** */ /* libsbml-internal */ public
";


%typemap(csimports) ListOfDeletions "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{comp}
 *
@htmlinclude pkg-marker-comp.html Implementation of the %ListOfDeletions construct from the
 * &ldquo;comp&rdquo; package.
 * 
 * The ListOfDeletions is a container for the &ldquo;comp&rdquo;
 * Submodel that defines elements to be removed before instantiation.
 * 
 * *
 * 
 * The various ListOf___ classes in SBML are merely containers used for
 * organizing the main components of an SBML model.  All are derived from
 * the abstract class SBase, and inherit the various attributes and
 * subelements of SBase, such as \'metaid\' as and \'annotation\'.  The
 * ListOf___ classes do not add any attributes of their own.
 *
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 *
 * @htmlinclude listof-illustration.html
 *
 * Readers may wonder about the motivations for using the ListOf___
 * containers.  A simpler approach in XML might be to place the components
 * all directly at the top level of the model definition.  The choice made
 * in SBML is to group them within XML elements named after
 * ListOf<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from SBase means that software tools can add information @em about
 * the lists themselves into each list container\'s \'annotation\'.
 * 
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 *
 *
 *
 * @see Deletion
 * @see ListOfExternalModelDefinitions
 * @see ListOfModelDefinitions
 * @see ListOfPorts
 * @see ListOfReplacedElements
 * @see ListOfSubmodels
 */
"


%csmethodmodifiers ListOfDeletions::clone() const "
/**
   * Creates and returns a deep copy of this ListOfDeletions object.
   *
   * @return a (deep) copy of this ListOfDeletions.
   */ public
";


%csmethodmodifiers ListOfDeletions::ListOfDeletions(unsigned int level      = CompExtension::getDefaultLevel(), unsigned int version    = CompExtension::getDefaultVersion(), unsigned int pkgVersion = CompExtension::getDefaultPackageVersion()) "
/**
   * Creates a new ListOfDeletions with the given level, version, and package
   * version.
   *
   * @param level the SBML Level
   * @param version the Version within the SBML Level
   * @param pkgVersion the version of the package
   */ public
";


%csmethodmodifiers ListOfDeletions::ListOfDeletions(CompPkgNamespaces* compns) "
/**
   * Creates a new ListOfDeletions with the given CompPkgNamespaces object.
   *
   * @param compns the namespace to use
   */ public
";


%csmethodmodifiers ListOfDeletions::get(unsigned int n) "
/**
   * Get a Deletion from the ListOfDeletions.
   *
   * @param n the index number of the Deletion to get.
   * 
   * @return the nth Deletion in this ListOfDeletions.
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfDeletions::get "
/**
   * Get a Deletion from the ListOfDeletions.
   *
   * @param n the index number of the Deletion to get.
   * 
   * @return the nth Deletion in this ListOfDeletions.
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfDeletions::get(const std::string& sid) "
/**
   * Get a Deletion from the ListOfDeletions
   * based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the Deletion to get.
   * 
   * @return Deletion in this ListOfDeletions
   * with the given @p sid or @c null if no such
   * Member exists.
   *
   * @see get(long n)
   * @see size()
   */ public
";


%csmethodmodifiers ListOfDeletions::get(const std::string& sid) const "
/**
   * Get a Deletion from the ListOfDeletions
   * based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the Deletion to get.
   * 
   * @return Deletion in this ListOfDeletions
   * with the given @p sid or @c null if no such
   * Deletion exists.
   *
   * @see get(long n)
   * @see size()
   */ public
";


%csmethodmodifiers ListOfDeletions::remove(unsigned int n) "
/**
   * Removes the nth item from this ListOfDeletions items and returns a
   * pointer to it.
   *
   * The caller owns the returned item and is responsible for deleting it.
   *
   * @param n the index of the item to remove
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfDeletions::remove(const std::string& sid) "
/**
   * Removes an item from this ListOfDeletions items based on its identifier
   * and returns a pointer to it.
   *
   * The caller owns the returned item and is responsible for deleting it.
   *
   * @param sid string representing the id of the item to remove
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfDeletions::getItemTypeCode() const "
/**
   * Returns the libSBML type code for the objects contained in this ListOf
   * (i.e., Deletion objects, if the list is non-empty).
   * 
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for objects contained in this list:
   * @link libsbmlcs.libsbml.SBML_COMP_DELETION SBML_COMP_DELETION@endlink (default).
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers ListOfDeletions::getElementName() const "
/**
   * Returns the XML element name of this SBML object.
   *
   * @return the string of the name of this element.
   */ public
";


%csmethodmodifiers ListOfDeletions::createObject(XMLInputStream& stream) "
/**
   * Create and return an SBML object of this class, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or @c null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfDeletions::writeXMLNS(XMLOutputStream& stream) const "
/** */ /* libsbml-internal */ public
";


%typemap(csimports) ListOfExternalModelDefinitions "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{comp}
 *
@htmlinclude pkg-marker-comp.html Implementation of the %ListOfExternalModelDefinitions
 * construct from the &ldquo;comp&rdquo; package.
 * 
 * The ListOfExternalModelDefinitions is a container for the extended 
 * SBMLDocument that defines references to Models defined in external
 * files.
 * 
 * *
 * 
 * The various ListOf___ classes in SBML are merely containers used for
 * organizing the main components of an SBML model.  All are derived from
 * the abstract class SBase, and inherit the various attributes and
 * subelements of SBase, such as \'metaid\' as and \'annotation\'.  The
 * ListOf___ classes do not add any attributes of their own.
 *
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 *
 * @htmlinclude listof-illustration.html
 *
 * Readers may wonder about the motivations for using the ListOf___
 * containers.  A simpler approach in XML might be to place the components
 * all directly at the top level of the model definition.  The choice made
 * in SBML is to group them within XML elements named after
 * ListOf<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from SBase means that software tools can add information @em about
 * the lists themselves into each list container\'s \'annotation\'.
 * 
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 *
 *
 *
 * @see ExternalModelDefinition
 * @see ListOfDeletions
 * @see ListOfModelDefinitions
 * @see ListOfPorts
 * @see ListOfReplacedElements
 * @see ListOfSubmodels
 */
"


%csmethodmodifiers ListOfExternalModelDefinitions::clone() const "
/**
   * Creates and returns a deep copy of this ListOfExternalModelDefinitions object.
   *
   * @return a (deep) copy of this ListOfExternalModelDefinitions.
   */ public
";


%csmethodmodifiers ListOfExternalModelDefinitions::ListOfExternalModelDefinitions(unsigned int level      = CompExtension::getDefaultLevel(), unsigned int version    = CompExtension::getDefaultVersion(), unsigned int pkgVersion = CompExtension::getDefaultPackageVersion()) "
/**
   * Creates a new ListOfExternalModelDefinitions with the given level,
   * version, and package version.
   *
   * @param level the SBML Level
   * @param version the Version within the SBML Level
   * @param pkgVersion the version of the package
   */ public
";


%csmethodmodifiers ListOfExternalModelDefinitions::ListOfExternalModelDefinitions(CompPkgNamespaces* compns) "
/**
   * Creates a new ListOfExternalModelDefinitions with the given
   * CompPkgNamespaces object.
   *
   * @param compns the namespace to use
   */ public
";


%csmethodmodifiers ListOfExternalModelDefinitions::get(unsigned int n) "
/**
   * Get a ExternalModelDefinition from the ListOfExternalModelDefinitions.
   *
   * @param n the index number of the ExternalModelDefinition to get.
   * 
   * @return the nth ExternalModelDefinition in this
   * ListOfExternalModelDefinitions.
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfExternalModelDefinitions::get "
/**
   * Get a ExternalModelDefinition from the ListOfExternalModelDefinitions.
   *
   * @param n the index number of the ExternalModelDefinition to get.
   * 
   * @return the nth ExternalModelDefinition in this
   * ListOfExternalModelDefinitions.
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfExternalModelDefinitions::get(const std::string& sid) "
/**
   * Get a Model from the ListOfExternalModelDefinitions
   * based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the Model to get.
   * 
   * @return Model in this ListOfExternalModelDefinitions
   * with the given @p sid or @c null if no such
   * Member exists.
   *
   * @see get(long n)
   * @see size()
   */ public
";


%csmethodmodifiers ListOfExternalModelDefinitions::get(const std::string& sid) const "
/**
   * Get a Model from the ListOfExternalModelDefinitions
   * based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the Model to get.
   * 
   * @return Model in this ListOfExternalModelDefinitions
   * with the given @p sid or @c null if no such
   * Model exists.
   *
   * @see get(long n)
   * @see size()
   */ public
";


%csmethodmodifiers ListOfExternalModelDefinitions::remove(unsigned int n) "
/**
   * Removes the nth item from this ListOfExternalModelDefinitions items and
   * returns a pointer to it.
   *
   * The caller owns the returned item and is responsible for deleting it.
   *
   * @param n the index of the item to remove
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfExternalModelDefinitions::remove(const std::string &sid) "
/**
   * Removes the item with given @p sid from this ListOfModelDefinitions items
   * and returns a pointer to it.
   *
   * The caller owns the returned item and is responsible for deleting it.
   *
   * @param sid the id of the item to remove
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfExternalModelDefinitions::getItemTypeCode() const "
/**
   * Returns the libSBML type code for the objects contained in this ListOf
   * (i.e., Model objects, if the list is non-empty).
   * 
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for objects contained in this list:
   * @link libsbmlcs.libsbml.SBML_COMP_EXTERNALMODELDEFINITION SBML_COMP_EXTERNALMODELDEFINITION@endlink (default).
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers ListOfExternalModelDefinitions::getElementName() const "
/**
   * Returns the XML element name of
   * this SBML object.
   *
   * @return the string of the name of this element.
   */ public
";


%csmethodmodifiers ListOfExternalModelDefinitions::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor.
   *
   * @param v the SBMLVisitor instance to be used.
   * 
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether the Visitor would like to visit the next item in the
   * list.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfExternalModelDefinitions::createObject(XMLInputStream& stream) "
/**
   * Create and return an SBML object of this class, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfExternalModelDefinitions::writeXMLNS(XMLOutputStream& stream) const "
/** */ /* libsbml-internal */ public
";


%typemap(csimports) ListOfModelDefinitions "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{comp}
 *
@htmlinclude pkg-marker-comp.html Implementation of the %ListOfModelDefinitions construct
 * from the &ldquo;comp&rdquo; package.
 * 
 * The ListOfModelDefinitions is a container for the extended 
 * SBMLDocument that allows one to define multiple Models in a single file
 * for use in Submodel objects.
 * 
 * *
 * 
 * The various ListOf___ classes in SBML are merely containers used for
 * organizing the main components of an SBML model.  All are derived from
 * the abstract class SBase, and inherit the various attributes and
 * subelements of SBase, such as \'metaid\' as and \'annotation\'.  The
 * ListOf___ classes do not add any attributes of their own.
 *
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 *
 * @htmlinclude listof-illustration.html
 *
 * Readers may wonder about the motivations for using the ListOf___
 * containers.  A simpler approach in XML might be to place the components
 * all directly at the top level of the model definition.  The choice made
 * in SBML is to group them within XML elements named after
 * ListOf<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from SBase means that software tools can add information @em about
 * the lists themselves into each list container\'s \'annotation\'.
 * 
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 *
 *
 *
 * @see ModelDefinition
 * @see ListOfDeletions
 * @see ListOfExternalModelDefinitions
 * @see ListOfPorts
 * @see ListOfReplacedElements
 * @see ListOfSubmodels
 */
"


%csmethodmodifiers ListOfModelDefinitions::clone() const "
/**
   * Creates and returns a deep copy of this ListOfModelDefinitions object.
   *
   * @return a (deep) copy of this ListOfModelDefinitions.
   */ public
";


%csmethodmodifiers ListOfModelDefinitions::ListOfModelDefinitions(unsigned int level      = CompExtension::getDefaultLevel(), unsigned int version    = CompExtension::getDefaultVersion(), unsigned int pkgVersion = CompExtension::getDefaultPackageVersion()) "
/**
   * Creates a new ListOfModelDefinitions with the given level, version, and
   * package version.
   *
   * @param level the SBML Level
   * @param version the Version within the SBML Level
   * @param pkgVersion the version of the package
   */ public
";


%csmethodmodifiers ListOfModelDefinitions::ListOfModelDefinitions(CompPkgNamespaces* compns) "
/**
   * Creates a new ListOfModelDefinitions with the given CompPkgNamespaces
   * object.
   */ public
";


%csmethodmodifiers ListOfModelDefinitions::get(unsigned int n) "
/**
   * Get a ModelDefinition from the ListOfModelDefinitions.
   *
   * @param n the index number of the ModelDefinition to get.
   * 
   * @return the nth ModelDefinition in this ListOfModelDefinitions.
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfModelDefinitions::get "
/**
   * Get a ModelDefinition from the ListOfModelDefinitions.
   *
   * @param n the index number of the ModelDefinition to get.
   * 
   * @return the nth ModelDefinition in this ListOfModelDefinitions.
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfModelDefinitions::get(const std::string& sid) "
/**
   * Get a Model from the ListOfModelDefinitions
   * based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the Model to get.
   * 
   * @return Model in this ListOfModelDefinitions
   * with the given @p sid or @c null if no such
   * Member exists.
   *
   * @see get(long n)
   * @see size()
   */ public
";


%csmethodmodifiers ListOfModelDefinitions::get(const std::string& sid) const "
/**
   * Get a Model from the ListOfModelDefinitions
   * based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the Model to get.
   * 
   * @return Model in this ListOfModelDefinitions
   * with the given @p sid or @c null if no such
   * Model exists.
   *
   * @see get(long n)
   * @see size()
   */ public
";


%csmethodmodifiers ListOfModelDefinitions::remove(unsigned int n) "
/**
   * Removes the nth item from this ListOfModelDefinitions items and returns
   * a pointer to it.
   *
   * The caller owns the returned item and is responsible for deleting it.
   *
   * @param n the index of the item to remove
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfModelDefinitions::*remove(const std::string &sid) "
/**
   * Removes the item with given identifer from this ListOfModelDefinitions
   * items and returns a pointer to it.
   *
   * The caller owns the returned item and is responsible for deleting it.
   *
   * @param sid the id of the item to remove
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfModelDefinitions::getItemTypeCode() const "
/**
   * Returns the libSBML type code for the objects contained in this ListOf
   * (i.e., ModelDefinition objects, if the list is non-empty).
   * 
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for objects contained in this list:
   * @link libsbmlcs.libsbml.SBML_COMP_MODELDEFINITION SBML_COMP_MODELDEFINITION@endlink (default).
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers ListOfModelDefinitions::getElementName() const "
/**
   * Returns the XML element name of
   * this SBML object.
   *
   * @return the string of the name of this element.
   */ public
";


%csmethodmodifiers ListOfModelDefinitions::createObject(XMLInputStream& stream) "
/**
   * Create and return an SBML object of this class, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfModelDefinitions::writeXMLNS(XMLOutputStream& stream) const "
/** */ /* libsbml-internal */ public
";


%typemap(csimports) ListOfPorts "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{comp}
 *
@htmlinclude pkg-marker-comp.html Implementation of the %ListOfPorts construct from the
 * &ldquo;comp&rdquo; package.
 * 
 * The ListOfPorts is a container for the extended 
 * Model for Port objects for that Model.
 * 
 * *
 * 
 * The various ListOf___ classes in SBML are merely containers used for
 * organizing the main components of an SBML model.  All are derived from
 * the abstract class SBase, and inherit the various attributes and
 * subelements of SBase, such as \'metaid\' as and \'annotation\'.  The
 * ListOf___ classes do not add any attributes of their own.
 *
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 *
 * @htmlinclude listof-illustration.html
 *
 * Readers may wonder about the motivations for using the ListOf___
 * containers.  A simpler approach in XML might be to place the components
 * all directly at the top level of the model definition.  The choice made
 * in SBML is to group them within XML elements named after
 * ListOf<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from SBase means that software tools can add information @em about
 * the lists themselves into each list container\'s \'annotation\'.
 * 
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 *
 *
 *
 * @see Port
 * @see ListOfDeletions
 * @see ListOfExternalModelDefinitions
 * @see ListOfModelDefinitions
 * @see ListOfReplacedElements
 * @see ListOfSubmodels
 */
"


%csmethodmodifiers ListOfPorts::clone() const "
/**
   * Creates and returns a deep copy of this ListOfPorts object.
   *
   * @return a (deep) copy of this ListOfPorts.
   */ public
";


%csmethodmodifiers ListOfPorts::ListOfPorts(unsigned int level      = CompExtension::getDefaultLevel(), unsigned int version    = CompExtension::getDefaultVersion(), unsigned int pkgVersion = CompExtension::getDefaultPackageVersion()) "
/**
   * Creates a new ListOfPorts with the given level, version, and package version.
   *
   * @param level the SBML Level
   * @param version the Version within the SBML Level
   * @param pkgVersion the version of the package
   */ public
";


%csmethodmodifiers ListOfPorts::ListOfPorts(CompPkgNamespaces* compns) "
/**
   * Creates a new ListOfPorts with the given CompPkgNamespaces object.
   *
   * @param compns the namespace to use
   */ public
";


%csmethodmodifiers ListOfPorts::get(unsigned int n) "
/**
   * Get a Port from the ListOfPorts.
   *
   * @param n the index number of the Port to get.
   * 
   * @return the nth Port in this ListOfPorts.
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfPorts::get "
/**
   * Get a Port from the ListOfPorts.
   *
   * @param n the index number of the Port to get.
   * 
   * @return the nth Port in this ListOfPorts.
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfPorts::get(const std::string& sid) "
/**
   * Get a Port from the ListOfPorts
   * based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the Port to get.
   * 
   * @return Port in this ListOfPorts
   * with the given @p sid or @c null if no such
   * Member exists.
   *
   * @see get(long n)
   * @see size()
   */ public
";


%csmethodmodifiers ListOfPorts::get(const std::string& sid) const "
/**
   * Get a Port from the ListOfPorts
   * based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the Port to get.
   * 
   * @return Port in this ListOfPorts
   * with the given @p sid or @c null if no such
   * Port exists.
   *
   * @see get(long n)
   * @see size()
   */ public
";


%csmethodmodifiers ListOfPorts::remove(const std::string& sid) "
/**
   * Removes an item from this ListOfPorts items based on the identifier and
   * returns a pointer to it.
   *
   * The caller owns the returned item and is responsible for deleting it.
   *
   * @param sid string representing the id of the Port to remove
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfPorts::remove(unsigned int n) "
/**
   * Removes the nth item from this ListOfPorts items and returns a pointer
   * to it.
   *
   * The caller owns the returned item and is responsible for deleting it.
   *
   * @param n the index of the item to remove
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfPorts::getItemTypeCode() const "
/**
   * Returns the libSBML type code for the objects contained in this ListOf
   * (i.e., Port objects, if the list is non-empty).
   * 
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for objects contained in this list:
   * @link libsbmlcs.libsbml.SBML_COMP_PORT SBML_COMP_PORT@endlink (default).
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers ListOfPorts::getElementName() const "
/**
   * Returns the XML element name of
   * this SBML object.
   *
   * @return the string of the name of this element.
   */ public
";


%csmethodmodifiers ListOfPorts::getElementBySId(const std::string& id) "
/**
   * Returns the first child element found that has the given @p id in the
   * model-wide SId namespace, or @c null if no such object is found.  Since the
   * id of Port objects are in the PortSId namespace, no Port object is
   * returned by this function.
   *
   * @param id string representing the id of objects to find
   *
   * @return a pointer to the SBase element with the given @p id.
   */ public
";


%csmethodmodifiers ListOfPorts::createObject(XMLInputStream& stream) "
/**
   * Create and return an SBML object of this class, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfPorts::writeXMLNS(XMLOutputStream& stream) const "
/** */ /* libsbml-internal */ public
";


%typemap(csimports) ListOfReplacedElements "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{comp}
 *
@htmlinclude pkg-marker-comp.html Implementation of the %ListOfReplacedElements construct
 * from the &ldquo;comp&rdquo; package.
 * 
 * The ListOfReplacedElements is a container for any SBase object.  It 
 * contains ReplacedElement objects, which point to elements the parent
 * SBase object is to replace.
 * 
 * *
 * 
 * The various ListOf___ classes in SBML are merely containers used for
 * organizing the main components of an SBML model.  All are derived from
 * the abstract class SBase, and inherit the various attributes and
 * subelements of SBase, such as \'metaid\' as and \'annotation\'.  The
 * ListOf___ classes do not add any attributes of their own.
 *
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 *
 * @htmlinclude listof-illustration.html
 *
 * Readers may wonder about the motivations for using the ListOf___
 * containers.  A simpler approach in XML might be to place the components
 * all directly at the top level of the model definition.  The choice made
 * in SBML is to group them within XML elements named after
 * ListOf<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from SBase means that software tools can add information @em about
 * the lists themselves into each list container\'s \'annotation\'.
 * 
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 *
 *
 *
 * @see ReplacedElement
 * @see ListOfDeletions
 * @see ListOfExternalModelDefinitions
 * @see ListOfModelDefinitions
 * @see ListOfPorts
 * @see ListOfSubmodels
 */
"


%csmethodmodifiers ListOfReplacedElements::clone() const "
/**
   * Creates and returns a deep copy of this ListOfReplacedElements object.
   *
   * @return a (deep) copy of this ListOfReplacedElements.
   */ public
";


%csmethodmodifiers ListOfReplacedElements::ListOfReplacedElements(unsigned int level      = CompExtension::getDefaultLevel(), unsigned int version    = CompExtension::getDefaultVersion(), unsigned int pkgVersion = CompExtension::getDefaultPackageVersion()) "
/**
   * Creates a new ListOfReplacedElements with the given level, version, and
   * package version.
   *
   * @param level the SBML Level
   * @param version the Version within the SBML Level
   * @param pkgVersion the version of the package
   */ public
";


%csmethodmodifiers ListOfReplacedElements::ListOfReplacedElements(CompPkgNamespaces* compns) "
/**
   * Creates a new ListOfReplacedElements with the given CompPkgNamespaces
   * object.
   *
   * @param compns the namespace to use
   */ public
";


%csmethodmodifiers ListOfReplacedElements::get(unsigned int n) "
/**
   * Get a ReplacedElement from the ListOfReplacedElements.
   *
   * @param n the index number of the ReplacedElement to get.
   * 
   * @return the nth ReplacedElement in this ListOfReplacedElements.
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfReplacedElements::get "
/**
   * Get a ReplacedElement from the ListOfReplacedElements.
   *
   * @param n the index number of the ReplacedElement to get.
   * 
   * @return the nth ReplacedElement in this ListOfReplacedElements.
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfReplacedElements::remove(unsigned int n) "
/**
   * Removes the nth item from this ListOfReplacedElements items and returns
   * a pointer to it.
   *
   * The caller owns the returned item and is responsible for deleting it.
   *
   * @param n the index of the item to remove
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfReplacedElements::getItemTypeCode() const "
/**
   * Returns the libSBML type code for the objects contained in this ListOf
   * (i.e., ReplacedElements objects, if the list is non-empty).
   * 
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for objects contained in this list:
   * @link libsbmlcs.libsbml.SBML_COMP_REPLACEDELEMENT SBML_COMP_REPLACEDELEMENT@endlink (default).
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers ListOfReplacedElements::getElementName() const "
/**
   * Returns the XML element name of
   * this SBML object.
   *
   * @return the string of the name of this element.
   */ public
";


%csmethodmodifiers ListOfReplacedElements::createObject(XMLInputStream& stream) "
/**
   * Create and return an SBML object of this class, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfReplacedElements::writeXMLNS(XMLOutputStream& stream) const "
/** */ /* libsbml-internal */ public
";


%typemap(csimports) ListOfSubmodels "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{comp}
 *
@htmlinclude pkg-marker-comp.html Implementation of the %ListOfSubmodels construct from the
 * &ldquo;comp&rdquo; package.
 * 
 * The ListOfSubmodels is a container for the extended 
 * Model that contains Submodel objects to be instantiated in that Model.
 * 
 * *
 * 
 * The various ListOf___ classes in SBML are merely containers used for
 * organizing the main components of an SBML model.  All are derived from
 * the abstract class SBase, and inherit the various attributes and
 * subelements of SBase, such as \'metaid\' as and \'annotation\'.  The
 * ListOf___ classes do not add any attributes of their own.
 *
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 *
 * @htmlinclude listof-illustration.html
 *
 * Readers may wonder about the motivations for using the ListOf___
 * containers.  A simpler approach in XML might be to place the components
 * all directly at the top level of the model definition.  The choice made
 * in SBML is to group them within XML elements named after
 * ListOf<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from SBase means that software tools can add information @em about
 * the lists themselves into each list container\'s \'annotation\'.
 * 
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 *
 *
 *
 * @see Submodel
 * @see ListOfDeletions
 * @see ListOfExternalModelDefinitions
 * @see ListOfModelDefinitions
 * @see ListOfPorts
 * @see ListOfReplacedElements
 */
"


%csmethodmodifiers ListOfSubmodels::clone() const "
/**
   * Creates and returns a deep copy of this ListOfSubmodels object.
   *
   * @return a (deep) copy of this ListOfSubmodels.
   */ public
";


%csmethodmodifiers ListOfSubmodels::ListOfSubmodels(unsigned int level      = CompExtension::getDefaultLevel(), unsigned int version    = CompExtension::getDefaultVersion(), unsigned int pkgVersion = CompExtension::getDefaultPackageVersion()) "
/**
   * Creates a new ListOfSubmodels with the given level, version, and package
   * version.
   *
   * @param level the SBML Level
   * @param version the Version within the SBML Level
   * @param pkgVersion the version of the package
   */ public
";


%csmethodmodifiers ListOfSubmodels::ListOfSubmodels(CompPkgNamespaces* compns) "
/**
   * Creates a new ListOfSubmodels with the given CompPkgNamespaces object.
   *
   * @param compns the namespace to use
   */ public
";


%csmethodmodifiers ListOfSubmodels::get(unsigned int n) "
/**
   * Get a Submodel from the ListOfSubmodels.
   *
   * @param n the index number of the Submodel to get.
   * 
   * @return the nth Submodel in this ListOfSubmodels.
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfSubmodels::get "
/**
   * Get a Submodel from the ListOfSubmodels.
   *
   * @param n the index number of the Submodel to get.
   * 
   * @return the nth Submodel in this ListOfSubmodels.
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfSubmodels::get(const std::string& sid) "
/**
   * Get a Model from the ListOfSubmodels
   * based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the Model to get.
   * 
   * @return Model in this ListOfSubmodels
   * with the given @p sid or @c null if no such
   * Member exists.
   *
   * @see get(long n)
   * @see size()
   */ public
";


%csmethodmodifiers ListOfSubmodels::get(const std::string& sid) const "
/**
   * Get a Model from the ListOfSubmodels
   * based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the Model to get.
   * 
   * @return Model in this ListOfSubmodels
   * with the given @p sid or @c null if no such
   * Model exists.
   *
   * @see get(long n)
   * @see size()
   */ public
";


%csmethodmodifiers ListOfSubmodels::remove(unsigned int n) "
/**
   * Removes the nth item from this ListOfSubmodels items and returns a
   * pointer to it.
   *
   * The caller owns the returned item and is responsible for deleting it.
   *
   * @param n the index of the item to remove
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfSubmodels::remove(const std::string& sid) "
/**
   * Removes an item from this ListOfSubmodels items based on its identifier
   * and returns a pointer to it.
   *
   * The caller owns the returned item and is responsible for deleting it.
   *
   * @param sid string representing the identifier of the item to remove
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfSubmodels::getItemTypeCode() const "
/**
   * Returns the libSBML type code for the objects contained in this ListOf
   * (i.e., Submodel objects, if the list is non-empty).
   * 
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for objects contained in this list:
   * @link libsbmlcs.libsbml.SBML_COMP_SUBMODEL SBML_COMP_SUBMODEL@endlink (default).
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers ListOfSubmodels::getElementName() const "
/**
   * Returns the XML element name of
   * this SBML object.
   *
   * @return the string of the name of this element.
   */ public
";


%csmethodmodifiers ListOfSubmodels::createObject(XMLInputStream& stream) "
/**
   * Create and return an SBML object of this class, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfSubmodels::writeXMLNS(XMLOutputStream& stream) const "
/** */ /* libsbml-internal */ public
";


%typemap(csimports) ModelDefinition "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{comp}
 *
@htmlinclude pkg-marker-comp.html Implementation of the %ModelDefinition construct from the
 * &ldquo;comp&rdquo; package.
 *
 * The @ref comp @if java \'Hierarchical %Model Composition\'@endif 
 * package (&ldquo;comp&rdquo;) allows multiple Model objects
 * to be defined in a single SBMLDocument.  While these new Model objects are
 * not new SBML classes, they are given a new name,
 * <code>&lt;modelDefinition&gt;</code>, and reside in ListOfModelDefinition
 * objects.  In libSBML, this class inherits from the Model class, changing
 * only the expected parent of the object, and the XML name.
 *
 * An additional restriction is placed on the \'id\' attribute of ModelDefinition
 * objects:  not only must it be unique across all such attributes of type SId 
 * within the ModelDefintion, it must also be unique across all Model, 
 * ModelDefinition, and ExternalModelDefinition objects in the same SBMLDocument.
 */
"


%csmethodmodifiers ModelDefinition::ModelDefinition(unsigned int level      = CompExtension::getDefaultLevel(), unsigned int version    = CompExtension::getDefaultVersion(), unsigned int pkgVersion = CompExtension::getDefaultPackageVersion()) "
/**
   * Creates a new ModelDefinition with the given level, version, and package
   * version.
   *
   * @param level the SBML Level
   * @param version the Version within the SBML Level
   * @param pkgVersion the version of the package
   */ public
";


%csmethodmodifiers ModelDefinition::ModelDefinition(CompPkgNamespaces* compns) "
/**
   * Creates a new ModelDefinition with the given CompPkgNamespaces object.
   *
   * @param compns the namespace to use
   */ public
";


%csmethodmodifiers ModelDefinition::ModelDefinition(const Model& source) "
/**
   * Copy constructor from base Model object.
   */ public
";


%csmethodmodifiers ModelDefinition::clone() const "
/**
   * Creates and returns a deep copy of this ModelDefinition object.
   * 
   * @return a (deep) copy of this ModelDefinition object
   */ public
";


%csmethodmodifiers ModelDefinition::getElementName() const "
/**
   * The only difference between a Model and a ModelDefinition is the
   * element name (\'modelDefinition\')
   *
   * @return the string of the name of this element (\'modelDefintion\').
   * @see getTypeCode()
   */ public
";


%csmethodmodifiers ModelDefinition::getTypeCode() const "
/**
   * Returns the libSBML type code of this object instance.
   *
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object:
   * @link libsbmlcs.libsbml.SBML_COMP_MODELDEFINITION SBML_COMP_MODELDEFINITION@endlink
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers ModelDefinition::removeFromParentAndDelete "
/**
   * Finds this Model\'s parent ListOfModelDefinitions and removes itself from
   * it and deletes itself.
   *
   * This method actually just calls the SBase function, since the Model
   * class overrides it, but that\'s actually what we want to happen here.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers ModelDefinition::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor.
   *
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether or not the Visitor would like to visit the SBML object\'s next
   * sibling object (if available).
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ModelDefinition::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ModelDefinition::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Subclasses should override this method to read values from the given
   * XMLAttributes set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   */ /* libsbml-internal */ public
";


%typemap(csimports) Port "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{comp}
 *
@htmlinclude pkg-marker-comp.html Implementation of the %Port construct from the
 * &ldquo;comp&rdquo; package.
 *
 * The Port class was introduced by the SBML Level&nbsp;3 @ref comp
 * @if java \'Hierarchical %Model Composition\'@endif package
 * (&ldquo;comp&rdquo;) to allow a Model to define a standard interface
 * between it and other models that might use it as a submodel.  It derives
 * from the SBaseRef class, and the elements defined there refer to elements
 * in the same parent Model as the Port object.  A Port object instance
 * therefore uses those attributes to define a port for a component in a
 * model.  When other SBaseRef or SBaseRef-derived classes refer to a Port
 * object using a \'portRef\' attribute, the element being referenced is the
 * element the Port object itself points to.
 *
 * In the present formulation of the Hierarchical %Model Composition
 * package, the use of ports is not enforced, nor is there any
 * mechanism to restrict which ports may be used in what ways&mdash;they are
 * only an advisory construct.  Future versions of this SBML package may
 * provide additional functionality to support explicit restrictions on
 * port use.  For the present definition of Hierarchical %Model Composition,
 * users of models containing ports are encouraged to respect the modeler\'s
 * intention in defining ports, and use the port definitions to interact
 * with components through their ports (when they have ports defined)
 * rather than interact directly with the components.
 *
 * The required attribute \'id\' is used to give an identifier to a
 * Port object so that other objects can refer to it.  The attribute has
 * type PortSId and is essentially identical to the SBML
 * primitive type SId, except that its namespace is limited to
 * the identifiers of Port objects defined within a Model object.  In
 * parallel, the PortSId type has a companion type,
 * PortSIdRef, that corresponds to the SBML primitive type
 * SIdRef; the value space of PortSIdRef is limited
 * to PortSId values.  
 */
"


%csmethodmodifiers Port::Port(unsigned int level      = CompExtension::getDefaultLevel(), unsigned int version    = CompExtension::getDefaultVersion(), unsigned int pkgVersion = CompExtension::getDefaultPackageVersion()) "
/**
   * Creates a new Port with the given level, version, and package version.
   *
   * @param level the SBML Level
   * @param version the Version within the SBML Level
   * @param pkgVersion the version of the package
   */ public
";


%csmethodmodifiers Port::Port(CompPkgNamespaces* compns) "
/**
   * Creates a new Port with the given CompPkgNamespaces object.
   *
   * @param compns the namespace to use
   */ public
";


%csmethodmodifiers Port::Port(const Port& source) "
/**
   * Copy constructor.
   */ public
";


%csmethodmodifiers Port::clone() const "
/**
   * Creates and returns a deep copy of this Port object.
   * 
   * @return a (deep) copy of this Port object
   */ public
";


%csmethodmodifiers Port::getId() const "
/**
   * Returns the value of the \'id\' attribute of this Port.
   *
   * @return the value of the \'id\' attribute of this Port.
   */ public
";


%csmethodmodifiers Port::isSetId() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * Port\'s \'id\' attribute has been set.
   *
   * @return @c true if this Port\'s \'id\' attribute has been set, 
   * otherwise @c false is returned.
   */ public
";


%csmethodmodifiers Port::setId(const std::string& id) "
/**
   * Sets the value of the \'id\' attribute of this Port.
   *
   * This method fails if the @p id is not a valid syntax for an SId.
   *
   * @param id the identifier for the port
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers Port::unsetId "
/**
   * Unsets the value of the \'id\' attribute of this Port.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers Port::getName() const "
/**
   * Returns the value of the \'name\' attribute of this Port.
   *
   * @return the value of the \'name\' attribute of this Port.
   */ public
";


%csmethodmodifiers Port::isSetName() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * Port\'s \'name\' attribute has been set.
   *
   * @return @c true if this Port\'s \'name\' attribute has been set, 
   * otherwise @c false is returned.
   */ public
";


%csmethodmodifiers Port::setName(const std::string& name) "
/**
   * Sets the value of the \'name\' attribute of this Port.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers Port::unsetName "
/**
   * Unsets the value of the \'name\' attribute of this Port.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers Port::setPortRef(const std::string& id) "
/**
   * Overrides SBaseRef::setPortRef to always fail, because Port objects
   * themselves cannot refer to model elements by PortSId.
   *
   * @param id the identifier to set for the port reference
   *
   * @return integer value indicating failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The possible value
   * returned by this function is:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers Port::hasRequiredAttributes() const "
/**
   * Returns true if the \'id\' attribute is set, and if exactly one of
   * the optional attributes of SBaseRef (portRef, idRef, metaIdRef, 
   * and unitRef)are set.
   *
   * @return bool: \'true\' if the attributes are correctly set; \'false\' if not.
   */ public
";


%csmethodmodifiers Port::getElementName() const "
/**
   * Returns the XML element name of
   * this SBML object.
   *
   * @return the string of the name of this element.
   */ public
";


%csmethodmodifiers Port::getTypeCode() const "
/**
   * Returns the libSBML type code of this object instance.
   *
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object:
   * @link libsbmlcs.libsbml.SBML_COMP_PORT SBML_COMP_PORT@endlink
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers Port::saveReferencedElement "
/**
   * Finds and stores the referenced object by finding its Model parent,
   * calling \'getReferencedElementFrom()\' on that model, and storing the
   * result.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers Port::renameSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames the idRef attribute on this element if the oldid matches.
   */ public
";


%csmethodmodifiers Port::renameUnitSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames the unitRef attribute on this element if the oldid matches.
   */ public
";


%csmethodmodifiers Port::renameMetaIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames the metaIdRef attribute on this element if the oldid matches.
   */ public
";


%csmethodmodifiers Port::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.  For example:
   *
   *   SBase::writeElements(stream);
   *   mReactants.write(stream);
   *   mProducts.write(stream);
   *   ...
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Port::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor.
   *
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether or not the Visitor would like to visit the SBML object\'s next
   * sibling object (if available).
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Port::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Port::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Subclasses should override this method to read values from the given
   * XMLAttributes set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Port::writeAttributes(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.  For example:
   *
   *   SBase::writeAttributes(stream);
   *   stream.writeAttribute( \'submodel\', mSubmodel );
   *   ...
   */ /* libsbml-internal */ public
";


%typemap(csimports) ReplacedBy "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{comp}
 *
@htmlinclude pkg-marker-comp.html Implementation of the %ReplacedBy construct from the
 * &ldquo;comp&rdquo; package.
 *
 * The ReplacedBy class was introduced by the SBML Level&nbsp;3 @ref comp
 * @if java \'Hierarchical %Model Composition\'@endif 
 * package (&ldquo;comp&rdquo;) to allow submodel elements to be \'canonical\'
 * versions of the element while still allowing the parent model to reference
 * those elements.  Whereas a ReplacedElement object indicates that the
 * containing object replaces another, a ReplacedBy object indicates the
 * converse: the parent object is to be replaced by another object.

 * As is the case with ReplacedElement, the ReplacedBy class inherits from SBaseRef.  
 * It additionally defines one required attribute (\'submodelRef\'), defined in 
 * libSBML in the Replacing class.
 */
"


%csmethodmodifiers ReplacedBy::ReplacedBy(unsigned int level      = CompExtension::getDefaultLevel(), unsigned int version    = CompExtension::getDefaultVersion(), unsigned int pkgVersion = CompExtension::getDefaultPackageVersion()) "
/**
   * Creates a new ReplacedBy with the given level, version, and package
   * version.
   *
   * @param level the SBML Level
   * @param version the Version within the SBML Level
   * @param pkgVersion the version of the package
   */ public
";


%csmethodmodifiers ReplacedBy::ReplacedBy(CompPkgNamespaces* compns) "
/**
   * Creates a new ReplacedBy with the given CompPkgNamespaces object.
   *
   * @param compns the namespace to use
   */ public
";


%csmethodmodifiers ReplacedBy::ReplacedBy(const ReplacedBy& source) "
/**
   * Copy constructor.
   */ public
";


%csmethodmodifiers ReplacedBy::clone() const "
/**
   * Creates and returns a deep copy of this ReplacedBy object.
   * 
   * @return a (deep) copy of this ReplacedBy object
   */ public
";


%csmethodmodifiers ReplacedBy::getElementName() const "
/**
   * Returns the XML element name of
   * this SBML object.
   *
   * @return the string of the name of this element.
   */ public
";


%csmethodmodifiers ReplacedBy::getTypeCode() const "
/**
   * Returns the libSBML type code of this object instance.
   *
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object:
   * @link libsbmlcs.libsbml.SBML_COMP_REPLACEDBY SBML_COMP_REPLACEDBY@endlink
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers ReplacedBy::removeFromParentAndDelete "
/**
   * Finds this ReplacedBy\'s SBase parent, gets the &ldquo;comp&rdquo; plugin from it,
   * and tells that to remove this.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers ReplacedBy::updateIDs(SBase* oldnames, SBase* newnames) "
/**
   * Searches the model that @p oldnames came from for references to any of its ids,
   * and replaces them with references to @p newnames.  
   *
   * @param oldnames the object being replaced, and whose parent Model contains
   * the references that need to be updated.
   *
   * @param newnames the object that should now be referenced instead, to which 
   * any references to @p oldnames should now point.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ReplacedBy::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor.
   *
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether or not the Visitor would like to visit the SBML object\'s next
   * sibling object (if available).
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ReplacedBy::performReplacementAndCollect(std::set<SBase*>* removed, std::set<SBase*>* toremove) "
/**
   * Updates all IDs and references to those IDs.  Does not actually
   * remove the now-redundant element!  The elements to be removed is instead 
   * added to \'toremove\', allowing one to remove the element carefully
   * to prevent double-deletion of elements, and to allow the correct
   * interpretation of \'nested\' replacements and deletions.
   *
   * The \'removed\' argument is present to ensure that the replaced element was
   * not already removed, which would make it impossible to check it for its
   * old IDs.  In normal comp flattening, \'removed\' will only contain comp elements,
   * which should usually not be replaced, only deleted.
   */ public
";


%typemap(csimports) ReplacedElement "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{comp}
 *
@htmlinclude pkg-marker-comp.html Implementation of the %ReplacedElement construct from the
 * &ldquo;comp&rdquo; package.
 *
 * The ReplacedElement class was introduced by the SBML Level&nbsp;3
 * @ref comp @if java \'Hierarchical %Model Composition\'@endif  package
 * (&ldquo;comp&rdquo;) to allow submodel elements to be replaced, but still
 * allow references to those elements to be valid.  A ReplacedElement object
 * is essentially a pointer to a submodel object that should be considered
 * \'replaced\'.  The object holding the ReplacedElement instance is the one
 * doing the replacing; the object pointed to by the ReplacedElement object
 * is the object being replaced.
 *
 * A replacement implies that dependencies involving the replaced object
 * must be updated: all references to the replaced object elsewhere in the
 * model are taken to refer to the replacement object instead.  For
 * example, if one species replaces another, then any reference to the
 * original species in mathematical formulas, or lists of reactants or
 * products or modifiers in reactions, or initial assignments, or any other
 * SBML construct, are taken to refer to the replacement species, with its
 * value possibly modified by either this object\'s \'conversionFactor\'
 * attribute or the relevant submodel\'s conversion factors. Moreover, any 
 * annotations that refer to the
 * replaced species\' \'metaid\' value must be made to refer to the
 * replacement species\' \'metaid\' value instead; and anything else
 * that referred either to an object identifier (i.e., attributes such as
 * the \'id\' attribute whose types inherit from the SId
 * primitive data type) or the meta identifier (i.e., the \'metaid\'
 * attribute or any other attribute that inherits from the ID primitive
 * data type) must be made to refer to the replacement species object
 * instead.
 *
 * It is worth noting that local parameters (inside Reaction objects) pose an
 * interesting edge case for these rules. In order to determine which element
 * is pointed to by a <code>&lt;cn&gt;</code> element within the
 * <code>&lt;math&gt;</code> element of a KineticLaw object, it is necessary
 * to examine the local parameters of that kinetic law\'s parent Reaction
 * object.  Whether the <code>&lt;cn&gt;</code> element is considered to
 * point to something new, then, depends on whether it pointed to the local
 * parameter and whether that local parameter was replaced, even if the text
 * of the element matched the SId value of another element in the model.
 * Note that local parameters may only effectively be replaced by global
 * parameters, since references to its SId are only valid from within the
 * Reaction element to which it belongs.
 *
 * When referencing an element within the Submodel pointed to by the 
 * \'submodelRef\' attribute (defined in libSBML in the Replacing class), 
 * any of the four attributes inherited from 
 * SBaseRef for the purpose may be used (portRef, idRef, unitRef, or 
 * metaIdRef), or a new optional attribute \'deletion\' may be used.  This
 * attribute must be the identifier of a Deletion
 * object in the parent Model of the ReplacedElement (i.e., the value of
 * some Deletion object\'s \'id\' attribute).  When \'deletion\' is
 * set, it means the ReplacedElement object is actually an annotation to
 * indicate that the replacement object replaces something deleted
 * from a submodel.  The use of the \'deletion\' attribute overrides
 * the use of the attributes inherited from SBaseRef: instead of using,
 * e.g., \'portRef\' or \'idRef\', the ReplacedElement instance
 * sets \'deletion\' to the identifier of the Deletion object.  In
 * addition, the referenced Deletion must be a child of the Submodel
 * referenced by the \'submodelRef\' attribute.
 *
 * The use of ReplacedElement objects to refer to deletions has no effect
 * on the composition of models or the mathematical properties of the
 * result.  It serves instead to help record the decision-making process
 * that lead to a given model.  It can be particularly useful for
 * visualization purposes, as well as to serve as scaffolding where other
 * types of annotations can be added using the normal Annotation
 * subcomponents available on all SBase objects in SBML.
 *
 * As with the Submodel class, it may be that the units of the replaced
 * element may not match the units of the replacement element.  In this case, 
 * the optional \'conversionFactor\' attribute may be used.  This attribute, if
 * present, defines how to transform or rescale the replaced object\'s value
 * so that it is appropriate for the new contexts in which the object
 * appears.  This attribute takes a value of type SIdRef, and
 * the value must refer to a Parameter object instance defined in the
 * model.  This parameter then acts as a conversion factor.
 * 
 * The value of the conversion factor should be defined such that a single
 * unit of the replaced element multiplied by the conversion factor should
 * equal a single unit of the replacement element, and the units of the
 * conversion factor should be commensurate with that transformation.  The
 * referenced Parameter may be non-constant, particularly if a Species is
 * replaced by a Species with a different \'hasOnlySubstanceUnits\'
 * attribute value, thus changing amount to concentration, or visa versa.
 */
"


%csmethodmodifiers ReplacedElement::ReplacedElement(unsigned int level      = CompExtension::getDefaultLevel(), unsigned int version    = CompExtension::getDefaultVersion(), unsigned int pkgVersion = CompExtension::getDefaultPackageVersion()) "
/**
   * Creates a new ReplacedElement with the given level, version, and package
   * version.
   *
   * @param level the SBML Level
   * @param version the Version within the SBML Level
   * @param pkgVersion the version of the package
   */ public
";


%csmethodmodifiers ReplacedElement::ReplacedElement(CompPkgNamespaces* compns) "
/**
   * Creates a new ReplacedElement with the given CompPkgNamespaces object.
   *
   * @param compns the namespace to use
   */ public
";


%csmethodmodifiers ReplacedElement::ReplacedElement(const ReplacedElement& source) "
/**
   * Copy constructor.
   */ public
";


%csmethodmodifiers ReplacedElement::clone() const "
/**
   * Creates and returns a deep copy of this ReplacedElement object.
   * 
   * @return a (deep) copy of this ReplacedElement object
   */ public
";


%csmethodmodifiers ReplacedElement::getConversionFactor() const "
/**
   * Returns the value of the \'conversionFactor\' attribute of this ReplacedElement.
   *
   * @return the value of the \'conversionFactor\' attribute of this ReplacedElement.
   */ public
";


%csmethodmodifiers ReplacedElement::isSetConversionFactor() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * ReplacedElement\'s \'conversionFactor\' attribute has been set.
   *
   * @return @c true if this ReplacedElement\'s \'conversionFactor\' attribute has been set, 
   * otherwise @c false is returned.
   */ public
";


%csmethodmodifiers ReplacedElement::setConversionFactor(const std::string& id) "
/**
   * Sets the value of the \'conversionFactor\' attribute of this ReplacedElement.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers ReplacedElement::unsetConversionFactor "
/**
   * Unsets the value of the \'conversionFactor\' attribute of this ReplacedElement.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers ReplacedElement::getDeletion() const "
/**
   * Returns the value of the \'deletion\' attribute of this ReplacedElement.
   *
   * @return the value of the \'deletion\' attribute of this ReplacedElement.
   */ public
";


%csmethodmodifiers ReplacedElement::isSetDeletion() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * SBaseRef\'s \'deletion\' attribute has been set.
   *
   * @return @c true if this ReplacedElement\'s \'deletion\' attribute has been set, 
   * otherwise @c false is returned.
   */ public
";


%csmethodmodifiers ReplacedElement::setDeletion(const std::string& id) "
/**
   * Sets the value of the \'deletion\' attribute of this ReplacedElement.
   *
   * This method fails if the id is not a valid syntax for an SIdRef (@link
   * libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE
   * LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink), or if the SBaseRef already
   * points to an element of the submodel using a different interface (@link
   * libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED
   * LIBSBML_OPERATION_FAILED @endlink).  A ReplacedElement must use exactly
   * one method to point to a submodel element: deletion, port, idRef,
   * unitRef, or metaIdRef.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers ReplacedElement::unsetDeletion "
/**
   * Unsets the value of the \'deletion\' attribute of this ReplacedElement.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers ReplacedElement::getElementName() const "
/**
   * Returns the XML element name of
   * this SBML object.
   *
   * @return the string of the name of this element.
   */ public
";


%csmethodmodifiers ReplacedElement::getNumReferents() const "
/**
   * Returns how many elements are being referred to by this ReplacedElement.  A
   * valid ReplacedElement will have exactly one.  Possible referents are deletion,
   * port, idRef, unitRef, and metaIdRef.
   *
   * @return integer value between 0 and 5: the number of different ways this
   * element points to its referent.
   */ public
";


%csmethodmodifiers ReplacedElement::getTypeCode() const "
/**
   * Returns the libSBML type code of this object instance.
   *
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object:
   * @link libsbmlcs.libsbml.SBML_COMP_REPLACEDELEMENT SBML_COMP_REPLACEDELEMENT@endlink
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers ReplacedElement::renameSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames all the SIdRef attributes on this element if they match
   * @p oldid, but not any found in child or plugin elements.
   */ public
";


%csmethodmodifiers ReplacedElement::getReferencedElementFrom(Model* model) "
/**
   * Finds the SBase object this ReplacedElement object points to, if any.
   *
   */ public
";


%csmethodmodifiers ReplacedElement::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.  For example:
   *
   *   SBase::writeElements(stream);
   *   mReactants.write(stream);
   *   mProducts.write(stream);
   *   ...
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ReplacedElement::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor.
   *
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether or not the Visitor would like to visit the SBML object\'s next
   * sibling object (if available).
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ReplacedElement::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ReplacedElement::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Subclasses should override this method to read values from the given
   * XMLAttributes set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ReplacedElement::writeAttributes(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.  For example:
   *
   *   SBase::writeAttributes(stream);
   *   stream.writeAttribute( \'conversionFactor\', mConversionFactor );
   *   ...
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ReplacedElement::performReplacementAndCollect(std::set<SBase*>* removed, std::set<SBase*>* toremove) "
/**
   * Updates all IDs and references to those IDs, as well as performing all
   * necessary conversions based on the conversion factors.  Does not actually
   * remove the now-redundant element!  The elements to be removed is instead 
   * added to \'toremove\', allowing one to remove the element carefully
   * to prevent double-deletion of elements, and to allow the correct
   * interpretation of \'nested\' replacements and deletions.
   *
   * The \'removed\' argument is present to ensure that the replaced element was
   * not already removed, which would make it impossible to check it for its
   * old IDs.  In normal comp flattening, \'removed\' will only contain comp elements,
   * which should usually not be replaced, only deleted.
   */ public
";


%typemap(csimports) Submodel "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{comp}
 *
@htmlinclude pkg-marker-comp.html Implementation of the %Submodel construct from the
 * &ldquo;comp&rdquo; package.
 *
 * The Submodel class was introduced by the SBML Level&nbsp;3 @ref comp
 * @if java \'Hierarchical %Model Composition\'@endif package
 * (&ldquo;comp&rdquo;) as the principle way by which models are structured
 * hierarchically.  Submodels are instantiations of models contained within
 * other models.  They reference another Model that is to be instantiated
 * within its parent Model, and additionally define how that Model is to be
 * modified before instantiation.
 *
 * The Submodel object class has a required attribute \'modelRef\', which must
 * reference another Model or ExternalModelDefinition object present in the
 * SBML Document.  This referenced Model is the model to be instantiated.
 * 
 * It also has a required attribute, \'id\', to give the submodel a unique
 * identifier by which other parts of an SBML model definition can refer to
 * it, and an optional \'name\' attribute of type @c string.  Identifiers and
 * names must be used according to the guidelines described in the SBML
 * specification.
 *
 * The Submodel class also provides constructs that define how the referenced
 * Model object is to be modified before it is instantiated in the enclosing
 * model.  If numerical values in the referenced model must be changed in order 
 * to fit them into their new context as part of the submodel, the changes can 
 * be handled through conversion factors.  If one or more structural features 
 * in the referenced model are undesirable and should be removed, the changes 
 * can be handled through deletions.  (For example, an initial assignment or 
 * reaction may not be relevant in its new context and should be removed.)
 *
 * In some cases, the referenced Model may have been written with different
 * units than the containing model.  For most model elements, this is not a
 * problem: it is already possible to have Species and Parameter objects with
 * different units in a single model, for example, so in this case the
 * resulting hierarchical model would be treated in exactly the same way as
 * any other model with Species and Parameters with different units.
 *
 * However, two units in SBML models are fixed and must not vary between SBML
 * elements: time and extent.  The units of time are set once per model, and
 * affect the core elements of RateRule, KineticLaw, Delay, and the
 * csymbols \'time\' and \'delay\'.  Even if the model does not explicitly state
 * what the units of time actually are, they are defined to be consistent
 * across the model, and therefore might differ from the units of time across
 * a parent model.  To correct this imbalance, the optional attribute
 * \'timeConversionFactor\' may be used, which, if defined, must reference a
 * constant parameter in the parent model. The value of the time conversion
 * factor should be defined such that a single unit of time in the Submodel
 * multiplied by the time conversion factor should equal a single unit of
 * time in the parent model.
 *
 * Extent is the unit in SBML that defines how the KineticLaw of a Reaction
 * affects species quantities: kinetic laws are defined to be in units of
 * extent/time.  No other SBML core construct is defined in terms of extent.
 * If the effective units of extent in a submodel differ from the effective
 * units of extent in the parent model (regardless of whether either defined
 * what those units actually are), the optional attribute
 * \'extentConversionFactor\' may be used, which, if defined, must reference a
 * constant parameter in the parent model. The value of the extent conversion
 * factor should be defined such that a single unit of extent in the Submodel
 * multiplied by the extent conversion factor should equal a single unit of
 * extent in the parent model.
 *
 * If features of the referenced model must be removed, a Deletion should be added 
 * to the Submodel object.  A Submodel may contain a child ListOfDeletions, which
 * in turn may contain one or more Deletion items.  Each Deletion references a single
 * element of the referenced Model that must be removed before instantiating that
 * Model as a submodel of the parent Model.
 */
"


%csmethodmodifiers Submodel::Submodel(unsigned int level      = CompExtension::getDefaultLevel(), unsigned int version    = CompExtension::getDefaultVersion(), unsigned int pkgVersion = CompExtension::getDefaultPackageVersion()) "
/**
   * Creates a new Submodel with the given level, version, and package
   * version.
   *
   * @param level the SBML Level
   * @param version the Version within the SBML Level
   * @param pkgVersion the version of the package
   */ public
";


%csmethodmodifiers Submodel::Submodel(CompPkgNamespaces* compns) "
/**
   * Creates a new Submodel with the given CompPkgNamespaces object.
   *
   * @param compns the namespace to use
   */ public
";


%csmethodmodifiers Submodel::Submodel(const Submodel& source) "
/**
   * Copy constructor.
   */ public
";


%csmethodmodifiers Submodel::clone() const "
/**
   * Creates and returns a deep copy of this Submodel object.
   * 
   * @return a (deep) copy of this Submodel object
   */ public
";


%csmethodmodifiers Submodel::getElementBySId(const std::string& id) "
/**
   * Returns the first child element found that has the given @p id in the
   * model-wide SId namespace, or @c null if no such object is found.
   *
   * @param id string representing the id of objects to find
   *
   * @return a pointer to the SBase element with the given @p id.
   */ public
";


%csmethodmodifiers Submodel::getElementByMetaId(const std::string& metaid) "
/**
   * Returns the first child element it can find with the given @p metaid, or
   * itself if it has the given @p metaid, or @c null if no such object is found.
   *
   * @param metaid string representing the metaid of objects to find
   *
   * @return a pointer to the SBase element with the given @p metaid.
   */ public
";


%csmethodmodifiers Submodel::getAllElements(ElementFilter* filter=NULL) "
/**
   * Returns a List of all child SBase objects, including those nested to an
   * arbitrary depth.
   *
   * @return a List of pointers to all children objects.
   */ public
";


%csmethodmodifiers Submodel::getId() const "
/**
   * Returns the value of the \'id\' attribute of this Submodel.
   *
   * @return the value of the \'id\' attribute of this Submodel.
   */ public
";


%csmethodmodifiers Submodel::isSetId() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * Submodel\'s \'id\' attribute has been set.
   *
   * @return @c true if this Submodel\'s \'id\' attribute has been set, 
   * otherwise @c false is returned.
   */ public
";


%csmethodmodifiers Submodel::setId(const std::string& id) "
/**
   * Sets the value of the \'id\' attribute of this Submodel.  Fails if the id
   * is not a valid syntax for an SId.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers Submodel::unsetId "
/**
   * Unsets the value of the \'id\' attribute of this Submodel.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers Submodel::getName() const "
/**
   * Returns the value of the \'name\' attribute of this Submodel.
   *
   * @return the value of the \'name\' attribute of this Submodel.
   */ public
";


%csmethodmodifiers Submodel::isSetName() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * Submodel\'s \'name\' attribute has been set.
   *
   * @return @c true if this Submodel\'s \'name\' attribute has been set, 
   * otherwise @c false is returned.
   */ public
";


%csmethodmodifiers Submodel::setName(const std::string& name) "
/**
   * Sets the value of the \'name\' attribute of this Submodel.  Fails if the
   * name is empty.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers Submodel::unsetName "
/**
   * Unsets the value of the \'name\' attribute of this Submodel.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers Submodel::getModelRef() const "
/**
   * Returns the value of the \'modelRef\' attribute of this Submodel.
   *
   * @return the value of the \'modelRef\' attribute of this Submodel.
   */ public
";


%csmethodmodifiers Submodel::isSetModelRef() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * Submodel\'s \'modelRef\' attribute has been set.
   *
   * @return @c true if this Submodel\'s \'modelRef\' attribute has been set, 
   * otherwise @c false is returned.
   */ public
";


%csmethodmodifiers Submodel::setModelRef(const std::string& modelRef) "
/**
   * Sets the value of the \'modelRef\' attribute of this Submodel.  Fails if
   * the modelRef is not a valid syntax for an SIdRef.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers Submodel::unsetModelRef "
/**
   * Unsets the value of the \'modelRef\' attribute of this Submodel.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers Submodel::getSubstanceConversionFactor() const "
/**
   * Returns the value of the \'substanceConversionFactor\' attribute of this
   * Submodel.
   *
   * @return the value of the \'substanceConversionFactor\' attribute of this Submodel.
   */ public
";


%csmethodmodifiers Submodel::isSetSubstanceConversionFactor() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * Submodel\'s \'substanceConversionFactor\' attribute has been set.
   *
   * @return @c true if this Submodel\'s \'substanceConversionFactor\' attribute has been set, 
   * otherwise @c false is returned.
   */ public
";


%csmethodmodifiers Submodel::setSubstanceConversionFactor(const std::string& id) "
/**
   * Sets the value of the \'substanceConversionFactor\' attribute of this
   * Submodel.  Fails if the id is not a valid syntax for an SIdRef.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers Submodel::unsetSubstanceConversionFactor "
/**
   * Unsets the value of the \'substanceConversionFactor\' attribute of this Submodel.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers Submodel::getTimeConversionFactor() const "
/**
   * Returns the value of the \'timeConversionFactor\' attribute of this Submodel.
   *
   * @return the value of the \'timeConversionFactor\' attribute of this Submodel.
   */ public
";


%csmethodmodifiers Submodel::isSetTimeConversionFactor() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * Submodel\'s \'timeConversionFactor\' attribute has been set.
   *
   * @return @c true if this Submodel\'s \'timeConversionFactor\' attribute has been set, 
   * otherwise @c false is returned.
   */ public
";


%csmethodmodifiers Submodel::setTimeConversionFactor(const std::string& id) "
/**
   * Sets the value of the \'timeConversionFactor\' attribute of this Submodel.
   * Fails if the id is not a valid syntax for an SIdRef.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers Submodel::unsetTimeConversionFactor "
/**
   * Unsets the value of the \'timeConversionFactor\' attribute of this Submodel.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers Submodel::getExtentConversionFactor() const "
/**
   * Returns the value of the \'extentConversionFactor\' attribute of this Submodel.
   *
   * @return the value of the \'extentConversionFactor\' attribute of this Submodel.
   */ public
";


%csmethodmodifiers Submodel::isSetExtentConversionFactor() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * Submodel\'s \'extentConversionFactor\' attribute has been set.
   *
   * @return @c true if this Submodel\'s \'extentConversionFactor\' attribute has been set, 
   * otherwise @c false is returned.
   */ public
";


%csmethodmodifiers Submodel::setExtentConversionFactor(const std::string& id) "
/**
   * Sets the value of the \'extentConversionFactor\' attribute of this
   * Submodel.  Fails if the id is not a valid syntax for an SIdRef.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers Submodel::unsetExtentConversionFactor "
/**
   * Unsets the value of the \'extentConversionFactor\' attribute of this
   * Submodel.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers Submodel::getListOfDeletions() const "
/**
   * Returns the ListOf object that holds all deletions.
   *
   * @return the ListOf object that holds all deletions.
   */ public
";


%csmethodmodifiers Submodel::getListOfDeletions "
/**
   * Returns the ListOf object that holds all deletions.
   *
   * @return the ListOf object that holds all deletions.
   */ public
";


%csmethodmodifiers Submodel::getDeletion(unsigned int n) "
/**
   * Returns the deletion with the given index.
   * If the index is invalid, @c null is returned.
   *
   * @param n the index number of the Deletion to get.
   *
   * @return the nth Deletion in the ListOfDeletions.
   */ public
";


%csmethodmodifiers Submodel::getDeletion "
/**
   * Returns the deletion with the given index.
   * If the index is invalid, @c null is returned.
   *
   * @param n the index number of the Deletion to get.
   *
   * @return the nth Deletion in the ListOfDeletions.
   */ public
";


%csmethodmodifiers Submodel::getDeletion(std::string id) "
/**
   * Returns the deletion with the given @p id.
   * If the id is invalid, @c null is returned.
   *
   * @param id the id of the Deletion to get.
   *
   * @return the Deletion in the ListOfDeletions with the given @p id.
   */ public
";


%csmethodmodifiers Submodel::getDeletion(std::string id) const "
/**
   * Returns the deletion with the given @p id.
   * If the id is invalid, @c null is returned.
   *
   * @param id the id of the Deletion to get.
   *
   * @return the Deletion in the ListOfDeletions with the given @p id.
   */ public
";


%csmethodmodifiers Submodel::addDeletion(const Deletion* deletion) "
/**
   * Adds a copy of the given Deletion object to the list of deletions.
   *
   * @param deletion the Deletion object to be added to the list of
   * deletions.  Fails if the added deletion is null, does not match the
   * level/version/package of the parent object, or cannot be added to the
   * list of deletions.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_PKG_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH @endlink
   */ public
";


%csmethodmodifiers Submodel::getNumDeletions() const "
/**
   * Returns the number of deletions for this Submodel.
   *
   * @return the number of deletions for this Submodel.
   */ public
";


%csmethodmodifiers Submodel::createDeletion "
/**
   * Creates a Deletion object, adds it to the end of the
   * deletion objects list and returns a pointer to the newly
   * created object.
   *
   * @return a newly created Deletion object
   */ public
";


%csmethodmodifiers Submodel::removeDeletion(unsigned int index) "
/**
   * Removes the deletion with the given index from the Submodel.
   * A pointer to the deletion that was removed is returned.
   * If no deletion has been removed, @c null is returned.
   *
   * @param index the index of the Deletion object to remove
   *
   * @return the Deletion object removed.  As mentioned above, 
   * the caller owns the returned object. @c null is returned if 
   * the given index is out of range.
   */ public
";


%csmethodmodifiers Submodel::removeDeletion(const std::string& sid) "
/**
   * Removes the deletion with the given identifier from the Submodel.
   * A pointer to the deletion that was removed is returned.
   * If no deletion has been removed, @c null is returned.
   *
   * @param sid string representing the identifier
   * of the Deletion object to remove
   *
   * @return the Deletion object removed.  As mentioned above, 
   * the caller owns the returned object. @c null is returned if 
   * the given @p sid is not found.
   */ public
";


%csmethodmodifiers Submodel::hasRequiredAttributes() const "
/**
   * Returns true if the \'submodel\' attribute is set, and if getNumReferents() is exactly 1.
   *
   * @return bool: \'true\' if the attributes are correctly set; \'false\' if not.
   */ public
";


%csmethodmodifiers Submodel::getElementName() const "
/**
   * Returns the XML element name of
   * this SBML object.
   *
   * @return the string of the name of this element.
   */ public
";


%csmethodmodifiers Submodel::renameSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames the conversion factor attributes on this element if @p oldid matches.
   */ public
";


%csmethodmodifiers Submodel::getTypeCode() const "
/**
   * Returns the libSBML type code of this object instance.
   *
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object:
   * @link libsbmlcs.libsbml.SBML_COMP_SUBMODEL SBML_COMP_SUBMODEL@endlink
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers Submodel::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.  For example:
   *
   *   SBase::writeElements(stream);
   *   mReactants.write(stream);
   *   mProducts.write(stream);
   *   ...
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Submodel::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor.
   *
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether or not the Visitor would like to visit the SBML object\'s next
   * sibling object (if available).
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Submodel::setSBMLDocument(SBMLDocument* d) "
/**
   * Sets the parent SBMLDocument of this SBML object.
   *
   * @param d the SBMLDocument object to use
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Submodel::connectToChild "
/**
   * Sets this SBML object to child SBML objects (if any).
   * (Creates a child-parent relationship by the parent)
   *
   * Subclasses must override this function if they define
   * one ore more child elements.
   * Basically, this function needs to be called in
   * constructor, copy constructor, assignment operator.
   *
   * @see setSBMLDocument
   * @see enablePackageInternal
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Submodel::createObject(XMLInputStream& stream) "
/**
   * Create and return an SBML object of this class, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Submodel::instantiate "
/**
   * Find and create a local copy of the Model object referenced by this
   * Submodel.  Is recursive, in that if the instantiated Model contains any
   * Submodel objects, those Submodels will themselves be instantiated.  If
   * an instantiated model previously existed, it is deleted and a new one is
   * created.  For this reason, call this function only once, or 
   * call Submodel::getInstantiation().
   *
   * @return an integer value indicating success/failure of the operation.
   * Possible return values from this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   * In this case, \'invalid object\' means that this Submodel itself is invalid, and no Model can be instantiated from it.
   */ public
";


%csmethodmodifiers Submodel::performDeletions "
/**
   * Delete elements in the instantiated submodel, based on any Deletions
   * from this Submodel\'s listOfDeletions.
   *
   * @return an integer value indicating success/failure of the operation.
   * Possible return values from this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   * In this case, \'invalid object\' means that this Submodel itself is invalid, and no Model can be instantiated from it.
   */ public
";


%csmethodmodifiers Submodel::replaceElement(SBase* toReplace, SBase* replacement) "
/**
   * Delete the element in question from the stored instantiated Model, and
   * replace all references to it with references to the replacement object.
   * @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   * means that this Submodel itself or one of the passed-in objects are invalid.
   * @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   * means that the routine failed for some othe reason.
   *
   * @return an integer value indicating success/failure of the operation.
   * Possible return values from this function are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers Submodel::getInstantiation "
/**
   * Get the instantiated Model this Submodel contains rules to create.
   * Calls instantiate() automatically if this operation has not yet been
   * performed, and/or if the operation failed the last time it was called.
   * Any modifictions that have been performed with performDeletions(), 
   * replaceElement(), or convertTimeAndExtent() function calls will be included.
   *
   * @return the instantiated Model object: a clone of the original, modified
   * according to the performDeletions() and replaceElement() functions that
   * have been called.  Returns null if any error is encountered.
   */ public
";


%csmethodmodifiers Submodel::getInstantiation() const "
/**
   * Get the instantiated Model this Submodel contains rules to create.
   * Calls instantiate() automatically if this operation has not yet been
   * performed, and/or if the operation failed the last time it was called.
   * Any modifictions that have been performed with performDeletions(), 
   * replaceElement(), or convertTimeAndExtent() function calls will be included.
   *
   * @return the instantiated Model object: a clone of the original, modified
   * according to the performDeletions() and replaceElement() functions that
   * have been called.  Returns null if any error is encountered.
   */ public
";


%csmethodmodifiers Submodel::clearInstantiation "
/**
   * Delete the instantiated Model, if it exists.
   */ public
";


%csmethodmodifiers Submodel::getAllInstantiatedElements "
/**
   * Get all instantiated sub-elements, including any elements from
   * instantiated submodels, etc.
   */ public
";


%csmethodmodifiers Submodel::convertTimeAndExtent "
/**
   * Convert all references to time and extent in the instantiated
   * Model, according to the
   * timeConversionFactor and extentConversionFactor attributes.
   */ public
";


%csmethodmodifiers Submodel::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Submodel::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Subclasses should override this method to read values from the given
   * XMLAttributes set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Submodel::writeAttributes(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.  For example:
   *
   *   SBase::writeAttributes(stream);
   *   stream.writeAttribute( \'submodel\', mId );
   *   ...
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Submodel::convertTimeAndExtentWith(const ASTNode* time, const ASTNode* xcf, const ASTNode* klmod) "
/**
   * Internal function to convert time and extent with the given ASTNodes.
   */ public
";


%csmethodmodifiers Submodel::convertCSymbols(ASTNode*& math, const ASTNode* tcfdiv, const ASTNode* tcftimes) "
/**
   * Internal function that changes \'math\' according to the passed-in time conversion factors (pre-set-up for convenience)
   */ public
";


%csmethodmodifiers Submodel::createNewConversionFactor(std::string& cf, const ASTNode* newcf, std::string oldcf, Model* model) "
/**
   * Internal function that creates a new conversion factor in the given Model based on newcf and oldcf, and sets \'cf\' to be the name of that new conversion factor.
   */ public
";


%typemap(csimports) FbcExtension "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{fbc}
 *
@htmlinclude pkg-marker-fbc.html The core module of the \'fbc\' package extension.
 *
 */
"


%typemap(csimports) FbcPkgNamespaces "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{fbc}
 *
@htmlinclude pkg-marker-fbc.html Extension of SBMLNamespaces for the SBML Level&nbsp;3
 * \'fbc\' package.
 */
"


%csmethodmodifiers FbcExtension::getPackageName "
/**
   * Returns the package name of this extension.
   */ public
";


%csmethodmodifiers FbcExtension::getDefaultLevel "
/**
   * Returns the default SBML Level this extension.
   */ public
";


%csmethodmodifiers FbcExtension::getDefaultVersion "
/**
   * Returns the default SBML Version this extension.
   */ public
";


%csmethodmodifiers FbcExtension::getDefaultPackageVersion "
/**
   * Returns the default SBML version this extension.
   */ public
";


%csmethodmodifiers FbcExtension::getXmlnsL3V1V1 "
/**
   * Returns URI of supported versions of this package.
   */ public
";


%csmethodmodifiers FbcExtension::FbcExtension "
/**
   * Constructor
   */ public
";


%csmethodmodifiers FbcExtension::FbcExtension(const FbcExtension&) "
/**
   * Copy constructor.
   */ public
";


%csmethodmodifiers FbcExtension::clone() const "
/**
   * Creates and returns a deep copy of this FbcExtension object.
   * 
   * @return a (deep) copy of this FbcExtension object
   */ public new
";


%csmethodmodifiers FbcExtension::getName() const "
/**
   * Returns the name of this package (\'fbc\')
   *
   * @return the name of this package (\'fbc\')
   */ public
";


%csmethodmodifiers FbcExtension::getURI "
/**
   * Returns the namespace URI corresponding to the combination of the given
   * SBML Level, Version, and package version.
   * 
   * @param sbmlLevel the level of SBML
   * @param sbmlVersion the version of SBML
   * @param pkgVersion the version of package
   *
   * @return a string of the package URI, or an empty string if no
   * corresponding URI exists.
   */ public
";


%csmethodmodifiers FbcExtension::getLevel(const std::string &uri) const "
/**
   * Returns the SBML Level for the given URI of this package.
   *
   * @param uri the string of URI that represents one of versions of the
   * &ldquo;fbc&rdquo; package
   *
   * @return the SBML Level with the given URI of this package, or @c 0 if
   * the given URI is invalid.
   */ public
";


%csmethodmodifiers FbcExtension::getVersion(const std::string &uri) const "
/**
   * Returns the SBML Version for the given URI of this package.
   *
   * @param uri the string of URI that represents one of versions of the
   * &ldquo;fbc&rdquo; package
   *
   * @return the SBML version with the given URI of this package, or @c 0 if
   * the given URI is invalid.
   */ public
";


%csmethodmodifiers FbcExtension::getPackageVersion(const std::string &uri) const "
/**
   * Returns the package version for the given URI of this package.
   *
   * @param uri the string of URI that represents one of versions of the
   * &ldquo;fbc&rdquo; package
   *
   * @return the package version with the given URI of this package, or @c 0
   * if the given URI is invalid.
   */ public
";


%csmethodmodifiers FbcExtension::getSBMLExtensionNamespaces(const std::string &uri) const "
/**
   * Returns an FbcPkgNamespaces object.
   *
   * @param uri the string of URI that represents one of versions of the
   * &ldquo;fbc&rdquo; package
   *
   * @return an FbcPkgNamespace object corresponding to the given @p uri, or
   * @c null if the URI is not defined in the FBC package.
   */ public
";


%csmethodmodifiers FbcExtension::getStringFromTypeCode(int typeCode) const "
/**
   * Takes a type code of the &ldquo;fbc&rdquo; package and returns a string
   * describing the code.
   */ public
";


%csmethodmodifiers FbcExtension::init "
/**
   * Initializes fbc extension by creating an object of this class with 
   * required SBasePlugin derived objects and registering the object 
   * to the SBMLExtensionRegistry class.
   *
   * (NOTE) This function is automatically invoked when creating the following
   *        global object in FbcExtension.cpp
   *
   *        static SBMLExtensionRegister<FbcExtension> fbcExtensionRegister;
   *
   */ /* libsbml-internal */ public
";


%csmethodmodifiers FbcExtension::getErrorTable "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers FbcExtension::getErrorTableIndex "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers FbcExtension::getErrorIdOffset() const "
/** */ /* libsbml-internal */ public new
";


%typemap(csimports) FbcModelPlugin "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{fbc}
 *
@htmlinclude pkg-marker-fbc.html Implementation of the \'fbc\' package extention to the
 * %Model construct.
 */
"


%csmethodmodifiers FbcModelPlugin::FbcModelPlugin(const std::string &uri, const std::string &prefix, FbcPkgNamespaces *fbcns) "
/**
   * Constructor
   */ public
";


%csmethodmodifiers FbcModelPlugin::FbcModelPlugin(const FbcModelPlugin & orig) "
/**
   * Copy constructor. Creates a copy of this FbcModelPlugin object.
   */ public
";


%csmethodmodifiers FbcModelPlugin::clone() const "
/**
   * Creates and returns a deep copy of this FbcModelPlugin  object.
   * 
   * @return a (deep) copy of this FbcModelPlugin object
   */ public
";


%csmethodmodifiers FbcModelPlugin::createObject(XMLInputStream& stream) "
/**
   * Subclasses must override this method to create, store, and then
   * return an SBML object corresponding to the next XMLToken in the
   * XMLInputStream if they have their specific elements.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers FbcModelPlugin::writeAttributes(XMLOutputStream& stream) const "
/**
   * This function is a bit tricky.
   * This function is used only for setting annotation element in case
   * gene associations are used. 
   * Thus, no attribute is written by this function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers FbcModelPlugin::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses must override this method to write out their contained
   * SBML objects as XML elements if they have their specific elements.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers FbcModelPlugin::hasRequiredElements() const "
/**
   * Checks if this plugin object has all the required elements.
   *
   * Subclasses should override this function if they have their specific
   * elements.
   *
   * @return true if this pugin object has all the required elements,
   * otherwise false will be returned.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers FbcModelPlugin::readOtherXML(SBase* parentObject, XMLInputStream& stream) "
/**
   * Parses Gene Annotation Extension 
   */ /* libsbml-internal */ public
";


%csmethodmodifiers FbcModelPlugin::getElementBySId(const std::string& id) "
/**
   * Returns the first child element found that has the given @p id in the model-wide SId namespace, or @c null if no such object is found.
   *
   * @param id string representing the id of objects to find
   *
   * @return a pointer to the SBase element with the given @p id.
   */ public
";


%csmethodmodifiers FbcModelPlugin::getElementByMetaId(const std::string& metaid) "
/**
   * Returns the first child element it can find with the given @p metaid, or itself if it has the given @p metaid, or @c null if no such object is found.
   *
   * @param metaid string representing the metaid of objects to find
   *
   * @return a pointer to the SBase element with the given @p metaid.
   */ public
";


%csmethodmodifiers FbcModelPlugin::getAllElements(ElementFilter* filter=NULL) "
/**
   * Returns a List of all child SBase objects, including those nested to an arbitrary depth
   *
   * @return a List* of pointers to all children objects.
   */ public
";


%csmethodmodifiers FbcModelPlugin::appendFrom(const Model* model) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers FbcModelPlugin::getListOfFluxBounds() const "
/**
   * Returns the ListOfFluxBounds in this plugin object.
   *
   * @return ListOfFluxBounds object in this plugin object.
   */ public
";


%csmethodmodifiers FbcModelPlugin::getListOfFluxBounds "
/**
   * Returns the ListOfFluxBounds in this plugin object.
   *
   * @return ListOfFluxBounds object in this plugin object.
   */ public
";


%csmethodmodifiers FbcModelPlugin::getFluxBound "
/**
   * Returns the FluxBound object that belongs to the given index. If the
   * index is invalid, @c null is returned.
   *
   * @param n the index number of the FluxBound to get.
   *
   * @return the nth FluxBound in the ListOfFluxBounds.
   */ public
";


%csmethodmodifiers FbcModelPlugin::getFluxBound(unsigned int n) "
/**
   * Returns the FluxBound object that belongs to the given index. If the
   * index is invalid, @c null is returned.
   *
   * @param n the index number of the FluxBound to get.
   *
   * @return the nth FluxBound in the ListOfFluxBounds.
   */ public
";


%csmethodmodifiers FbcModelPlugin::getFluxBound(const std::string& sid) "
/**
   * Returns the FluxBound object based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the FluxBound to get.
   * 
   * @return FluxBound in the ListOfFluxBounds with the given @p sid
   * or null if no such FluxBound exists.
   *
   * @see getFluxBound(long n)
   * @see getListOfFluxBounds()
   */ public
";


%csmethodmodifiers FbcModelPlugin::getFluxBound(const std::string& sid) const "
/**
   * Returns the FluxBound object based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the FluxBound to get.
   * 
   * @return FluxBound in the ListOfFluxBounds with the given @p sid 
   * or null if no such FluxBound exists.
   *
   * @see getFluxBound(long n)
   * @see getListOfFluxBounds()
   */ public
";


%csmethodmodifiers FbcModelPlugin::addFluxBound(const FluxBound* bound) "
/**
   * Adds a copy of the given FluxBound object to the list of FluxBounds.
   *
   * @param bound the FluxBound object to be added to the list of FluxBounds.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   */ public
";


%csmethodmodifiers FbcModelPlugin::createFluxBound "
/**
   * Creates a new FluxBound object and adds it to the list of FluxBound objects
   * and returns it.
   *
   * @return a newly created FluxBound object
   */ public
";


%csmethodmodifiers FbcModelPlugin::removeFluxBound(unsigned int n) "
/**
   * Removes the nth FluxBound object from this plugin object and
   * returns a pointer to it.
   *
   * The caller owns the returned object and is responsible for
   *  deleting it.
   *
   * @param n the index of the FluxBound object to remove
   *
   * @return the FluxBound object removed.  As mentioned above, the 
   * caller owns the returned object. @c null is returned if the 
   * given index is out of range.
   */ public
";


%csmethodmodifiers FbcModelPlugin::removeFluxBound(const std::string& sid) "
/**
   * Removes the FluxBound object with the given @p sid attribute from 
   * this plugin object and returns a pointer to it.
   *
   * The caller owns the returned object and is responsible for
   * deleting it.
   *
   * @param sid the id attribute of the FluxBound object to remove
   *
   * @return the FluxBound object removed.  As mentioned above, the 
   * caller owns the returned object. @c null is returned if the 
   * given index is out of range.
   */ public
";


%csmethodmodifiers FbcModelPlugin::getNumFluxBounds() const "
/**
   * Returns the number of FluxBound object in this plugin object.
   *
   * @return the number of FluxBound object in this plugin object.
   */ public
";


%csmethodmodifiers FbcModelPlugin::getListOfObjectives() const "
/**
   * Returns the ListOfObjectives in this plugin object.
   *
   * @return ListOfObjectives object in this plugin object.
   */ public
";


%csmethodmodifiers FbcModelPlugin::getListOfObjectives "
/**
   * Returns the ListOfObjectives in this plugin object.
   *
   * @return ListOfObjectives object in this plugin object.
   */ public
";


%csmethodmodifiers FbcModelPlugin::getObjective "
/**
   * Returns the Objective object that belongs to the given index. If the
   * index is invalid, @c null is returned.
   *
   * @param n the index number of the Objective to get.
   *
   * @return the nth Objective in the ListOfObjectives.
   */ public
";


%csmethodmodifiers FbcModelPlugin::getObjective(unsigned int n) "
/**
   * Returns the Objective object that belongs to the given index. If the
   * index is invalid, @c null is returned.
   *
   * @param n the index number of the Objective to get.
   *
   * @return the nth Objective in the ListOfObjectives.
   */ public
";


%csmethodmodifiers FbcModelPlugin::getObjective(const std::string& sid) "
/**
   * Returns the Objective object based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the Objective to get.
   * 
   * @return Objective in the ListOfObjectives with the given @p id
   * or null if no such Objective exists.
   *
   * @see getObjective(long n)
   * @see getListOfObjectives()
   */ public
";


%csmethodmodifiers FbcModelPlugin::getObjective(const std::string& sid) const "
/**
   * Returns the Objective object based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the Objective to get.
   * 
   * @return Objective in the ListOfObjectives with the given @p sid 
   * or null if no such Objective exists.
   *
   * @see getObjective(long n)
   * @see getListOfObjectives()
   */ public
";


%csmethodmodifiers FbcModelPlugin::addObjective(const Objective* bound) "
/**
   * Adds a copy of the given Objective object to the list of Objectives.
   *
   * @param bound the Objective object to be added to the list of Objectives.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   */ public
";


%csmethodmodifiers FbcModelPlugin::createObjective "
/**
   * Creates a new Objective object and adds it to the list of Objective objects
   * and returns it.
   *
   * @return a newly created Objective object
   */ public
";


%csmethodmodifiers FbcModelPlugin::removeObjective(unsigned int n) "
/**
   * Removes the nth Objective object from this plugin object and
   * returns a pointer to it.
   *
   * The caller owns the returned object and is responsible for
   *  deleting it.
   *
   * @param n the index of the Objective object to remove
   *
   * @return the Objective object removed.  As mentioned above, the 
   * caller owns the returned object. @c null is returned if the 
   * given index is out of range.
   */ public
";


%csmethodmodifiers FbcModelPlugin::removeObjective(const std::string& sid) "
/**
   * Removes the Objective object with the given @p sid attribute from 
   * this plugin object and returns a pointer to it.
   *
   * The caller owns the returned object and is responsible for
   * deleting it.
   *
   * @param sid the id attribute of the Objective object to remove
   *
   * @return the Objective object removed.  As mentioned above, the 
   * caller owns the returned object. @c null is returned if the 
   * given index is out of range.
   */ public
";


%csmethodmodifiers FbcModelPlugin::getNumObjectives() const "
/**
   * Returns the number of Objective object in this plugin object.
   *
   * @return the number of Objective object in this plugin object.
   */ public
";


%csmethodmodifiers FbcModelPlugin::getActiveObjective "
/** 
   * Returns the current active objective. 
   */ public
";


%csmethodmodifiers FbcModelPlugin::*getActiveObjective() const "
/** 
   * Returns the current active objective. 
   */ public
";


%csmethodmodifiers FbcModelPlugin::setActiveObjectiveId(const std::string& objectiveId) "
/** 
   * Sets the id of the active objective.
   */ public
";


%csmethodmodifiers FbcModelPlugin::getActiveObjectiveId() const "
/** 
   * returns the id of the current active objective.
   */ public
";


%csmethodmodifiers FbcModelPlugin::unsetActiveObjectiveId "
/** 
   * Unsets the active objective.
   */ public
";


%csmethodmodifiers FbcModelPlugin::getListOfGeneAssociations() const "
/**
   * Returns the ListOfObjectives in this plugin object.
   *
   * @return ListOfObjectives object in this plugin object.
   */ public
";


%csmethodmodifiers FbcModelPlugin::getListOfGeneAssociations "
/**
   * Returns the ListOfGeneAssociations in this plugin object.
   *
   * @return ListOfGeneAssociations object in this plugin object.
   */ public
";


%csmethodmodifiers FbcModelPlugin::getGeneAssociation "
/**
   * Returns the GeneAssociation object that belongs to the given index. If the
   * index is invalid, @c null is returned.
   *
   * @param n the index number of the GeneAssociation to get.
   *
   * @return the nth GeneAssociation in the ListOfGeneAssociations.
   */ public
";


%csmethodmodifiers FbcModelPlugin::getGeneAssociation(unsigned int n) "
/**
   * Returns the GeneAssociation object that belongs to the given index. If the
   * index is invalid, @c null is returned.
   *
   * @param n the index number of the GeneAssociation to get.
   *
   * @return the nth GeneAssociation in the ListOfGeneAssociations.
   */ public
";


%csmethodmodifiers FbcModelPlugin::getGeneAssociation(const std::string& sid) "
/**
   * Returns the GeneAssociation object based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the GeneAssociation to get.
   * 
   * @return GeneAssociation in the ListOfGeneAssociations with the given @p sid
   * or null if no such GeneAssociation exists.
   *
   * @see getGeneAssociation(long n)
   * @see getListOfGeneAssociations()
   */ public
";


%csmethodmodifiers FbcModelPlugin::getGeneAssociation(const std::string& sid) const "
/**
   * Returns the GeneAssociation object based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the GeneAssociation to get.
   * 
   * @return GeneAssociation in the ListOfGeneAssociations with the given @p sid 
   * or null if no such GeneAssociation exists.
   *
   * @see getGeneAssociation(long n)
   * @see getListOfGeneAssociations()
   */ public
";


%csmethodmodifiers FbcModelPlugin::addGeneAssociation(const GeneAssociation* association) "
/**
   * Adds a copy of the given GeneAssociation object to the list of GeneAssociations.
   *
   * @param association the GeneAssociation object to be added to the list of GeneAssociations.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   */ public
";


%csmethodmodifiers FbcModelPlugin::createGeneAssociation "
/**
   * Creates a new GeneAssociation object and adds it to the list of GeneAssociation objects
   * and returns it.
   *
   * @return a newly created GeneAssociation object
   */ public
";


%csmethodmodifiers FbcModelPlugin::removeGeneAssociation(unsigned int n) "
/**
   * Removes the nth GeneAssociation object from this plugin object and
   * returns a pointer to it.
   *
   * The caller owns the returned object and is responsible for
   *  deleting it.
   *
   * @param n the index of the GeneAssociation object to remove
   *
   * @return the GeneAssociation object removed.  As mentioned above, the 
   * caller owns the returned object. @c null is returned if the 
   * given index is out of range.
   */ public
";


%csmethodmodifiers FbcModelPlugin::removeGeneAssociation(const std::string& sid) "
/**
   * Removes the GeneAssociation object with the given @p sid attribute from 
   * this plugin object and returns a pointer to it.
   *
   * The caller owns the returned object and is responsible for
   * deleting it.
   *
   * @param sid the id attribute of the GeneAssociation object to remove
   *
   * @return the GeneAssociation object removed.  As mentioned above, the 
   * caller owns the returned object. @c null is returned if the 
   * given index is out of range.
   */ public
";


%csmethodmodifiers FbcModelPlugin::getNumGeneAssociations() const "
/**
   * Returns the number of GeneAssociation object in this plugin object.
   *
   * @return the number of GeneAssociation object in this plugin object.
   */ public
";


%csmethodmodifiers FbcModelPlugin::setSBMLDocument(SBMLDocument* d) "
/**
   * Sets the parent SBMLDocument of this plugin object.
   *
   * Subclasses which contain one or more SBase derived elements must
   * override this function.
   *
   * @param d the SBMLDocument object to use
   *
   * @see connectToParent
   * @see enablePackageInternal
   */ /* libsbml-internal */ public
";


%csmethodmodifiers FbcModelPlugin::connectToChild "
/**
   * Sets the *parent* of this SBML object to child SBML objects (if any).
   * (Creates a child-parent relationship by the parent)
   *
   * @see setSBMLDocument
   * @see enablePackageInternal
   */ /* libsbml-internal */ public
";


%csmethodmodifiers FbcModelPlugin::connectToParent(SBase *sbase) "
/**
   * Sets the parent SBML object of this plugin object to
   * this object and child elements (if any).
   * (Creates a child-parent relationship by this plugin object)
   *
   * This function is called when this object is created by
   * the parent element.
   * Subclasses must override this this function if they have one
   * or more child elements.Also, SBasePlugin::connectToParent()
   * must be called in the overridden function.
   *
   * @param sbase the SBase object to use
   *
   * @see setSBMLDocument
   * @see enablePackageInternal
   */ /* libsbml-internal */ public
";


%csmethodmodifiers FbcModelPlugin::enablePackageInternal(const std::string& pkgURI, const std::string& pkgPrefix, bool flag) "
/**
   * Enables/Disables the given package with child elements in this plugin
   * object (if any).
   * (This is an internal implementation invoked from
   *  SBase::enablePackageInternal() function)
   *
   * @note Subclasses in which one or more SBase derived elements are
   * defined must override this function.
   *
   * @see setSBMLDocument
   * @see connectToParent
   */ /* libsbml-internal */ public
";


%csmethodmodifiers FbcModelPlugin::accept(SBMLVisitor& v) const "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers FbcModelPlugin::getFluxBoundsForReaction(const std::string& reaction) const "
/** */ public
";


%csmethodmodifiers FbcModelPlugin::parseAnnotation(SBase *parentObject, XMLNode *annotation) "
/** 
   * Parse L2 annotation if supported
   *
   */ /* libsbml-internal */ public
";


%typemap(csimports) FbcSpeciesPlugin "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{fbc}
 *
@htmlinclude pkg-marker-fbc.html Implementation of the \'fbc\' package extention to the
 * %Species construct.
 *
 * The Flux Balance Constraints package extends the SBML Level 3 Version 1 Core Species class with the addition of two attributes: \'charge\' and \'chemicalFormula\'.
 */
"


%csmethodmodifiers FbcSpeciesPlugin::FbcSpeciesPlugin(const std::string &uri, const std::string &prefix, FbcPkgNamespaces *fbcns) "
/**
   * Constructor
   */ public
";


%csmethodmodifiers FbcSpeciesPlugin::FbcSpeciesPlugin(const FbcSpeciesPlugin & orig) "
/**
   * Copy constructor. Creates a copy of this FbcSpeciesPlugin object.
   */ public
";


%csmethodmodifiers FbcSpeciesPlugin::clone() const "
/**
   * Creates and returns a deep copy of this FbcSpeciesPlugin  object.
   * 
   * @return a (deep) copy of this FbcSpeciesPlugin object
   */ public
";


%csmethodmodifiers FbcSpeciesPlugin::isSetCharge() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * FbcSpeciesPlugin \'charge\' attribute has been set.
   *
   * @return @c true if this FbcSpeciesPlugin \'charge\' attribute has been set,
   * otherwise @c false is returned.
   */ public
";


%csmethodmodifiers FbcSpeciesPlugin::setCharge(int charge) "
/**
   * Sets the value of the \'charge\' attribute of this FbcSpeciesPlugin.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The only possible value
   * returned by this function is:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   */ public
";


%csmethodmodifiers FbcSpeciesPlugin::getCharge() const "
/**
   * Returns the value of the \'charge\' attribute of this FbcSpeciesPlugin.
   *
   * @return the value of the \'charge\' attribute of this FbcSpeciesPlugin.
   */ public
";


%csmethodmodifiers FbcSpeciesPlugin::unsetCharge "
/**
   * Unsets the value of the \'charge\' attribute of this FbcSpeciesPlugin.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The only possible value
   * returned by this function is:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   */ public
";


%csmethodmodifiers FbcSpeciesPlugin::isSetChemicalFormula() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * FbcSpeciesPlugin \'chemicalFormula\' attribute has been set.
   *
   * @return @c true if this FbcSpeciesPlugin \'chemicalFormula\' attribute has been set,
   * otherwise @c false is returned.
   */ public
";


%csmethodmodifiers FbcSpeciesPlugin::setChemicalFormula(const std::string& chemicalFormula) "
/**
   * Sets the value of the \'chemicalFormula\' attribute of this FbcSpeciesPlugin.
   * The format of chemicalFormula must consist only of atomic names (as in the Periodic Table) or user defined compounds either of which take the form of a single capital letter followed by zero or more lowercase letters. Where there is more than a single atom present, this is indicated with an integer. With regards to order (and enhance inter-operability) it is recommended to use the Hill system order.  (However, no error-checking is performed by this routine.)
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The only possible value
   * returned by this function is:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   */ public
";


%csmethodmodifiers FbcSpeciesPlugin::getChemicalFormula() const "
/**
   * Returns the value of the \'chemicalFormula\' attribute of this FbcSpeciesPlugin.
   *
   * @return the value of the \'chemicalFormula\' attribute of this FbcSpeciesPlugin.
   */ public
";


%csmethodmodifiers FbcSpeciesPlugin::unsetChemicalFormula "
/**
   * Unsets the value of the \'chemicalFormula\' attribute of this FbcSpeciesPlugin.
   *
   * @return integer value indicating success/failure of the
   * function.  @if clike The value is drawn from the
   * enumeration #OperationReturnValues_t. @endif The only possible value
   * returned by this function is:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   */ public
";


%csmethodmodifiers FbcSpeciesPlugin::setSBMLDocument(SBMLDocument* d) "
/**
   * Sets the parent SBMLDocument of this plugin object.
   *
   * Subclasses which contain one or more SBase derived elements must
   * override this function.
   *
   * @param d the SBMLDocument object to use
   *
   * @see connectToParent
   * @see enablePackageInternal
   */ /* libsbml-internal */ public
";


%csmethodmodifiers FbcSpeciesPlugin::connectToParent(SBase *sbase) "
/**
   * Sets the parent SBML object of this plugin object to
   * this object and child elements (if any).
   * (Creates a child-parent relationship by this plugin object)
   *
   * This function is called when this object is created by
   * the parent element.
   * Subclasses must override this this function if they have one
   * or more child elements.Also, SBasePlugin::connectToParent()
   * must be called in the overridden function.
   *
   * @param sbase the SBase object to use
   *
   * @see setSBMLDocument
   * @see enablePackageInternal
   */ /* libsbml-internal */ public
";


%csmethodmodifiers FbcSpeciesPlugin::enablePackageInternal(const std::string& pkgURI, const std::string& pkgPrefix, bool flag) "
/**
   * Enables/Disables the given package with child elements in this plugin
   * object (if any).
   * (This is an internal implementation invoked from
   *  SBase::enablePakcageInternal() function)
   *
   * @note Subclasses in which one or more SBase derived elements are
   * defined must override this function.
   *
   * @see setSBMLDocument
   * @see connectToParent
   */ /* libsbml-internal */ public
";


%csmethodmodifiers FbcSpeciesPlugin::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers FbcSpeciesPlugin::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Reads the attributes of corresponding package in SBMLDocument element.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers FbcSpeciesPlugin::writeAttributes(XMLOutputStream& stream) const "
/**
   * Writes the attributes of corresponding package in SBMLDocument element.
   */ /* libsbml-internal */ public
";


%typemap(csimports) Association "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{fbc}
 *
@htmlinclude pkg-marker-fbc.html Implementation of the \'fbc\' proposed package %Association
 * construct.
 *
 * The Association class is not part of the official Flux Balance
 * specification, but is instead a proposed future development of the
 * package.  If adopted, it would be a child of a GeneAssociation that would
 * describe a single \'and\' or \'or\' relationship between two or more genes or
 * other associations.
 */
"


%csmethodmodifiers Association::Association(unsigned int level      = FbcExtension::getDefaultLevel(), unsigned int version    = FbcExtension::getDefaultVersion(), unsigned int pkgVersion = FbcExtension::getDefaultPackageVersion()) "
/**
   * Creates a new Association with the given level, version, and package version.
   */ public
";


%csmethodmodifiers Association::Association(const XMLNode& node, FbcPkgNamespaces* fbcns) "
/** */ public
";


%csmethodmodifiers Association::Association(FbcPkgNamespaces* fbcns) "
/**
   * Creates a new Association with the given FbcPkgNamespaces object.
   */ public
";


%csmethodmodifiers Association::Association(const Association& source) "
/**
   * Copy constructor.
   */ public
";


%csmethodmodifiers Association::getType() const "
/**
   * Returns the string of the \'type\' attribute of this Association.
   *
   * @return the string of the \'type\' attribute of this Association.
   */ public
";


%csmethodmodifiers Association::isSetType() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * Association\'s \'type\' attribute has been set.
   *
   * @return @c true if this Association\'s \'type\' attribute has been set, 
   * otherwise @c false is returned.
   */ public
";


%csmethodmodifiers Association::setType(const AssociationTypeCode_t type) "
/**
   * Sets the SIdRef string of the \'type\' attribute of this Association.
   *
   * @param type a SIdRef string to be set.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers Association::unsetType "
/**
   * Unsets the value of the \'id\' attribute of this Association.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers Association::getReference() const "
/**
   * Returns the string of the \'reference\' attribute of this Association.
   *
   * @return the string of the \'reference\' attribute of this Association.
   */ public
";


%csmethodmodifiers Association::isSetReference() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * Association\'s \'reference\' attribute has been set.
   *
   * @return @c true if this Association\'s \'reference\' attribute has been set, 
   * otherwise @c false is returned.
   */ public
";


%csmethodmodifiers Association::setReference(const std::string& reference) "
/**
   * Sets the SIdRef string of the \'reference\' attribute of this Association.
   *
   * @param reference a SIdRef string to be set.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers Association::unsetReference "
/**
   * Unsets the value of the \'id\' attribute of this Association.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers Association::addGene(const std::string& id) "
/**
   * Add a gene with the given @p id to the association.
   */ public
";


%csmethodmodifiers Association::getNumAssociations "
/**
   * Returns the number of child Associations of this Association.
   */ public
";


%csmethodmodifiers Association::addAssociation(Association &association) "
/**
   * Adds a child Association to this Association.
   */ public
";


%csmethodmodifiers Association::removeAssociation(int index) "
/**
   * Removes the child Associations with the given @p index from this Association.
   */ public
";


%csmethodmodifiers Association::clearAssociations "
/**
   * Returns the number of child Associations of this Association.
   */ public
";


%csmethodmodifiers Association::createAnd "
/**
   * Creates and returns a new Association of type \'and\'.  Does not actually add the created Association as a child of this Association or do anything else with it--the returning pointer is now owned by the caller.
   */ public
";


%csmethodmodifiers Association::createOr "
/**
   * Creates and returns a new Association of type \'or\'.  Does not actually add the created Association as a child of this Association or do anything else with it--the returning pointer is now owned by the caller.
   */ public
";


%csmethodmodifiers Association::createGene(const std::string reference = "" ) "
/**
   * Creates and returns a new Association of type \'and\', and with the gene reference @p reference.  Does not actually add the created Association as a child of this Association or do anything else with it--the returning pointer is now owned by the caller.
   */ public
";


%csmethodmodifiers Association::toXML() const "
/**
   * Creates an XMLNode object from this.
   */ public
";


%csmethodmodifiers Association::getElementName() const "
/**
   * Returns the XML element name of
   * this SBML object.
   *
   * @return the string of the name of this element.
   */ public
";


%csmethodmodifiers Association::clone() const "
/**
   * Creates and returns a deep copy of this Association.
   * 
   * @return a (deep) copy of this Association.
   */ public
";


%csmethodmodifiers Association::getTypeCode() const "
/**
   * Returns the libSBML type code of this object instance.
   *
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object:
   * @link libsbmlcs.libsbml.SBML_FBC_ASSOCIATION SBML_FBC_ASSOCIATION@endlink
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers Association::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.  For example:
   *
   *   SBase::writeElements(stream);
   *   mReactants.write(stream);
   *   mProducts.write(stream);
   *   ...
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Association::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor.
   *
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether or not the Visitor would like to visit the SBML object\'s next
   * sibling object (if available).
   */ public
";


%csmethodmodifiers Association::parseInfixAssociation(const std::string& association) "
/**
   * Parses a gene association in infix format. These look like this: 
   * 
   * (b2422) and (b2425) and (b2423) and (b2424) or (b2422) and (b2423) and (b2424) and (b2413) and (b3917)
   * 
   * @return the parsed association, or @c null in case of an error.
   */ public
";


%csmethodmodifiers Association::toInfix() const "
/** 
   * Converts this association into an infix string.
   *
   *
   * @return the association as infix string.
   */ public
";


%csmethodmodifiers Association::createObject(XMLInputStream& stream) "
/**
   * Create and return an SBML object of this class, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Association::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Association::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Subclasses should override this method to read values from the given
   * XMLAttributes set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Association::writeAttributes(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.  For example:
   *
   *   SBase::writeAttributes(stream);
   *   stream.writeAttribute( \'id\'  , mId   );
   *   stream.writeAttribute( \'name\', mName );
   *   ...
   */ /* libsbml-internal */ public
";


%typemap(csimports) FluxBound "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{fbc}
 *
@htmlinclude pkg-marker-fbc.html Implementation of the \'fbc\' package %FluxBound construct.
 *
 * The FluxBound object holds a single (in)equality that provides the maximum
 * or minimum value that a reaction flux can obtain at steady state.
 */
"


%typemap(csimports) ListOfFluxBounds "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{fbc}
 *
@htmlinclude pkg-marker-fbc.html Implementation of the %ListOfFluxBounds construct from the
 * \'fbc\' package.
 * 
 * The ListOfFluxBounds is a container for the FluxBound elements of a Model.
 * 
 * *
 * 
 * The various ListOf___ classes in SBML are merely containers used for
 * organizing the main components of an SBML model.  All are derived from
 * the abstract class SBase, and inherit the various attributes and
 * subelements of SBase, such as \'metaid\' as and \'annotation\'.  The
 * ListOf___ classes do not add any attributes of their own.
 *
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 *
 * @htmlinclude listof-illustration.html
 *
 * Readers may wonder about the motivations for using the ListOf___
 * containers.  A simpler approach in XML might be to place the components
 * all directly at the top level of the model definition.  The choice made
 * in SBML is to group them within XML elements named after
 * ListOf<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from SBase means that software tools can add information @em about
 * the lists themselves into each list container\'s \'annotation\'.
 * 
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 *
 *
 */
"


%csmethodmodifiers FluxBound::FluxBound(unsigned int level      = FbcExtension::getDefaultLevel(), unsigned int version    = FbcExtension::getDefaultVersion(), unsigned int pkgVersion = FbcExtension::getDefaultPackageVersion()) "
/**
   * Creates a new FluxBound with the given level, version, and package version.
   */ public
";


%csmethodmodifiers FluxBound::FluxBound(FbcPkgNamespaces* fbcns) "
/**
   * Creates a new FluxBound with the given FbcPkgNamespaces object.
   */ public
";


%csmethodmodifiers FluxBound::FluxBound(const FluxBound& source) "
/**
   * Copy constructor.
   */ public
";


%csmethodmodifiers FluxBound::getId() const "
/**
   * Returns the value of the \'id\' attribute of this FluxBound.
   *
   * @return the value of the \'id\' attribute of this FluxBound.
   */ public
";


%csmethodmodifiers FluxBound::isSetId() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * FluxBound\'s \'id\' attribute has been set.
   *
   * @return @c true if this FluxBound\'s \'id\' attribute has been set, 
   * otherwise @c false is returned.
   */ public
";


%csmethodmodifiers FluxBound::setId(const std::string& id) "
/**
   * Sets the value of the \'id\' attribute of this FluxBound.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers FluxBound::unsetId "
/**
   * Unsets the value of the \'id\' attribute of this FluxBound.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers FluxBound::getName() const "
/**
   * Returns the value of the \'name\' attribute of this FluxBound.
   *
   * @return the value of the \'name\' attribute of this FluxBound.
   */ public
";


%csmethodmodifiers FluxBound::isSetName() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * FluxBound\'s \'name\' attribute has been set.
   *
   * @return @c true if this FluxBound\'s \'id\' attribute has been set,
   * otherwise @c false is returned.
   */ public
";


%csmethodmodifiers FluxBound::setName(const std::string& name) "
/**
   * Sets the value of the \'name\' attribute of this FluxBound.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers FluxBound::unsetName "
/**
   * Unsets the value of the \'name\' attribute of this FluxBound.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers FluxBound::getReaction() const "
/**
   * Returns the value of the \'reaction\' attribute of this FluxBound.
   *
   * @return the value of the \'reaction\' attribute of this FluxBound.
   */ public
";


%csmethodmodifiers FluxBound::isSetReaction() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * FluxBound\'s \'reaction\' attribute has been set.
   *
   * @return @c true if this FluxBound\'s \'reaction\' attribute has been set, 
   * otherwise @c false is returned.
   */ public
";


%csmethodmodifiers FluxBound::setReaction(const std::string& reaction) "
/**
   * Sets the value of the \'reaction\' attribute of this FluxBound.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers FluxBound::unsetReaction "
/**
   * Unsets the value of the \'reaction\' attribute of this FluxBound.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers FluxBound::getOperation "
/**
   * Returns the value of the \'operation\' attribute of this FluxBound.
   *
   * @return the value of the \'operation\' attribute of this FluxBound.
   */ public
";


%csmethodmodifiers FluxBound::getFluxBoundOperation() const "
/**
   * Returns the value of the \'operation\' attribute of this FluxBound.
   *
   * @return the value of the \'operation\' attribute of this FluxBound.
   */ public
";


%csmethodmodifiers FluxBound::isSetOperation() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * FluxBound\'s \'operation\' attribute has been set.
   *
   * @return @c true if this FluxBound\'s \'operation\' attribute has been set, 
   * otherwise @c false is returned.
   */ public
";


%csmethodmodifiers FluxBound::setOperation(const std::string& operation) "
/**
   * Sets the value of the \'operation\' attribute of this FluxBound.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers FluxBound::setOperation(FluxBoundOperation_t operation) "
/**
   * Sets the value of the \'operation\' attribute of this FluxBound.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers FluxBound::unsetOperation "
/**
   * Unsets the value of the \'operation\' attribute of this FluxBound.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers FluxBound::getValue() const "
/**
   * Returns the value of the \'value\' attribute of this FluxBound.
   *
   * @return the value of the \'value\' attribute of this FluxBound.
   */ public
";


%csmethodmodifiers FluxBound::isSetValue() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * FluxBound\'s \'value\' attribute has been set.
   *
   * @return @c true if this FluxBound\'s \'value\' attribute has been set, 
   * otherwise @c false is returned.
   */ public
";


%csmethodmodifiers FluxBound::setValue(const double value) "
/**
   * Sets the value of the \'value\' attribute of this FluxBound.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers FluxBound::unsetValue "
/**
   * Unsets the value of the \'value\' attribute of this FluxBound.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers FluxBound::renameSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames all the @c SIdRef attributes on this element, including any
   * found in MathML content (if such exists).
   *
   * This method works by looking at all attributes and (if appropriate)
   * mathematical formulas, comparing the identifiers to the value of @p
   * oldid.  If any matches are found, the matching identifiers are replaced
   * with @p newid.  The method does @em not descend into child elements.
   *
   * @param oldid the old identifier
   * @param newid the new identifier
   */ public
";


%csmethodmodifiers FluxBound::getElementName() const "
/**
   * Returns the XML element name of
   * this SBML object.
   *
   * @return the string of the name of this element.
   */ public
";


%csmethodmodifiers FluxBound::clone() const "
/**
   * Creates and returns a deep copy of this FluxBound.
   * 
   * @return a (deep) copy of this FluxBound.
   */ public
";


%csmethodmodifiers FluxBound::getTypeCode() const "
/**
   * Returns the libSBML type code of this object instance.
   *
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object:
   * @link libsbmlcs.libsbml.SBML_FBC_FLUXBOUND SBML_FBC_FLUXBOUND@endlink
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers FluxBound::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.  For example:
   *
   *   SBase::writeElements(stream);
   *   mReactants.write(stream);
   *   mProducts.write(stream);
   *   ...
   */ /* libsbml-internal */ public
";


%csmethodmodifiers FluxBound::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor.
   *
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether or not the Visitor would like to visit the SBML object\'s next
   * sibling object (if available).
   */ public
";


%csmethodmodifiers FluxBound::setSBMLDocument(SBMLDocument* d) "
/**
   * Sets the parent SBMLDocument of this SBML object.
   *
   * @param d the SBMLDocument object to use
   */ /* libsbml-internal */ public
";


%csmethodmodifiers FluxBound::enablePackageInternal(const std::string& pkgURI, const std::string& pkgPrefix, bool flag) "
/**
   * Enables/Disables the given package with this element and child
   * elements (if any).
   * (This is an internal implementation for enablePakcage function)
   *
   * @note Subclasses in which one or more child elements are defined
   * must override this function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers FluxBound::hasRequiredElements() const "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers FluxBound::createObject(XMLInputStream& stream) "
/**
   * Create and return an SBML object of this class, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers FluxBound::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers FluxBound::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Subclasses should override this method to read values from the given
   * XMLAttributes set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers FluxBound::writeAttributes(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.  For example:
   *
   *   SBase::writeAttributes(stream);
   *   stream.writeAttribute( \'id\'  , mId   );
   *   stream.writeAttribute( \'name\', mName );
   *   ...
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfFluxBounds::clone() const "
/**
   * Creates and returns a deep copy of this ListOfFluxBounds.
   * 
   * @return a (deep) copy of this ListOfFluxBounds.
   */ public
";


%csmethodmodifiers ListOfFluxBounds::ListOfFluxBounds(unsigned int level      = FbcExtension::getDefaultLevel(), unsigned int version    = FbcExtension::getDefaultVersion(), unsigned int pkgVersion = FbcExtension::getDefaultPackageVersion()) "
/**
   * Creates a new ListOfFluxBounds with the given level, version, and package version.
   */ public
";


%csmethodmodifiers ListOfFluxBounds::ListOfFluxBounds(FbcPkgNamespaces* fbcns) "
/**
   * Creates a new ListOfFluxBounds with the given FbcPkgNamespaces object.
   */ public
";


%csmethodmodifiers ListOfFluxBounds::get(unsigned int n) "
/**
   * Get a FluxBound from the ListOfFluxBounds.
   *
   * @param n the index number of the FluxBound to get.
   * 
   * @return the nth FluxBound in this ListOfFluxBounds.
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfFluxBounds::get "
/**
   * Get a FluxBound from the ListOfFluxBounds.
   *
   * @param n the index number of the FluxBound to get.
   * 
   * @return the nth FluxBound in this ListOfFluxBounds.
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfFluxBounds::get(const std::string& sid) "
/**
   * Get a FluxBound from the ListOfFluxBounds
   * based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the FluxBound to get.
   * 
   * @return FluxBound in this ListOfFluxBounds
   * with the given @p sid or @c null if no such
   * FluxBound exists.
   *
   * @see get(long n)
   * @see size()
   */ public
";


%csmethodmodifiers ListOfFluxBounds::get(const std::string& sid) const "
/**
   * Get a FluxBound from the ListOfFluxBounds
   * based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the FluxBound to get.
   * 
   * @return FluxBound in this ListOfFluxBounds
   * with the given @p sid or @c null if no such
   * FluxBound exists.
   *
   * @see get(long n)
   * @see size()
   */ public
";


%csmethodmodifiers ListOfFluxBounds::remove(unsigned int n) "
/**
   * Removes the nth item from this ListOfFluxBounds items and returns a pointer to
   * it.
   *
   * The caller owns the returned item and is responsible for deleting it.
   *
   * @param n the index of the item to remove
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfFluxBounds::remove(const std::string& sid) "
/**
   * Removes item in this ListOfFluxBounds items with the given identifier.
   *
   * The caller owns the returned item and is responsible for deleting it.
   * If none of the items in this list have the identifier @p sid, then @c
   * null is returned.
   *
   * @param sid the identifier of the item to remove
   *
   * @return the item removed.  As mentioned above, the caller owns the
   * returned item.
   */ public
";


%csmethodmodifiers ListOfFluxBounds::getItemTypeCode() const "
/**
   * Returns the libSBML type code for the SBML objects
   * contained in this ListOf object.
   * 
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for objects contained in this list:
   * @link libsbmlcs.libsbml.SBML_FBC_FLUXBOUND SBML_FBC_FLUXBOUND@endlink (default).
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers ListOfFluxBounds::getElementName() const "
/**
   * Returns the XML element name of
   * this SBML object.
   *
   * @return the string of the name of this element.
   */ public
";


%csmethodmodifiers ListOfFluxBounds::createObject(XMLInputStream& stream) "
/**
   * Create and return an SBML object of this class, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfFluxBounds::writeXMLNS(XMLOutputStream& stream) const "
/** */ /* libsbml-internal */ public
";


%typemap(csimports) FluxObjective "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{fbc}
 *
@htmlinclude pkg-marker-fbc.html Implementation of the \'fbc\' package %FluxObjective
 * construct.
 *
 * An integral component in a complete description of a steady-state model is the so-called \'objective function\' which generally consists of a linear combination of model variables (fluxes) and a sense (direction). In the FBC package this concept is succinctly captured in the Objective class.
 * 
 */
"


%typemap(csimports) ListOfFluxObjectives "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{fbc}
 *
@htmlinclude pkg-marker-fbc.html Implementation of the \'fbc\' package %ListOfFluxObjectives
 * construct.
 * 
 * The ListOfFluxObjectives is a container for the FluxObjective elements of a Model annotation.
 * 
 * *
 * 
 * The various ListOf___ classes in SBML are merely containers used for
 * organizing the main components of an SBML model.  All are derived from
 * the abstract class SBase, and inherit the various attributes and
 * subelements of SBase, such as \'metaid\' as and \'annotation\'.  The
 * ListOf___ classes do not add any attributes of their own.
 *
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 *
 * @htmlinclude listof-illustration.html
 *
 * Readers may wonder about the motivations for using the ListOf___
 * containers.  A simpler approach in XML might be to place the components
 * all directly at the top level of the model definition.  The choice made
 * in SBML is to group them within XML elements named after
 * ListOf<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from SBase means that software tools can add information @em about
 * the lists themselves into each list container\'s \'annotation\'.
 * 
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 *
 *
 *
 * @see FluxObjective
 */
"


%csmethodmodifiers FluxObjective::FluxObjective(unsigned int level      = FbcExtension::getDefaultLevel(), unsigned int version    = FbcExtension::getDefaultVersion(), unsigned int pkgVersion = FbcExtension::getDefaultPackageVersion()) "
/**
   * Creates a new FluxObjective with the given level, version, and package version.
   */ public
";


%csmethodmodifiers FluxObjective::FluxObjective(FbcPkgNamespaces* fbcns) "
/**
   * Creates a new FluxObjective with the given FbcPkgNamespaces object.
   */ public
";


%csmethodmodifiers FluxObjective::FluxObjective(const FluxObjective& source) "
/**
   * Copy constructor.
   */ public
";


%csmethodmodifiers FluxObjective::getId() const "
/**
   * Returns the value of the \'id\' attribute of this FluxObjective.
   *
   * @return the value of the \'id\' attribute of this FluxObjective.
   */ public
";


%csmethodmodifiers FluxObjective::isSetId() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * FluxObjective \'id\' attribute has been set.
   *
   * @return @c true if this FluxObjective \'id\' attribute has been set,
   * otherwise @c false is returned.
   */ public
";


%csmethodmodifiers FluxObjective::setId(const std::string& id) "
/**
   * Sets the value of the \'id\' attribute of this FluxObjective.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers FluxObjective::unsetId "
/**
   * Unsets the value of the \'id\' attribute of this FluxObjective.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers FluxObjective::getName() const "
/**
   * Returns the value of the \'name\' attribute of this FluxObjective.
   *
   * @return the value of the \'name\' attribute of this FluxObjective.
   */ public
";


%csmethodmodifiers FluxObjective::isSetName() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * FluxObjective \'name\' attribute has been set.
   *
   * @return @c true if this FluxObjective \'id\' attribute has been set,
   * otherwise @c false is returned.
   */ public
";


%csmethodmodifiers FluxObjective::setName(const std::string& name) "
/**
   * Sets the value of the \'name\' attribute of this FluxObjective.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers FluxObjective::unsetName "
/**
   * Unsets the value of the \'name\' attribute of this FluxObjective.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers FluxObjective::getReaction() const "
/**
   * Returns the string of the \'reaction\' attribute of this FluxObjective.
   *
   * @return the string of the \'reaction\' attribute of this FluxObjective.
   */ public
";


%csmethodmodifiers FluxObjective::isSetReaction() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * FluxObjective\'s \'reaction\' attribute has been set.
   *
   * @return @c true if this FluxObjective\'s \'reaction\' attribute has been set, 
   * otherwise @c false is returned.
   */ public
";


%csmethodmodifiers FluxObjective::setReaction(const std::string& reaction) "
/**
   * Sets the SIdRef string of the \'reaction\' attribute of this FluxObjective.
   *
   * @param reaction a SIdRef string to be set.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers FluxObjective::unsetReaction "
/**
   * Unsets the value of the \'id\' attribute of this FluxObjective.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers FluxObjective::getCoefficient() const "
/**
   * Returns the value of the \'coefficient\' attribute of this FluxObjective.
   *
   * @return the value of the \'coefficient\' attribute of this FluxObjective.
   */ public
";


%csmethodmodifiers FluxObjective::isSetCoefficient() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * FluxObjective\'s \'coefficient\' attribute has been set.
   *
   * @return @c true if this FluxObjective\'s \'coefficient\' attribute has been set, 
   * otherwise @c false is returned.
   */ public
";


%csmethodmodifiers FluxObjective::setCoefficient(const double coefficient) "
/**
   * Sets the value of the \'coefficient\' attribute of this FluxObjective.
   *
   * @param coefficient a double coefficient to be set.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers FluxObjective::unsetCoefficient "
/**
   * Unsets the value of the \'id\' attribute of this FluxObjective.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers FluxObjective::renameSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames all the @c SIdRef attributes on this element, including any
   * found in MathML content (if such exists).
   *
   * This method works by looking at all attributes and (if appropriate)
   * mathematical formulas, comparing the identifiers to the value of @p
   * oldid.  If any matches are found, the matching identifiers are replaced
   * with @p newid.  The method does @em not descend into child elements.
   *
   * @param oldid the old identifier
   * @param newid the new identifier
   */ public
";


%csmethodmodifiers FluxObjective::getElementName() const "
/**
   * Returns the XML element name of
   * this SBML object.
   *
   * @return the string of the name of this element.
   */ public
";


%csmethodmodifiers FluxObjective::clone() const "
/**
   * Creates and returns a deep copy of this FluxObjective.
   * 
   * @return a (deep) copy of this FluxObjective.
   */ public
";


%csmethodmodifiers FluxObjective::getTypeCode() const "
/**
   * Returns the libSBML type code of this object instance.
   *
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object:
   * @link libsbmlcs.libsbml.SBML_FBC_FLUXOBJECTIVE SBML_FBC_FLUXOBJECTIVE@endlink
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers FluxObjective::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.  For example:
   *
   *   SBase::writeElements(stream);
   *   mReactants.write(stream);
   *   mProducts.write(stream);
   *   ...
   */ /* libsbml-internal */ public
";


%csmethodmodifiers FluxObjective::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor.
   *
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether or not the Visitor would like to visit the SBML object\'s next
   * sibling object (if available).
   */ public
";


%csmethodmodifiers FluxObjective::createObject(XMLInputStream& stream) "
/**
   * Create and return an SBML object of this class, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers FluxObjective::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers FluxObjective::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Subclasses should override this method to read values from the given
   * XMLAttributes set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers FluxObjective::writeAttributes(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.  For example:
   *
   *   SBase::writeAttributes(stream);
   *   stream.writeAttribute( \'id\'  , mId   );
   *   stream.writeAttribute( \'name\', mName );
   *   ...
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfFluxObjectives::clone() const "
/**
   * Creates and returns a deep copy of this ListOfFluxObjectives.
   * 
   * @return a (deep) copy of this ListOfFluxObjectives.
   */ public
";


%csmethodmodifiers ListOfFluxObjectives::ListOfFluxObjectives(unsigned int level      = FbcExtension::getDefaultLevel(), unsigned int version    = FbcExtension::getDefaultVersion(), unsigned int pkgVersion = FbcExtension::getDefaultPackageVersion()) "
/**
   * Creates a new ListOfFluxObjectives with the given level, version, and package version.
   */ public
";


%csmethodmodifiers ListOfFluxObjectives::ListOfFluxObjectives(FbcPkgNamespaces* fbcns) "
/**
   * Creates a new ListOfFluxObjectives with the given FbcPkgNamespaces object.
   */ public
";


%csmethodmodifiers ListOfFluxObjectives::get(unsigned int n) "
/**
   * Get a FluxObjective from the ListOfFluxObjectives.
   *
   * @param n the index number of the FluxObjective to get.
   * 
   * @return the nth FluxObjective in this ListOfFluxObjectives.
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfFluxObjectives::get "
/**
   * Get a FluxObjective from the ListOfFluxObjectives.
   *
   * @param n the index number of the FluxObjective to get.
   * 
   * @return the nth FluxObjective in this ListOfFluxObjectives.
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfFluxObjectives::get(const std::string& sid) "
/**
   * Get a FluxObjective from the ListOfFluxObjectives
   * based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the FluxObjective to get.
   * 
   * @return FluxObjective in this ListOfFluxObjectives
   * with the given @p sid or @c null if no such
   * FluxObjective exists.
   *
   * @see get(long n)
   * @see size()
   */ public
";


%csmethodmodifiers ListOfFluxObjectives::get(const std::string& sid) const "
/**
   * Get a FluxObjective from the ListOfFluxObjectives
   * based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the FluxObjective to get.
   * 
   * @return FluxObjective in this ListOfFluxObjectives
   * with the given @p sid or @c null if no such
   * FluxObjective exists.
   *
   * @see get(long n)
   * @see size()
   */ public
";


%csmethodmodifiers ListOfFluxObjectives::remove(unsigned int n) "
/**
   * Removes the nth item from this ListOfFluxObjectives items and returns a pointer to
   * it.
   *
   * The caller owns the returned item and is responsible for deleting it.
   *
   * @param n the index of the item to remove
   * @return the item removed.  As mentioned above, the caller owns the
   * returned item.
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfFluxObjectives::remove(const std::string& sid) "
/**
   * Removes item in this ListOfFluxObjectives items with the given identifier.
   *
   * The caller owns the returned item and is responsible for deleting it.
   * If none of the items in this list have the identifier @p sid, then @c
   * null is returned.
   *
   * @param sid the identifier of the item to remove
   *
   * @return the item removed.  As mentioned above, the caller owns the
   * returned item.
   */ public
";


%csmethodmodifiers ListOfFluxObjectives::getItemTypeCode() const "
/**
   * Returns the libSBML type code for the SBML objects
   * contained in this ListOf object.
   * 
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for objects contained in this list:
   * @link libsbmlcs.libsbml.SBML_FBC_FLUXOBJECTIVE SBML_FBC_FLUXOBJECTIVE@endlink (default).
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers ListOfFluxObjectives::getElementName() const "
/**
   * Returns the XML element name of
   * this SBML object.
   *
   * @return the string of the name of this element.
   */ public
";


%csmethodmodifiers ListOfFluxObjectives::createObject(XMLInputStream& stream) "
/**
   * Create and return an SBML object of this class, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%typemap(csimports) GeneAssociation "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{fbc}
 *
@htmlinclude pkg-marker-fbc.html Implementation of the \'fbc\' package %GeneAssociation
 * construct.
 *
 * Gene associations are not part of the core FBC specification, but rather are a proposed annotation.
 * 
 */
"


%typemap(csimports) ListOfGeneAssociations "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{fbc}
 *
@htmlinclude pkg-marker-fbc.html Implementation of the \'fbc\' package suggested
 * %ListOfGeneAssociations annotation construct.
 * 
 * The ListOfGeneAssociations is a container for the GeneAssociation elements of the proposed Model annotation, and is not part of the official FBC specification.
 * 
 * *
 * 
 * The various ListOf___ classes in SBML are merely containers used for
 * organizing the main components of an SBML model.  All are derived from
 * the abstract class SBase, and inherit the various attributes and
 * subelements of SBase, such as \'metaid\' as and \'annotation\'.  The
 * ListOf___ classes do not add any attributes of their own.
 *
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 *
 * @htmlinclude listof-illustration.html
 *
 * Readers may wonder about the motivations for using the ListOf___
 * containers.  A simpler approach in XML might be to place the components
 * all directly at the top level of the model definition.  The choice made
 * in SBML is to group them within XML elements named after
 * ListOf<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from SBase means that software tools can add information @em about
 * the lists themselves into each list container\'s \'annotation\'.
 * 
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 *
 *
 *
 * @see GeneAssociation
 */
"


%csmethodmodifiers GeneAssociation::GeneAssociation(unsigned int level      = FbcExtension::getDefaultLevel(), unsigned int version    = FbcExtension::getDefaultVersion(), unsigned int pkgVersion = FbcExtension::getDefaultPackageVersion()) "
/**
   * Creates a new GeneAssociation with the given @p level, @p version, and @p pkgVersion.
   */ public
";


%csmethodmodifiers GeneAssociation::GeneAssociation(const XMLNode& node, FbcPkgNamespaces* fbcns) "
/**
   * Creates a new GeneAssociation with the given @p node and FbcPkgNamespaces @p fbcns.
   */ public
";


%csmethodmodifiers GeneAssociation::GeneAssociation(FbcPkgNamespaces* fbcns) "
/**
   * Creates a new GeneAssociation with the given FbcPkgNamespaces object.
   */ public
";


%csmethodmodifiers GeneAssociation::GeneAssociation(const GeneAssociation& source) "
/**
   * Copy constructor.
   */ public
";


%csmethodmodifiers GeneAssociation::getId() const "
/**
   * Returns the string of the \'id\' attribute of this GeneAssociation.
   *
   * @return the string of the \'id\' attribute of this GeneAssociation.
   */ public
";


%csmethodmodifiers GeneAssociation::isSetId() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * GeneAssociation\'s \'id\' attribute has been set.
   *
   * @return @c true if this GeneAssociation\'s \'id\' attribute has been set, 
   * otherwise @c false is returned.
   */ public
";


%csmethodmodifiers GeneAssociation::setId(const std::string& id) "
/**
   * Sets the SIdRef string of the \'id\' attribute of this GeneAssociation.
   *
   * @param id a SIdRef string to be set.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers GeneAssociation::unsetId "
/**
   * Unsets the value of the \'id\' attribute of this GeneAssociation.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers GeneAssociation::getReaction() const "
/**
   * Returns the string of the \'reaction\' attribute of this GeneAssociation.
   *
   * @return the string of the \'reaction\' attribute of this GeneAssociation.
   */ public
";


%csmethodmodifiers GeneAssociation::isSetReaction() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * GeneAssociation\'s \'reaction\' attribute has been set.
   *
   * @return @c true if this GeneAssociation\'s \'reaction\' attribute has been set, 
   * otherwise @c false is returned.
   */ public
";


%csmethodmodifiers GeneAssociation::setReaction(const std::string& reaction) "
/**
   * Sets the SIdRef string of the \'reaction\' attribute of this GeneAssociation.
   *
   * @param reaction a SIdRef string to be set.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers GeneAssociation::unsetReaction "
/**
   * Unsets the value of the \'id\' attribute of this GeneAssociation.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers GeneAssociation::createAssociation "
/** 
   * Creates a new association, sets it to this element and returns it. 
   */ public
";


%csmethodmodifiers GeneAssociation::getAssociation() const "
/**
   * Returns Association object of this GeneAssociation.
   *
   * @return Association object of this GeneAssociation.
   */ public
";


%csmethodmodifiers GeneAssociation::getAssociation "
/**
   * Returns Association object of this GeneAssociation.
   *
   * @return Association object of this GeneAssociation.
   */ public
";


%csmethodmodifiers GeneAssociation::isSetAssociation() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * GeneAssociation\'s \'association\' element has been set.
   *
   * @return @c true if this GeneAssociation\'s \'association\' element has been set, 
   * otherwise @c false is returned.
   */ public
";


%csmethodmodifiers GeneAssociation::setAssociation(const Association* association) "
/**
   * Sets the Association object of this GeneAssociation.
   *
   * @param association a Association object to be set.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers GeneAssociation::unsetAssociation "
/**
   * Unsets the Association object of this GeneAssociation.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers GeneAssociation::getElementName() const "
/**
   * Returns the XML element name of
   * this SBML object.
   *
   * @return the string of the name of this element.
   */ public
";


%csmethodmodifiers GeneAssociation::clone() const "
/**
   * Creates and returns a deep copy of this GeneAssociation.
   *
   * @return a (deep) copy of this GeneAssociation.
   */ public
";


%csmethodmodifiers GeneAssociation::getTypeCode() const "
/**
   * Returns the libSBML type code of this object instance.
   *
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object:
   * @link libsbmlcs.libsbml.SBML_FBC_GENEASSOCIATION SBML_FBC_GENEASSOCIATION@endlink
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers GeneAssociation::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.  For example:
   *
   *   SBase::writeElements(stream);
   *   mReactants.write(stream);
   *   mProducts.write(stream);
   *   ...
   */ /* libsbml-internal */ public
";


%csmethodmodifiers GeneAssociation::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor.
   *
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether or not the Visitor would like to visit the SBML object\'s next
   * sibling object (if available).
   */ public
";


%csmethodmodifiers GeneAssociation::toXML() const "
/**
   * Creates an XMLNode object from this.
   */ public
";


%csmethodmodifiers GeneAssociation::createObject(XMLInputStream& stream) "
/**
   * Creates and returns an SBML object corresponding to the next
   * XMLToken in the @p stream, or null if the token was not recognized.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers GeneAssociation::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers GeneAssociation::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Subclasses should override this method to read values from the given
   * XMLAttributes set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers GeneAssociation::writeAttributes(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.  For example:
   *
   *   SBase::writeAttributes(stream);
   *   stream.writeAttribute( \'id\'  , mId   );
   *   stream.writeAttribute( \'name\', mName );
   *   ...
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfGeneAssociations::clone() const "
/**
   * Creates and returns a deep copy of this ListOfGeneAssociations.
   *
   * @return a (deep) copy of this ListOfGeneAssociations.
   */ public
";


%csmethodmodifiers ListOfGeneAssociations::ListOfGeneAssociations(unsigned int level      = FbcExtension::getDefaultLevel(), unsigned int version    = FbcExtension::getDefaultVersion(), unsigned int pkgVersion = FbcExtension::getDefaultPackageVersion()) "
/**
   * Creates a new ListOfGeneAssociations with the given level, version, and package version.
   */ public
";


%csmethodmodifiers ListOfGeneAssociations::ListOfGeneAssociations(FbcPkgNamespaces* fbcns) "
/**
   * Creates a new ListOfGeneAssociations with the given FbcPkgNamespaces object.
   */ public
";


%csmethodmodifiers ListOfGeneAssociations::get(unsigned int n) "
/**
   * Get a GeneAssociation from the ListOfGeneAssociations.
   *
   * @param n the index number of the GeneAssociation to get.
   * 
   * @return the nth GeneAssociation in this ListOfGeneAssociations.
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfGeneAssociations::get "
/**
   * Get a GeneAssociation from the ListOfGeneAssociations.
   *
   * @param n the index number of the GeneAssociation to get.
   * 
   * @return the nth GeneAssociation in this ListOfGeneAssociations.
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfGeneAssociations::get(const std::string& sid) "
/**
   * Get a GeneAssociation from the ListOfGeneAssociations
   * based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the GeneAssociation to get.
   * 
   * @return GeneAssociation in this ListOfGeneAssociations
   * with the given @p sid or @c null if no such
   * GeneAssociation exists.
   *
   * @see get(long n)
   * @see size()
   */ public
";


%csmethodmodifiers ListOfGeneAssociations::get(const std::string& sid) const "
/**
   * Get a GeneAssociation from the ListOfGeneAssociations
   * based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the GeneAssociation to get.
   * 
   * @return GeneAssociation in this ListOfGeneAssociations
   * with the given @p sid or @c null if no such
   * GeneAssociation exists.
   *
   * @see get(long n)
   * @see size()
   */ public
";


%csmethodmodifiers ListOfGeneAssociations::remove(unsigned int n) "
/**
   * Removes the nth item from this ListOfGeneAssociations items and returns a pointer to
   * it.
   *
   * The caller owns the returned item and is responsible for deleting it.
   *
   * @param n the index of the item to remove
   * @return the item removed.  As mentioned above, the caller owns the
   * returned item.
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfGeneAssociations::remove(const std::string& sid) "
/**
   * Removes item in this ListOfGeneAssociations items with the given identifier.
   *
   * The caller owns the returned item and is responsible for deleting it.
   * If none of the items in this list have the identifier @p sid, then @c
   * null is returned.
   *
   * @param sid the identifier of the item to remove
   *
   * @return the item removed.  As mentioned above, the caller owns the
   * returned item.
   */ public
";


%csmethodmodifiers ListOfGeneAssociations::getItemTypeCode() const "
/**
   * Returns the libSBML type code for the SBML objects
   * contained in this ListOf object.
   * 
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for objects contained in this list:
   * @link libsbmlcs.libsbml.SBML_FBC_GENEASSOCIATION SBML_FBC_GENEASSOCIATION@endlink (default).
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers ListOfGeneAssociations::getElementName() const "
/**
   * Returns the XML element name of
   * this SBML object.
   *
   * @return the string of the name of this element.
   */ public
";


%csmethodmodifiers ListOfGeneAssociations::createObject(XMLInputStream& stream) "
/**
   * Create and return a geneAssociation object, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%typemap(csimports) Objective "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{fbc}
 *
@htmlinclude pkg-marker-fbc.html Implementation of the \'fbc\' package %Objective construct.
 *
 * The FBC Objective class is derived from SBML SBase and inherits metaid and
 * sboTerm, as well as the subcomponents for Annotation and Notes. An
 * integral component in a complete description of a steady-state model is
 * the so-called \'objective function\' which generally consists of a linear
 * combination of model variables (fluxes) and a sense (direction). In the
 * FBC package this concept is succinctly captured in the Objective class.
 */
"


%typemap(csimports) ListOfObjectives "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{fbc}
 *
@htmlinclude pkg-marker-fbc.html Implementation of the %ListOfObjectives construct from the
 * \'fbc\' package.
 * 
 * The ListOfObjectives is a container for the Objective elements of Model.
 * 
 * *
 * 
 * The various ListOf___ classes in SBML are merely containers used for
 * organizing the main components of an SBML model.  All are derived from
 * the abstract class SBase, and inherit the various attributes and
 * subelements of SBase, such as \'metaid\' as and \'annotation\'.  The
 * ListOf___ classes do not add any attributes of their own.
 *
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 *
 * @htmlinclude listof-illustration.html
 *
 * Readers may wonder about the motivations for using the ListOf___
 * containers.  A simpler approach in XML might be to place the components
 * all directly at the top level of the model definition.  The choice made
 * in SBML is to group them within XML elements named after
 * ListOf<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from SBase means that software tools can add information @em about
 * the lists themselves into each list container\'s \'annotation\'.
 * 
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 *
 *
 *
 * @see Objective
 */
"


%csmethodmodifiers Objective::Objective(unsigned int level      = FbcExtension::getDefaultLevel(), unsigned int version    = FbcExtension::getDefaultVersion(), unsigned int pkgVersion = FbcExtension::getDefaultPackageVersion()) "
/**
   * Creates a new Objective with the given level, version, and package version.
   */ public
";


%csmethodmodifiers Objective::Objective(FbcPkgNamespaces* fbcns) "
/**
   * Creates a new Objective with the given FbcPkgNamespaces object.
   */ public
";


%csmethodmodifiers Objective::Objective(const Objective& source) "
/**
   * Copy constructor.
   */ public
";


%csmethodmodifiers Objective::getElementBySId(const std::string& id) "
/**
   * Returns the first child element found that has the given @p id in the model-wide SId namespace, or @c null if no such object is found.
   *
   * @param id string representing the id of objects to find
   *
   * @return a pointer to the SBase element with the given @p id.
   */ public
";


%csmethodmodifiers Objective::getElementByMetaId(const std::string& metaid) "
/**
   * Returns the first child element it can find with the given @p metaid, or itself if it has the given @p metaid, or @c null if no such object is found.
   *
   * @param metaid string representing the metaid of objects to find
   *
   * @return a pointer to the SBase element with the given @p metaid.
   */ public
";


%csmethodmodifiers Objective::getAllElements(ElementFilter* filter=NULL) "
/**
   * Returns a List of all child SBase objects, including those nested to an arbitrary depth
   *
   * @return a List* of pointers to all children objects.
   */ public
";


%csmethodmodifiers Objective::getName() const "
/**
   * Returns the value of the \'name\' attribute of this Objective.
   *
   * @return the value of the \'name\' attribute of this Objective.
   */ public
";


%csmethodmodifiers Objective::isSetName() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * Objective\'s \'name\' attribute has been set.
   *
   * @return @c true if this Objective\'s \'id\' attribute has been set,
   * otherwise @c false is returned.
   */ public
";


%csmethodmodifiers Objective::setName(const std::string& name) "
/**
   * Sets the value of the \'name\' attribute of this Objective.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers Objective::unsetName "
/**
   * Unsets the value of the \'name\' attribute of this Objective.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers Objective::getType "
/**
   * Returns the string of the \'type\' attribute of this Objective.
   *
   * @return the string of the \'type\' attribute of this Objective.
   */ public
";


%csmethodmodifiers Objective::getObjectiveType() const "
/**
   * Returns the ObjectiveType_t of the \'type\' attribute of this Objective.
   *
   * @return the ObjectiveType_t of the \'type\' attribute of this Objective.
   */ public
";


%csmethodmodifiers Objective::isSetType() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * Objective\'s \'type\' attribute has been set.
   *
   * @return @c true if this Objective\'s \'type\' attribute has been set, 
   * otherwise @c false is returned.
   */ public
";


%csmethodmodifiers Objective::setType(const std::string& type) "
/**
   * Sets the SIdRef string of the \'type\' attribute of this Objective.
   *
   * @param type a SIdRef string to be set.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers Objective::setType(ObjectiveType_t type) "
/**
   * Sets the SIdRef string of the \'type\' attribute of this Objective.
   *
   * @param type a SIdRef string to be set.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers Objective::unsetType "
/**
   * Unsets the value of the \'id\' attribute of this Objective.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers Objective::getId() const "
/**
   * Returns the string of the \'id\' attribute of this Objective.
   *
   * @return the string of the \'id\' attribute of this Objective.
   */ public
";


%csmethodmodifiers Objective::isSetId() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * Objective\'s \'id\' attribute has been set.
   *
   * @return @c true if this Objective\'s \'id\' attribute has been set, 
   * otherwise @c false is returned.
   */ public
";


%csmethodmodifiers Objective::setId(const std::string& id) "
/**
   * Sets the SIdRef string of the \'id\' attribute of this Objective.
   *
   * @param id a SIdRef string to be set.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers Objective::unsetId "
/**
   * Unsets the value of the \'id\' attribute of this Objective.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers Objective::getListOfFluxObjectives() const "
/**
   * Returns the ListOf object that holds all members.
   *
   * @return the ListOf object that holds all members.
   */ public
";


%csmethodmodifiers Objective::getFluxObjective(unsigned int n) "
/**
   * Returns the member with the given index.
   * If the index is invalid, @c null is returned.
   *
   * @param n the index number of the FluxObjective to get.
   *
   * @return the nth FluxObjective in the ListOfFluxObjectives.
   */ public
";


%csmethodmodifiers Objective::getFluxObjective "
/**
   * Returns the member with the given index.
   * If the index is invalid, @c null is returned.
   *
   * @param n the index number of the FluxObjective to get.
   *
   * @return the nth FluxObjective in the ListOfFluxObjectives.
   */ public
";


%csmethodmodifiers Objective::getFluxObjective(const std::string& symbol) "
/**
   * Returns the member with the given symbol.
   * If the index is invalid, @c null is returned.
   *
   * @param symbol a string representing the symbol attribute
   * of the FluxObjective to get.
   * 
   * @return FluxObjective in the ListOfFluxObjectives with the given symbol
   * or null if no such FluxObjective exists.
   */ public
";


%csmethodmodifiers Objective::getFluxObjective(const std::string& symbol) const "
/**
   * Returns the member with the given symbol.
   * If the index is invalid, @c null is returned.
   *
   * @param symbol a string representing the symbol attribute
   * of the FluxObjective to get.
   * 
   * @return FluxObjective in the ListOfFluxObjectives with the given symbol
   * or null if no such FluxObjective exists.
   */ public
";


%csmethodmodifiers Objective::addFluxObjective(const FluxObjective* member) "
/**
   * Adds a copy of the given FluxObjective object to the list of members.
   *
   * @param member the FluxObjective object to be added to the list of 
   * members.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   */ public
";


%csmethodmodifiers Objective::getNumFluxObjectives() const "
/**
   * Returns the number of members for this objective.
   *
   * @return the number of members for this objective.
   */ public
";


%csmethodmodifiers Objective::createFluxObjective "
/**
   * Creates a FluxObjective object, adds it to the end of the
   * member objects list and returns a pointer to the newly
   * created object.
   *
   * @return a newly created FluxObjective object
   */ public
";


%csmethodmodifiers Objective::removeFluxObjective(unsigned int index) "
/**
   * Removes the member with the given index from the objective.
   * A pointer to the member that was removed is returned.
   * If no member has been removed, @c null is returned.
   *
   * @param index the index of the FluxObjective object to remove
   *
   * @return the FluxObjective object removed.  As mentioned above, 
   * the caller owns the returned object. @c null is returned if 
   * the given index is out of range.
   */ public
";


%csmethodmodifiers Objective::removeFluxObjective(const std::string& symbol) "
/**
   * Removes the member with the given symbol from the objective.
   * A pointer to the member that was removed is returned.
   * If no member has been removed, @c null is returned.
   *
   * @param symbol the symbol attribute of the FluxObjective object to remove
   *
   * @return the FluxObjective object removed.  As mentioned above, 
   * the caller owns the returned object. @c null is returned if 
   * the given index is out of range.
   */ public
";


%csmethodmodifiers Objective::getElementName() const "
/**
   * Returns the XML element name of
   * this SBML object.
   *
   * @return the string of the name of this element.
   */ public
";


%csmethodmodifiers Objective::clone() const "
/**
   * Creates and returns a deep copy of this Objective object.
   *
   * @return a (deep) copy of this Objective.
   */ public
";


%csmethodmodifiers Objective::getTypeCode() const "
/**
   * Returns the libSBML type code of this object instance.
   *
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object:
   * @link libsbmlcs.libsbml.SBML_FBC_OBJECTIVE SBML_FBC_OBJECTIVE@endlink
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers Objective::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.  For example:
   *
   *   SBase::writeElements(stream);
   *   mReactants.write(stream);
   *   mProducts.write(stream);
   *   ...
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Objective::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor.
   *
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether or not the Visitor would like to visit the SBML object\'s next
   * sibling object (if available).
   */ public
";


%csmethodmodifiers Objective::setSBMLDocument(SBMLDocument* d) "
/**
   * Sets the parent SBMLDocument of this SBML object.
   *
   * @param d the SBMLDocument object to use
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Objective::connectToChild "
/**
   * Sets this SBML object to child SBML objects (if any).
   * (Creates a child-parent relationship by the parent)
   *
   * Subclasses must override this function if they define
   * one ore more child elements.
   * Basically, this function needs to be called in
   * constructor, copy constructor, assignment operator.
   *
   * @see setSBMLDocument
   * @see enablePackageInternal
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Objective::enablePackageInternal(const std::string& pkgURI, const std::string& pkgPrefix, bool flag) "
/**
   * Enables/Disables the given package with this element and child
   * elements (if any).
   * (This is an internal implementation for enablePakcage function)
   *
   * @note Subclasses in which one or more child elements are defined
   * must override this function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Objective::hasRequiredElements() const "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Objective::getIsSetListOfFluxObjectives() const "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Objective::createObject(XMLInputStream& stream) "
/**
   * Create and return an SBML object of this class, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Objective::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Objective::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Subclasses should override this method to read values from the given
   * XMLAttributes set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Objective::writeAttributes(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.  For example:
   *
   *   SBase::writeAttributes(stream);
   *   stream.writeAttribute( \'id\'  , mId   );
   *   stream.writeAttribute( \'name\', mName );
   *   ...
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfObjectives::clone() const "
/**
   * Creates and returns a deep copy of this ListOfObjectives object.
   *
   * @return a (deep) copy of this ListOfObjectives.
   */ public
";


%csmethodmodifiers ListOfObjectives::ListOfObjectives(unsigned int level      = FbcExtension::getDefaultLevel(), unsigned int version    = FbcExtension::getDefaultVersion(), unsigned int pkgVersion = FbcExtension::getDefaultPackageVersion()) "
/**
   * Creates a new ListOfObjectives with the given level, version, and package version.
   */ public
";


%csmethodmodifiers ListOfObjectives::ListOfObjectives(FbcPkgNamespaces* fbcns) "
/**
   * Creates a new ListOfObjectives with the given FbcPkgNamespaces object.
   */ public
";


%csmethodmodifiers ListOfObjectives::get(unsigned int n) "
/**
   * Get a Objective from the ListOfObjectives.
   *
   * @param n the index number of the Objective to get.
   * 
   * @return the nth Objective in this ListOfObjectives.
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfObjectives::get "
/**
   * Get a Objective from the ListOfObjectives.
   *
   * @param n the index number of the Objective to get.
   * 
   * @return the nth Objective in this ListOfObjectives.
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfObjectives::get(const std::string& sid) "
/**
   * Get a Objective from the ListOfObjectives
   * based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the Objective to get.
   * 
   * @return Objective in this ListOfObjectives
   * with the given @p sid or @c null if no such
   * Objective exists.
   *
   * @see get(long n)
   * @see size()
   */ public
";


%csmethodmodifiers ListOfObjectives::get(const std::string& sid) const "
/**
   * Get a Objective from the ListOfObjectives
   * based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the Objective to get.
   * 
   * @return Objective in this ListOfObjectives
   * with the given @p sid or @c null if no such
   * Objective exists.
   *
   * @see get(long n)
   * @see size()
   */ public
";


%csmethodmodifiers ListOfObjectives::remove(unsigned int n) "
/**
   * Removes the nth item from this ListOfObjectives items and returns a pointer to
   * it.
   *
   * The caller owns the returned item and is responsible for deleting it.
   *
   * @param n the index of the item to remove
   * @return the item removed.  As mentioned above, the caller owns the
   * returned item.
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfObjectives::remove(const std::string& sid) "
/**
   * Removes item in this ListOfObjectives items with the given identifier.
   *
   * The caller owns the returned item and is responsible for deleting it.
   * If none of the items in this list have the identifier @p sid, then @c
   * null is returned.
   *
   * @param sid the identifier of the item to remove
   *
   * @return the item removed.  As mentioned above, the caller owns the
   * returned item.
   */ public
";


%csmethodmodifiers ListOfObjectives::getItemTypeCode() const "
/**
   * Returns the libSBML type code for the objects contained in this ListOf
   * (i.e., @link libsbmlcs.libsbml.SBML_FBC_OBJECTIVE SBML_FBC_OBJECTIVE@endlink).
   * 
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for objects contained in this list:
   * @link libsbmlcs.libsbml.SBML_FBC_OBJECTIVE SBML_FBC_OBJECTIVE@endlink
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers ListOfObjectives::getElementName() const "
/**
   * Returns the XML element name of
   * this SBML object.
   *
   * @return the string of the name of this element.
   */ public
";


%csmethodmodifiers ListOfObjectives::isSetActiveObjective() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * ListOfObjective\'s \'activeObjective\' attribute has been set.
   *
   * @return @c true if this ListOfObjective\'s \'activeObjective\' attribute has been set, 
   * otherwise @c false is returned.
   */ public
";


%csmethodmodifiers ListOfObjectives::setActiveObjective(const std::string &activeObjective) "
/**
   * Sets the value of the \'activeObjective\' attribute of this ListOfObjectives.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers ListOfObjectives::getActiveObjective() const "
/**
   * Returns the value of the \'activeObjective\' attribute of this ListOfObjectives.
   *
   * @return the value of the \'activeObjective\' attribute of this ListOfObjectives.
   */ public
";


%csmethodmodifiers ListOfObjectives::unsetActiveObjective "
/**
   * Unsets the value of the \'activeObjective\' attribute of this ListOfObjectives.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers ListOfObjectives::accept(SBMLVisitor& v) const "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfObjectives::appendFrom(const ListOf* list) "
/**
   * Adds a clone of all items in the provided ListOf to this object.  This means that when this ListOf is destroyed, the original items will not be destroyed.  In addition, copy over the input ListOfObjectives\' \'activeObjective\' attribute, if none is set for this element.
   *
   * @param list A list of items to be added.
   *
   * @see append(SBase item)
   */ public
";


%csmethodmodifiers ListOfObjectives::renameSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames all the SIdRef attributes on this element if they match
   * @p oldid, but not any found in child or plugin elements.
   */ public
";


%csmethodmodifiers ListOfObjectives::createObject(XMLInputStream& stream) "
/**
   * Create and return an SBML object of this class, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfObjectives::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfObjectives::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Reads the attributes of corresponding package in SBMLDocument element.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfObjectives::writeAttributes(XMLOutputStream& stream) const "
/**
   * Writes the attributes of corresponding package in SBMLDocument element.
   */ /* libsbml-internal */ public
";


%typemap(csimports) Point "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{layout}
 *
@htmlinclude pkg-marker-layout.html The representation of a point in the
 * &ldquo;layout&rdquo; package.
 *
 * A point is specified via the required attributes \'x\', \'y\' and an optional
 * attribute \'z\', all of which are of type double. If the attribute z is not
 * specified, the object is a two dimensional object.  The Point class also
 * has an optional attribute id of type SId. While not used in the
 * &ldquo;layout&rdquo; package, it can be used by programs to refer to the
 * elements.
 */
"


%csmethodmodifiers Point::Point(unsigned int level      = LayoutExtension::getDefaultLevel(), unsigned int version    = LayoutExtension::getDefaultVersion(), unsigned int pkgVersion = LayoutExtension::getDefaultPackageVersion()) "
/**
   * Creates a new point with x,y and z set to 0.0.
   */ public
";


%csmethodmodifiers Point::Point(LayoutPkgNamespaces* layoutns) "
/**
   * Ctor.
   */ public
";


%csmethodmodifiers Point::Point(const Point& orig) "
/**
   * Copy constructor.
   */ public
";


%csmethodmodifiers Point::Point(LayoutPkgNamespaces* layoutns, double x, double y, double z =0.0) "
/**
   * Creates a new point with the given ccordinates.
   *
   *
   */ public
";


%csmethodmodifiers Point::Point(const XMLNode& node, unsigned int l2version = 4) "
/**
   * Creates a new Point from the given XMLNode
   */ public
";


%csmethodmodifiers Point::x() const "
/**
   * Returns the x offset.
   */ public
";


%csmethodmodifiers Point::y() const "
/**
   * Returns the y offset.
   */ public
";


%csmethodmodifiers Point::z() const "
/**
   * Returns the z offset.
   */ public
";


%csmethodmodifiers Point::getXOffset() const "
/**
   * Returns the x offset.
   */ public
";


%csmethodmodifiers Point::getYOffset() const "
/**
   * Returns the y offset.
   */ public
";


%csmethodmodifiers Point::getZOffset() const "
/**
   * Returns the z offset.
   */ public
";


%csmethodmodifiers Point::setX(double x) "
/**
   * Sets the x offset.
   */ public
";


%csmethodmodifiers Point::setY(double y) "
/**
   * Sets the y offset.
   */ public
";


%csmethodmodifiers Point::setZ(double z) "
/**
   * Sets the z offset.
   */ public
";


%csmethodmodifiers Point::setXOffset(double x) "
/**
   * Sets the x offset.
   */ public
";


%csmethodmodifiers Point::setYOffset(double y) "
/**
   * Sets the y offset.
   */ public
";


%csmethodmodifiers Point::setZOffset(double z) "
/**
   * Sets the z offset.
   */ public
";


%csmethodmodifiers Point::setOffsets(double x, double y, double z = 0.0) "
/**
   * Sets the coordinates to the given values.
   */ public
";


%csmethodmodifiers Point::getZOffsetExplicitlySet() const "
/** */ public
";


%csmethodmodifiers Point::initDefaults "
/**
   * Sets the Z offset to 0.0.
   */ public
";


%csmethodmodifiers Point::getId() const "
/**
   * Returns the value of the \'id\' attribute of this Point.
   */ public
";


%csmethodmodifiers Point::isSetId() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * Point\'s \'id\' attribute has been set.
   */ public
";


%csmethodmodifiers Point::setId(const std::string& id) "
/**
   * Sets the value of the \'id\' attribute of this Point.
   */ public
";


%csmethodmodifiers Point::unsetId "
/**
   * Unsets the value of the \'id\' attribute of this Point.
   */ public
";


%csmethodmodifiers Point::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.  For example:
   *
   *   SBase::writeElements(stream);
   *   mReactants.write(stream);
   *   mProducts.write(stream);
   *   ...
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Point::setElementName(const std::string& name) "
/**
   * Sets the element name to be returned by getElementName.
   */ public
";


%csmethodmodifiers Point::getElementName() const "
/**
   * Returns the XML element name of
   * this SBML object.
   */ public
";


%csmethodmodifiers Point::clone() const "
/**
   * Creates and returns a deep copy of this Point.
   * 
   * @return a (deep) copy of this Point.
   */ public
";


%csmethodmodifiers Point::getTypeCode() const "
/**
   * Returns the libSBML type code of this object instance.
   *
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object:
   * @link libsbmlcs.libsbml.SBML_LAYOUT_POINT SBML_LAYOUT_POINT@endlink
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers Point::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor.
   *
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether or not the Visitor would like to visit the SBML object\'s next
   * sibling object (if available).
   */ public
";


%csmethodmodifiers Point::toXML(const std::string& name) const "
/**
    * Creates an XMLNode object from this.
    */ public
";


%csmethodmodifiers Point::createObject(XMLInputStream& stream) "
/**
   * Create and return an SBML object of this class, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Point::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Point::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Subclasses should override this method to read values from the given
   * XMLAttributes set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Point::writeAttributes(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.  For example:
   *
   *   SBase::writeAttributes(stream);
   *   stream.writeAttribute( \'id\'  , mId   );
   *   stream.writeAttribute( \'name\', mName );
   *   ...
   */ /* libsbml-internal */ public
";


%typemap(csimports) Dimensions "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{layout}
 *
@htmlinclude pkg-marker-layout.html The %Dimensions class describes the overall 2D or 3D
 * shape of a &ldquo;layout&rdquo; package object.
 *
 * A dimension is specified via the required attributes width, height and an
 * optional attribute depth, all of which are of type double. If the
 * attribute depth is not specified, the object is a two dimensional object.
 * The width attribute of Dimensions specifies the size of the object in the
 * direction of the positive x axis, the height attribute specifies the size
 * of the object along the positive y axis and the depth attribute specifies
 * the size of the object along the positive z axis. All sizes for Dimensions
 * objects are positive values, and so the attributes are not allowed to take
 * negative values.  The Dimensions class also has an optional attribute id
 * of type SId. While not used in the &ldquo;layout&rdquo; package, it can be
 * used by programs to refer to the elements.
 */
"


%csmethodmodifiers Dimensions::Dimensions(unsigned int level      = LayoutExtension::getDefaultLevel(), unsigned int version    = LayoutExtension::getDefaultVersion(), unsigned int pkgVersion = LayoutExtension::getDefaultPackageVersion()) "
/**
   * Creates a new Dimensions object with the given level, version, and package version
   * and with all sizes set to 0.0.
   */ public
";


%csmethodmodifiers Dimensions::Dimensions(LayoutPkgNamespaces* layoutns) "
/**
   * Creates a new Dimensions object with the given LayoutPkgNamespaces object.
   */ public
";


%csmethodmodifiers Dimensions::Dimensions(const Dimensions& orig) "
/**
   * Copy constructor.
   */ public
";


%csmethodmodifiers Dimensions::Dimensions(LayoutPkgNamespaces* layoutns, double w, double h, double d = 0.0) "
/**
   * Creates a new Dimensions object with the given sizes.
   *
   */ public
";


%csmethodmodifiers Dimensions::Dimensions(const XMLNode& node, unsigned int l2version = 4) "
/**
   * Creates a new Dimensions object from the given XMLNode
   */ public
";


%csmethodmodifiers Dimensions::width() const "
/**
   * Returns the width.
   */ public
";


%csmethodmodifiers Dimensions::height() const "
/**
   * Returns the height.
   */ public
";


%csmethodmodifiers Dimensions::depth() const "
/**
   * Returns the depth.
   */ public
";


%csmethodmodifiers Dimensions::getWidth() const "
/**
   * Returns the width.
   */ public
";


%csmethodmodifiers Dimensions::getHeight() const "
/**
   * Returns the height.
   */ public
";


%csmethodmodifiers Dimensions::getDepth() const "
/**
   * Returns the depth.
   */ public
";


%csmethodmodifiers Dimensions::setWidth(double w) "
/**
   * Sets the width to the given value.
   */ public
";


%csmethodmodifiers Dimensions::setHeight(double h) "
/**
   * Sets the height to the given value.
   */ public
";


%csmethodmodifiers Dimensions::setDepth(double d) "
/**
   * Sets the depth to the given value.
   */ public
";


%csmethodmodifiers Dimensions::setBounds(double w, double h, double d = 0.0) "
/**
   * Sets all sizes of the Dimensions object to the given values.
   */ public
";


%csmethodmodifiers Dimensions::getDExplicitlySet() const "
/** */ public
";


%csmethodmodifiers Dimensions::initDefaults "
/**
   * Sets the depth to 0.0
   */ public
";


%csmethodmodifiers Dimensions::getId() const "
/**
   * Returns the value of the \'id\' attribute of this Dimensions.
   */ public
";


%csmethodmodifiers Dimensions::isSetId() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * Dimensions\'s \'id\' attribute has been set.
   */ public
";


%csmethodmodifiers Dimensions::setId(const std::string& id) "
/**
   * Sets the value of the \'id\' attribute of this Dimensions.
   */ public
";


%csmethodmodifiers Dimensions::unsetId "
/**
   * Unsets the value of the \'id\' attribute of this Dimensions.
   */ public
";


%csmethodmodifiers Dimensions::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.  For example:
   *
   *   SBase::writeElements(stream);
   *   mReactants.write(stream);
   *   mProducts.write(stream);
   *   ...
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Dimensions::getElementName() const "
/**
   * Returns the XML element name of
   * this SBML object.
   */ public
";


%csmethodmodifiers Dimensions::clone() const "
/**
   * Creates and returns a deep copy of this Dimensions.
   * 
   * @return a (deep) copy of this Dimensions object.
   */ public
";


%csmethodmodifiers Dimensions::getTypeCode() const "
/**
   * Returns the libSBML type code of this object instance.
   *
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object:
   * @link libsbmlcs.libsbml.SBML_LAYOUT_DIMENSIONS SBML_LAYOUT_DIMENSIONS@endlink
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers Dimensions::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor.
   *
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether or not the Visitor would like to visit the SBML object\'s next
   * sibling object (if available).
   */ public
";


%csmethodmodifiers Dimensions::toXML() const "
/**
    * Creates an XMLNode object from this.
    */ public
";


%csmethodmodifiers Dimensions::createObject(XMLInputStream& stream) "
/**
   * Create and return an SBML object of this class, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Dimensions::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Dimensions::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Subclasses should override this method to read values from the given
   * XMLAttributes set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Dimensions::writeAttributes(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.  For example:
   *
   *   SBase::writeAttributes(stream);
   *   stream.writeAttribute( \'id\'  , mId   );
   *   stream.writeAttribute( \'name\', mName );
   *   ...
   */ /* libsbml-internal */ public
";


%typemap(csimports) BoundingBox "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{layout}
 *
@htmlinclude pkg-marker-layout.html Representation of a bounding box.
 */
"


%csmethodmodifiers BoundingBox::BoundingBox(unsigned int level      = LayoutExtension::getDefaultLevel(), unsigned int version    = LayoutExtension::getDefaultVersion(), unsigned int pkgVersion = LayoutExtension::getDefaultPackageVersion()) "
/**
   * Default Constructor set position and dimensions to (0.0,0.0,0.0) and
   * the id to an empty string.
   */ public
";


%csmethodmodifiers BoundingBox::BoundingBox(LayoutPkgNamespaces* layoutns) "
/**
   * Creates a new BoundingBox object with the given LayoutPkgNamespaces object.
   */ public
";


%csmethodmodifiers BoundingBox::BoundingBox(const BoundingBox& orig) "
/**
   * Copy constructor.
   */ public
";


%csmethodmodifiers BoundingBox::BoundingBox(LayoutPkgNamespaces* layoutns, const std::string id) "
/**
   * Constructor set position and dimensions to (0.0,0.0,0.0) and the id to
   * a copy of the given string.
   *
   * (FOR BACKWARD COMPATIBILITY)
   *
   */ public
";


%csmethodmodifiers BoundingBox::BoundingBox(LayoutPkgNamespaces* layoutns, const std::string id, double x, double y, double width, double height) "
/**
   * Constructor which sets the id, the coordinates and the dimensions to
   * the given 2D values.
   *
   * (FOR BACKWARD COMPATIBILITY)
   *
   */ public
";


%csmethodmodifiers BoundingBox::BoundingBox(LayoutPkgNamespaces* layoutns, const std::string id, double x, double y, double z, double width, double height, double depth) "
/**
   * Constructor which sets the id, the coordinates and the dimensions to
   * the given 3D values.
   *
   * (FOR BACKWARD COMPATIBILITY)
   *
   */ public
";


%csmethodmodifiers BoundingBox::BoundingBox(LayoutPkgNamespaces* layoutns, const std::string id, const Point* p, const Dimensions* d) "
/**
   * Constructor which sets the id, the coordinates and the dimensions to
   * the given values.
   *
   * (FOR BACKWARD COMPATIBILITY)
   *
   */ public
";


%csmethodmodifiers BoundingBox::BoundingBox(const XMLNode& node, unsigned int l2version=4) "
/**
   * Creates a new BoundingBox from the given XMLNode
   *
   * (FOR BACKWARD COMPATIBILITY)
   *
   */ public
";


%csmethodmodifiers BoundingBox::getId() const "
/**
   * Returns the value of the \'id\' attribute of this BoundingBox.
   */ public
";


%csmethodmodifiers BoundingBox::isSetId() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * BoundingBox\'s \'id\' attribute has been set.
   */ public
";


%csmethodmodifiers BoundingBox::setId(const std::string& id) "
/**
   * Sets the value of the \'id\' attribute of this BoundingBox.
   */ public
";


%csmethodmodifiers BoundingBox::unsetId "
/**
   * Unsets the value of the \'id\' attribute of this BoundingBox.
   */ public
";


%csmethodmodifiers BoundingBox::getPosition() const "
/**
   * Returns the position of the BoundingBox as referece to a Point
   * object.
   */ public
";


%csmethodmodifiers BoundingBox::getDimensions() const "
/**
   * Returns the dimensions of the BoundingBox as referece to a
   * Dimensions object.
   */ public
";


%csmethodmodifiers BoundingBox::getAllElements(ElementFilter* filter=NULL) "
/**
   * Returns a List of all child SBase objects, including those nested to an
   * arbitrary depth
   *
   * @return a List* of pointers to all children objects.
   */ public
";


%csmethodmodifiers BoundingBox::getPosition "
/**
   * Returns the position of the BoundingBox as referece to a Point object.
   */ public
";


%csmethodmodifiers BoundingBox::getDimensions "
/**
   * Returns the dimensions of the BoundingBox as referece to a Dimensions
   * object.
   */ public
";


%csmethodmodifiers BoundingBox::setPosition(const Point* p) "
/**
   * Sets the position to a copy of the Point object given.
   */ public
";


%csmethodmodifiers BoundingBox::setDimensions(const Dimensions* d) "
/**
   * Sets the dimensions to a copy of the Dimensions object given.
   */ public
";


%csmethodmodifiers BoundingBox::getDimensionsExplicitlySet() const "
/**
   * Return true or false based on whether Dimensions have been set 
   */ public
";


%csmethodmodifiers BoundingBox::getPositionExplicitlySet() const "
/**
   * Return true or false based on whether Dimensions have been set 
   */ public
";


%csmethodmodifiers BoundingBox::initDefaults "
/**
   * Does nothing yet since there are no defaults fo a BoundingBox. 
   */ public
";


%csmethodmodifiers BoundingBox::x() const "
/**
   * Get the x offset of the bounding box.
   */ public
";


%csmethodmodifiers BoundingBox::y() const "
/**
   * Get the y offset of the bounding box.
   */ public
";


%csmethodmodifiers BoundingBox::z() const "
/**
   * Get the z offset of the bounding box.
   */ public
";


%csmethodmodifiers BoundingBox::width() const "
/**
   * Get the width of the bounding box.
   */ public
";


%csmethodmodifiers BoundingBox::height() const "
/**
   * Get the height of the bounding box.
   */ public
";


%csmethodmodifiers BoundingBox::depth() const "
/**
   * Get the depth of the bounding box.
   */ public
";


%csmethodmodifiers BoundingBox::setX(double x) "
/**
   * Set x offset of the bounding box
   */ public
";


%csmethodmodifiers BoundingBox::setY(double y) "
/**
   * Set y offset of the bounding box
   */ public
";


%csmethodmodifiers BoundingBox::setZ(double z) "
/**
   * Set z offset of the bounding box
   */ public
";


%csmethodmodifiers BoundingBox::setWidth(double width) "
/**
   * Set width of the bounding box
   */ public
";


%csmethodmodifiers BoundingBox::setHeight(double height) "
/**
   * Set height of the bounding box
   */ public
";


%csmethodmodifiers BoundingBox::setDepth(double depth) "
/**
   * Set depth of the bounding box
   */ public
";


%csmethodmodifiers BoundingBox::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.  For example:
   *
   *   SBase::writeElements(stream);
   *   mReactants.write(stream);
   *   mProducts.write(stream);
   *   ...
   */ /* libsbml-internal */ public
";


%csmethodmodifiers BoundingBox::getElementName() const "
/**
   * Returns the XML element name of
   * this SBML object.
   */ public
";


%csmethodmodifiers BoundingBox::clone() const "
/**
   * Creates and returns a deep copy of this BoundingBox.
   * 
   * @return a (deep) copy of this BoundingBox.
   */ public
";


%csmethodmodifiers BoundingBox::getTypeCode() const "
/**
   * Returns the libSBML type code of this object instance.
   *
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object:
   * @link libsbmlcs.libsbml.SBML_LAYOUT_BOUNDINGBOX SBML_LAYOUT_BOUNDINGBOX@endlink
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers BoundingBox::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor.
   *
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether or not the Visitor would like to visit the SBML object\'s next
   * sibling object (if available).
   */ public
";


%csmethodmodifiers BoundingBox::toXML() const "
/**
    * Creates an XMLNode object from this.
    */ public
";


%csmethodmodifiers BoundingBox::setSBMLDocument(SBMLDocument* d) "
/**
   * Sets the parent SBMLDocument of this SBML object.
   *
   * @param d the SBMLDocument object to use
   */ /* libsbml-internal */ public
";


%csmethodmodifiers BoundingBox::connectToChild "
/**
   * Sets this SBML object to child SBML objects (if any).
   * (Creates a child-parent relationship by the parent)
   *
   * Subclasses must override this function if they define
   * one ore more child elements.
   * Basically, this function needs to be called in
   * constructor, copy constructor, assignment operator.
   *
   * @see setSBMLDocument
   * @see enablePackageInternal
   */ /* libsbml-internal */ public
";


%csmethodmodifiers BoundingBox::enablePackageInternal(const std::string& pkgURI, const std::string& pkgPrefix, bool flag) "
/**
   * Enables/Disables the given package with this element and child
   * elements (if any).
   * (This is an internal implementation for enablePakcage function)
   *
   * @note Subclasses in which one or more child elements are defined
   * must override this function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers BoundingBox::createObject(XMLInputStream& stream) "
/**
   * Create and return an SBML object of this class, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers BoundingBox::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers BoundingBox::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Subclasses should override this method to read values from the given
   * XMLAttributes set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers BoundingBox::writeAttributes(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.  For example:
   *
   *   SBase::writeAttributes(stream);
   *   stream.writeAttribute( \'id\'  , mId   );
   *   stream.writeAttribute( \'name\', mName );
   *   ...
   */ /* libsbml-internal */ public
";


%typemap(csimports) GraphicalObject "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{layout}
 *
@htmlinclude pkg-marker-layout.html The basic &ldquo;layout&rdquo; package element for
 * storing layout information.
 *
 * All the more specific layout elements (CompartmentGlyph, GeneralGlyph,
 * SpeciesGlyph, ReactionGlyph, ReferenceGlyph, TextGlyph, and
 * SpeciesReferenceGlyph) are derived from the class GraphicalObject. Each
 * object of class GraphicalObject has a mandatory BoundingBox, which
 * specifies the position and the size of the object.  While GraphicalObject
 * is the base class for most elements in the &ldquo;layout&rdquo; package,
 * it is not an abstract class. It can be instantiated when used in the
 * listOfAdditionalGraphicalObjects to describe additional elements and
 * relationships. Since it only describes a BoundingBox, programs are
 * encouraged to add Annotation objects that describe program-specific
 * graphical information.
 */
"


%typemap(csimports) ListOfGraphicalObjects "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{layout}
 *
@htmlinclude pkg-marker-layout.html Implementation of the %ListOfAdditionalGraphicalObjects
 * construct from the &ldquo;layout&rdquo; package.
 * 
 * The ListOfGraphicalObjects class in libSBML actually represents the ListOfAdditionalGraphicalObjects class in the &ldquo;layout&rdquo; package, and is a container for the additional GraphicalObject elements of a Layout.
 * 
 * *
 * 
 * The various ListOf___ classes in SBML are merely containers used for
 * organizing the main components of an SBML model.  All are derived from
 * the abstract class SBase, and inherit the various attributes and
 * subelements of SBase, such as \'metaid\' as and \'annotation\'.  The
 * ListOf___ classes do not add any attributes of their own.
 *
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 *
 * @htmlinclude listof-illustration.html
 *
 * Readers may wonder about the motivations for using the ListOf___
 * containers.  A simpler approach in XML might be to place the components
 * all directly at the top level of the model definition.  The choice made
 * in SBML is to group them within XML elements named after
 * ListOf<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from SBase means that software tools can add information @em about
 * the lists themselves into each list container\'s \'annotation\'.
 * 
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 *
 *
 *
 * @see GraphicalObject
 */
"


%csmethodmodifiers GraphicalObject::GraphicalObject(unsigned int level      = LayoutExtension::getDefaultLevel(), unsigned int version    = LayoutExtension::getDefaultVersion(), unsigned int pkgVersion = LayoutExtension::getDefaultPackageVersion()) "
/**
   * Creates a new GraphicalObject.
   */ public
";


%csmethodmodifiers GraphicalObject::GraphicalObject(LayoutPkgNamespaces* layoutns) "
/**
   * Creates a new GraphicalObject with the given LayoutPkgNamespaces
   */ public
";


%csmethodmodifiers GraphicalObject::GraphicalObject(LayoutPkgNamespaces* layoutns, const std::string& id) "
/**
   * Creates a new GraphicalObject with the given @p id.
   *
   * (FOR BACKWARD COMPATIBILITY)
   *
   */ public
";


%csmethodmodifiers GraphicalObject::GraphicalObject(LayoutPkgNamespaces* layoutns, const std::string& id, double x, double y, double w, double h) "
/**
   * Creates a new GraphicalObject with the given @p id and 2D coordinates for
   * the bounding box.
   *
   * (FOR BACKWARD COMPATIBILITY)
   *
   */ public
";


%csmethodmodifiers GraphicalObject::GraphicalObject(LayoutPkgNamespaces* layoutns, const std::string& id, double x, double y, double z, double w, double h, double d) "
/**
   * Creates a new GraphicalObject with the given @p id and 3D coordinates for
   * the bounding box.
   *
   * (FOR BACKWARD COMPATIBILITY)
   *
   */ public
";


%csmethodmodifiers GraphicalObject::GraphicalObject(LayoutPkgNamespaces* layoutns, const std::string& id, const Point* p, const Dimensions* d) "
/**
   * Creates a new GraphicalObject with the given @p id and 3D coordinates for
   * the bounding box.
   *
   * (FOR BACKWARD COMPATIBILITY)
   *
   */ public
";


%csmethodmodifiers GraphicalObject::GraphicalObject(LayoutPkgNamespaces* layoutns, const std::string& id, const BoundingBox* bb) "
/**
   * Creates a new GraphicalObject with the given @p id and 3D coordinates for
   * the bounding box.
   *
   * (FOR BACKWARD COMPATIBILITY)
   *
   */ public
";


%csmethodmodifiers GraphicalObject::GraphicalObject(const XMLNode& node, unsigned int l2version=4) "
/**
   * Creates a new GraphicalObject from the given XMLNode
   *
   * (FOR BACKWARD COMPATIBILITY)
   *
   */ public
";


%csmethodmodifiers GraphicalObject::GraphicalObject(const GraphicalObject& source) "
/**
   * Copy constructor.
   */ public
";


%csmethodmodifiers GraphicalObject::initDefaults "
/**
   * Does nothing. No defaults are defined for GraphicalObject.
   */ public
";


%csmethodmodifiers GraphicalObject::getAllElements(ElementFilter* filter=NULL) "
/**
   * Returns a List of all child SBase objects, including those nested to an
   * arbitrary depth
   *
   * @return a List* of pointers to all children objects.
   */ public
";


%csmethodmodifiers GraphicalObject::renameMetaIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames all the @c MetaIdRef attributes on this element.
   *
   * This method works by looking at all meta-attribute values, comparing
   * the identifiers to the value of @p oldid.  If any matches are found,
   * the matching identifiers are replaced with @p newid.  The method does
   * @em not descend into child elements.
   *
   * @param oldid the old identifier
   * @param newid the new identifier
   */ public
";


%csmethodmodifiers GraphicalObject::getId() const "
/**
   * Returns the value of the \'id\' attribute of this GraphicalObject.
   */ public
";


%csmethodmodifiers GraphicalObject::isSetId() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * GraphicalObject\'s \'id\' attribute has been set.
   */ public
";


%csmethodmodifiers GraphicalObject::setId(const std::string& id) "
/**
   * Sets the value of the \'id\' attribute of this GraphicalObject.
   */ public
";


%csmethodmodifiers GraphicalObject::unsetId "
/**
   * Unsets the value of the \'id\' attribute of this GraphicalObject.
   */ public
";


%csmethodmodifiers GraphicalObject::getMetaIdRef() const "
/**
   * Returns the value of the \'metaidRef\' attribute of this GraphicalObject.
   */ public
";


%csmethodmodifiers GraphicalObject::isSetMetaIdRef() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * GraphicalObject\'s \'metaidRef\' attribute has been set.
   */ public
";


%csmethodmodifiers GraphicalObject::setMetaIdRef(const std::string& metaid) "
/**
   * Sets the value of the \'metaidRef\' attribute of this GraphicalObject.
   */ public
";


%csmethodmodifiers GraphicalObject::unsetMetaIdRef "
/**
   * Unsets the value of the \'metaidRef\' attribute of this GraphicalObject.
   */ public
";


%csmethodmodifiers GraphicalObject::setBoundingBox(const BoundingBox* bb) "
/**
   * Sets the boundingbox for the GraphicalObject.
   */ public
";


%csmethodmodifiers GraphicalObject::getBoundingBox "
/**
   * Returns the bounding box for the GraphicalObject.
   */ public
";


%csmethodmodifiers GraphicalObject::getBoundingBox() const "
/**
   * Returns the bounding box for the GraphicalObject.
   */ public
";


%csmethodmodifiers GraphicalObject::getBoundingBoxExplicitlySet() const "
/** */ public
";


%csmethodmodifiers GraphicalObject::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.  For example:
   *
   *   SBase::writeElements(stream);
   *   mReactants.write(stream);
   *   mProducts.write(stream);
   *   ...
   */ /* libsbml-internal */ public
";


%csmethodmodifiers GraphicalObject::getElementName() const "
/**
   * Returns the XML element name of
   * this SBML object.
   */ public
";


%csmethodmodifiers GraphicalObject::clone() const "
/**
   * Creates and returns a deep copy of this GraphicalObject.
   * 
   * @return a (deep) copy of this GraphicalObject.
   */ public
";


%csmethodmodifiers GraphicalObject::getTypeCode() const "
/**
   * Returns the libSBML type code of this object instance.
   *
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object:
   * @link libsbmlcs.libsbml.SBML_LAYOUT_GRAPHICALOBJECT SBML_LAYOUT_GRAPHICALOBJECT@endlink
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers GraphicalObject::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor.
   *
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether or not the Visitor would like to visit the SBML object\'s next
   * sibling object (if available).
   */ public
";


%csmethodmodifiers GraphicalObject::toXML() const "
/**
    * Creates an XMLNode object from this.
    */ public
";


%csmethodmodifiers GraphicalObject::setSBMLDocument(SBMLDocument* d) "
/**
   * Sets the parent SBMLDocument of this SBML object.
   *
   * @param d the SBMLDocument object to use
   */ /* libsbml-internal */ public
";


%csmethodmodifiers GraphicalObject::connectToChild "
/**
   * Sets this SBML object to child SBML objects (if any).
   * (Creates a child-parent relationship by the parent)
   *
   * Subclasses must override this function if they define
   * one ore more child elements.
   * Basically, this function needs to be called in
   * constructor, copy constructor, assignment operator.
   *
   * @see setSBMLDocument
   * @see enablePackageInternal
   */ /* libsbml-internal */ public
";


%csmethodmodifiers GraphicalObject::enablePackageInternal(const std::string& pkgURI, const std::string& pkgPrefix, bool flag) "
/**
   * Enables/Disables the given package with this element and child
   * elements (if any).
   * (This is an internal implementation for enablePakcage function)
   *
   * @note Subclasses in which one or more child elements are defined
   * must override this function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers GraphicalObject::createObject(XMLInputStream& stream) "
/**
   * Create and return an SBML object of this class, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers GraphicalObject::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers GraphicalObject::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Subclasses should override this method to read values from the given
   * XMLAttributes set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers GraphicalObject::writeAttributes(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.  For example:
   *
   *   SBase::writeAttributes(stream);
   *   stream.writeAttribute( \'id\'  , mId   );
   *   stream.writeAttribute( \'name\', mName );
   *   ...
   */ /* libsbml-internal */ public
";


%csmethodmodifiers GraphicalObject::writeXMLNS(XMLOutputStream& stream) const "
/**
   *
   * Subclasses should override this method to write their xmlns attriubutes
   * (if any) to the XMLOutputStream. 
   *
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfGraphicalObjects::clone() const "
/**
   * Creates and returns a deep copy of this ListOfGraphicalObjects.
   * 
   * @return a (deep) copy of this ListOfGraphicalObjects.
   */ public
";


%csmethodmodifiers ListOfGraphicalObjects::ListOfGraphicalObjects(unsigned int level      = LayoutExtension::getDefaultLevel(), unsigned int version    = LayoutExtension::getDefaultVersion(), unsigned int pkgVersion = LayoutExtension::getDefaultPackageVersion()) "
/**
   * Ctor.
   */ public
";


%csmethodmodifiers ListOfGraphicalObjects::ListOfGraphicalObjects(LayoutPkgNamespaces* layoutns) "
/**
   * Ctor.
   */ public
";


%csmethodmodifiers ListOfGraphicalObjects::getItemTypeCode() const "
/**
   * Returns the libSBML type code for the SBML objects
   * contained in this ListOf object.
   * 
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for objects contained in this list:
   * @link libsbmlcs.libsbml.SBML_LAYOUT_GRAPHICALOBJECT SBML_LAYOUT_GRAPHICALOBJECT@endlink (default).
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers ListOfGraphicalObjects::getElementName() const "
/**
   * Returns the XML element name of
   * this SBML object.
   */ public
";


%csmethodmodifiers ListOfGraphicalObjects::setElementName(const std::string& elementName) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfGraphicalObjects::get(unsigned int n) "
/**
   * Get a GraphicalObject from the ListOfGraphicalObjects.
   *
   * @param n the index number of the GraphicalObject to get.
   * 
   * @return the nth GraphicalObject in this ListOfGraphicalObjects.
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfGraphicalObjects::get "
/**
   * Get a GraphicalObject from the ListOfGraphicalObjects.
   *
   * @param n the index number of the GraphicalObject to get.
   * 
   * @return the nth GraphicalObject in this ListOfGraphicalObjects.
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfGraphicalObjects::get(const std::string& sid) "
/**
   * Get a GraphicalObject from the ListOfGraphicalObjects
   * based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the GraphicalObject to get.
   * 
   * @return GraphicalObject in this ListOfGraphicalObjects
   * with the given @p sid or @c null if no such
   * GraphicalObject exists.
   *
   * @see get(long n)
   * @see size()
   */ public
";


%csmethodmodifiers ListOfGraphicalObjects::get(const std::string& sid) const "
/**
   * Get a GraphicalObject from the ListOfGraphicalObjects
   * based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the GraphicalObject to get.
   * 
   * @return GraphicalObject in this ListOfGraphicalObjects
   * with the given @p sid or @c null if no such
   * GraphicalObject exists.
   *
   * @see get(long n)
   * @see size()
   */ public
";


%csmethodmodifiers ListOfGraphicalObjects::remove(unsigned int n) "
/**
   * Removes the nth item from this ListOfGraphicalObjects items and returns a pointer to
   * it.
   *
   * The caller owns the returned item and is responsible for deleting it.
   *
   * @param n the index of the item to remove
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfGraphicalObjects::remove(const std::string& sid) "
/**
   * Removes item in this ListOfGraphicalObjects items with the given identifier.
   *
   * The caller owns the returned item and is responsible for deleting it.
   * If none of the items in this list have the identifier @p sid, then @c
   * null is returned.
   *
   * @param sid the identifier of the item to remove
   *
   * @return the item removed.  As mentioned above, the caller owns the
   * returned item.
   */ public
";


%csmethodmodifiers ListOfGraphicalObjects::toXML() const "
/**
    * Creates an XMLNode object from this.
    */ public
";


%csmethodmodifiers ListOfGraphicalObjects::createObject(XMLInputStream& stream) "
/**
   * Create and return an SBML object of this class, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfGraphicalObjects::isValidTypeForList(SBase * item) "
/** */ /* libsbml-internal */ public
";


%typemap(csimports) CompartmentGlyph "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{layout}
 *
@htmlinclude pkg-marker-layout.html Representation of a compartment glyph.
 */
"


%csmethodmodifiers CompartmentGlyph::CompartmentGlyph(unsigned int level      = LayoutExtension::getDefaultLevel(), unsigned int version    = LayoutExtension::getDefaultVersion(), unsigned int pkgVersion = LayoutExtension::getDefaultPackageVersion()) "
/**
   * Default Constructor which creates a new CompartmentGlyph.  Id and
   * associated compartment id are unset.
   */ public
";


%csmethodmodifiers CompartmentGlyph::CompartmentGlyph(LayoutPkgNamespaces* layoutns) "
/**
   * Ctor.
   */ public
";


%csmethodmodifiers CompartmentGlyph::CompartmentGlyph(LayoutPkgNamespaces* layoutns, const std::string& id) "
/**
   * Constructor which creates a new CompartmentGlyph with the given @p id.
   *
   * (FOR BACKWARD COMPATIBILITY)
   *
   */ public
";


%csmethodmodifiers CompartmentGlyph::CompartmentGlyph(LayoutPkgNamespaces* layoutns, const std::string& id, const std::string& compartmentId) "
/**
   * Constructor which creates a new CompartmentGlyph.  Id and associated
   * compartment id are set to copies of the values given as arguments.
   *
   * (FOR BACKWARD COMPATIBILITY)
   */ public
";


%csmethodmodifiers CompartmentGlyph::CompartmentGlyph(const XMLNode& node, unsigned int l2version=4) "
/**
   * Creates a new CompartmentGlyph from the given XMLNode
   *
   * (FOR BACKWARD COMPATIBILITY)
   */ public
";


%csmethodmodifiers CompartmentGlyph::CompartmentGlyph(const CompartmentGlyph& source) "
/**
   * Copy constructor.
   */ public
";


%csmethodmodifiers CompartmentGlyph::getCompartmentId() const "
/**
   * Returns the id of the associated compartment.
   */ public
";


%csmethodmodifiers CompartmentGlyph::setCompartmentId(const std::string& id) "
/**
   * Sets the id of the associated compartment.
   */ public
";


%csmethodmodifiers CompartmentGlyph::isSetCompartmentId() const "
/**
   * Returns true if the id of the associated compartment is not the empty
   * string.
   */ public
";


%csmethodmodifiers CompartmentGlyph::getOrder() const "
/**
   * Returns the compartment order.
   */ public
";


%csmethodmodifiers CompartmentGlyph::setOrder(double order) "
/**
   * Sets the compartment order
   */ public
";


%csmethodmodifiers CompartmentGlyph::unsetOrder "
/**
   * Sets the compartment order
   */ public
";


%csmethodmodifiers CompartmentGlyph::isSetOrder() const "
/**
   * Returns true if the compartment order has been set
   */ public
";


%csmethodmodifiers CompartmentGlyph::renameSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames all the @c SIdRef attributes on this element, including any
   * found in MathML content (if such exists).
   *
   * This method works by looking at all attributes and (if appropriate)
   * mathematical formulas, comparing the identifiers to the value of @p
   * oldid.  If any matches are found, the matching identifiers are replaced
   * with @p newid.  The method does @em not descend into child elements.
   *
   * @param oldid the old identifier
   * @param newid the new identifier
   */ public
";


%csmethodmodifiers CompartmentGlyph::initDefaults "
/**
   * Calls initDefaults from GraphicalObject.
   */ public
";


%csmethodmodifiers CompartmentGlyph::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.  For example:
   *
   *   SBase::writeElements(stream);
   *   mReactants.write(stream);
   *   mProducts.write(stream);
   *   ...
   */ /* libsbml-internal */ public
";


%csmethodmodifiers CompartmentGlyph::getElementName() const "
/**
   * Returns the XML element name of
   * this SBML object.
   */ public
";


%csmethodmodifiers CompartmentGlyph::clone() const "
/**
   * Creates and returns a deep copy of this CompartmentGlyph.
   * 
   * @return a (deep) copy of this CompartmentGlyph.
   */ public
";


%csmethodmodifiers CompartmentGlyph::getTypeCode() const "
/**
   * Returns the libSBML type code of this object instance.
   *
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object:
   * @link libsbmlcs.libsbml.SBML_LAYOUT_COMPARTMENTGLYPH SBML_LAYOUT_COMPARTMENTGLYPH@endlink
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers CompartmentGlyph::toXML() const "
/**
    * Creates an XMLNode object from this.
    */ public
";


%csmethodmodifiers CompartmentGlyph::createObject(XMLInputStream& stream) "
/**
   * Create and return an SBML object of this class, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers CompartmentGlyph::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers CompartmentGlyph::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Subclasses should override this method to read values from the given
   * XMLAttributes set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers CompartmentGlyph::writeAttributes(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.  For example:
   *
   *   SBase::writeAttributes(stream);
   *   stream.writeAttribute( \'id\'  , mId   );
   *   stream.writeAttribute( \'name\', mName );
   *   ...
   */ /* libsbml-internal */ public
";


%typemap(csimports) LineSegment "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{layout}
 *
@htmlinclude pkg-marker-layout.html The representation of a line in the
 * &ldquo;layout&rdquo; package.
 *
 * The LineSegment class consists of the mandatory attribute xsi:type and two
 * child elements of type Point. One is called \'start\' and represents the
 * starting point of the line, the other is called \'end\' and represents the
 * endpoint of the line.  The LineSegment class is also the base class for
 * CubicBezier, which represent curved lines instead of straight ones.
 */
"


%csmethodmodifiers LineSegment::LineSegment(unsigned int level      = LayoutExtension::getDefaultLevel(), unsigned int version    = LayoutExtension::getDefaultVersion(), unsigned int pkgVersion = LayoutExtension::getDefaultPackageVersion()) "
/**
   * Creates a line segment with the given SBML level, version, and package version
   * and both points set to (0.0,0.0,0.0)
   */ public
";


%csmethodmodifiers LineSegment::LineSegment(LayoutPkgNamespaces* layoutns) "
/**
   * Creates a line segment with the LayoutPkgNamespaces and both points set to (0.0,0.0,0.0)
   */ public
";


%csmethodmodifiers LineSegment::LineSegment(LayoutPkgNamespaces* layoutns, double x1, double y1, double x2, double y2) "
/**
   * Creates a new line segment with the given 2D coordinates.
   */ public
";


%csmethodmodifiers LineSegment::LineSegment(const LineSegment& orig) "
/**
   * Copy constructor.
   */ public
";


%csmethodmodifiers LineSegment::LineSegment(LayoutPkgNamespaces* layoutns, double x1, double y1, double z1, double x2, double y2, double z2) "
/**
   * Creates a new line segment with the given 3D coordinates.
   */ public
";


%csmethodmodifiers LineSegment::LineSegment(LayoutPkgNamespaces* layoutns, const Point* start, const Point* end) "
/**
   * Creates a new line segment with the two given points.
   */ public
";


%csmethodmodifiers LineSegment::LineSegment(const XMLNode& node, unsigned int l2version=4) "
/**
   * Creates a new LineSegment from the given XMLNode
   */ public
";


%csmethodmodifiers LineSegment::getAllElements(ElementFilter* filter=NULL) "
/**
   * Returns a List of all child SBase objects, including those nested to an
   * arbitrary depth
   *
   * @return a List* of pointers to all children objects.
   */ public
";


%csmethodmodifiers LineSegment::getStart() const "
/**
   * Returns the start point of the line.
   */ public
";


%csmethodmodifiers LineSegment::getStart "
/**
   * Returns the start point of the line.
   */ public
";


%csmethodmodifiers LineSegment::setStart(const Point* start) "
/**
   * Initializes the start point with a copy of the given Point object.
   */ public
";


%csmethodmodifiers LineSegment::setStart(double x, double y, double z = 0.0) "
/**
   * Initializes the start point with the given coordinates.
   */ public
";


%csmethodmodifiers LineSegment::getEnd() const "
/**
   * Returns the end point of the line.
   */ public
";


%csmethodmodifiers LineSegment::getEnd "
/**
   * Returns the end point of the line.
   */ public
";


%csmethodmodifiers LineSegment::setEnd(const Point* end) "
/**
   * Initializes the end point with a copy of the given Point object.
   */ public
";


%csmethodmodifiers LineSegment::setEnd(double x, double y, double z = 0.0) "
/**
   * Initializes the end point with the given coordinates.
   */ public
";


%csmethodmodifiers LineSegment::getStartExplicitlySet() const "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers LineSegment::getEndExplicitlySet() const "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers LineSegment::initDefaults "
/**
   * Does noting since no defaults are defined for LineSegment.
   */ public
";


%csmethodmodifiers LineSegment::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.  For example:
   *
   *   SBase::writeElements(stream);
   *   mReactants.write(stream);
   *   mProducts.write(stream);
   *   ...
   */ /* libsbml-internal */ public
";


%csmethodmodifiers LineSegment::getElementName() const "
/**
   * Returns the XML element name of
   * this SBML object.
   */ public
";


%csmethodmodifiers LineSegment::clone() const "
/**
   * Creates and returns a deep copy of this LineSegment.
   * 
   * @return a (deep) copy of this LineSegment.
   */ public
";


%csmethodmodifiers LineSegment::getTypeCode() const "
/**
   * Returns the libSBML type code of this object instance.
   *
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object:
   * @link libsbmlcs.libsbml.SBML_LAYOUT_LINESEGMENT SBML_LAYOUT_LINESEGMENT@endlink
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers LineSegment::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor.
   *
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether or not the Visitor would like to visit the SBML object\'s next
   * sibling object (if available).
   */ public
";


%csmethodmodifiers LineSegment::toXML() const "
/**
    * Creates an XMLNode object from this.
    */ public
";


%csmethodmodifiers LineSegment::setSBMLDocument(SBMLDocument* d) "
/**
   * Sets the parent SBMLDocument of this SBML object.
   *
   * @param d the SBMLDocument object to use
   */ /* libsbml-internal */ public
";


%csmethodmodifiers LineSegment::connectToChild "
/**
   * Sets this SBML object to child SBML objects (if any).
   * (Creates a child-parent relationship by the parent)
   *
   * Subclasses must override this function if they define
   * one ore more child elements.
   * Basically, this function needs to be called in
   * constructor, copy constructor, assignment operator.
   *
   * @see setSBMLDocument
   * @see enablePackageInternal
   */ /* libsbml-internal */ public
";


%csmethodmodifiers LineSegment::enablePackageInternal(const std::string& pkgURI, const std::string& pkgPrefix, bool flag) "
/**
   * Enables/Disables the given package with this element and child
   * elements (if any).
   * (This is an internal implementation for enablePakcage function)
   *
   * @note Subclasses in which one or more child elements are defined
   * must override this function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers LineSegment::createObject(XMLInputStream& stream) "
/**
   * Create and return an SBML object of this class, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers LineSegment::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers LineSegment::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Subclasses should override this method to read values from the given
   * XMLAttributes set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers LineSegment::writeAttributes(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.  For example:
   *
   *   SBase::writeAttributes(stream);
   *   stream.writeAttribute( \'id\'  , mId   );
   *   stream.writeAttribute( \'name\', mName );
   *   ...
   */ /* libsbml-internal */ public
";


%csmethodmodifiers LineSegment::writeXMLNS(XMLOutputStream& stream) const "
/**
   *
   * Subclasses should override this method to write their xmlns attriubutes
   * (if any) to the XMLOutputStream. 
   *
   */ /* libsbml-internal */ public
";


%typemap(csimports) CubicBezier "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{layout}
 *
@htmlinclude pkg-marker-layout.html A %CubicBezier represents a smooth curve in the
 * &ldquo;layout&rdquo; package.
 *
 * In order to be able to represent smooth curves the &ldquo;layout&rdquo;
 * package defines the class CubicBezier. It represents a Bezier curve, and
 * is readily available in most graphics APIs.  The class CubicBezier is
 * derived from LineSegment. It consists of four elements: the two inherited
 * elements \'start\' and \'end\', which specify the starting point and the
 * endpoint of the cubic bezier curve, and two elements \'basePoint1\' and
 * \'basePoint2\', which specify the two additional base points that are needed
 * to describe a cubic bezier curve.
 */
"


%csmethodmodifiers CubicBezier::CubicBezier(unsigned int level      = LayoutExtension::getDefaultLevel(), unsigned int version    = LayoutExtension::getDefaultVersion(), unsigned int pkgVersion = LayoutExtension::getDefaultPackageVersion()) "
/**
   * Creates a CubicBezier and returns the pointer.
   */ public
";


%csmethodmodifiers CubicBezier::CubicBezier(LayoutPkgNamespaces* layoutns) "
/**
   * Ctor.
   */ public
";


%csmethodmodifiers CubicBezier::CubicBezier(LayoutPkgNamespaces* layoutns, double x1, double y1, double x2, double y2) "
/**
   * Creates a CubicBezier with the given 2D coordinates and returns the
   * pointer.
   *
   * (FOR BACKWARD COMPATIBILITY)
   *
   */ public
";


%csmethodmodifiers CubicBezier::CubicBezier(LayoutPkgNamespaces* layoutns, double x1, double y1, double z1, double x2, double y2, double z2) "
/**
   * Creates a CubicBezier with the given 3D coordinates and returns the
   * pointer.
   *
   * (FOR BACKWARD COMPATIBILITY)
   *
   */ public
";


%csmethodmodifiers CubicBezier::CubicBezier(const CubicBezier& orig) "
/**
   * Copy constructor.
   *
   * (FOR BACKWARD COMPATIBILITY)
   *
   */ public
";


%csmethodmodifiers CubicBezier::CubicBezier(LayoutPkgNamespaces* layoutns, const Point* start, const Point* end) "
/**
   * Creates a CubicBezier with the given points and returns the pointer.
   *
   * (FOR BACKWARD COMPATIBILITY)
   *
   */ public
";


%csmethodmodifiers CubicBezier::CubicBezier(LayoutPkgNamespaces* layoutns, const Point* start, const Point* base1, const Point* base2, const Point* end) "
/**
   * Creates a CubicBezier with the given points and returns the pointer.
   *
   * (FOR BACKWARD COMPATIBILITY)
   *
   */ public
";


%csmethodmodifiers CubicBezier::CubicBezier(const XMLNode& node, unsigned int l2version=4) "
/**
   * Creates a new Layout from the given XMLNode
   *
   * (FOR BACKWARD COMPATIBILITY)
   *
   */ public
";


%csmethodmodifiers CubicBezier::getAllElements(ElementFilter* filter=NULL) "
/**
   * Returns a List of all child SBase objects, including those nested to an
   * arbitrary depth
   *
   * @return a List* of pointers to all children objects.
   */ public
";


%csmethodmodifiers CubicBezier::getBasePoint1() const "
/**
   * Returns the first base point of the curve (the one closer to the
   * starting point).
   */ public
";


%csmethodmodifiers CubicBezier::getBasePoint1 "
/**
   * Returns the first base point of the curve (the one closer to the
   * starting point).
   */ public
";


%csmethodmodifiers CubicBezier::setBasePoint1(const Point* p) "
/**
   * Initializes first base point with a copy of the given point.
   */ public
";


%csmethodmodifiers CubicBezier::setBasePoint1(double x, double y, double z = 0.0) "
/**
   * Initializes first base point with the given coordinates.
   */ public
";


%csmethodmodifiers CubicBezier::getBasePoint2() const "
/**
   * Returns the second base point of the curve (the one closer to the end
   * point).
   */ public
";


%csmethodmodifiers CubicBezier::getBasePoint2 "
/**
   * Returns the second base point of the curve (the one closer to the end
   * point).
   */ public
";


%csmethodmodifiers CubicBezier::setBasePoint2(const Point* p) "
/**
   * Initializes second base point with a copy of the given point.
   */ public
";


%csmethodmodifiers CubicBezier::setBasePoint2(double x, double y, double z = 0.0) "
/**
   * Initializes second base point with the given coordinates.
   */ public
";


%csmethodmodifiers CubicBezier::getBasePt1ExplicitlySet() const "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers CubicBezier::getBasePt2ExplicitlySet() const "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers CubicBezier::initDefaults "
/**
   * Calls initDefaults from LineSegment.
   */ public
";


%csmethodmodifiers CubicBezier::straighten "
/**
   * Makes a line from a CubicBezier by setting both base points into the
   * middle between the start and the end point.
   */ public
";


%csmethodmodifiers CubicBezier::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.  For example:
   *
   *   SBase::writeElements(stream);
   *   mReactants.write(stream);
   *   mProducts.write(stream);
   *   ...
   */ /* libsbml-internal */ public
";


%csmethodmodifiers CubicBezier::getElementName() const "
/**
   * Returns the XML element name of
   * this SBML object.
   */ public
";


%csmethodmodifiers CubicBezier::clone() const "
/**
   * Creates and returns a deep copy of this CubicBezier.
   * 
   * @return a (deep) copy of this CubicBezier.
   */ public
";


%csmethodmodifiers CubicBezier::getTypeCode() const "
/**
   * Returns the libSBML type code of this object instance.
   *
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object:
   * @link libsbmlcs.libsbml.SBML_LAYOUT_CUBICBEZIER SBML_LAYOUT_CUBICBEZIER@endlink
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers CubicBezier::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor.
   *
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether or not the Visitor would like to visit the SBML object\'s next
   * sibling object (if available).
   */ public
";


%csmethodmodifiers CubicBezier::toXML() const "
/**
    * Creates an XMLNode object from this.
    */ public
";


%csmethodmodifiers CubicBezier::setSBMLDocument(SBMLDocument* d) "
/**
   * Sets the parent SBMLDocument of this SBML object.
   *
   * @param d the SBMLDocument object to use
   */ /* libsbml-internal */ public
";


%csmethodmodifiers CubicBezier::connectToChild "
/**
   * Sets this SBML object to child SBML objects (if any).
   * (Creates a child-parent relationship by the parent)
   *
   * Subclasses must override this function if they define
   * one ore more child elements.
   * Basically, this function needs to be called in
   * constructor, copy constructor, assignment operator.
   *
   * @see setSBMLDocument
   * @see enablePackageInternal
   */ /* libsbml-internal */ public
";


%csmethodmodifiers CubicBezier::enablePackageInternal(const std::string& pkgURI, const std::string& pkgPrefix, bool flag) "
/**
   * Enables/Disables the given package with this element and child
   * elements (if any).
   * (This is an internal implementation for enablePakcage function)
   *
   * @note Subclasses in which one or more child elements are defined
   * must override this function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers CubicBezier::createObject(XMLInputStream& stream) "
/**
   * Create and return an SBML object of this class, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers CubicBezier::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers CubicBezier::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Subclasses should override this method to read values from the given
   * XMLAttributes set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers CubicBezier::writeAttributes(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.  For example:
   *
   *   SBase::writeAttributes(stream);
   *   stream.writeAttribute( \'id\'  , mId   );
   *   stream.writeAttribute( \'name\', mName );
   *   ...
   */ /* libsbml-internal */ public
";


%csmethodmodifiers CubicBezier::writeXMLNS(XMLOutputStream& stream) const "
/**
   *
   * Subclasses should override this method to write their xmlns attriubutes
   * (if any) to the XMLOutputStream. 
   *
   */ /* libsbml-internal */ public
";


%typemap(csimports) Curve "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{layout}
 *
@htmlinclude pkg-marker-layout.html The Curve class describes how to connect elements in a
 * diagram defined with the use of the &ldquo;layout&rdquo; package. A curve
 * is fully specified by a mandatory listOfCurveSegments element and is used
 * in four places in the &ldquo;layout&rdquo; package:
 *
 * @li SpeciesReferenceGlyph: Here it describes a curve from/to the center
 * piece of the parent ReactionGlyph to/from the SpeciesGlyph it represents.
 *
 * @li ReactionGlyph: Here it describes a curve for the center piece of a
 * reaction.
 *
 * @li ReferenceGlyph: Here it describes a curve from/to the center piece of
 * the parent GeneralGlyph to/from the glyph it represents.
 *
 * @li GeneralGlyph: Here it describes a curve for the center piece of an
 * additional relationship.
 *
 * In the text above, the term \'center piece\' refers to either the Curve
 * element of a ReactionGlyph, or its BoundingBox.
 */
"


%typemap(csimports) ListOfLineSegments "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{layout}
 *
@htmlinclude pkg-marker-layout.html Implementation of the %ListOfLineSegments construct
 * from the \'layout\' package.
 * 
 * The ListOfLineSegments is a container for the LineSegment elements of a Curve.
 * 
 * *
 * 
 * The various ListOf___ classes in SBML are merely containers used for
 * organizing the main components of an SBML model.  All are derived from
 * the abstract class SBase, and inherit the various attributes and
 * subelements of SBase, such as \'metaid\' as and \'annotation\'.  The
 * ListOf___ classes do not add any attributes of their own.
 *
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 *
 * @htmlinclude listof-illustration.html
 *
 * Readers may wonder about the motivations for using the ListOf___
 * containers.  A simpler approach in XML might be to place the components
 * all directly at the top level of the model definition.  The choice made
 * in SBML is to group them within XML elements named after
 * ListOf<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from SBase means that software tools can add information @em about
 * the lists themselves into each list container\'s \'annotation\'.
 * 
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 *
 *
 *
 * @see Input
 */
"


%csmethodmodifiers ListOfLineSegments::clone() const "
/**
   * Creates and returns a deep copy of this ListOfLineSegments.
   * 
   * @return a (deep) copy of this ListOfLineSegments.
   */ public
";


%csmethodmodifiers ListOfLineSegments::ListOfLineSegments(unsigned int level      = LayoutExtension::getDefaultLevel(), unsigned int version    = LayoutExtension::getDefaultVersion(), unsigned int pkgVersion = LayoutExtension::getDefaultPackageVersion()) "
/**
   * Ctor.
   */ public
";


%csmethodmodifiers ListOfLineSegments::ListOfLineSegments(LayoutPkgNamespaces* layoutns) "
/**
   * Ctor.
   */ public
";


%csmethodmodifiers ListOfLineSegments::getItemTypeCode() const "
/**
   * Returns the libSBML type code for the SBML objects
   * contained in this ListOf object.
   * 
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for objects contained in this list:
   * @link libsbmlcs.libsbml.SBML_LAYOUT_LINESEGMENT SBML_LAYOUT_LINESEGMENT@endlink (default).
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers ListOfLineSegments::getElementName() const "
/**
   * Returns the XML element name of
   * this SBML object.
   */ public
";


%csmethodmodifiers ListOfLineSegments::get(unsigned int n) "
/**
   * Get a LineSegment from the ListOfLineSegments.
   *
   * @param n the index number of the LineSegment to get.
   * 
   * @return the nth LineSegment in this ListOfLineSegments.
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfLineSegments::get "
/**
   * Get a LineSegment from the ListOfLineSegments.
   *
   * @param n the index number of the LineSegment to get.
   * 
   * @return the nth LineSegment in this ListOfLineSegments.
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfLineSegments::remove(unsigned int n) "
/**
   * Removes the nth item from this ListOfLineSegments items and returns a pointer to
   * it.
   *
   * The caller owns the returned item and is responsible for deleting it.
   *
   * @param n the index of the item to remove
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfLineSegments::toXML() const "
/**
    * Creates an XMLNode object from this.
    */ public
";


%csmethodmodifiers ListOfLineSegments::createObject(XMLInputStream& stream) "
/**
   * Create and return an SBML object of this class, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfLineSegments::isValidTypeForList(SBase * item) "
/** */ public
";


%csmethodmodifiers Curve::Curve(unsigned int level      = LayoutExtension::getDefaultLevel(), unsigned int version    = LayoutExtension::getDefaultVersion(), unsigned int pkgVersion = LayoutExtension::getDefaultPackageVersion()) "
/**
   * Creates a curve with an empty list of segments.
   */ public
";


%csmethodmodifiers Curve::Curve(LayoutPkgNamespaces* layoutns) "
/**
   * Creates a new Curve with the given LayoutPkgNamespaces object.
   */ public
";


%csmethodmodifiers Curve::Curve(const XMLNode& node, unsigned int l2version=4) "
/**
   * Creates a new Curve from the given XMLNode
   */ public
";


%csmethodmodifiers Curve::Curve(const Curve& source) "
/**
   * Copy constructor.
   */ public
";


%csmethodmodifiers Curve::initDefaults "
/**
   * Does nothing since no defaults are defined for Curve.
   */ public
";


%csmethodmodifiers Curve::getAllElements(ElementFilter* filter=NULL) "
/**
   * Returns a List of all child SBase objects, including those nested to an
   * arbitrary depth
   *
   * @return a List* of pointers to all children objects.
   */ public
";


%csmethodmodifiers Curve::getListOfCurveSegments() const "
/**
   * Returns a reference to the ListOf object that holds all the curve
   * segments.
   */ public
";


%csmethodmodifiers Curve::getListOfCurveSegments "
/**
   * Returns a refernce to the ListOf object That holds all the curve
   * segments.
   */ public
";


%csmethodmodifiers Curve::getCurveSegment "
/**
   * Returns a pointer to the curve segment with the given index.
   * If the index is invalid, @c null is returned.
   */ public
";


%csmethodmodifiers Curve::getCurveSegment(unsigned int index) "
/**
   * Returns a pointer to the curve segment with the given index.
   * If the index is invalid, @c null is returned.
   */ public
";


%csmethodmodifiers Curve::addCurveSegment(const LineSegment* segment) "
/**
   * Adds a new CurveSegment to the end of the list.
   */ public
";


%csmethodmodifiers Curve::getNumCurveSegments() const "
/**
   * Returns the number of curve segments.
   */ public
";


%csmethodmodifiers Curve::createLineSegment "
/**
   * Creates a new LineSegment and adds it to the end of the list.  A
   * reference to the new LineSegment object is returned.
   */ public
";


%csmethodmodifiers Curve::createCubicBezier "
/**
   * Creates a new CubicBezier and adds it to the end of the list.  A
   * reference to the new CubicBezier object is returned.
   */ public
";


%csmethodmodifiers Curve::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.  For example:
   *
   *   SBase::writeElements(stream);
   *   mReactants.write(stream);
   *   mProducts.write(stream);
   *   ...
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Curve::getElementName() const "
/**
   * Returns the XML element name of
   * this SBML object.
   */ public
";


%csmethodmodifiers Curve::clone() const "
/**
   * Creates and returns a deep copy of this Curve.
   * 
   * @return a (deep) copy of this Curve.
   */ public
";


%csmethodmodifiers Curve::getTypeCode() const "
/**
   * Returns the libSBML type code of this object instance.
   *
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object:
   * @link libsbmlcs.libsbml.SBML_LAYOUT_CURVE SBML_LAYOUT_CURVE@endlink
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers Curve::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor.
   *
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether or not the Visitor would like to visit the SBML object\'s next
   * sibling object (if available).
   */ public
";


%csmethodmodifiers Curve::toXML() const "
/**
    * Creates an XMLNode object from this.
    */ public
";


%csmethodmodifiers Curve::setSBMLDocument(SBMLDocument* d) "
/**
   * Sets the parent SBMLDocument of this SBML object.
   *
   * @param d the SBMLDocument object to use
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Curve::connectToChild "
/**
   * Sets this SBML object to child SBML objects (if any).
   * (Creates a child-parent relationship by the parent)
   *
   * Subclasses must override this function if they define
   * one ore more child elements.
   * Basically, this function needs to be called in
   * constructor, copy constructor, assignment operator.
   *
   * @see setSBMLDocument
   * @see enablePackageInternal
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Curve::enablePackageInternal(const std::string& pkgURI, const std::string& pkgPrefix, bool flag) "
/**
   * Enables/Disables the given package with this element and child
   * elements (if any).
   * (This is an internal implementation for enablePakcage function)
   *
   * @note Subclasses in which one or more child elements are defined
   * must override this function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Curve::createObject(XMLInputStream& stream) "
/**
   * Create and return an SBML object of this class, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Curve::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Curve::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Subclasses should override this method to read values from the given
   * XMLAttributes set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Curve::writeAttributes(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.  For example:
   *
   *   SBase::writeAttributes(stream);
   *   stream.writeAttribute( \'id\'  , mId   );
   *   stream.writeAttribute( \'name\', mName );
   *   ...
   */ /* libsbml-internal */ public
";


%typemap(csimports) SpeciesReferenceGlyph "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{layout}
 *
@htmlinclude pkg-marker-layout.html A %SpeciesReferenceGlyph represents a reactant or
 * product from a Reaction in the &ldquo;layout&rdquo; package.
 *
 * The %SpeciesReferenceGlyph element describes the graphical connection
 * between a SpeciesGlyph and a ReactionGlyph (which would be an arrow or
 * some curve in most cases). A SpeciesReferenceGlyph inherits from
 * GraphicalObject, and adds a mandatory attribute \'speciesGlyph\' and two
 * optional attributes \'speciesReference\' and \'role\'. Optionally, the
 * SpeciesReferenceGlyph also has a child element \'curve\'.
 *
 * If the curve is specified, it overrides the inherited bounding box.
 */
"


%csmethodmodifiers SpeciesReferenceGlyph::SpeciesReferenceGlyph(unsigned int level      = LayoutExtension::getDefaultLevel(), unsigned int version    = LayoutExtension::getDefaultVersion(), unsigned int pkgVersion = LayoutExtension::getDefaultPackageVersion()) "
/**
   * Creates a new SpeciesReferenceGlyph with the given SBML level, version and
   * package version.  The id if the associated species
   * reference and the id of the associated species glyph are set to the
   * empty string.  The role is set to SPECIES_ROLE_UNDEFINED.
   */ public
";


%csmethodmodifiers SpeciesReferenceGlyph::SpeciesReferenceGlyph(LayoutPkgNamespaces* layoutns) "
/**
   * Ctor.
   */ public
";


%csmethodmodifiers SpeciesReferenceGlyph::SpeciesReferenceGlyph(LayoutPkgNamespaces* layoutns, const std::string& sid, const std::string& speciesReferenceId, const std::string& speciesGlyphId, SpeciesReferenceRole_t role ) "
/**
   * Creates a new SpeciesReferenceGlyph.  The id is given as the first
   * argument, the id of the associated species reference is given as the
   * second argument.  The third argument is the id of the associated
   * species glpyh and the fourth argument is the role.
   */ public
";


%csmethodmodifiers SpeciesReferenceGlyph::SpeciesReferenceGlyph(const XMLNode& node, unsigned int l2version=4) "
/**
   * Creates a new SpeciesReferenceGlyph from the given XMLNode
   */ public
";


%csmethodmodifiers SpeciesReferenceGlyph::SpeciesReferenceGlyph(const SpeciesReferenceGlyph& source) "
/**
   * Copy constructor.
   */ public
";


%csmethodmodifiers SpeciesReferenceGlyph::getSpeciesGlyphId() const "
/**
   * Returns the id of the associated SpeciesGlyph.
   */ public
";


%csmethodmodifiers SpeciesReferenceGlyph::setSpeciesGlyphId(const std::string& speciesGlyphId) "
/**
   * Sets the id of the associated species glyph.
   */ public
";


%csmethodmodifiers SpeciesReferenceGlyph::getSpeciesReferenceId() const "
/**
   * Returns the id of the associated species reference.
   */ public
";


%csmethodmodifiers SpeciesReferenceGlyph::setSpeciesReferenceId(const std::string& id) "
/**
   * Sets the id of the associated species reference.
   */ public
";


%csmethodmodifiers SpeciesReferenceGlyph::getRoleString() const "
/**
   * Returns a string representation of the role.
   */ public
";


%csmethodmodifiers SpeciesReferenceGlyph::getRole() const "
/**
   * Returns the role.
   */ public
";


%csmethodmodifiers SpeciesReferenceGlyph::setRole(const std::string& role) "
/**
   * Sets the role based on a string.
   * The String can be one of:
   * SUBSTRATE
   * PRODUCT
   * SIDESUBSTRATE
   * SIDEPRODUCT
   * MODIFIER
   * ACTIVATOR
   * INHIBITOR    
   */ public
";


%csmethodmodifiers SpeciesReferenceGlyph::setRole(SpeciesReferenceRole_t role) "
/**
   * Sets the role.
   */ public
";


%csmethodmodifiers SpeciesReferenceGlyph::getAllElements(ElementFilter* filter=NULL) "
/**
   * Returns a List of all child SBase objects, including those nested to an
   * arbitrary depth
   *
   * @return a List* of pointers to all children objects.
   */ public
";


%csmethodmodifiers SpeciesReferenceGlyph::renameSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames all the @c SIdRef attributes on this element, including any
   * found in MathML content (if such exists).
   *
   * This method works by looking at all attributes and (if appropriate)
   * mathematical formulas, comparing the identifiers to the value of @p
   * oldid.  If any matches are found, the matching identifiers are replaced
   * with @p newid.  The method does @em not descend into child elements.
   *
   * @param oldid the old identifier
   * @param newid the new identifier
   */ public
";


%csmethodmodifiers SpeciesReferenceGlyph::getCurve "
/**
   * Returns the curve object for the species reference glyph
   */ public
";


%csmethodmodifiers SpeciesReferenceGlyph::getCurve() const "
/**
   * Returns the curve object for the species reference glyph
   */ public
";


%csmethodmodifiers SpeciesReferenceGlyph::setCurve(const Curve* curve) "
/**
   * Sets the curve object for the species reference glyph.
   */ public
";


%csmethodmodifiers SpeciesReferenceGlyph::isSetCurve() const "
/**
   * Returns true if the curve consists of one or more segments.
   */ public
";


%csmethodmodifiers SpeciesReferenceGlyph::getCurveExplicitlySet() const "
/** */ public
";


%csmethodmodifiers SpeciesReferenceGlyph::isSetSpeciesGlyphId() const "
/**
   * Returns true if the id of the associated species glpyh is not the
   * empty string.
   */ public
";


%csmethodmodifiers SpeciesReferenceGlyph::isSetSpeciesReferenceId() const "
/**
   * Returns true if the id of the associated species reference is not the
   * empty string.
   */ public
";


%csmethodmodifiers SpeciesReferenceGlyph::isSetRole() const "
/**
   * Returns true of role is different from SPECIES_ROLE_UNDEFINED.
   */ public
";


%csmethodmodifiers SpeciesReferenceGlyph::initDefaults "
/**
   * Calls initDefaults on GraphicalObject and sets role to
   * SPECIES_ROLE_UNDEFINED.
   */ public
";


%csmethodmodifiers SpeciesReferenceGlyph::createLineSegment "
/**
   * Creates a new LineSegment object, adds it to the end of the list of
   * curve segment objects of the curve and returns a reference to the
   * newly created object.
   */ public
";


%csmethodmodifiers SpeciesReferenceGlyph::createCubicBezier "
/**
   * Creates a new CubicBezier object, adds it to the end of the list of
   * curve segment objects of the curve and returns a reference to the
   * newly created object.
   */ public
";


%csmethodmodifiers SpeciesReferenceGlyph::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.  For example:
   *
   *   SBase::writeElements(stream);
   *   mReactants.write(stream);
   *   mProducts.write(stream);
   *   ...
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SpeciesReferenceGlyph::getElementName() const "
/**
   * Returns the XML element name of
   * this SBML object.
   */ public
";


%csmethodmodifiers SpeciesReferenceGlyph::clone() const "
/**
   * Creates and returns a deep copy of this SpeciesReferenceGlyph.
   * 
   * @return a (deep) copy of this SpeciesReferenceGlyph.
   */ public
";


%csmethodmodifiers SpeciesReferenceGlyph::getTypeCode() const "
/**
   * Returns the libSBML type code of this object instance.
   *
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object:
   * @link libsbmlcs.libsbml.SBML_LAYOUT_SPECIESREFERENCEGLYPH SBML_LAYOUT_SPECIESREFERENCEGLYPH@endlink
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers SpeciesReferenceGlyph::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor.
   *
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether or not the Visitor would like to visit the SBML object\'s next
   * sibling object (if available).
   */ public
";


%csmethodmodifiers SpeciesReferenceGlyph::toXML() const "
/**
    * Creates an XMLNode object from this.
    */ public
";


%csmethodmodifiers SpeciesReferenceGlyph::setSBMLDocument(SBMLDocument* d) "
/**
   * Sets the parent SBMLDocument of this SBML object.
   *
   * @param d the SBMLDocument object to use
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SpeciesReferenceGlyph::connectToChild "
/**
   * Sets this SBML object to child SBML objects (if any).
   * (Creates a child-parent relationship by the parent)
   *
   * Subclasses must override this function if they define
   * one ore more child elements.
   * Basically, this function needs to be called in
   * constructor, copy constructor, assignment operator.
   *
   * @see setSBMLDocument
   * @see enablePackageInternal
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SpeciesReferenceGlyph::enablePackageInternal(const std::string& pkgURI, const std::string& pkgPrefix, bool flag) "
/**
   * Enables/Disables the given package with this element and child
   * elements (if any).
   * (This is an internal implementation for enablePakcage function)
   *
   * @note Subclasses in which one or more child elements are defined
   * must override this function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SpeciesReferenceGlyph::createObject(XMLInputStream& stream) "
/**
   * Create and return an SBML object of this class, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SpeciesReferenceGlyph::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SpeciesReferenceGlyph::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Subclasses should override this method to read values from the given
   * XMLAttributes set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SpeciesReferenceGlyph::writeAttributes(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.  For example:
   *
   *   SBase::writeAttributes(stream);
   *   stream.writeAttribute( \'id\'  , mId   );
   *   stream.writeAttribute( \'name\', mName );
   *   ...
   */ /* libsbml-internal */ public
";


%typemap(csimports) ReferenceGlyph "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{layout}
 *
@htmlinclude pkg-marker-layout.html The %ReferenceGlyph is used by the &ldquo;layout&rdquo;
 * package to connect a GraphicalObject and a GeneralGlyph.
 *
 * The ReferenceGlyph element describes the graphical connection between an
 * arbitrary GraphicalObject (or derived element) and a GeneralGlyph (which
 * would be an arrow or some curve in most cases). A ReferenceGlyph inherits
 * from GraphicalObject. Additionally it has a mandatory attribute \'glyph\'
 * and two optional attributes \'reference\' and \'role\'. Optionally, the
 * ReferenceGlyph also has an element \'curve\'.  The ReferenceGlyph should
 * either contain a bounding box or a curve specification.  If both are
 * given, the bounding box should be ignored.
 */
"


%csmethodmodifiers ReferenceGlyph::ReferenceGlyph(unsigned int level      = LayoutExtension::getDefaultLevel(), unsigned int version    = LayoutExtension::getDefaultVersion(), unsigned int pkgVersion = LayoutExtension::getDefaultPackageVersion()) "
/**
   * Creates a new ReferenceGlyph with the given SBML level, version and
   * package version.  The id if the associated 
   * reference and the id of the associated  glyph are set to the
   * empty string.  The role is set to empty.
   */ public
";


%csmethodmodifiers ReferenceGlyph::ReferenceGlyph(LayoutPkgNamespaces* layoutns) "
/**
   * Ctor.
   */ public
";


%csmethodmodifiers ReferenceGlyph::ReferenceGlyph(LayoutPkgNamespaces* layoutns, const std::string& sid, const std::string& referenceId, const std::string& glyphId, const std::string& role ) "
/**
   * Creates a new ReferenceGlyph.  The id is given as the first
   * argument, the id of the associated reference is given as the
   * second argument.  The third argument is the id of the associated
   * glpyh and the fourth argument is the role.
   */ public
";


%csmethodmodifiers ReferenceGlyph::ReferenceGlyph(const XMLNode& node, unsigned int l2version=4) "
/**
   * Creates a new ReferenceGlyph from the given XMLNode
   */ public
";


%csmethodmodifiers ReferenceGlyph::ReferenceGlyph(const ReferenceGlyph& source) "
/**
   * Copy constructor.
   */ public
";


%csmethodmodifiers ReferenceGlyph::getAllElements(ElementFilter* filter=NULL) "
/**
   * Returns a List of all child SBase objects, including those nested to an
   * arbitrary depth
   *
   * @return a List* of pointers to all children objects.
   */ public
";


%csmethodmodifiers ReferenceGlyph::renameSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames all the @c SIdRef attributes on this element, including any
   * found in MathML content (if such exists).
   *
   * This method works by looking at all attributes and (if appropriate)
   * mathematical formulas, comparing the identifiers to the value of @p
   * oldid.  If any matches are found, the matching identifiers are replaced
   * with @p newid.  The method does @em not descend into child elements.
   *
   * @param oldid the old identifier
   * @param newid the new identifier
   */ public
";


%csmethodmodifiers ReferenceGlyph::getGlyphId() const "
/**
   * Returns the id of the associated glyph.
   */ public
";


%csmethodmodifiers ReferenceGlyph::setGlyphId(const std::string& glyphId) "
/**
   * Sets the id of the associated glyph.
   */ public
";


%csmethodmodifiers ReferenceGlyph::getReferenceId() const "
/**
   * Returns the id of the associated sbml reference.
   */ public
";


%csmethodmodifiers ReferenceGlyph::setReferenceId(const std::string& id) "
/**
   * Sets the id of the associated sbml reference.
   */ public
";


%csmethodmodifiers ReferenceGlyph::getRole() const "
/**
   * Returns a string representation of the role.
   */ public
";


%csmethodmodifiers ReferenceGlyph::setRole(const std::string& role) "
/**
   * Sets the role.
   */ public
";


%csmethodmodifiers ReferenceGlyph::getCurve "
/**
   * Returns the curve object for the reference glyph
   */ public
";


%csmethodmodifiers ReferenceGlyph::getCurve() const "
/**
   * Returns the curve object for the reference glyph
   */ public
";


%csmethodmodifiers ReferenceGlyph::setCurve(const Curve* curve) "
/**
   * Sets the curve object for the reference glyph.
   */ public
";


%csmethodmodifiers ReferenceGlyph::isSetCurve() const "
/**
   * Returns true if the curve consists of one or more segments.
   */ public
";


%csmethodmodifiers ReferenceGlyph::getCurveExplicitlySet() const "
/** */ public
";


%csmethodmodifiers ReferenceGlyph::isSetGlyphId() const "
/**
   * Returns true if the id of the associated glpyh is not the
   * empty string.
   */ public
";


%csmethodmodifiers ReferenceGlyph::isSetReferenceId() const "
/**
   * Returns true if the id of the associated reference is not the
   * empty string.
   */ public
";


%csmethodmodifiers ReferenceGlyph::isSetRole() const "
/**
   * Returns true of role is different from the empty string.
   */ public
";


%csmethodmodifiers ReferenceGlyph::initDefaults "
/**
   * Calls initDefaults on GraphicalObject 
   */ public
";


%csmethodmodifiers ReferenceGlyph::createLineSegment "
/**
   * Creates a new LineSegment object, adds it to the end of the list of
   * curve segment objects of the curve and returns a reference to the
   * newly created object.
   */ public
";


%csmethodmodifiers ReferenceGlyph::createCubicBezier "
/**
   * Creates a new CubicBezier object, adds it to the end of the list of
   * curve segment objects of the curve and returns a reference to the
   * newly created object.
   */ public
";


%csmethodmodifiers ReferenceGlyph::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.  For example:
   *
   *   SBase::writeElements(stream);
   *   mReactants.write(stream);
   *   mProducts.write(stream);
   *   ...
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ReferenceGlyph::getElementName() const "
/**
   * Returns the XML element name of
   * this SBML object.
   */ public
";


%csmethodmodifiers ReferenceGlyph::clone() const "
/**
   * Creates and returns a deep copy of this ReferenceGlyph.
   * 
   * @return a (deep) copy of this ReferenceGlyph.
   */ public
";


%csmethodmodifiers ReferenceGlyph::getTypeCode() const "
/**
   * Returns the libSBML type code of this object instance.
   *
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object:
   * @link libsbmlcs.libsbml.SBML_LAYOUT_REFERENCEGLYPH SBML_LAYOUT_REFERENCEGLYPH@endlink
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers ReferenceGlyph::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor.
   *
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether or not the Visitor would like to visit the SBML object\'s next
   * sibling object (if available).
   */ public
";


%csmethodmodifiers ReferenceGlyph::toXML() const "
/**
    * Creates an XMLNode object from this.
    */ public
";


%csmethodmodifiers ReferenceGlyph::setSBMLDocument(SBMLDocument* d) "
/**
   * Sets the parent SBMLDocument of this SBML object.
   *
   * @param d the SBMLDocument object to use
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ReferenceGlyph::connectToChild "
/**
   * Sets this SBML object to child SBML objects (if any).
   * (Creates a child-parent relationship by the parent)
   *
   * Subclasses must override this function if they define
   * one ore more child elements.
   * Basically, this function needs to be called in
   * constructor, copy constructor, assignment operator.
   *
   * @see setSBMLDocument
   * @see enablePackageInternal
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ReferenceGlyph::enablePackageInternal(const std::string& pkgURI, const std::string& pkgPrefix, bool flag) "
/**
   * Enables/Disables the given package with this element and child
   * elements (if any).
   * (This is an internal implementation for enablePakcage function)
   *
   * @note Subclasses in which one or more child elements are defined
   * must override this function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ReferenceGlyph::createObject(XMLInputStream& stream) "
/**
   * Create and return an SBML object of this class, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ReferenceGlyph::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ReferenceGlyph::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Subclasses should override this method to read values from the given
   * XMLAttributes set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ReferenceGlyph::writeAttributes(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.  For example:
   *
   *   SBase::writeAttributes(stream);
   *   stream.writeAttribute( \'id\'  , mId   );
   *   stream.writeAttribute( \'name\', mName );
   *   ...
   */ /* libsbml-internal */ public
";


%typemap(csimports) GeneralGlyph "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{layout}
 *
@htmlinclude pkg-marker-layout.html The %GeneralGlyph is used by the &ldquo;layout&rdquo;
 * package to represent any SBML object.
 *
 * The GeneralGlyph is used to facilitate the representation of elements
 * other than Compartment, Species and Reaction and thus can be used for the
 * display of relationships of Rule or elements defined by other SBML
 * packages. It closely follows the structure of the ReactionGlyph.
 * GeneralGlyph is defined to have an optional attribute reference as well as
 * the elements curve, listOfReferenceGlyphs and listOfSubGlyphs.
 */
"


%typemap(csimports) ListOfReferenceGlyphs "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{layout}
 *
@htmlinclude pkg-marker-layout.html Implementation of the %ListOfReferenceGlyphs construct
 * from the &ldquo;layout&rdquo; package.
 * 
 * The ListOfReferenceGlyphs is a container for the ReferenceGlyph elements of a GeneralGlyph.
 * 
 * *
 * 
 * The various ListOf___ classes in SBML are merely containers used for
 * organizing the main components of an SBML model.  All are derived from
 * the abstract class SBase, and inherit the various attributes and
 * subelements of SBase, such as \'metaid\' as and \'annotation\'.  The
 * ListOf___ classes do not add any attributes of their own.
 *
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 *
 * @htmlinclude listof-illustration.html
 *
 * Readers may wonder about the motivations for using the ListOf___
 * containers.  A simpler approach in XML might be to place the components
 * all directly at the top level of the model definition.  The choice made
 * in SBML is to group them within XML elements named after
 * ListOf<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from SBase means that software tools can add information @em about
 * the lists themselves into each list container\'s \'annotation\'.
 * 
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 *
 *
 *
 * @see ReferenceGlyph
 */
"


%csmethodmodifiers ListOfReferenceGlyphs::clone() const "
/**
   * Creates and returns a deep copy of this ListOfReferenceGlyphs.
   * 
   * @return a (deep) copy of this ListOfReferenceGlyphs.
   */ public
";


%csmethodmodifiers ListOfReferenceGlyphs::ListOfReferenceGlyphs(unsigned int level      = LayoutExtension::getDefaultLevel(), unsigned int version    = LayoutExtension::getDefaultVersion(), unsigned int pkgVersion = LayoutExtension::getDefaultPackageVersion()) "
/**
   * Ctor.
   */ public
";


%csmethodmodifiers ListOfReferenceGlyphs::ListOfReferenceGlyphs(LayoutPkgNamespaces* layoutns) "
/**
   * Ctor.
   */ public
";


%csmethodmodifiers ListOfReferenceGlyphs::getItemTypeCode() const "
/**
   * Returns the libSBML type code for the SBML objects
   * contained in this ListOf object.
   * 
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for objects contained in this list:
   * @link libsbmlcs.libsbml.SBML_LAYOUT_REFERENCEGLYPH SBML_LAYOUT_REFERENCEGLYPH@endlink (default).
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers ListOfReferenceGlyphs::getElementName() const "
/**
   * Returns the XML element name of
   * this SBML object.
   */ public
";


%csmethodmodifiers ListOfReferenceGlyphs::get(unsigned int n) "
/**
   * Get a ReferenceGlyph from the ListOfReferenceGlyphs.
   *
   * @param n the index number of the ReferenceGlyph to get.
   * 
   * @return the nth ReferenceGlyph in this ListOfReferenceGlyphs.
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfReferenceGlyphs::get "
/**
   * Get a ReferenceGlyph from the ListOfReferenceGlyphs.
   *
   * @param n the index number of the ReferenceGlyph to get.
   * 
   * @return the nth ReferenceGlyph in this ListOfReferenceGlyphs.
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfReferenceGlyphs::get(const std::string& sid) "
/**
   * Get a ReferenceGlyph from the ListOfReferenceGlyphs
   * based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the ReferenceGlyph to get.
   * 
   * @return ReferenceGlyph in this ListOfReferenceGlyphs
   * with the given @p sid or @c null if no such
   * ReferenceGlyph exists.
   *
   * @see get(long n)
   * @see size()
   */ public
";


%csmethodmodifiers ListOfReferenceGlyphs::get(const std::string& sid) const "
/**
   * Get a ReferenceGlyph from the ListOfReferenceGlyphs
   * based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the ReferenceGlyph to get.
   * 
   * @return ReferenceGlyph in this ListOfReferenceGlyphs
   * with the given @p sid or @c null if no such
   * ReferenceGlyph exists.
   *
   * @see get(long n)
   * @see size()
   */ public
";


%csmethodmodifiers ListOfReferenceGlyphs::remove(unsigned int n) "
/**
   * Removes the nth item from this ListOfReferenceGlyphs items and returns a pointer to
   * it.
   *
   * The caller owns the returned item and is responsible for deleting it.
   *
   * @param n the index of the item to remove
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfReferenceGlyphs::remove(const std::string& sid) "
/**
   * Removes item in this ListOfReferenceGlyphs items with the given identifier.
   *
   * The caller owns the returned item and is responsible for deleting it.
   * If none of the items in this list have the identifier @p sid, then @c
   * null is returned.
   *
   * @param sid the identifier of the item to remove
   *
   * @return the item removed.  As mentioned above, the caller owns the
   * returned item.
   */ public
";


%csmethodmodifiers ListOfReferenceGlyphs::toXML() const "
/**
    * Creates an XMLNode object from this.
    */ public
";


%csmethodmodifiers ListOfReferenceGlyphs::createObject(XMLInputStream& stream) "
/**
   * Create and return an SBML object of this class, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers GeneralGlyph::GeneralGlyph(unsigned int level      = LayoutExtension::getDefaultLevel(), unsigned int version    = LayoutExtension::getDefaultVersion(), unsigned int pkgVersion = LayoutExtension::getDefaultPackageVersion()) "
/**
   * Creates a new GeneralGlyph.  The list of reference glyph and subglyphs is
   * empty and the id of the associated element is set to the empty
   * string.
   */ public
";


%csmethodmodifiers GeneralGlyph::GeneralGlyph(LayoutPkgNamespaces* layoutns) "
/**
   * Creates a new GeneralGlyph with the given LayoutPkgNamespaces object.
   */ public
";


%csmethodmodifiers GeneralGlyph::GeneralGlyph(LayoutPkgNamespaces* layoutns, const std::string& id) "
/**
   * Creates a glyph with the given LayoutPkgNamespaces and id.
   *
   * (FOR BACKWARD COMPATIBILITY)
   *
   */ public
";


%csmethodmodifiers GeneralGlyph::GeneralGlyph(LayoutPkgNamespaces* layoutns, const std::string& id, const std::string& referenceId) "
/**
   * Creates a glyph with the given LayoutPkgNamespaces, id and set the id of the
   * associated element to the second argument.
   *
   * (FOR BACKWARD COMPATIBILITY)
   *
   */ public
";


%csmethodmodifiers GeneralGlyph::GeneralGlyph(const XMLNode& node, unsigned int l2version = 4) "
/**
   * Creates a new GeneralGlyph from the given XMLNode
   *
   * (FOR BACKWARD COMPATIBILITY)
   *
   */ public
";


%csmethodmodifiers GeneralGlyph::GeneralGlyph(const GeneralGlyph& source) "
/**
   * Copy constructor.
   */ public
";


%csmethodmodifiers GeneralGlyph::getAllElements(ElementFilter* filter=NULL) "
/**
   * Returns a List of all child SBase objects, including those nested to an
   * arbitrary depth
   *
   * @return a List* of pointers to all children objects.
   */ public
";


%csmethodmodifiers GeneralGlyph::renameSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames all the @c SIdRef attributes on this element, including any
   * found in MathML content (if such exists).
   *
   * This method works by looking at all attributes and (if appropriate)
   * mathematical formulas, comparing the identifiers to the value of @p
   * oldid.  If any matches are found, the matching identifiers are replaced
   * with @p newid.  The method does @em not descend into child elements.
   *
   * @param oldid the old identifier
   * @param newid the new identifier
   */ public
";


%csmethodmodifiers GeneralGlyph::getReferenceId() const "
/**
   * Returns the id of the associated element.
   */ public
";


%csmethodmodifiers GeneralGlyph::setReferenceId(const std::string& id) "
/**
   * Sets the id of the associated element.
   */ public
";


%csmethodmodifiers GeneralGlyph::isSetReferenceId() const "
/**
   * Returns true if the id of the associated element is not the empty
   * string.
   */ public
";


%csmethodmodifiers GeneralGlyph::getListOfReferenceGlyphs() const "
/**
   * Returns the ListOf object that hold the reference glyphs.
   */ public
";


%csmethodmodifiers GeneralGlyph::getListOfReferenceGlyphs "
/**
   * Returns the ListOf object that hold the reference glyphs.
   */ public
";


%csmethodmodifiers GeneralGlyph::getListOfSubGlyphs() const "
/**
   * Returns the ListOf object that hold the sub glyphs.
   */ public
";


%csmethodmodifiers GeneralGlyph::getListOfSubGlyphs "
/**
   * Returns the ListOf object that hold the sub glyphs.
   */ public
";


%csmethodmodifiers GeneralGlyph::getReferenceGlyph "
/**
   * Returns the reference glyph with the given index.
   * If the index is invalid, @c null is returned.
   */ public
";


%csmethodmodifiers GeneralGlyph::getReferenceGlyph(unsigned int index) "
/**
   * Returns the reference glyph with the given index.
   * If the index is invalid, @c null is returned.
   */ public
";


%csmethodmodifiers GeneralGlyph::getSubGlyph "
/**
   * Returns the sub glyph with the given index.
   * If the index is invalid, @c null is returned.
   */ public
";


%csmethodmodifiers GeneralGlyph::getSubGlyph(unsigned int index) "
/**
   * Returns the sub glyph with the given index.
   * If the index is invalid, @c null is returned.
   */ public
";


%csmethodmodifiers GeneralGlyph::addReferenceGlyph(const ReferenceGlyph* glyph) "
/**
   * Adds a new reference glyph to the list.
   */ public
";


%csmethodmodifiers GeneralGlyph::addSubGlyph(const GraphicalObject* glyph) "
/**
   * Adds a new subglyph to the list.
   */ public
";


%csmethodmodifiers GeneralGlyph::getNumReferenceGlyphs() const "
/**
   * Returns the number of reference glyph objects.
   */ public
";


%csmethodmodifiers GeneralGlyph::getNumSubGlyphs() const "
/**
   * Returns the number of subglyph objects.
   */ public
";


%csmethodmodifiers GeneralGlyph::initDefaults "
/**
   * Calls initDefaults from GraphicalObject.
   */ public
";


%csmethodmodifiers GeneralGlyph::getCurve() const "
/**
   * Returns the curve object for the reaction glyph
   */ public
";


%csmethodmodifiers GeneralGlyph::getCurve "
/**
   * Returns the curve object for the reaction glyph
   */ public
";


%csmethodmodifiers GeneralGlyph::setCurve(const Curve* curve) "
/**
   * Sets the curve object for the reaction glyph.
   */ public
";


%csmethodmodifiers GeneralGlyph::isSetCurve() const "
/**
   * Returns true if the curve consists of one or more segments.
   */ public
";


%csmethodmodifiers GeneralGlyph::getCurveExplicitlySet() const "
/** */ public
";


%csmethodmodifiers GeneralGlyph::createReferenceGlyph "
/**
   * Creates a new ReferenceGlyph object, adds it to the end of the
   * list of reference objects and returns a reference to the newly
   * created object.
   */ public
";


%csmethodmodifiers GeneralGlyph::createLineSegment "
/**
   * Creates a new LineSegment object, adds it to the end of the list of
   * curve segment objects of the curve and returns a reference to the
   * newly created object.
   */ public
";


%csmethodmodifiers GeneralGlyph::createCubicBezier "
/**
   * Creates a new CubicBezier object, adds it to the end of the list of
   * curve segment objects of the curve and returns a reference to the
   * newly created object.
   */ public
";


%csmethodmodifiers GeneralGlyph::removeReferenceGlyph(unsigned int index) "
/**
   * Remove the reference glyph with the given index.
   * A pointer to the object is returned. If no object has been removed, null
   * is returned.
   */ public
";


%csmethodmodifiers GeneralGlyph::removeSubGlyph(unsigned int index) "
/**
   * Remove the subglyph with the given index.
   * A pointer to the object is returned. If no object has been removed, null
   * is returned.
   */ public
";


%csmethodmodifiers GeneralGlyph::removeReferenceGlyph(const std::string& id) "
/**
   * Remove the reference glyph with the given @p id.
   * A pointer to the object is returned. If no object has been removed, null
   * is returned.
   */ public
";


%csmethodmodifiers GeneralGlyph::removeSubGlyph(const std::string& id) "
/**
   * Remove the subglyph with the given @p id.
   * A pointer to the object is returned. If no object has been removed, null
   * is returned.
   */ public
";


%csmethodmodifiers GeneralGlyph::getIndexForReferenceGlyph(const std::string& id) const "
/**
   * Returns the index of the reference glyph with the given @p id.
   * If the glyph does not contain a reference glyph with this
   * id, @if cpp numeric_limits<long>::max() @endif@if notcpp the
   * value of the maximum long integer@endif is returned as an indicator.
   */ public
";


%csmethodmodifiers GeneralGlyph::getIndexForSubGlyph(const std::string& id) const "
/**
   * Returns the index of the subglyph with the given @p id.
   * If the glyph does not contain a subglyph with this
   * id, @if cpp numeric_limits<long>::max() @endif@if notcpp the
   * value of the maximum long integer@endif is returned as an indicator.
   */ public
";


%csmethodmodifiers GeneralGlyph::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.  For example:
   *
   *   SBase::writeElements(stream);
   *   mReactants.write(stream);
   *   mProducts.write(stream);
   *   ...
   */ /* libsbml-internal */ public
";


%csmethodmodifiers GeneralGlyph::getElementName() const "
/**
   * Returns the XML element name of
   * this SBML object.
   */ public
";


%csmethodmodifiers GeneralGlyph::clone() const "
/**
   * Creates and returns a deep copy of this GeneralGlyph.
   * 
   * @return a (deep) copy of this GeneralGlyph.
   */ public
";


%csmethodmodifiers GeneralGlyph::getTypeCode() const "
/**
   * Returns the libSBML type code of this object instance.
   *
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object:
   * @link libsbmlcs.libsbml.SBML_LAYOUT_GENERALGLYPH SBML_LAYOUT_GENERALGLYPH@endlink
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers GeneralGlyph::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor.
   *
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether or not the Visitor would like to visit the SBML object\'s next
   * sibling object (if available).
   */ public
";


%csmethodmodifiers GeneralGlyph::toXML() const "
/**
    * Creates an XMLNode object from this.
    */ public
";


%csmethodmodifiers GeneralGlyph::setSBMLDocument(SBMLDocument* d) "
/**
   * Sets the parent SBMLDocument of this SBML object.
   *
   * @param d the SBMLDocument object to use
   */ /* libsbml-internal */ public
";


%csmethodmodifiers GeneralGlyph::connectToChild "
/**
   * Sets this SBML object to child SBML objects (if any).
   * (Creates a child-parent relationship by the parent)
   *
   * Subclasses must override this function if they define
   * one ore more child elements.
   * Basically, this function needs to be called in
   * constructor, copy constructor, assignment operator.
   *
   * @see setSBMLDocument
   * @see enablePackageInternal
   */ /* libsbml-internal */ public
";


%csmethodmodifiers GeneralGlyph::enablePackageInternal(const std::string& pkgURI, const std::string& pkgPrefix, bool flag) "
/**
   * Enables/Disables the given package with this element and child
   * elements (if any).
   * (This is an internal implementation for enablePakcage function)
   *
   * @note Subclasses in which one or more child elements are defined
   * must override this function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers GeneralGlyph::createObject(XMLInputStream& stream) "
/**
   * Create and return an SBML object of this class, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers GeneralGlyph::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers GeneralGlyph::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Subclasses should override this method to read values from the given
   * XMLAttributes set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers GeneralGlyph::writeAttributes(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.  For example:
   *
   *   SBase::writeAttributes(stream);
   *   stream.writeAttribute( \'id\'  , mId   );
   *   stream.writeAttribute( \'name\', mName );
   *   ...
   */ /* libsbml-internal */ public
";


%typemap(csimports) ReactionGlyph "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{layout}
 *
@htmlinclude pkg-marker-layout.html The %ReactionGlyph is used to represent Reaction
 * elements in the layout.
 *
 * Analogous to how a Reaction object has to at least have one reactant or
 * product, the ReactionGlyph has to at least have one SpeciesReferenceGlyph
 * stored in the ListOfSpeciesReferenceGlyphs. Figure 12 on the following
 * page provides the UML diagram for the class definition.  The ReactionGlyph
 * inherits from GraphicalObject. In addition to the attributes inherited
 * from GraphicalObject, the ReactionGlyph is described by an attribute
 * reaction, a Curve element and a listOfSpeciesReferenceGlyphs element.  The
 * Curve describes the center section of a ReactionGlyph. The center section
 * is frequently used by tools to separate the point where substrates arcs
 * come together, from the point where product arcs split off. The Curve is
 * optional, and when not present the dimensions of the inherited BoundingBox
 * describes the center section, by storing its position and dimension.
 */
"


%typemap(csimports) ListOfSpeciesReferenceGlyphs "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{layout}
 *
@htmlinclude pkg-marker-layout.html Implementation of the %ListOfSpeciesReferenceGlyphs
 * construct from the &ldquo;layout&rdquo; package.
 * 
 * The ListOfSpeciesReferenceGlyphs is a container for the SpeciesReferenceGlyphs elements of a ReactionGlyph.
 * 
 * *
 * 
 * The various ListOf___ classes in SBML are merely containers used for
 * organizing the main components of an SBML model.  All are derived from
 * the abstract class SBase, and inherit the various attributes and
 * subelements of SBase, such as \'metaid\' as and \'annotation\'.  The
 * ListOf___ classes do not add any attributes of their own.
 *
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 *
 * @htmlinclude listof-illustration.html
 *
 * Readers may wonder about the motivations for using the ListOf___
 * containers.  A simpler approach in XML might be to place the components
 * all directly at the top level of the model definition.  The choice made
 * in SBML is to group them within XML elements named after
 * ListOf<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from SBase means that software tools can add information @em about
 * the lists themselves into each list container\'s \'annotation\'.
 * 
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 *
 *
 *
 * @see SpeciesReferenceGlyph
 */
"


%csmethodmodifiers ListOfSpeciesReferenceGlyphs::clone() const "
/**
   * Creates and returns a deep copy of this ListOfSpeciesReferenceGlyphs.
   * 
   * @return a (deep) copy of this ListOfSpeciesReferenceGlyphs.
   */ public
";


%csmethodmodifiers ListOfSpeciesReferenceGlyphs::ListOfSpeciesReferenceGlyphs(unsigned int level      = LayoutExtension::getDefaultLevel(), unsigned int version    = LayoutExtension::getDefaultVersion(), unsigned int pkgVersion = LayoutExtension::getDefaultPackageVersion()) "
/**
   * Ctor.
   */ public
";


%csmethodmodifiers ListOfSpeciesReferenceGlyphs::ListOfSpeciesReferenceGlyphs(LayoutPkgNamespaces* layoutns) "
/**
   * Ctor.
   */ public
";


%csmethodmodifiers ListOfSpeciesReferenceGlyphs::getItemTypeCode() const "
/**
   * Returns the libSBML type code for the SBML objects
   * contained in this ListOf object.
   * 
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for objects contained in this list:
   * @link libsbmlcs.libsbml.SBML_LAYOUT_SPECIESREFERENCEGLYPH SBML_LAYOUT_SPECIESREFERENCEGLYPH@endlink (default).
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers ListOfSpeciesReferenceGlyphs::getElementName() const "
/**
   * Returns the XML element name of
   * this SBML object.
   */ public
";


%csmethodmodifiers ListOfSpeciesReferenceGlyphs::get(unsigned int n) "
/**
   * Get a SpeciesReferenceGlyph from the ListOfSpeciesReferenceGlyphs.
   *
   * @param n the index number of the SpeciesReferenceGlyph to get.
   * 
   * @return the nth SpeciesReferenceGlyph in this ListOfSpeciesReferenceGlyphs.
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfSpeciesReferenceGlyphs::get "
/**
   * Get a SpeciesReferenceGlyph from the ListOfSpeciesReferenceGlyphs.
   *
   * @param n the index number of the SpeciesReferenceGlyph to get.
   * 
   * @return the nth SpeciesReferenceGlyph in this ListOfSpeciesReferenceGlyphs.
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfSpeciesReferenceGlyphs::get(const std::string& sid) "
/**
   * Get a SpeciesReferenceGlyph from the ListOfSpeciesReferenceGlyphs
   * based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the SpeciesReferenceGlyph to get.
   * 
   * @return SpeciesReferenceGlyph in this ListOfSpeciesReferenceGlyphs
   * with the given @p sid or @c null if no such
   * SpeciesReferenceGlyph exists.
   *
   * @see get(long n)
   * @see size()
   */ public
";


%csmethodmodifiers ListOfSpeciesReferenceGlyphs::get(const std::string& sid) const "
/**
   * Get a SpeciesReferenceGlyph from the ListOfSpeciesReferenceGlyphs
   * based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the SpeciesReferenceGlyph to get.
   * 
   * @return SpeciesReferenceGlyph in this ListOfSpeciesReferenceGlyphs
   * with the given @p sid or @c null if no such
   * SpeciesReferenceGlyph exists.
   *
   * @see get(long n)
   * @see size()
   */ public
";


%csmethodmodifiers ListOfSpeciesReferenceGlyphs::remove(unsigned int n) "
/**
   * Removes the nth item from this ListOfSpeciesReferenceGlyphs items and returns a pointer to
   * it.
   *
   * The caller owns the returned item and is responsible for deleting it.
   *
   * @param n the index of the item to remove
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfSpeciesReferenceGlyphs::remove(const std::string& sid) "
/**
   * Removes item in this ListOfSpeciesReferenceGlyphs items with the given identifier.
   *
   * The caller owns the returned item and is responsible for deleting it.
   * If none of the items in this list have the identifier @p sid, then @c
   * null is returned.
   *
   * @param sid the identifier of the item to remove
   *
   * @return the item removed.  As mentioned above, the caller owns the
   * returned item.
   */ public
";


%csmethodmodifiers ListOfSpeciesReferenceGlyphs::toXML() const "
/**
    * Creates an XMLNode object from this.
    */ public
";


%csmethodmodifiers ListOfSpeciesReferenceGlyphs::createObject(XMLInputStream& stream) "
/**
   * Create and return an SBML object of this class, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ReactionGlyph::ReactionGlyph(unsigned int level      = LayoutExtension::getDefaultLevel(), unsigned int version    = LayoutExtension::getDefaultVersion(), unsigned int pkgVersion = LayoutExtension::getDefaultPackageVersion()) "
/**
   * Creates a new ReactionGlyph.  The list of species reference glyph is
   * empty and the id of the associated reaction is set to the empty
   * string.
   */ public
";


%csmethodmodifiers ReactionGlyph::ReactionGlyph(LayoutPkgNamespaces* layoutns) "
/**
   * Creates a new ReactionGlyph with the given LayoutPkgNamespaces object.
   */ public
";


%csmethodmodifiers ReactionGlyph::ReactionGlyph(LayoutPkgNamespaces* layoutns, const std::string& id) "
/**
   * Creates a ResctionGlyph with the given LayoutPkgNamespaces and id.
   *
   * (FOR BACKWARD COMPATIBILITY)
   *
   */ public
";


%csmethodmodifiers ReactionGlyph::ReactionGlyph(LayoutPkgNamespaces* layoutns, const std::string& id, const std::string& reactionId) "
/**
   * Creates a ResctionGlyph with the given LayoutPkgNamespaces, id and set the id of the
   * associated reaction to the second argument.
   *
   * (FOR BACKWARD COMPATIBILITY)
   *
   */ public
";


%csmethodmodifiers ReactionGlyph::ReactionGlyph(const XMLNode& node, unsigned int l2version = 4) "
/**
   * Creates a new ReactionGlyph from the given XMLNode
   *
   * (FOR BACKWARD COMPATIBILITY)
   *
   */ public
";


%csmethodmodifiers ReactionGlyph::ReactionGlyph(const ReactionGlyph& source) "
/**
   * Copy constructor.
   */ public
";


%csmethodmodifiers ReactionGlyph::getReactionId() const "
/**
   * Returns the id of the associated reaction.
   */ public
";


%csmethodmodifiers ReactionGlyph::setReactionId(const std::string& id) "
/**
   * Sets the id of the associated reaction.
   */ public
";


%csmethodmodifiers ReactionGlyph::isSetReactionId() const "
/**
   * Returns true if the id of the associated reaction is not the empty
   * string.
   */ public
";


%csmethodmodifiers ReactionGlyph::getListOfSpeciesReferenceGlyphs() const "
/**
   * Returns the ListOf object that hold the species reference glyphs.
   */ public
";


%csmethodmodifiers ReactionGlyph::getListOfSpeciesReferenceGlyphs "
/**
   * Returns the ListOf object that hold the species reference glyphs.
   */ public
";


%csmethodmodifiers ReactionGlyph::getSpeciesReferenceGlyph "
/**
   * Returns the species reference glyph with the given index.
   * If the index is invalid, @c null is returned.
   */ public
";


%csmethodmodifiers ReactionGlyph::getSpeciesReferenceGlyph(unsigned int index) "
/**
   * Returns the species reference glyph with the given index.
   * If the index is invalid, @c null is returned.
   */ public
";


%csmethodmodifiers ReactionGlyph::addSpeciesReferenceGlyph(const SpeciesReferenceGlyph* glyph) "
/**
   * Adds a new species reference glyph to the list.
   */ public
";


%csmethodmodifiers ReactionGlyph::getNumSpeciesReferenceGlyphs() const "
/**
   * Returns the number of species reference glyph objects.
   */ public
";


%csmethodmodifiers ReactionGlyph::initDefaults "
/**
   * Calls initDefaults from GraphicalObject.
   */ public
";


%csmethodmodifiers ReactionGlyph::getAllElements(ElementFilter* filter=NULL) "
/**
   * Returns a List of all child SBase objects, including those nested to an
   * arbitrary depth
   *
   * @return a List* of pointers to all children objects.
   */ public
";


%csmethodmodifiers ReactionGlyph::renameSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames all the @c SIdRef attributes on this element, including any
   * found in MathML content (if such exists).
   *
   * This method works by looking at all attributes and (if appropriate)
   * mathematical formulas, comparing the identifiers to the value of @p
   * oldid.  If any matches are found, the matching identifiers are replaced
   * with @p newid.  The method does @em not descend into child elements.
   *
   * @param oldid the old identifier
   * @param newid the new identifier
   */ public
";


%csmethodmodifiers ReactionGlyph::getCurve() const "
/**
   * Returns the curve object for the reaction glyph
   */ public
";


%csmethodmodifiers ReactionGlyph::getCurve "
/**
   * Returns the curve object for the reaction glyph
   */ public
";


%csmethodmodifiers ReactionGlyph::setCurve(const Curve* curve) "
/**
   * Sets the curve object for the reaction glyph.
   */ public
";


%csmethodmodifiers ReactionGlyph::isSetCurve() const "
/**
   * Returns true if the curve consists of one or more segments.
   */ public
";


%csmethodmodifiers ReactionGlyph::getCurveExplicitlySet() const "
/** */ public
";


%csmethodmodifiers ReactionGlyph::createSpeciesReferenceGlyph "
/**
   * Creates a new SpeciesReferenceGlyph object, adds it to the end of the
   * list of species reference objects and returns a reference to the newly
   * created object.
   */ public
";


%csmethodmodifiers ReactionGlyph::createLineSegment "
/**
   * Creates a new LineSegment object, adds it to the end of the list of
   * curve segment objects of the curve and returns a reference to the
   * newly created object.
   */ public
";


%csmethodmodifiers ReactionGlyph::createCubicBezier "
/**
   * Creates a new CubicBezier object, adds it to the end of the list of
   * curve segment objects of the curve and returns a reference to the
   * newly created object.
   */ public
";


%csmethodmodifiers ReactionGlyph::removeSpeciesReferenceGlyph(unsigned int index) "
/**
   * Remove the species reference glyph with the given index.
   * A pointer to the object is returned. If no object has been removed, null
   * is returned.
   */ public
";


%csmethodmodifiers ReactionGlyph::removeSpeciesReferenceGlyph(const std::string& id) "
/**
   * Remove the species reference glyph with the given @p id.
   * A pointer to the object is returned. If no object has been removed, null
   * is returned.
   */ public
";


%csmethodmodifiers ReactionGlyph::getIndexForSpeciesReferenceGlyph(const std::string& id) const "
/**
   * Returns the index of the species reference glyph with the given @p id.
   * If the reaction glyph does not contain a species reference glyph with this
   * id, @if cpp numeric_limits<long>::max() @endif@if notcpp the
   * value of the maximum long integer@endif is returned as an indicator.
   */ public
";


%csmethodmodifiers ReactionGlyph::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.  For example:
   *
   *   SBase::writeElements(stream);
   *   mReactants.write(stream);
   *   mProducts.write(stream);
   *   ...
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ReactionGlyph::getElementName() const "
/**
   * Returns the XML element name of
   * this SBML object.
   */ public
";


%csmethodmodifiers ReactionGlyph::clone() const "
/**
   * Creates and returns a deep copy of this ReactionGlyph object.
   * 
   * @return a (deep) copy of this ReactionGlyph.
   */ public
";


%csmethodmodifiers ReactionGlyph::getTypeCode() const "
/**
   * Returns the libSBML type code of this object instance.
   *
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object:
   * @link libsbmlcs.libsbml.SBML_LAYOUT_REACTIONGLYPH SBML_LAYOUT_REACTIONGLYPH@endlink
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers ReactionGlyph::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor.
   *
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether or not the Visitor would like to visit the SBML object\'s next
   * sibling object (if available).
   */ public
";


%csmethodmodifiers ReactionGlyph::toXML() const "
/**
    * Creates an XMLNode object from this.
    */ public
";


%csmethodmodifiers ReactionGlyph::setSBMLDocument(SBMLDocument* d) "
/**
   * Sets the parent SBMLDocument of this SBML object.
   *
   * @param d the SBMLDocument object to use
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ReactionGlyph::connectToChild "
/**
   * Sets this SBML object to child SBML objects (if any).
   * (Creates a child-parent relationship by the parent)
   *
   * Subclasses must override this function if they define
   * one ore more child elements.
   * Basically, this function needs to be called in
   * constructor, copy constructor, assignment operator.
   *
   * @see setSBMLDocument
   * @see enablePackageInternal
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ReactionGlyph::enablePackageInternal(const std::string& pkgURI, const std::string& pkgPrefix, bool flag) "
/**
   * Enables/Disables the given package with this element and child
   * elements (if any).
   * (This is an internal implementation for enablePakcage function)
   *
   * @note Subclasses in which one or more child elements are defined
   * must override this function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ReactionGlyph::createObject(XMLInputStream& stream) "
/**
   * Create and return an SBML object of this class, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ReactionGlyph::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ReactionGlyph::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Subclasses should override this method to read values from the given
   * XMLAttributes set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ReactionGlyph::writeAttributes(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.  For example:
   *
   *   SBase::writeAttributes(stream);
   *   stream.writeAttribute( \'id\'  , mId   );
   *   stream.writeAttribute( \'name\', mName );
   *   ...
   */ /* libsbml-internal */ public
";


%typemap(csimports) SpeciesGlyph "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{layout}
 *
@htmlinclude pkg-marker-layout.html The %SpeciesGlyph represents a Species in the
 * &ldquo;layout&rdquo; package.
 *
 * In addition to the attributes it inherits from GraphicalObject, the
 * SpeciesGlyph object has an optional \'species\' attribute.
 */
"


%csmethodmodifiers SpeciesGlyph::SpeciesGlyph(unsigned int level      = LayoutExtension::getDefaultLevel(), unsigned int version    = LayoutExtension::getDefaultVersion(), unsigned int pkgVersion = LayoutExtension::getDefaultPackageVersion()) "
/**
   * Creates a new SpeciesGlyph with the given SBML level, version, and package version
   * and the id of the associated species set to the empty string.
   */ public
";


%csmethodmodifiers SpeciesGlyph::SpeciesGlyph(LayoutPkgNamespaces* layoutns) "
/**
   * Ctor.
   */ public
";


%csmethodmodifiers SpeciesGlyph::SpeciesGlyph(LayoutPkgNamespaces* layoutns, const std::string& id) "
/**
   * Creates a new SpeciesGlyph with the given @p id. 
   *
   * (FOR BACKWARD COMPATIBILITY)
   *
   */ public
";


%csmethodmodifiers SpeciesGlyph::SpeciesGlyph(LayoutPkgNamespaces* layoutns, const std::string& id, const std::string& speciesId) "
/**
   * Creates a new SpeciesGlyph with the given @p id and the id of the
   * associated species object set to the second argument.
   *
   * (FOR BACKWARD COMPATIBILITY)
   *
   */ public
";


%csmethodmodifiers SpeciesGlyph::SpeciesGlyph(const XMLNode& node, unsigned int l2version=4) "
/**
   * Creates a new SpeciesGlyph from the given XMLNode
   */ public
";


%csmethodmodifiers SpeciesGlyph::SpeciesGlyph(const SpeciesGlyph& source) "
/**
   * Copy constructor.
   */ public
";


%csmethodmodifiers SpeciesGlyph::renameSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames all the @c SIdRef attributes on this element, including any
   * found in MathML content (if such exists).
   *
   * This method works by looking at all attributes and (if appropriate)
   * mathematical formulas, comparing the identifiers to the value of @p
   * oldid.  If any matches are found, the matching identifiers are replaced
   * with @p newid.  The method does @em not descend into child elements.
   *
   * @param oldid the old identifier
   * @param newid the new identifier
   */ public
";


%csmethodmodifiers SpeciesGlyph::getSpeciesId() const "
/**
   * Returns the id of the associated species object.
   */ public
";


%csmethodmodifiers SpeciesGlyph::setSpeciesId(const std::string& id) "
/**
   * Sets the id of the associated species object.
   */ public
";


%csmethodmodifiers SpeciesGlyph::isSetSpeciesId() const "
/**
   * Returns true if the id of the associated species object is not the
   * empty string.
   */ public
";


%csmethodmodifiers SpeciesGlyph::initDefaults "
/**
   * Calls initDefaults from GraphicalObject.
   */ public
";


%csmethodmodifiers SpeciesGlyph::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.  For example:
   *
   *   SBase::writeElements(stream);
   *   mReactants.write(stream);
   *   mProducts.write(stream);
   *   ...
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SpeciesGlyph::getElementName() const "
/**
   * Returns the XML element name of
   * this SBML object.
   */ public
";


%csmethodmodifiers SpeciesGlyph::clone() const "
/**
   * Creates and returns a deep copy of this SpeciesGlyph.
   * 
   * @return a (deep) copy of this SpeciesGlyph.
   */ public
";


%csmethodmodifiers SpeciesGlyph::getTypeCode() const "
/**
   * Returns the libSBML type code of this object instance.
   *
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object:
   * @link libsbmlcs.libsbml.SBML_LAYOUT_SPECIESGLYPH SBML_LAYOUT_SPECIESGLYPH@endlink
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers SpeciesGlyph::toXML() const "
/**
    * Creates an XMLNode object from this.
    */ public
";


%csmethodmodifiers SpeciesGlyph::createObject(XMLInputStream& stream) "
/**
   * Create and return an SBML object of this class, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SpeciesGlyph::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SpeciesGlyph::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Subclasses should override this method to read values from the given
   * XMLAttributes set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers SpeciesGlyph::writeAttributes(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.  For example:
   *
   *   SBase::writeAttributes(stream);
   *   stream.writeAttribute( \'id\'  , mId   );
   *   stream.writeAttribute( \'name\', mName );
   *   ...
   */ /* libsbml-internal */ public
";


%typemap(csimports) TextGlyph "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{layout}
 *
@htmlinclude pkg-marker-layout.html The %TextGlyph class describes the position and
 * dimension of text labels in the &ldquo;layout&rdquo; package.
 *
 * It inherits from GraphicalObject and adds the attributes graphicalObject,
 * text and originOfText.
 */
"


%csmethodmodifiers TextGlyph::TextGlyph(unsigned int level      = LayoutExtension::getDefaultLevel(), unsigned int version    = LayoutExtension::getDefaultVersion(), unsigned int pkgVersion = LayoutExtension::getDefaultPackageVersion()) "
/**
   * Creates a new TextGlyph with the given SBML level, versin and package
   * version. The ids of the associated GraphicalObject and
   * the originOfText are set to the empty string. The actual text is set
   * to the empty string as well.
   */ public
";


%csmethodmodifiers TextGlyph::TextGlyph(LayoutPkgNamespaces* layoutns) "
/**
   * Ctor.
   */ public
";


%csmethodmodifiers TextGlyph::TextGlyph(LayoutPkgNamespaces* layoutns, const std::string& id) "
/**
   * Creates a new TextGlpyh. The id is given as the first argument.
   *
   * (FOR BACKWARD COMPATIBILITY)
   *
   */ public
";


%csmethodmodifiers TextGlyph::TextGlyph(LayoutPkgNamespaces* layoutns, const std::string& id, const std::string& text) "
/**
   * Creates a new TextGlpyh. The id is given as the first argument, the
   * text to be displayed as the second.  All other attirbutes are set to
   * the empty string.
   *
   * (FOR BACKWARD COMPATIBILITY)
   *
   */ public
";


%csmethodmodifiers TextGlyph::TextGlyph(const XMLNode& node, unsigned int l2version=4) "
/**
   * Creates a new TextGlyph from the given XMLNode
   *
   * (FOR BACKWARD COMPATIBILITY)
   *
   */ public
";


%csmethodmodifiers TextGlyph::TextGlyph(const TextGlyph& source) "
/**
   * Copy constructor.
   */ public
";


%csmethodmodifiers TextGlyph::renameSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames all the @c SIdRef attributes on this element, including any
   * found in MathML content (if such exists).
   *
   * This method works by looking at all attributes and (if appropriate)
   * mathematical formulas, comparing the identifiers to the value of @p
   * oldid.  If any matches are found, the matching identifiers are replaced
   * with @p newid.  The method does @em not descend into child elements.
   *
   * @param oldid the old identifier
   * @param newid the new identifier
   */ public
";


%csmethodmodifiers TextGlyph::getText() const "
/**
   * Returns the text to be displayed by the text glyph.
   */ public
";


%csmethodmodifiers TextGlyph::setText(const std::string& text) "
/**
   * Sets the text to be displayed by the text glyph.
   */ public
";


%csmethodmodifiers TextGlyph::getGraphicalObjectId() const "
/**
   * Returns the id of the associated graphical object.
   */ public
";


%csmethodmodifiers TextGlyph::setGraphicalObjectId(const std::string& id) "
/**
   * Sets the id of the associated graphical object.
   */ public
";


%csmethodmodifiers TextGlyph::getOriginOfTextId() const "
/**
   * Returns the id of the origin of text.
   */ public
";


%csmethodmodifiers TextGlyph::setOriginOfTextId(const std::string& orig) "
/**
   * Sets the id of the origin of text.
   */ public
";


%csmethodmodifiers TextGlyph::isSetText() const "
/**
   * Returns true if the text is not the empty string.
   */ public
";


%csmethodmodifiers TextGlyph::isSetOriginOfTextId() const "
/**
   * Returns true if the id of the origin of text is not the empty string.
   */ public
";


%csmethodmodifiers TextGlyph::isSetGraphicalObjectId() const "
/**
   * Returns true if the id of the associated graphical object is not the
   * empty string.
   */ public
";


%csmethodmodifiers TextGlyph::initDefaults "
/**
   * Calls initDefaults from GraphicalObject.
   */ public
";


%csmethodmodifiers TextGlyph::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.  For example:
   *
   *   SBase::writeElements(stream);
   *   mReactants.write(stream);
   *   mProducts.write(stream);
   *   ...
   */ /* libsbml-internal */ public
";


%csmethodmodifiers TextGlyph::getElementName() const "
/**
   * Returns the XML element name of
   * this SBML object.
   */ public
";


%csmethodmodifiers TextGlyph::clone() const "
/**
   * Creates and returns a deep copy of this TextGlyph.
   * 
   * @return a (deep) copy of this TextGlyph.
   */ public
";


%csmethodmodifiers TextGlyph::getTypeCode() const "
/**
   * Returns the libSBML type code of this object instance.
   *
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object:
   * @link libsbmlcs.libsbml.SBML_LAYOUT_TEXTGLYPH SBML_LAYOUT_TEXTGLYPH@endlink
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers TextGlyph::toXML() const "
/**
    * Creates an XMLNode object from this.
    */ public
";


%csmethodmodifiers TextGlyph::createObject(XMLInputStream& stream) "
/**
   * Create and return an SBML object of this class, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers TextGlyph::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers TextGlyph::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Subclasses should override this method to read values from the given
   * XMLAttributes set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers TextGlyph::writeAttributes(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.  For example:
   *
   *   SBase::writeAttributes(stream);
   *   stream.writeAttribute( \'id\'  , mId   );
   *   stream.writeAttribute( \'name\', mName );
   *   ...
   */ /* libsbml-internal */ public
";


%typemap(csimports) Layout "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{layout}
 *
@htmlinclude pkg-marker-layout.html Each Layout object stores a set of layout information
 * for objects in the Model.
 *
 * The Layout class stores layout information for some or all elements of the
 * SBML model as well as additional objects that need not be connected to the
 * model. The Layout has two attributes: id and name. Additionally, a
 * Dimensions element specifies the size of the layout.  The actual layout
 * elements are contained in several lists, namely: a
 * ListOfCompartmentGlyphs, a ListOfSpeciesGlyphs, a ListOfReactionGlyphs, a
 * ListOfTextGlyphs, and a ListOfAdditionalGraphicalObjects. Each of these
 * lists can only occur once, and, if present, are not allowed to be empty.
 */
"


%typemap(csimports) ListOfCompartmentGlyphs "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{layout}
 *
@htmlinclude pkg-marker-layout.html Implementation of the %ListOfCompartmentGlyphs
 * construct from the &ldquo;layout&rdquo; package.
 * 
 * The ListOfCompartmentGlyphs is a container for the CompartmentGlyph elements of a Layout.
 * 
 * *
 * 
 * The various ListOf___ classes in SBML are merely containers used for
 * organizing the main components of an SBML model.  All are derived from
 * the abstract class SBase, and inherit the various attributes and
 * subelements of SBase, such as \'metaid\' as and \'annotation\'.  The
 * ListOf___ classes do not add any attributes of their own.
 *
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 *
 * @htmlinclude listof-illustration.html
 *
 * Readers may wonder about the motivations for using the ListOf___
 * containers.  A simpler approach in XML might be to place the components
 * all directly at the top level of the model definition.  The choice made
 * in SBML is to group them within XML elements named after
 * ListOf<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from SBase means that software tools can add information @em about
 * the lists themselves into each list container\'s \'annotation\'.
 * 
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 *
 *
 *
 * @see CompartmentGlyph
 */
"


%typemap(csimports) ListOfSpeciesGlyphs "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{layout}
 *
@htmlinclude pkg-marker-layout.html Implementation of the %ListOfSpeciesGlyphs construct
 * from the &ldquo;layout&rdquo; package.
 * 
 * The ListOfSpeciesGlyphs is a container for the SpeciesGlyph elements of a Layout.
 * 
 * *
 * 
 * The various ListOf___ classes in SBML are merely containers used for
 * organizing the main components of an SBML model.  All are derived from
 * the abstract class SBase, and inherit the various attributes and
 * subelements of SBase, such as \'metaid\' as and \'annotation\'.  The
 * ListOf___ classes do not add any attributes of their own.
 *
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 *
 * @htmlinclude listof-illustration.html
 *
 * Readers may wonder about the motivations for using the ListOf___
 * containers.  A simpler approach in XML might be to place the components
 * all directly at the top level of the model definition.  The choice made
 * in SBML is to group them within XML elements named after
 * ListOf<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from SBase means that software tools can add information @em about
 * the lists themselves into each list container\'s \'annotation\'.
 * 
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 *
 *
 *
 * @see SpeciesGlyph
 */
"


%typemap(csimports) ListOfReactionGlyphs "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{layout}
 *
@htmlinclude pkg-marker-layout.html Implementation of the %ListOfReactionGlyphs construct
 * from the &ldquo;layout&rdquo; package.
 * 
 * The ListOfReactionGlyphs is a container for the ReactionGlyph elements of a Layout.
 * 
 * *
 * 
 * The various ListOf___ classes in SBML are merely containers used for
 * organizing the main components of an SBML model.  All are derived from
 * the abstract class SBase, and inherit the various attributes and
 * subelements of SBase, such as \'metaid\' as and \'annotation\'.  The
 * ListOf___ classes do not add any attributes of their own.
 *
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 *
 * @htmlinclude listof-illustration.html
 *
 * Readers may wonder about the motivations for using the ListOf___
 * containers.  A simpler approach in XML might be to place the components
 * all directly at the top level of the model definition.  The choice made
 * in SBML is to group them within XML elements named after
 * ListOf<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from SBase means that software tools can add information @em about
 * the lists themselves into each list container\'s \'annotation\'.
 * 
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 *
 *
 *
 * @see ReactionGlyph
 */
"


%typemap(csimports) ListOfTextGlyphs "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{layout}
 *
@htmlinclude pkg-marker-layout.html Implementation of the %ListOfTextGlyphs construct from
 * the &ldquo;layout&rdquo; package.
 * 
 * The ListOfTextGlyphs is a container for the TextGlyph elements of a Layout.
 * 
 * *
 * 
 * The various ListOf___ classes in SBML are merely containers used for
 * organizing the main components of an SBML model.  All are derived from
 * the abstract class SBase, and inherit the various attributes and
 * subelements of SBase, such as \'metaid\' as and \'annotation\'.  The
 * ListOf___ classes do not add any attributes of their own.
 *
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 *
 * @htmlinclude listof-illustration.html
 *
 * Readers may wonder about the motivations for using the ListOf___
 * containers.  A simpler approach in XML might be to place the components
 * all directly at the top level of the model definition.  The choice made
 * in SBML is to group them within XML elements named after
 * ListOf<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from SBase means that software tools can add information @em about
 * the lists themselves into each list container\'s \'annotation\'.
 * 
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 *
 *
 *
 * @see TextGlyph
 */
"


%typemap(csimports) ListOfLayouts "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{layout}
 *
@htmlinclude pkg-marker-layout.html Implementation of the * %ListOfLayouts construct from
 * the &ldquo;layout&rdquo; package.
 * 
 * The ListOfLayouts is a container for the Layout elements of an extended Model element.
 * 
 * *
 * 
 * The various ListOf___ classes in SBML are merely containers used for
 * organizing the main components of an SBML model.  All are derived from
 * the abstract class SBase, and inherit the various attributes and
 * subelements of SBase, such as \'metaid\' as and \'annotation\'.  The
 * ListOf___ classes do not add any attributes of their own.
 *
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 *
 * @htmlinclude listof-illustration.html
 *
 * Readers may wonder about the motivations for using the ListOf___
 * containers.  A simpler approach in XML might be to place the components
 * all directly at the top level of the model definition.  The choice made
 * in SBML is to group them within XML elements named after
 * ListOf<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from SBase means that software tools can add information @em about
 * the lists themselves into each list container\'s \'annotation\'.
 * 
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 *
 *
 *
 * @see Layout
 */
"


%csmethodmodifiers ListOfCompartmentGlyphs::clone() const "
/**
   * Creates and returns a deep copy of this ListOfCompartmentGlyphs.
   * 
   * @return a (deep) copy of this ListOfCompartmentGlyphs.
   */ public
";


%csmethodmodifiers ListOfCompartmentGlyphs::ListOfCompartmentGlyphs(unsigned int level      = LayoutExtension::getDefaultLevel(), unsigned int version    = LayoutExtension::getDefaultVersion(), unsigned int pkgVersion = LayoutExtension::getDefaultPackageVersion()) "
/**
   * Ctor.
   */ public
";


%csmethodmodifiers ListOfCompartmentGlyphs::ListOfCompartmentGlyphs(LayoutPkgNamespaces* layoutns) "
/**
   * Ctor.
   */ public
";


%csmethodmodifiers ListOfCompartmentGlyphs::getItemTypeCode() const "
/**
   * Returns the libSBML type code for the SBML objects
   * contained in this ListOf object.
   * 
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for objects contained in this list:
   * @link libsbmlcs.libsbml.SBML_LAYOUT_COMPARTMENTGLYPH SBML_LAYOUT_COMPARTMENTGLYPH@endlink (default).
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers ListOfCompartmentGlyphs::getElementName() const "
/**
   * Returns the XML element name of
   * this SBML object.
   */ public
";


%csmethodmodifiers ListOfCompartmentGlyphs::toXML() const "
/**
    * Creates an XMLNode object from this.
    */ public
";


%csmethodmodifiers ListOfCompartmentGlyphs::get(unsigned int n) "
/**
   * Get a CompartmentGlyph from the ListOfCompartmentGlyphs.
   *
   * @param n the index number of the CompartmentGlyph to get.
   * 
   * @return the nth CompartmentGlyph in this ListOfCompartmentGlyphs.
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfCompartmentGlyphs::get "
/**
   * Get a CompartmentGlyph from the ListOfCompartmentGlyphs.
   *
   * @param n the index number of the CompartmentGlyph to get.
   * 
   * @return the nth CompartmentGlyph in this ListOfCompartmentGlyphs.
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfCompartmentGlyphs::get(const std::string& sid) "
/**
   * Get a CompartmentGlyph from the ListOfCompartmentGlyphs
   * based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the CompartmentGlyph to get.
   * 
   * @return CompartmentGlyph in this ListOfCompartmentGlyphs
   * with the given @p sid or @c null if no such
   * CompartmentGlyph exists.
   *
   * @see get(long n)
   * @see size()
   */ public
";


%csmethodmodifiers ListOfCompartmentGlyphs::get(const std::string& sid) const "
/**
   * Get a CompartmentGlyph from the ListOfCompartmentGlyphs
   * based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the CompartmentGlyph to get.
   * 
   * @return CompartmentGlyph in this ListOfCompartmentGlyphs
   * with the given @p sid or @c null if no such
   * CompartmentGlyph exists.
   *
   * @see get(long n)
   * @see size()
   */ public
";


%csmethodmodifiers ListOfCompartmentGlyphs::remove(unsigned int n) "
/**
   * Removes the nth item from this ListOfCompartmentGlyphs items and returns a pointer to
   * it.
   *
   * The caller owns the returned item and is responsible for deleting it.
   *
   * @param n the index of the item to remove
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfCompartmentGlyphs::remove(const std::string& sid) "
/**
   * Removes item in this ListOfCompartmentGlyphs items with the given identifier.
   *
   * The caller owns the returned item and is responsible for deleting it.
   * If none of the items in this list have the identifier @p sid, then @c
   * null is returned.
   *
   * @param sid the identifier of the item to remove
   *
   * @return the item removed.  As mentioned above, the caller owns the
   * returned item.
   */ public
";


%csmethodmodifiers ListOfCompartmentGlyphs::createObject(XMLInputStream& stream) "
/**
   * Create and return an SBML object of this class, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfSpeciesGlyphs::clone() const "
/**
   * Creates and returns a deep copy of this ListOfSpeciesGlyphs.
   * 
   * @return a (deep) copy of this ListOfSpeciesGlyphs.
   */ public
";


%csmethodmodifiers ListOfSpeciesGlyphs::ListOfSpeciesGlyphs(unsigned int level      = LayoutExtension::getDefaultLevel(), unsigned int version    = LayoutExtension::getDefaultVersion(), unsigned int pkgVersion = LayoutExtension::getDefaultPackageVersion()) "
/**
   * Ctor.
   */ public
";


%csmethodmodifiers ListOfSpeciesGlyphs::ListOfSpeciesGlyphs(LayoutPkgNamespaces* layoutns) "
/**
   * Ctor.
   */ public
";


%csmethodmodifiers ListOfSpeciesGlyphs::getItemTypeCode() const "
/**
   * Returns the libSBML type code for the SBML objects
   * contained in this ListOf object.
   * 
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for objects contained in this list:
   * @link libsbmlcs.libsbml.SBML_LAYOUT_SPECIESGLYPH SBML_LAYOUT_SPECIESGLYPH@endlink (default).
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers ListOfSpeciesGlyphs::getElementName() const "
/**
   * Returns the XML element name of
   * this SBML object.
   */ public
";


%csmethodmodifiers ListOfSpeciesGlyphs::get(unsigned int n) "
/**
   * Get a SpeciesGlyph from the ListOfSpeciesGlyphs.
   *
   * @param n the index number of the SpeciesGlyph to get.
   * 
   * @return the nth SpeciesGlyph in this ListOfSpeciesGlyphs.
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfSpeciesGlyphs::get "
/**
   * Get a SpeciesGlyph from the ListOfSpeciesGlyphs.
   *
   * @param n the index number of the SpeciesGlyph to get.
   * 
   * @return the nth SpeciesGlyph in this ListOfSpeciesGlyphs.
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfSpeciesGlyphs::get(const std::string& sid) "
/**
   * Get a SpeciesGlyph from the ListOfSpeciesGlyphs
   * based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the SpeciesGlyph to get.
   * 
   * @return SpeciesGlyph in this ListOfSpeciesGlyphs
   * with the given @p sid or @c null if no such
   * SpeciesGlyph exists.
   *
   * @see get(long n)
   * @see size()
   */ public
";


%csmethodmodifiers ListOfSpeciesGlyphs::get(const std::string& sid) const "
/**
   * Get a SpeciesGlyph from the ListOfSpeciesGlyphs
   * based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the SpeciesGlyph to get.
   * 
   * @return SpeciesGlyph in this ListOfSpeciesGlyphs
   * with the given @p sid or @c null if no such
   * SpeciesGlyph exists.
   *
   * @see get(long n)
   * @see size()
   */ public
";


%csmethodmodifiers ListOfSpeciesGlyphs::remove(unsigned int n) "
/**
   * Removes the nth item from this ListOfSpeciesGlyphs items and returns a pointer to
   * it.
   *
   * The caller owns the returned item and is responsible for deleting it.
   *
   * @param n the index of the item to remove
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfSpeciesGlyphs::remove(const std::string& sid) "
/**
   * Removes item in this ListOfSpeciesGlyphs items with the given identifier.
   *
   * The caller owns the returned item and is responsible for deleting it.
   * If none of the items in this list have the identifier @p sid, then @c
   * null is returned.
   *
   * @param sid the identifier of the item to remove
   *
   * @return the item removed.  As mentioned above, the caller owns the
   * returned item.
   */ public
";


%csmethodmodifiers ListOfSpeciesGlyphs::toXML() const "
/**
    * Creates an XMLNode object from this.
    */ public
";


%csmethodmodifiers ListOfSpeciesGlyphs::createObject(XMLInputStream& stream) "
/**
   * Create and return an SBML object of this class, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfReactionGlyphs::clone() const "
/**
   * Creates and returns a deep copy of this ListOfReactionGlyphs.
   * 
   * @return a (deep) copy of this ListOfReactionGlyphs.
   */ public
";


%csmethodmodifiers ListOfReactionGlyphs::ListOfReactionGlyphs(unsigned int level      = LayoutExtension::getDefaultLevel(), unsigned int version    = LayoutExtension::getDefaultVersion(), unsigned int pkgVersion = LayoutExtension::getDefaultPackageVersion()) "
/**
   * Ctor.
   */ public
";


%csmethodmodifiers ListOfReactionGlyphs::ListOfReactionGlyphs(LayoutPkgNamespaces* layoutns) "
/**
   * Ctor.
   */ public
";


%csmethodmodifiers ListOfReactionGlyphs::getItemTypeCode() const "
/**
   * Returns the libSBML type code for the SBML objects
   * contained in this ListOf object.
   * 
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for objects contained in this list:
   * @link libsbmlcs.libsbml.SBML_LAYOUT_REACTIONGLYPH SBML_LAYOUT_REACTIONGLYPH@endlink (default).
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers ListOfReactionGlyphs::getElementName() const "
/**
   * Returns the XML element name of
   * this SBML object.
   */ public
";


%csmethodmodifiers ListOfReactionGlyphs::get(unsigned int n) "
/**
   * Get a ReactionGlyph from the ListOfReactionGlyphs.
   *
   * @param n the index number of the ReactionGlyph to get.
   * 
   * @return the nth ReactionGlyph in this ListOfReactionGlyphs.
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfReactionGlyphs::get "
/**
   * Get a ReactionGlyph from the ListOfReactionGlyphs.
   *
   * @param n the index number of the ReactionGlyph to get.
   * 
   * @return the nth ReactionGlyph in this ListOfReactionGlyphs.
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfReactionGlyphs::get(const std::string& sid) "
/**
   * Get a ReactionGlyph from the ListOfReactionGlyphs
   * based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the ReactionGlyph to get.
   * 
   * @return ReactionGlyph in this ListOfReactionGlyphs
   * with the given @p sid or @c null if no such
   * ReactionGlyph exists.
   *
   * @see get(long n)
   * @see size()
   */ public
";


%csmethodmodifiers ListOfReactionGlyphs::get(const std::string& sid) const "
/**
   * Get a ReactionGlyph from the ListOfReactionGlyphs
   * based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the ReactionGlyph to get.
   * 
   * @return ReactionGlyph in this ListOfReactionGlyphs
   * with the given @p sid or @c null if no such
   * ReactionGlyph exists.
   *
   * @see get(long n)
   * @see size()
   */ public
";


%csmethodmodifiers ListOfReactionGlyphs::remove(unsigned int n) "
/**
   * Removes the nth item from this ListOfReactionGlyphs items and returns a pointer to
   * it.
   *
   * The caller owns the returned item and is responsible for deleting it.
   *
   * @param n the index of the item to remove
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfReactionGlyphs::remove(const std::string& sid) "
/**
   * Removes item in this ListOfReactionGlyphs items with the given identifier.
   *
   * The caller owns the returned item and is responsible for deleting it.
   * If none of the items in this list have the identifier @p sid, then @c
   * null is returned.
   *
   * @param sid the identifier of the item to remove
   *
   * @return the item removed.  As mentioned above, the caller owns the
   * returned item.
   */ public
";


%csmethodmodifiers ListOfReactionGlyphs::toXML() const "
/**
    * Creates an XMLNode object from this.
    */ public
";


%csmethodmodifiers ListOfReactionGlyphs::createObject(XMLInputStream& stream) "
/**
   * Create and return an SBML object of this class, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfTextGlyphs::clone() const "
/**
   * Creates and returns a deep copy of this ListOfTextGlyphs.
   * 
   * @return a (deep) copy of this ListOfTextGlyphs.
   */ public
";


%csmethodmodifiers ListOfTextGlyphs::ListOfTextGlyphs(unsigned int level      = LayoutExtension::getDefaultLevel(), unsigned int version    = LayoutExtension::getDefaultVersion(), unsigned int pkgVersion = LayoutExtension::getDefaultPackageVersion()) "
/**
   * Ctor.
   */ public
";


%csmethodmodifiers ListOfTextGlyphs::ListOfTextGlyphs(LayoutPkgNamespaces* layoutns) "
/**
   * Ctor.
   */ public
";


%csmethodmodifiers ListOfTextGlyphs::getItemTypeCode() const "
/**
   * Returns the libSBML type code for the SBML objects
   * contained in this ListOf object.
   * 
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for objects contained in this list:
   * @link libsbmlcs.libsbml.SBML_LAYOUT_TEXTGLYPH SBML_LAYOUT_TEXTGLYPH@endlink (default).
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers ListOfTextGlyphs::getElementName() const "
/**
   * Returns the XML element name of
   * this SBML object.
   */ public
";


%csmethodmodifiers ListOfTextGlyphs::get(unsigned int n) "
/**
   * Get a TextGlyph from the ListOfTextGlyphs.
   *
   * @param n the index number of the TextGlyph to get.
   * 
   * @return the nth TextGlyph in this ListOfTextGlyphs.
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfTextGlyphs::get "
/**
   * Get a TextGlyph from the ListOfTextGlyphs.
   *
   * @param n the index number of the TextGlyph to get.
   * 
   * @return the nth TextGlyph in this ListOfTextGlyphs.
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfTextGlyphs::get(const std::string& sid) "
/**
   * Get a TextGlyph from the ListOfTextGlyphs
   * based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the TextGlyph to get.
   * 
   * @return TextGlyph in this ListOfTextGlyphs
   * with the given @p sid or @c null if no such
   * TextGlyph exists.
   *
   * @see get(long n)
   * @see size()
   */ public
";


%csmethodmodifiers ListOfTextGlyphs::get(const std::string& sid) const "
/**
   * Get a TextGlyph from the ListOfTextGlyphs
   * based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the TextGlyph to get.
   * 
   * @return TextGlyph in this ListOfTextGlyphs
   * with the given @p sid or @c null if no such
   * TextGlyph exists.
   *
   * @see get(long n)
   * @see size()
   */ public
";


%csmethodmodifiers ListOfTextGlyphs::remove(unsigned int n) "
/**
   * Removes the nth item from this ListOfTextGlyphs items and returns a pointer to
   * it.
   *
   * The caller owns the returned item and is responsible for deleting it.
   *
   * @param n the index of the item to remove
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfTextGlyphs::remove(const std::string& sid) "
/**
   * Removes item in this ListOfTextGlyphs items with the given identifier.
   *
   * The caller owns the returned item and is responsible for deleting it.
   * If none of the items in this list have the identifier @p sid, then @c
   * null is returned.
   *
   * @param sid the identifier of the item to remove
   *
   * @return the item removed.  As mentioned above, the caller owns the
   * returned item.
   */ public
";


%csmethodmodifiers ListOfTextGlyphs::toXML() const "
/**
    * Creates an XMLNode object from this.
    */ public
";


%csmethodmodifiers ListOfTextGlyphs::createObject(XMLInputStream& stream) "
/**
   * Create and return an SBML object of this class, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Layout::removeObjectWithId(ListOf* list, const std::string& id) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Layout::getObjectWithId(const ListOf* list, const std::string& id) const "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Layout::getObjectWithId(ListOf* list, const std::string& id) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers Layout::Layout(unsigned int level      = LayoutExtension::getDefaultLevel(), unsigned int version    = LayoutExtension::getDefaultVersion(), unsigned int pkgVersion = LayoutExtension::getDefaultPackageVersion()) "
/**
   * Creates a new Layout with the given level, version, and package version.
   */ public
";


%csmethodmodifiers Layout::Layout(LayoutPkgNamespaces* layoutns) "
/**
   * Creates a new Layout with the given LayoutPkgNamespaces object.
   */ public
";


%csmethodmodifiers Layout::Layout(LayoutPkgNamespaces* layoutns, const std::string& id, const Dimensions* dimensions) "
/**
   * Creates a new Layout with the given @p id and dimensions.
   *
   * (FOR BACKWARD COMPATIBILITY)
   *
   */ public
";


%csmethodmodifiers Layout::Layout(const XMLNode& node, unsigned int l2version = 4) "
/**
   * Creates a new Layout from the given XMLNode
   * (only for SBML Level2)
   *
   * (FOR BACKWARD COMPATIBILITY)
   *
   */ public
";


%csmethodmodifiers Layout::Layout(const Layout& source) "
/**
   * Copy constructor.
   */ public
";


%csmethodmodifiers Layout::initDefaults "
/**
   * Does nothing since no defaults are defined for Layout.
   */ public
";


%csmethodmodifiers Layout::getId() const "
/**
   * Returns the value of the \'id\' attribute of this Layout.
   */ public
";


%csmethodmodifiers Layout::isSetId() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * Layout\'s \'id\' attribute has been set.
   */ public
";


%csmethodmodifiers Layout::setId(const std::string& id) "
/**
   * Sets the value of the \'id\' attribute of this Layout.
   */ public
";


%csmethodmodifiers Layout::unsetId "
/**
   * Unsets the value of the \'id\' attribute of this Layout.
   */ public
";


%csmethodmodifiers Layout::getName() const "
/**
   * Returns the value of the \'name\' attribute of this Layout.
   */ public
";


%csmethodmodifiers Layout::isSetName() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * Layout\'s \'name\' attribute has been set.
   */ public
";


%csmethodmodifiers Layout::setName(const std::string& name) "
/**
   * Sets the value of the \'name\' attribute of this Layout.
   */ public
";


%csmethodmodifiers Layout::unsetName "
/**
   * Unsets the value of the \'name\' attribute of this Layout.
   */ public
";


%csmethodmodifiers Layout::getDimensions() const "
/**
   * Returns the dimensions of the layout.
   */ public
";


%csmethodmodifiers Layout::getDimensions "
/**
   * Returns the dimensions of the layout.
   */ public
";


%csmethodmodifiers Layout::setDimensions(const Dimensions* dimensions) "
/**
   * Sets the dimensions of the layout.
   */ public
";


%csmethodmodifiers Layout::getDimensionsExplicitlySet() const "
/**
   * Predicate returning true if the dimensions has been set
   */ public
";


%csmethodmodifiers Layout::getListOfCompartmentGlyphs() const "
/**
   * Returns the ListOf object that holds all compartment glyphs.
   */ public
";


%csmethodmodifiers Layout::getListOfSpeciesGlyphs() const "
/**
   * Returns the ListOf object that holds all species glyphs.
   */ public
";


%csmethodmodifiers Layout::getListOfReactionGlyphs() const "
/**
   * Returns the ListOf object that holds all reaction glyphs.
   */ public
";


%csmethodmodifiers Layout::getListOfTextGlyphs() const "
/**
   * Returns the ListOf object that holds all text glyphs.
   */ public
";


%csmethodmodifiers Layout::getListOfAdditionalGraphicalObjects() const "
/**
   * Returns the ListOf object that holds all additonal graphical objects.
   */ public
";


%csmethodmodifiers Layout::getListOfCompartmentGlyphs "
/**
   * Returns the ListOf object that holds all compartment glyphs.
   */ public
";


%csmethodmodifiers Layout::getListOfSpeciesGlyphs "
/**
   * Returns the ListOf object that holds all species glyphs.
   */ public
";


%csmethodmodifiers Layout::getListOfReactionGlyphs "
/**
   * Returns the ListOf object that holds all reaction glyphs.
   */ public
";


%csmethodmodifiers Layout::getListOfTextGlyphs "
/**
   * Returns the ListOf object that holds all text glyphs.
   */ public
";


%csmethodmodifiers Layout::getListOfAdditionalGraphicalObjects "
/**
   * Returns the ListOf object that holds all additional graphical objects.
   */ public
";


%csmethodmodifiers Layout::getAllElements(ElementFilter* filter=NULL) "
/**
   * Returns a List of all child SBase objects, including those nested to an
   * arbitrary depth
   *
   * @return a List* of pointers to all children objects.
   */ public
";


%csmethodmodifiers Layout::getCompartmentGlyph "
/**
   * Returns the compartment glyph with the given index.
   * If the index is invalid, @c null is returned.
   */ public
";


%csmethodmodifiers Layout::getCompartmentGlyph(unsigned int index) "
/**
   * Returns the compartment glyph with the given index.
   * If the index is invalid, @c null is returned.
   */ public
";


%csmethodmodifiers Layout::getSpeciesGlyph(unsigned int index) "
/**
   * Returns the species glyph with the given index.
   * If the index is invalid, @c null is returned.
   */ public
";


%csmethodmodifiers Layout::getSpeciesGlyph "
/**
   * Returns the species glyph with the given index.
   * If the index is invalid, @c null is returned.
   */ public
";


%csmethodmodifiers Layout::getReactionGlyph "
/**
   * Returns the reaction glyph with the given index.
   * If the index is invalid, @c null is returned.
   */ public
";


%csmethodmodifiers Layout::getReactionGlyph(unsigned int index) "
/**
   * Returns the reaction glyph with the given index.
   * If the index is invalid, @c null is returned.
   */ public
";


%csmethodmodifiers Layout::getTextGlyph "
/**
   * Returns the text glyph with the given index.
   * If the index is invalid, @c null is returned.
   */ public
";


%csmethodmodifiers Layout::getTextGlyph(unsigned int index) "
/**
   * Returns the text glyph with the given index.
   * If the index is invalid, @c null is returned.
   */ public
";


%csmethodmodifiers Layout::getAdditionalGraphicalObject "
/**
   * Returns the additional graphical object with the given index.
   * If the index is invalid, @c null is returned.
   */ public
";


%csmethodmodifiers Layout::getAdditionalGraphicalObject(unsigned int index) "
/**
   * Returns the additional graphical object with the given index.
   * If the index is invalid, @c null is returned.
   */ public
";


%csmethodmodifiers Layout::getGeneralGlyph(unsigned int index) "
/**
   * Returns the general glyph with the given index.
   * If the index is invalid, @c null is returned.
   */ public
";


%csmethodmodifiers Layout::getGeneralGlyph "
/**
   * Returns the general glyph with the given index.
   * If the index is invalid, @c null is returned.
   */ public
";


%csmethodmodifiers Layout::getCompartmentGlyph(const std::string& id) const "
/**
   * Returns the compartment glyph that has the given @p id, or @c null if no
   * compartment glyph has the id.
   */ public
";


%csmethodmodifiers Layout::getSpeciesGlyph(const std::string& id) const "
/**
   * Returns the species glyph that has the given @p id, or @c null if no species
   * glyph has the id.
   */ public
";


%csmethodmodifiers Layout::getReactionGlyph(const std::string& id) const "
/**
   * Returns the reaction glyph that has the given @p id, or @c null if no
   * reaction glyph has the id.
   */ public
";


%csmethodmodifiers Layout::getTextGlyph(const std::string& id) const "
/**
   * Returns the text glyph that has the given @p id, or @c null if no text glyph
   * has the id.
   */ public
";


%csmethodmodifiers Layout::getAdditionalGraphicalObject(const std::string& id) const "
/**
   * Returns the additional graphical object that has the given @p id, or @c null
   * if no graphical object has the id.
   */ public
";


%csmethodmodifiers Layout::getGeneralGlyph(const std::string& id) const "
/**
   * Returns the general glyph that has the given @p id, or @c null
   * if no graphical object has the id.
   */ public
";


%csmethodmodifiers Layout::getCompartmentGlyph(const std::string& id) "
/**
   * Returns the compartment glyph that has the given @p id, or @c null if no
   * compartment glyph has the id.
   */ public
";


%csmethodmodifiers Layout::getSpeciesGlyph(const std::string& id) "
/**
   * Returns the species glyph that has the given @p id, or @c null if no species
   * glyph has the id.
   */ public
";


%csmethodmodifiers Layout::getReactionGlyph(const std::string& id) "
/**
   * Returns the reaction glyph that has the given @p id, or @c null if no
   * reaction glyph has the id.
   */ public
";


%csmethodmodifiers Layout::getTextGlyph(const std::string& id) "
/**
   * Returns the text glyph that has the given @p id, or @c null if no text glyph
   * has the id.
   */ public
";


%csmethodmodifiers Layout::getAdditionalGraphicalObject(const std::string& id) "
/**
   * Returns the additional graphical object that has the given @p id, or @c null
   * if no graphical object has the id.
   */ public
";


%csmethodmodifiers Layout::getGeneralGlyph(const std::string& id) "
/**
   * Returns the general glyph that has the given @p id, or @c null
   * if no graphical object has the id.
   */ public
";


%csmethodmodifiers Layout::addCompartmentGlyph(const CompartmentGlyph* glyph) "
/**
   * Adds a new compartment glyph.
   */ public
";


%csmethodmodifiers Layout::addSpeciesGlyph(const SpeciesGlyph* glyph) "
/**
   * Adds a new species glyph.
   */ public
";


%csmethodmodifiers Layout::addReactionGlyph(const ReactionGlyph* glyph) "
/**
   * Adds a new reaction glyph.
   */ public
";


%csmethodmodifiers Layout::addTextGlyph(const TextGlyph* glyph) "
/**
   * Adds a new text glyph.
   */ public
";


%csmethodmodifiers Layout::addAdditionalGraphicalObject(const GraphicalObject* glyph) "
/**
   * Adds a new additional graphical object glyph.
   */ public
";


%csmethodmodifiers Layout::addGeneralGlyph(const GeneralGlyph* glyph) "
/**
   * Adds a new general glyph.
   */ public
";


%csmethodmodifiers Layout::getNumCompartmentGlyphs() const "
/**
   * Returns the number of compartment glyphs for the layout.
   */ public
";


%csmethodmodifiers Layout::getNumSpeciesGlyphs() const "
/**
   * Returns the number of species glyphs for the layout.
   */ public
";


%csmethodmodifiers Layout::getNumReactionGlyphs() const "
/**
   * Returns the number of reaction glyphs for the layout.
   */ public
";


%csmethodmodifiers Layout::getNumTextGlyphs() const "
/**
   * Returns the number of text glyphs for the layout.
   */ public
";


%csmethodmodifiers Layout::getNumAdditionalGraphicalObjects() const "
/**
   * Returns the number of additional graphical objects for the layout.
   */ public
";


%csmethodmodifiers Layout::getNumGeneralGlyphs() const "
/**
   * Returns the number of general glyphs for the layout.
   */ public
";


%csmethodmodifiers Layout::createCompartmentGlyph "
/**
   * Creates a CompartmentGlyph object, adds it to the end of the
   * compartment glyph objects list and returns a pointer to the newly
   * created object.
   */ public
";


%csmethodmodifiers Layout::createSpeciesGlyph "
/**
   * Creates a SpeciesGlyph object, adds it to the end of the species glyph
   * objects list and returns a pointer to the newly created object.
   */ public
";


%csmethodmodifiers Layout::createReactionGlyph "
/**
   * Creates a ReactionGlyph object, adds it to the end of the reaction
   * glyph objects list and returns a pointer to the newly created
   * object.
   */ public
";


%csmethodmodifiers Layout::createGeneralGlyph "
/**
   * Creates a GeneralGlyph object, adds it to the end of the additional 
   * objects list and returns a reference to the newly created object.
   */ public
";


%csmethodmodifiers Layout::createTextGlyph "
/**
   * Creates a TextGlyph object, adds it to the end of the text glyph
   * objects list and returns a pointer to the newly created object.
   */ public
";


%csmethodmodifiers Layout::createAdditionalGraphicalObject "
/**
   * Creates a GraphicalObject object, adds it to the end of the additional
   * graphical objects list and returns a pointer to the newly created
   * object.
   */ public
";


%csmethodmodifiers Layout::createSpeciesReferenceGlyph "
/**
   * Creates a new SpeciesReferenceGlyph for the last ReactionGlyph and
   * adds it to its list of SpeciesReferenceGlyph objects.  A pointer to
   * the newly created object is returned.
   */ public
";


%csmethodmodifiers Layout::createLineSegment "
/**
   * Creates a new LineSegment for the Curve object of the last
   * ReactionGlyph or the last SpeciesReferenceGlyph in the last
   * ReactionGlyph and adds it to its list of SpeciesReferenceGlyph
   * objects.  A pointer to the newly created object is returned.
   */ public
";


%csmethodmodifiers Layout::createCubicBezier "
/**
   * Creates a new CubicBezier for the Curve object of the last
   * ReactionGlyph or the last SpeciesReferenceGlyph in the last
   * ReactionGlyph and adds it to its list of SpeciesReferenceGlyph
   * objects.  A pointer to the newly created object is returned.
   */ public
";


%csmethodmodifiers Layout::removeCompartmentGlyph(unsigned int index) "
/**
   * Removes the compartment glyph with the given index from the layout.
   * A pointer to the compartment glyph that was removed is returned.
   * If no compartment glyph has been removed, @c null is returned.
   */ public
";


%csmethodmodifiers Layout::removeSpeciesGlyph(unsigned int index) "
/**
   * Removes the species glyph with the given index from the layout.
   * A pointer to the species glyph that was removed is returned.
   * If no species glyph has been removed, @c null is returned.
   */ public
";


%csmethodmodifiers Layout::removeReactionGlyph(unsigned int index) "
/**
   * Removes the reaction glyph with the given index from the layout.
   * A pointer to the reaction glyph that was removed is returned.
   * If no reaction glyph has been removed, @c null is returned.
   */ public
";


%csmethodmodifiers Layout::removeTextGlyph(unsigned int index) "
/**
   * Removes the text glyph with the given index from the layout.
   * A pointer to the text glyph that was removed is returned.
   * If no text glyph has been removed, @c null is returned.
   */ public
";


%csmethodmodifiers Layout::removeAdditionalGraphicalObject(unsigned int index) "
/**
   * Removes the graphical object with the given index from the layout.
   * A pointer to the graphical object that was removed is returned.
   * If no graphical object has been removed, @c null is returned.
   */ public
";


%csmethodmodifiers Layout::removeCompartmentGlyph(const std::string id) "
/**
   * Remove the compartment glyph with the given @p id.
   * A pointer to the removed compartment glyph is returned.
   * If no compartment glyph has been removed, @c null is returned.
   */ public
";


%csmethodmodifiers Layout::removeSpeciesGlyph(const std::string id) "
/**
   * Remove the species glyph with the given @p id.
   * A pointer to the removed species glyph is returned.
   * If no species glyph has been removed, @c null is returned.
   */ public
";


%csmethodmodifiers Layout::removeReactionGlyph(const std::string id) "
/**
   * Remove the reaction glyph with the given @p id.
   * A pointer to the removed reaction glyph is returned.
   * If no reaction glyph has been removed, @c null is returned.
   */ public
";


%csmethodmodifiers Layout::removeSpeciesReferenceGlyph(const std::string id) "
/**
   * Remove the species reference glyph with the given @p id.
   * A pointer to the removed species reference glyph is returned.
   * If no species reference glyph has been removed, @c null is returned.
   */ public
";


%csmethodmodifiers Layout::removeTextGlyph(const std::string id) "
/**
   * Remove the text glyph with the given @p id.
   * A pointer to the removed text glyph is returned.
   * If no text glyph has been removed, @c null is returned.
   */ public
";


%csmethodmodifiers Layout::removeAdditionalGraphicalObject(const std::string id) "
/**
   * Remove the graphical object with the given @p id.
   * A pointer to the removed graphical object is returned.
   * If no graphical object has been removed, @c null is returned.
   */ public
";


%csmethodmodifiers Layout::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.  For example:
   *
   *   SBase::writeElements(stream);
   *   mReactants.write(stream);
   *   mProducts.write(stream);
   *   ...
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Layout::getElementName() const "
/**
   * Returns the XML element name of
   * this SBML object.
   */ public
";


%csmethodmodifiers Layout::clone() const "
/**
   * Creates and returns a deep copy of this Layout.
   * 
   * @return a (deep) copy of this Layout.
   */ public
";


%csmethodmodifiers Layout::getTypeCode() const "
/**
   * Returns the libSBML type code of this object instance.
   *
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object:
   * @link libsbmlcs.libsbml.SBML_LAYOUT_LAYOUT SBML_LAYOUT_LAYOUT@endlink
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers Layout::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor.
   *
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether or not the Visitor would like to visit the SBML object\'s next
   * sibling object (if available).
   */ public
";


%csmethodmodifiers Layout::toXML() const "
/**
    * Creates an XMLNode object from this.
    */ public
";


%csmethodmodifiers Layout::setSBMLDocument(SBMLDocument* d) "
/**
   * Sets the parent SBMLDocument of this SBML object.
   *
   * @param d the SBMLDocument object to use
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Layout::connectToChild "
/**
   * Sets this SBML object to child SBML objects (if any).
   * (Creates a child-parent relationship by the parent)
   *
   * Subclasses must override this function if they define
   * one ore more child elements.
   * Basically, this function needs to be called in
   * constructor, copy constructor, assignment operator.
   *
   * @see setSBMLDocument
   * @see enablePackageInternal
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Layout::enablePackageInternal(const std::string& pkgURI, const std::string& pkgPrefix, bool flag) "
/**
   * Enables/Disables the given package with this element and child
   * elements (if any).
   * (This is an internal implementation for enablePakcage function)
   *
   * @note Subclasses in which one or more child elements are defined
   * must override this function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Layout::createObject(XMLInputStream& stream) "
/**
   * Create and return an SBML object of this class, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Layout::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Layout::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Subclasses should override this method to read values from the given
   * XMLAttributes set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Layout::writeAttributes(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.  For example:
   *
   *   SBase::writeAttributes(stream);
   *   stream.writeAttribute( \'id\'  , mId   );
   *   stream.writeAttribute( \'name\', mName );
   *   ...
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfLayouts::clone() const "
/**
   * Creates and returns a deep copy of this ListOfLayouts.
   * 
   * @return a (deep) copy of this ListOfLayouts.
   */ public
";


%csmethodmodifiers ListOfLayouts::ListOfLayouts(unsigned int level      = LayoutExtension::getDefaultLevel(), unsigned int version    = LayoutExtension::getDefaultVersion(), unsigned int pkgVersion = LayoutExtension::getDefaultPackageVersion()) "
/**
   * Ctor.
   */ public
";


%csmethodmodifiers ListOfLayouts::ListOfLayouts(LayoutPkgNamespaces* layoutns) "
/**
   * Ctor.
   */ public
";


%csmethodmodifiers ListOfLayouts::getItemTypeCode() const "
/**
   * Returns the libSBML type code for the SBML objects
   * contained in this ListOf object.
   * 
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for objects contained in this list:
   * @link libsbmlcs.libsbml.SBML_LAYOUT_LAYOUT SBML_LAYOUT_LAYOUT@endlink (default).
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers ListOfLayouts::getElementName() const "
/**
   * Returns the XML element name of
   * this SBML object.
   */ public
";


%csmethodmodifiers ListOfLayouts::get(unsigned int n) "
/**
   * Get a Layout from the ListOfLayouts.
   *
   * @param n the index number of the Layout to get.
   * 
   * @return the nth Layout in this ListOfLayouts.
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfLayouts::get "
/**
   * Get a Layout from the ListOfLayouts.
   *
   * @param n the index number of the Layout to get.
   * 
   * @return the nth Layout in this ListOfLayouts.
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfLayouts::get(const std::string& sid) "
/**
   * Get a Layout from the ListOfLayouts
   * based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the Layout to get.
   * 
   * @return Layout in this ListOfLayouts
   * with the given @p id or @c null if no such
   * Layout exists.
   *
   * @see get(long n)
   * @see size()
   */ public
";


%csmethodmodifiers ListOfLayouts::get(const std::string& sid) const "
/**
   * Get a Layout from the ListOfLayouts
   * based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the Layout to get.
   * 
   * @return Layout in this ListOfLayouts
   * with the given @p sid or @c null if no such
   * Layout exists.
   *
   * @see get(long n)
   * @see size()
   */ public
";


%csmethodmodifiers ListOfLayouts::remove(unsigned int n) "
/**
   * Removes the nth item from this ListOfLayouts items and returns a pointer to
   * it.
   *
   * The caller owns the returned item and is responsible for deleting it.
   *
   * @param n the index of the item to remove
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfLayouts::remove(const std::string& sid) "
/**
   * Removes item in this ListOfLayouts items with the given identifier.
   *
   * The caller owns the returned item and is responsible for deleting it.
   * If none of the items in this list have the identifier @p sid, then @c
   * null is returned.
   *
   * @param sid the identifier of the item to remove
   *
   * @return the item removed.  As mentioned above, the caller owns the
   * returned item.
   */ public
";


%csmethodmodifiers ListOfLayouts::toXML() const "
/**
    * Creates an XMLNode object from this.
    */ public
";


%csmethodmodifiers ListOfLayouts::resetElementNamespace(const std::string& uri) "
/** */ public
";


%csmethodmodifiers ListOfLayouts::createObject(XMLInputStream& stream) "
/**
   * Create and return an SBML object of this class, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfLayouts::writeXMLNS(XMLOutputStream& stream) const "
/** */ /* libsbml-internal */ public
";


%typemap(csimports) LayoutExtension "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{layout}
 *
@htmlinclude pkg-marker-layout.html The core module of the \'layout\' package extension.
 *
 */
"


%typemap(csimports) LayoutPkgNamespaces "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{layout}
 *
@htmlinclude pkg-marker-layout.html Extension of SBMLNamespaces for the SBML Level&nbsp;3
 * \'layout\' package.
 */
"


%csmethodmodifiers LayoutExtension::getPackageName "
/**
   * Returns the package name of this extension.
   */ public
";


%csmethodmodifiers LayoutExtension::getDefaultLevel "
/**
   * Returns the default SBML Level this extension.
   */ public
";


%csmethodmodifiers LayoutExtension::getDefaultVersion "
/**
   * Returns the default SBML Version this extension.
   */ public
";


%csmethodmodifiers LayoutExtension::getDefaultPackageVersion "
/**
   * Returns the default SBML version this extension.
   */ public
";


%csmethodmodifiers LayoutExtension::getXmlnsL3V1V1 "
/**
   * Returns URI of supported versions of this package.
   */ public
";


%csmethodmodifiers LayoutExtension::getXmlnsL2 "
/** */ public
";


%csmethodmodifiers LayoutExtension::getXmlnsXSI "
/** */ public
";


%csmethodmodifiers LayoutExtension::LayoutExtension "
/**
   * Constructor
   */ public
";


%csmethodmodifiers LayoutExtension::LayoutExtension(const LayoutExtension&) "
/**
   * Copy constructor.
   */ public
";


%csmethodmodifiers LayoutExtension::clone() const "
/**
   * Creates and returns a deep copy of this LayoutExtension object.
   * 
   * @return a (deep) copy of this LayoutExtension object
   */ public new
";


%csmethodmodifiers LayoutExtension::getName() const "
/**
   * Returns the name of this package (\'layout\')
   *
   * @return the name of this package (\'layout\')
   */ public
";


%csmethodmodifiers LayoutExtension::getURI "
/**
   * Returns the namespace URI corresponding to the combination of the given
   * SBML Level, Version, and package version.
   *
   * @param sbmlLevel the level of SBML
   * @param sbmlVersion the version of SBML
   * @param pkgVersion the version of package
   *
   * @return a string of the package URI, or an empty string if no
   * corresponding URI exists.
   */ public
";


%csmethodmodifiers LayoutExtension::getLevel(const std::string &uri) const "
/**
   * Returns the SBML Level for the given URI of this package.
   *
   * @param uri the string of URI that represents one of versions of the
   * &ldquo;layout&rdquo; package
   *
   * @return the SBML Level with the given URI of this package, or @c 0 if
   * the given URI is invalid.
   */ public
";


%csmethodmodifiers LayoutExtension::getVersion(const std::string &uri) const "
/**
   * Returns the SBML Version for the given URI of this package.
   *
   * @param uri the string of URI that represents one of versions of the
   * &ldquo;layout&rdquo; package
   *
   * @return the SBML version with the given URI of this package, or @c 0 if
   * the given URI is invalid.
   */ public
";


%csmethodmodifiers LayoutExtension::getPackageVersion(const std::string &uri) const "
/**
   * Returns the package version for the given URI of this package.
   *
   * @param uri the string of URI that represents one of versions of the
   * &ldquo;layout&rdquo; package
   *
   * @return the package version with the given URI of this package, or @c 0
   * if the given URI is invalid.
   */ public
";


%csmethodmodifiers LayoutExtension::getStringFromTypeCode(int typeCode) const "
/**
   * Takes a type code of the &ldquo;layout&rdquo; package and returns a string
   * describing the code.
   */ public
";


%csmethodmodifiers LayoutExtension::getSBMLExtensionNamespaces(const std::string &uri) const "
/**
   * Returns an LayoutPkgNamespaces object.
   *
   * @param uri the string of URI that represents one of versions of the
   * &ldquo;layout&rdquo; package
   *
   * @return an LayoutPkgNamespace object corresponding to the given @p uri,
   * or @c null if the URI is not defined in the Layout package.
   */ public
";


%csmethodmodifiers LayoutExtension::init "
/**
   * Initializes layout extension by creating an object of this class with 
   * required SBasePlugin derived objects and registering the object 
   * to the SBMLExtensionRegistry class.
   *
   * (NOTE) This function is automatically invoked when creating the following
   *        global object in LayoutExtension.cpp
   *
   *        static SBMLExtensionRegister<LayoutExtension> layoutExtensionRegistry;
   *
   */ /* libsbml-internal */ public
";


%csmethodmodifiers LayoutExtension::removeL2Namespaces(XMLNamespaces* xmlns) const "
/**
   * Removes the L2 Namespace from a document. 
   *
   * This method should be overridden by all extensions that want to serialize
   * to an L2 annotation.
   */ public
";


%csmethodmodifiers LayoutExtension::addL2Namespaces(XMLNamespaces *xmlns) const "
/**
   * adds all L2 Extension namespaces to the namespace list. 
   * 
   * This method should be overridden by all extensions that want to serialize
   * to an L2 annotation.
   */ public
";


%csmethodmodifiers LayoutExtension::enableL2NamespaceForDocument(SBMLDocument* doc) const "
/**
   * Adds the L2 Namespace to the document and enables the extension.
   *
   * If the extension supports serialization to SBML L2 Annotations, this 
   * method should be overrridden, so it will be activated.
   */ public
";


%csmethodmodifiers LayoutExtension::isInUse(SBMLDocument *doc) const "
/** 
   * Determines whether this extension is being used by the given SBMLDocument
   *
   * The implementation returns true if the model object contains one 
   * or more layouts.
   * 
   * @param doc the sbml document to test. 
   * 
   * @return a bool indicating whether the extension is actually being used
   *         byy the document. 
   */ public
";


%csmethodmodifiers LayoutExtension::getErrorTable "
/**
	 * Return the entry in the error table at this index. 
	 *
	 * @param index a long integergere representing the index of the error in the LayoutSBMLErrorTable
	 *
	 * @return packageErrorTableEntry object in the LayoutSBMLErrorTable corresponding to the index given.
	 */ /* libsbml-internal */ public
";


%csmethodmodifiers LayoutExtension::getErrorTableIndex "
/**
	 * Return the index in the error table with the given errorId. 
	 *
	 * @param errorId a long integergere representing the errorId of the error in the LayoutSBMLErrorTable
	 *
	 * @return longeger representing the index in the LayoutSBMLErrorTable corresponding to the errorId given.
	 */ /* libsbml-internal */ public
";


%csmethodmodifiers LayoutExtension::getErrorIdOffset() const "
/**
	 * Return the offset for the errorId range for the layout L3 package. 
	 *
	 * @return longege representing the  offset for errors LayoutSBMLErrorTable.
	 */ /* libsbml-internal */ public new
";


%typemap(csimports) LayoutModelPlugin "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{layout}
 *
@htmlinclude pkg-marker-layout.html Implementation of the \'layout\' package extention to the
 * %Model construct.
 */
"


%csmethodmodifiers LayoutModelPlugin::LayoutModelPlugin(const std::string &uri, const std::string &prefix, LayoutPkgNamespaces* layoutns) "
/**
   * Constructor
   */ public
";


%csmethodmodifiers LayoutModelPlugin::LayoutModelPlugin(const LayoutModelPlugin& orig) "
/**
   * Copy constructor. Creates a copy of this SBase object.
   */ public
";


%csmethodmodifiers LayoutModelPlugin::clone() const "
/**
   * Creates and returns a deep copy of this LayoutModelPlugin object.
   * 
   * @return a (deep) copy of this LayoutModelPlugin object
   */ public
";


%typemap(csimports) LayoutSpeciesReferencePlugin "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{layout}
 *
@htmlinclude pkg-marker-layout.html Implementation of the \'layout\' package extention to the
 * %SpeciesReference construct.
 */
"


%csmethodmodifiers LayoutSpeciesReferencePlugin::LayoutSpeciesReferencePlugin(const std::string &uri, const std::string &prefix, LayoutPkgNamespaces* layoutns) "
/**
   * Constructor
   */ public
";


%csmethodmodifiers LayoutSpeciesReferencePlugin::LayoutSpeciesReferencePlugin(const LayoutSpeciesReferencePlugin& orig) "
/**
   * Copy constructor. Creates a copy of this SBase object.
   */ public
";


%csmethodmodifiers LayoutSpeciesReferencePlugin::clone() const "
/**
   * Creates and returns a deep copy of this LayoutSpeciesReferencePlugin object.
   * 
   * @return a (deep) copy of this LayoutSpeciesReferencePlugin object
   */ public
";


%csmethodmodifiers parseLayoutAnnotation(XMLNode * annotation, ListOfLayouts& layouts) "
/**
 * takes an annotation that has been read into the model
 * identifies the RDF elements
 * and creates a List of Layouts from the annotation
 */ public
";


%csmethodmodifiers deleteLayoutAnnotation(XMLNode* pAnnotation) "
/**
 * Takes an XMLNode and tries to find the layout annotation node and deletes it if it was found.
 */ public
";


%csmethodmodifiers parseLayouts(const Model* pModel) "
/**
 * Creates an XMLNode that represents the layouts of the model from the given Model object.
 */ public
";


%csmethodmodifiers parseSpeciesReferenceAnnotation(XMLNode * annotation, SimpleSpeciesReference& sr) "
/**
 * takes an annotation that has been read into the species reference
 * identifies the id elements and set the id of the species reference
 */ public
";


%csmethodmodifiers deleteLayoutIdAnnotation(XMLNode* pAnnotation) "
/**
 * Takes an XMLNode and tries to find the layoutId annotation node and deletes it if it was found.
 */ public
";


%csmethodmodifiers parseLayoutId(const SimpleSpeciesReference* sr) "
/**
 * Creates an XMLNode that represents the layoutId annotation of the species reference from the given SpeciesReference object.
 */ public
";


%typemap(csimports) QualExtension "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{qual}
 *
@htmlinclude pkg-marker-qual.html The core module of the \'qual\' package extension.
 *
 */
"


%typemap(csimports) QualPkgNamespaces "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{qual}
 *
@htmlinclude pkg-marker-qual.html Extension of SBMLNamespaces for the SBML Level&nbsp;3
 * \'qual\' package.
 */
"


%csmethodmodifiers QualExtension::getPackageName "
/**
   * Returns the package name of this extension.
   */ public
";


%csmethodmodifiers QualExtension::getDefaultLevel "
/**
   * Returns the default SBML Level this extension.
   */ public
";


%csmethodmodifiers QualExtension::getDefaultVersion "
/**
   * Returns the default SBML Version this extension.
   */ public
";


%csmethodmodifiers QualExtension::getDefaultPackageVersion "
/**
   * Returns the default SBML version this extension.
   */ public
";


%csmethodmodifiers QualExtension::getXmlnsL3V1V1 "
/**
   * Returns URI of supported versions of this package.
   */ public
";


%csmethodmodifiers QualExtension::QualExtension "
/**
   * Constructor
   */ public
";


%csmethodmodifiers QualExtension::QualExtension(const QualExtension& orig) "
/**
   * Copy constructor.
   */ public
";


%csmethodmodifiers QualExtension::clone() const "
/**
   * Creates and returns a deep copy of this QualExtension object.
   * 
   * @return a (deep) copy of this SBase object
   */ public new
";


%csmethodmodifiers QualExtension::getName() const "
/**
   * Returns the name of this package (\'qual\')
   *
   * @return a string representing the name of this package (\'qual\')
   */ public
";


%csmethodmodifiers QualExtension::getURI "
/**
   * Returns the namespace URI corresponding to the combination of the given
   * SBML Level, Version, and package version.
   *
   * @param sbmlLevel the level of SBML
   * @param sbmlVersion the version of SBML
   * @param pkgVersion the version of package
   *
   * @return a string of the package URI, or an empty string if no
   * corresponding URI exists.
   */ public
";


%csmethodmodifiers QualExtension::getLevel(const std::string &uri) const "
/**
   * Returns the SBML Level for the given URI of this package.
   *
   * @param uri the string of URI that represents one of versions of the
   * &ldquo;qual&rdquo; package
   *
   * @return the SBML Level with the given URI of this package, or @c 0 if
   * the given URI is invalid.
   */ public
";


%csmethodmodifiers QualExtension::getVersion(const std::string &uri) const "
/**
   * Returns the SBML Version for the given URI of this package.
   *
   * @param uri the string of URI that represents one of versions of the
   * &ldquo;qual&rdquo; package
   *
   * @return the SBML version with the given URI of this package, or @c 0 if
   * the given URI is invalid.
   */ public
";


%csmethodmodifiers QualExtension::getPackageVersion(const std::string &uri) const "
/**
   * Returns the package version for the given URI of this package.
   *
   * @param uri the string of URI that represents one of versions of the
   * &ldquo;qual&rdquo; package
   *
   * @return the package version with the given URI of this package, or @c 0
   * if the given URI is invalid.
   */ public
";


%csmethodmodifiers QualExtension::getSBMLExtensionNamespaces(const std::string &uri) const "
/**
   * Returns an QualPkgNamespaces object.
   *
   * @param uri the string of URI that represents one of versions of the
   * &ldquo;qual&rdquo; package
   *
   * @return an QualPkgNamespace object corresponding to the given @p uri, or
   * @c null if the URI is not defined in the Hierarchical %Model Qualosition
   * package.
   */ public
";


%csmethodmodifiers QualExtension::getStringFromTypeCode(int typeCode) const "
/**
   * Takes a type code of the &ldquo;qual&rdquo; package and returns a string
   * describing the code.
   */ public
";


%csmethodmodifiers QualExtension::init "
/**
   * Initializes qual extension by creating an object of this class with 
   * required SBasePlugin derived objects and registering the object 
   * to the SBMLExtensionRegistry class.
   *
   * (NOTE) This function is automatically invoked when creating the following
   *        global object in QualExtension.cpp
   *
   *        static SBMLExtensionRegister<QualExtension> qualExtensionRegistry;
   *
   */ /* libsbml-internal */ public
";


%csmethodmodifiers QualExtension::getErrorTable "
/**
   * Return the entry in the error table at this index. 
   *
   * @param index a long integergere representing the index of the error in the QualSBMLErrorTable
   *
   * @return packageErrorTableEntry object in the QualSBMLErrorTable corresponding to the index given.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers QualExtension::getErrorTableIndex "
/**
   * Return the index in the error table with the given errorId. 
   *
   * @param errorId a long integergere representing the errorId of the error in the QualSBMLErrorTable
   *
   * @return longeger representing the index in the QualSBMLErrorTable corresponding to the errorId given.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers QualExtension::getErrorIdOffset() const "
/**
   * Return the offset for the errorId range for the qual L3 package. 
   *
   * @return longege representing the  offset for errors QualSBMLErrorTable.
   */ /* libsbml-internal */ public new
";


%typemap(csimports) QualModelPlugin "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{qual}
 *
@htmlinclude pkg-marker-qual.html Implementation of the \'qual\' package extention to the
 * %Model construct.  The extension of SBML Level 3 Core\'s Model class is
 * relatively straightforward: the Qualitative Models Package adds two lists,
 * one for holding qualitativeSpecies (ListOfQualitativeSpecies), and the
 * other for holding transitions (ListOfTransitions).  The Model element may
 * contain at most one ListOfQualitativeSpecies, which must contain at least
 * one QualitativeSpecies. It may also contain at most one ListOfTransitions
 * which must contain at least one Transition.
 */
"


%csmethodmodifiers QualModelPlugin::QualModelPlugin(const std::string &uri, const std::string &prefix, QualPkgNamespaces *qualns) "
/**
   * Constructor
   */ public
";


%csmethodmodifiers QualModelPlugin::QualModelPlugin(const QualModelPlugin& orig) "
/**
   * Copy constructor. Creates a copy of this SBase object.
   */ public
";


%csmethodmodifiers QualModelPlugin::clone() const "
/**
   * Creates and returns a deep copy of this QualModelPlugin object.
   * 
   * @return a (deep) copy of this SBase object
   */ public
";


%csmethodmodifiers QualModelPlugin::createObject(XMLInputStream& stream) "
/**
   * Subclasses must override this method to create, store, and then
   * return an SBML object corresponding to the next XMLToken in the
   * XMLInputStream if they have their specific elements.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers QualModelPlugin::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses must override this method to write out their contained
   * SBML objects as XML elements if they have their specific elements.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers QualModelPlugin::hasRequiredElements() const "
/**
   * Checks if this plugin object has all the required elements.
   *
   * Subclasses should override this function if they have their specific
   * elements.
   *
   * @return true if this pugin object has all the required elements,
   * otherwise false will be returned.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers QualModelPlugin::appendFrom(const Model* model) "
/** */ /* libsbml-internal */ public
";


%csmethodmodifiers QualModelPlugin::getAllElements(ElementFilter * filter = NULL) "
/**
   * Returns a List of all child SBase objects, including those nested to an
   * arbitary depth.
   *
   * @return a List* of pointers to all child objects.
   */ public
";


%csmethodmodifiers QualModelPlugin::getListOfQualitativeSpecies() const "
/**
   * Returns the ListOfQualitativeSpecies in this plugin object.
   *
   * @return ListOfQualitativeSpecies object in this plugin object.
   */ public
";


%csmethodmodifiers QualModelPlugin::getListOfQualitativeSpecies "
/**
   * Returns the ListOfQualitativeSpecies in this plugin object.
   *
   * @return ListOfQualitativeSpecies object in this plugin object.
   */ public
";


%csmethodmodifiers QualModelPlugin::getQualitativeSpecies "
/**
   * Returns the QualitativeSpecies object that belongs to the given index. If the
   * index is invalid, null is returned.
   *
   * @param n the index number of the QualitativeSpecies to get.
   *
   * @return the nth QualitativeSpecies in the ListOfQualitativeSpecies.
   */ public
";


%csmethodmodifiers QualModelPlugin::getQualitativeSpecies(unsigned int n) "
/**
   * Returns the QualitativeSpecies object that belongs to the given index. If the
   * index is invalid, null is returned.
   *
   * @param n the index number of the QualitativeSpecies to get.
   *
   * @return the nth QualitativeSpecies in the ListOfQualitativeSpecies.
   */ public
";


%csmethodmodifiers QualModelPlugin::getQualitativeSpecies(const std::string& sid) "
/**
   * Returns the qualitativeSpecies object based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the QualitativeSpecies to get.
   * 
   * @return QualitativeSpecies in the ListOfQualitativeSpecies with the given id
   * or null if no such QualitativeSpecies exists.
   *
   * @see getQualitativeSpecies(long n)
   * @see getListOfQualitativeSpecies()
   */ public
";


%csmethodmodifiers QualModelPlugin::getQualitativeSpecies(const std::string& sid) const "
/**
   * Returns the qualitativeSpecies object based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the QualitativeSpecies to get.
   * 
   * @return QualitativeSpecies in the ListOfQualitativeSpecies with the given id 
   * or null if no such QualitativeSpecies exists.
   *
   * @see getQualitativeSpecies(long n)
   * @see getListOfQualitativeSpecies()
   */ public
";


%csmethodmodifiers QualModelPlugin::addQualitativeSpecies(const QualitativeSpecies* qualitativeSpecies) "
/**
   * Adds a copy of the given QualitativeSpecies object to the list of qual.
   *
   * @param qualitativeSpecies the QualitativeSpecies object to be added to the list of qual.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   */ public
";


%csmethodmodifiers QualModelPlugin::createQualitativeSpecies "
/**
   * Creates a new qual object and adds it to the list of qual objects
   * and returns it.
   *
   * @return a newly created QualitativeSpecies object
   */ public
";


%csmethodmodifiers QualModelPlugin::removeQualitativeSpecies(unsigned int n) "
/**
   * Removes the nth QualitativeSpecies object from this plugin object and
   * returns a pointer to it.
   *
   * The caller owns the returned object and is responsible for
   *  deleting it.
   *
   * @param n the index of the QualitativeSpecies object to remove
   *
   * @return the QualitativeSpecies object removed.  As mentioned above, the 
   * caller owns the returned object. null is returned if the 
   * given index is out of range.
   */ public
";


%csmethodmodifiers QualModelPlugin::removeQualitativeSpecies(const std::string& sid) "
/**
   * Removes the QualitativeSpecies object with the given id attribute from 
   * this plugin object and returns a pointer to it.
   *
   * The caller owns the returned object and is responsible for
   * deleting it.
   *
   * @param sid the id attribute of the QualitativeSpecies object to remove
   *
   * @return the QualitativeSpecies object removed.  As mentioned above, the 
   * caller owns the returned object. null is returned if the 
   * given index is out of range.
   */ public
";


%csmethodmodifiers QualModelPlugin::getNumQualitativeSpecies() const "
/**
   * Returns the number of QualitativeSpecies object in this plugin object.
   *
   * @return the number of QualitativeSpecies object in this plugin object.
   */ public
";


%csmethodmodifiers QualModelPlugin::getListOfTransitions() const "
/**
   * Returns the ListOfTransitions in this plugin object.
   *
   * @return ListOfTransitions object in this plugin object.
   */ public
";


%csmethodmodifiers QualModelPlugin::getListOfTransitions "
/**
   * Returns the ListOfTransitions in this plugin object.
   *
   * @return ListOfTransitions object in this plugin object.
   */ public
";


%csmethodmodifiers QualModelPlugin::getTransition "
/**
   * Returns the Transition object that belongs to the given index. If the
   * index is invalid, null is returned.
   *
   * @param n the index number of the Transition to get.
   *
   * @return the nth Transition in the ListOfTransitions.
   */ public
";


%csmethodmodifiers QualModelPlugin::getTransition(unsigned int n) "
/**
   * Returns the Transition object that belongs to the given index. If the
   * index is invalid, null is returned.
   *
   * @param n the index number of the Transition to get.
   *
   * @return the nth Transition in the ListOfTransitions.
   */ public
";


%csmethodmodifiers QualModelPlugin::getTransition(const std::string& sid) "
/**
   * Returns the qualitativeSpecies object based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the Transition to get.
   * 
   * @return Transition in the ListOfTransitions with the given id
   * or null if no such Transition exists.
   *
   * @see getTransition(long n)
   * @see getListOfTransitions()
   */ public
";


%csmethodmodifiers QualModelPlugin::getTransition(const std::string& sid) const "
/**
   * Returns the qualitativeSpecies object based on its identifier.
   *
   * @param sid a string representing the identifier 
   * of the Transition to get.
   * 
   * @return Transition in the ListOfTransitions with the given id 
   * or null if no such Transition exists.
   *
   * @see getTransition(long n)
   * @see getListOfTransitions()
   */ public
";


%csmethodmodifiers QualModelPlugin::addTransition(const Transition* transition) "
/**
   * Adds a copy of the given Transition object to the list of qual.
   *
   * @param transition the Transition object to be added to the list of qual.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   */ public
";


%csmethodmodifiers QualModelPlugin::createTransition "
/**
   * Creates a new qual object and adds it to the list of qual objects
   * and returns it.
   *
   * @return a newly created Transition object
   */ public
";


%csmethodmodifiers QualModelPlugin::removeTransition(unsigned int n) "
/**
   * Removes the nth Transition object from this plugin object and
   * returns a pointer to it.
   *
   * The caller owns the returned object and is responsible for
   *  deleting it.
   *
   * @param n the index of the Transition object to remove
   *
   * @return the Transition object removed.  As mentioned above, the 
   * caller owns the returned object. null is returned if the 
   * given index is out of range.
   */ public
";


%csmethodmodifiers QualModelPlugin::removeTransition(const std::string& sid) "
/**
   * Removes the Transition object with the given id attribute from 
   * this plugin object and returns a pointer to it.
   *
   * The caller owns the returned object and is responsible for
   * deleting it.
   *
   * @param sid the id attribute of the Transition object to remove
   *
   * @return the Transition object removed.  As mentioned above, the 
   * caller owns the returned object. null is returned if the 
   * given index is out of range.
   */ public
";


%csmethodmodifiers QualModelPlugin::getNumTransitions() const "
/**
   * Returns the number of Transition object in this plugin object.
   *
   * @return the number of Transition object in this plugin object.
   */ public
";


%csmethodmodifiers QualModelPlugin::setSBMLDocument(SBMLDocument* d) "
/**
   * Sets the parent SBMLDocument of this plugin object.
   *
   * Subclasses which contain one or more SBase derived elements must
   * override this function.
   *
   * @param d the SBMLDocument object to use
   *
   * @see connectToParent
   * @see enablePackageInternal
   */ /* libsbml-internal */ public
";


%csmethodmodifiers QualModelPlugin::connectToChild "
/**
   * Sets the *parent* of this SBML object to child SBML objects (if any).
   * (Creates a child-parent relationship by the parent)
   *
   * @see setSBMLDocument
   * @see enablePackageInternal
   */ /* libsbml-internal */ public
";


%csmethodmodifiers QualModelPlugin::connectToParent(SBase *sbase) "
/**
   * Sets the parent SBML object of this plugin object to
   * this object and child elements (if any).
   * (Creates a child-parent relationship by this plugin object)
   *
   * This function is called when this object is created by
   * the parent element.
   * Subclasses must override this this function if they have one
   * or more child elements.Also, SBasePlugin::connectToParent()
   * must be called in the overridden function.
   *
   * @param sbase the SBase object to use
   *
   * @see setSBMLDocument
   * @see enablePackageInternal
   */ /* libsbml-internal */ public
";


%csmethodmodifiers QualModelPlugin::enablePackageInternal(const std::string& pkgURI, const std::string& pkgPrefix, bool flag) "
/**
   * Enables/Disables the given package with child elements in this plugin
   * object (if any).
   * (This is an internal implementation invoked from
   *  SBase::enablePackageInternal() function)
   *
   * @note Subclasses in which one or more SBase derived elements are
   * defined must override this function.
   *
   * @see setSBMLDocument
   * @see connectToParent
   */ /* libsbml-internal */ public
";


%csmethodmodifiers QualModelPlugin::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor.
   */ /* libsbml-internal */ public
";


%typemap(csimports) FunctionTerm "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{qual}
 *
@htmlinclude pkg-marker-qual.html The FunctionTerm class for the Qualitative Models
 * package.
 *
 * Each FunctionTerm is associated with a result and with a Boolean function inside a Math element that can be used to set the conditions under which this term is selected.
 */
"


%typemap(csimports) ListOfFunctionTerms "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{qual}
 *
@htmlinclude pkg-marker-qual.html Implementation of the %ListOfFunctionTerms construct from
 * the \'qual\' package.
 * 
 * The ListOfFunctionTerms is a container for the FunctionTerms of a Transition.
 * 
 * *
 * 
 * The various ListOf___ classes in SBML are merely containers used for
 * organizing the main components of an SBML model.  All are derived from
 * the abstract class SBase, and inherit the various attributes and
 * subelements of SBase, such as \'metaid\' as and \'annotation\'.  The
 * ListOf___ classes do not add any attributes of their own.
 *
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 *
 * @htmlinclude listof-illustration.html
 *
 * Readers may wonder about the motivations for using the ListOf___
 * containers.  A simpler approach in XML might be to place the components
 * all directly at the top level of the model definition.  The choice made
 * in SBML is to group them within XML elements named after
 * ListOf<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from SBase means that software tools can add information @em about
 * the lists themselves into each list container\'s \'annotation\'.
 * 
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 *
 *
 *
 * @see Input
 */
"


%csmethodmodifiers FunctionTerm::FunctionTerm(unsigned int level      = QualExtension::getDefaultLevel(), unsigned int version    = QualExtension::getDefaultVersion(), unsigned int pkgVersion = QualExtension::getDefaultPackageVersion()) "
/**
   * Creates a new FunctionTerm with the given level, version, and package version.
   *
   * @param level a long integer, the SBML Level to assign to this FunctionTerm
   *
   * @param version a long integer, the SBML Version to assign to this FunctionTerm
   *
   * @param pkgVersion a long integer, the SBML Qual Version to assign to this FunctionTerm
   */ public
";


%csmethodmodifiers FunctionTerm::FunctionTerm(QualPkgNamespaces* qualns) "
/**
   * Creates a new FunctionTerm with the given QualPkgNamespaces object.
   *
   * @param qualns the QualPkgNamespaces object
   */ public
";


%csmethodmodifiers FunctionTerm::FunctionTerm(const FunctionTerm& orig) "
/**
   * Copy constructor for FunctionTerm.
   *
   * @param orig the FunctionTerm instance to copy.
   */ public
";


%csmethodmodifiers FunctionTerm::clone() const "
/**
   * Creates and returns a deep copy of this FunctionTerm object.
   *
   * @return a (deep) copy of this FunctionTerm object.
   */ public
";


%csmethodmodifiers FunctionTerm::getResultLevel() const "
/**
   * Returns the value of the \'resultLevel\' attribute of this FunctionTerm.
   *
   * @return the value of the \'resultLevel\' attribute of this FunctionTerm as a integer.
   */ public
";


%csmethodmodifiers FunctionTerm::isSetResultLevel() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * FunctionTerm\'s \'resultLevel\' attribute has been set.
   *
   * @return @c true if this FunctionTerm\'s \'resultLevel\' attribute has been set,
   * otherwise @c false is returned.
   */ public
";


%csmethodmodifiers FunctionTerm::setResultLevel(int resultLevel) "
/**
   * Sets the value of the \'resultLevel\' attribute of this FunctionTerm.
   *
   * @param resultLevel int value of the \'resultLevel\' attribute to be set
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers FunctionTerm::unsetResultLevel "
/**
   * Unsets the value of the \'resultLevel\' attribute of this FunctionTerm.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers FunctionTerm::getMath() const "
/**
   * Returns the \'math\' element of this FunctionTerm.
   *
   * @return the \'math\' element of this FunctionTerm.
   */ public
";


%csmethodmodifiers FunctionTerm::isSetMath() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * FunctionTerm\'s \'math\' element has been set.
   *
   * @return @c true if this FunctionTerm\'s \'math\' element has been set,
   * otherwise @c false is returned.
   */ public
";


%csmethodmodifiers FunctionTerm::setMath(ASTNode* math) "
/**
   * Sets the \'math\' element of this FunctionTerm.
   *
   * @param math ASTNode  math of the \'resultLevel\' attribute to be set
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers FunctionTerm::unsetMath "
/**
   * Unsets the \'math\' element of this FunctionTerm.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers FunctionTerm::renameSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames all the @c SIdRef attributes on this element, including any
   * found in MathML content (if such exists).
   *
   * This method works by looking at all attributes and (if appropriate)
   * mathematical formulas, comparing the identifiers to the value of @p
   * oldid.  If any matches are found, the matching identifiers are replaced
   * with @p newid.  The method does @em not descend into child elements.
   *
   * @param oldid the old identifier
   * @param newid the new identifier
   */ public
";


%csmethodmodifiers FunctionTerm::getElementName() const "
/**
   * Returns the XML element name of this object, which for FunctionTerm, is
   * always @c \'functionTerm\'.
   *
   * @return the name of this element, i.e. @c \'functionTerm\'.
   */ public
";


%csmethodmodifiers FunctionTerm::getTypeCode() const "
/**
   * Returns the libSBML type code of this object instance.
   *
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object:
   * @link libsbmlcs.libsbml.SBML_QUAL_FUNCTION_TERM SBML_QUAL_FUNCTION_TERM@endlink
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers FunctionTerm::hasRequiredAttributes() const "
/**
   * Predicate returning @c true if all the required attributes
   * for this FunctionTerm object have been set.
   *
   * @note The required attributes for a FunctionTerm object are:
   *
   * @return a bool value indicating whether all the required
   * attributes for this object have been defined.
   */ public
";


%csmethodmodifiers FunctionTerm::hasRequiredElements() const "
/**
   * Predicate returning @c true if all the required elements
   * for this FunctionTerm object have been set.
   *
   * @note The required elements for a FunctionTerm object are:
   * @li \'math\'
   *
   * @return a bool value indicating whether all the required
   * elements for this object have been defined.
   */ public
";


%csmethodmodifiers FunctionTerm::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers FunctionTerm::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers FunctionTerm::setSBMLDocument(SBMLDocument* d) "
/**
   * Sets the parent SBMLDocument.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers FunctionTerm::enablePackageInternal(const std::string& pkgURI, const std::string& pkgPrefix, bool flag) "
/**
   * Enables/Disables the given package with this element.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers FunctionTerm::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Get the list of expected attributes for this element.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers FunctionTerm::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Read values from the given XMLAttributes set into their specific fields.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers FunctionTerm::readOtherXML(XMLInputStream& stream) "
/**
   * Subclasses should override this method to read (and store) XHTML,
   * MathML, etc. directly from the XMLInputStream.
   *
   * @return true if the subclass read from the stream, false otherwise.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers FunctionTerm::writeAttributes(XMLOutputStream& stream) const "
/**
   * Write values of XMLAttributes to the output stream.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfFunctionTerms::ListOfFunctionTerms(unsigned int level      = QualExtension::getDefaultLevel(), unsigned int version    = QualExtension::getDefaultVersion(), unsigned int pkgVersion = QualExtension::getDefaultPackageVersion()) "
/**
   * Creates a new ListOfFunctionTerms with the given level, version, and package version.
   *
   * @param level a long integer, the SBML Level to assign to this ListOfFunctionTerms
   *
   * @param version a long integer, the SBML Version to assign to this ListOfFunctionTerms
   *
   * @param pkgVersion a long integer, the SBML Qual Version to assign to this ListOfFunctionTerms
   */ public
";


%csmethodmodifiers ListOfFunctionTerms::ListOfFunctionTerms(QualPkgNamespaces* qualns) "
/**
   * Creates a new ListOfFunctionTerms with the given QualPkgNamespaces object.
   *
   * @param qualns the QualPkgNamespaces object
   */ public
";


%csmethodmodifiers ListOfFunctionTerms::ListOfFunctionTerms(const ListOfFunctionTerms& orig) "
/** */ public
";


%csmethodmodifiers ListOfFunctionTerms::clone() const "
/**
   * Creates and returns a deep copy of this ListOfFunctionTerms object.
   *
   * @return a (deep) copy of this ListOfFunctionTerms object.
   */ public
";


%csmethodmodifiers ListOfFunctionTerms::get(unsigned int n) "
/**
   * Get a FunctionTerm from the ListOfFunctionTerms.
   *
   * @param n the index number of the FunctionTerm to get.
   *
   * @return the nth FunctionTerm in this ListOfFunctionTerms.
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfFunctionTerms::get "
/**
   * Get a FunctionTerm from the ListOfFunctionTerms.
   *
   * @param n the index number of the FunctionTerm to get.
   *
   * @return the nth FunctionTerm in this ListOfFunctionTerms.
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfFunctionTerms::get(const std::string& sid) "
/**
   * Get a FunctionTerm from the ListOfFunctionTerms
   * based on its identifier.
   *
   * @param sid a string representing the identifier
   * of the FunctionTerm to get.
   *
   * @return FunctionTerm in this ListOfFunctionTerms
   * with the given id or null if no such
   * FunctionTerm exists.
   *
   * @see get(long n)   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfFunctionTerms::get(const std::string& sid) const "
/**
   * Get a FunctionTerm from the ListOfFunctionTerms
   * based on its identifier.
   *
   * @param sid a string representing the identifier
   * of the FunctionTerm to get.
   *
   * @return FunctionTerm in this ListOfFunctionTerms
   * with the given id or null if no such
   * FunctionTerm exists.
   *
   * @see get(long n)   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfFunctionTerms::remove(unsigned int n) "
/**
   * Removes the nth FunctionTerm from this ListOfFunctionTerms
   * and returns a pointer to it.
   *
   * The caller owns the returned item and is responsible for deleting it.
   *
   * @param n the index of the FunctionTerm to remove.
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfFunctionTerms::remove(const std::string& sid) "
/**
   * Removes the FunctionTerm from this ListOfFunctionTerms with the given identifier
   * and returns a pointer to it.
   *
   * The caller owns the returned item and is responsible for deleting it.
   * If none of the items in this list have the identifier @p sid, then
   * @c null is returned.
   *
   * @param sid the identifier of the FunctionTerm to remove.
   *
   * @return the FunctionTerm removed. As mentioned above, the caller owns the
   * returned item.
   */ public
";


%csmethodmodifiers ListOfFunctionTerms::getAllElements(ElementFilter * filter = NULL) "
/**
   * Returns a List of all child SBase objects, including those nested to an
   * arbitary depth.
   *
   * @return a List* of pointers to all child objects.
   */ public
";


%csmethodmodifiers ListOfFunctionTerms::getElementName() const "
/**
   * Returns the XML element name of this object, which for ListOfFunctionTerms, is
   * always @c \'listOfFunctionTerms\'.
   *
   * @return the name of this element, i.e. @c \'listOfFunctionTerms\'.
   */ public
";


%csmethodmodifiers ListOfFunctionTerms::getItemTypeCode() const "
/**
   * Returns the libSBML type code for the SBML objects
   * contained in this ListOf object.
   * 
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for objects contained in this list:
   * @link libsbmlcs.libsbml.SBML_QUAL_FUNCTION_TERM SBML_QUAL_FUNCTION_TERM@endlink (default).
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers ListOfFunctionTerms::getDefaultTerm "
/**
   * Get the DefaultTerm from this ListOfFunctionTerms.
   *
   * @return the DefaultTerm in this ListOfFunctionTerms, or null if no such value is set.
   *
   * @see Transition::getDefaultTerm
   */ public
";


%csmethodmodifiers ListOfFunctionTerms::getDefaultTerm() const "
/**
   * Get the DefaultTerm from this ListOfFunctionTerms.
   *
   * @return the DefaultTerm in this ListOfFunctionTerms, or null if no such value is set.
   *
   * @see Transition::getDefaultTerm
   */ public
";


%csmethodmodifiers ListOfFunctionTerms::setDefaultTerm(const DefaultTerm* dt) "
/**
   * Sets the given DefaultTerm to this Transition.
   *
   * @param dt the DefaultTerm object to add
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers ListOfFunctionTerms::isSetDefaultTerm() const "
/**
   * Predicate returning @c true if the defaultTerm 
   * for this ListOfFunctionTerms object has been set.
   *
   * @return a bool value indicating whether the defaultTerm
   * child for this object has been defined.
   */ public
";


%csmethodmodifiers ListOfFunctionTerms::setSBMLDocument(SBMLDocument* d) "
/**
   * Connects to child elements.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfFunctionTerms::accept(SBMLVisitor& v) const "
/**
   * Connects to child elements.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfFunctionTerms::createObject(XMLInputStream& stream) "
/**
   * Creates a new FunctionTerm in this ListOfFunctionTerms
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfFunctionTerms::writeXMLNS(XMLOutputStream& stream) const "
/**
   * Write the namespace for the Qual package.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfFunctionTerms::writeElements(XMLOutputStream& stream) const "
/**
   * Write the namespace for the Qual package.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfFunctionTerms::connectToChild "
/**
   * Connects to child elements.
   */ /* libsbml-internal */ public
";


%typemap(csimports) DefaultTerm "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{qual}
 *
@htmlinclude pkg-marker-qual.html The DefaultTerm class for the Qualitative Models package.
 *
 * The DefaultTerm defines the default result of a Transition. This term is used if there are no other FunctionTerm 
elements or if none of the Math elements of the FunctionTerm elements evaluates to @c true.
 */
"


%csmethodmodifiers DefaultTerm::DefaultTerm(unsigned int level      = QualExtension::getDefaultLevel(), unsigned int version    = QualExtension::getDefaultVersion(), unsigned int pkgVersion = QualExtension::getDefaultPackageVersion()) "
/**
   * Creates a new DefaultTerm with the given level, version, and package version.
   *
   * @param level a long integer, the SBML Level to assign to this DefaultTerm
   *
   * @param version a long integer, the SBML Version to assign to this DefaultTerm
   *
   * @param pkgVersion a long integer, the SBML Qual Version to assign to this DefaultTerm
   */ public
";


%csmethodmodifiers DefaultTerm::DefaultTerm(QualPkgNamespaces* qualns) "
/**
   * Creates a new DefaultTerm with the given QualPkgNamespaces object.
   *
   * @param qualns the QualPkgNamespaces object
   */ public
";


%csmethodmodifiers DefaultTerm::DefaultTerm(const DefaultTerm& orig) "
/**
   * Copy constructor for DefaultTerm.
   *
   * @param orig the DefaultTerm instance to copy.
   */ public
";


%csmethodmodifiers DefaultTerm::clone() const "
/**
   * Creates and returns a deep copy of this DefaultTerm object.
   *
   * @return a (deep) copy of this DefaultTerm object.
   */ public
";


%csmethodmodifiers DefaultTerm::getResultLevel() const "
/**
   * Returns the value of the \'resultLevel\' attribute of this DefaultTerm.
   *
   * @return the value of the \'resultLevel\' attribute of this DefaultTerm as a integer.
   */ public
";


%csmethodmodifiers DefaultTerm::isSetResultLevel() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * DefaultTerm\'s \'resultLevel\' attribute has been set.
   *
   * @return @c true if this DefaultTerm\'s \'resultLevel\' attribute has been set,
   * otherwise @c false is returned.
   */ public
";


%csmethodmodifiers DefaultTerm::setResultLevel(int resultLevel) "
/**
   * Sets the value of the \'resultLevel\' attribute of this DefaultTerm.
   *
   * @param resultLevel int value of the \'resultLevel\' attribute to be set
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers DefaultTerm::unsetResultLevel "
/**
   * Unsets the value of the \'resultLevel\' attribute of this DefaultTerm.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers DefaultTerm::getElementName() const "
/**
   * Returns the XML element name of this object, which for DefaultTerm, is
   * always @c \'defaultTerm\'.
   *
   * @return the name of this element, i.e. @c \'defaultTerm\'.
   */ public
";


%csmethodmodifiers DefaultTerm::getTypeCode() const "
/**
   * Returns the libSBML type code of this object instance.
   *
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object:
   * @link libsbmlcs.libsbml.SBML_QUAL_DEFAULT_TERM SBML_QUAL_DEFAULT_TERM@endlink
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers DefaultTerm::hasRequiredAttributes() const "
/**
   * Predicate returning @c true if all the required attributes
   * for this DefaultTerm object have been set.
   *
   * @note The required attributes for a DefaultTerm object are:
   *
   * @return a bool value indicating whether all the required
   * attributes for this object have been defined.
   */ public
";


%csmethodmodifiers DefaultTerm::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers DefaultTerm::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers DefaultTerm::setSBMLDocument(SBMLDocument* d) "
/**
   * Sets the parent SBMLDocument.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers DefaultTerm::enablePackageInternal(const std::string& pkgURI, const std::string& pkgPrefix, bool flag) "
/**
   * Enables/Disables the given package with this element.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers DefaultTerm::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Get the list of expected attributes for this element.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers DefaultTerm::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Read values from the given XMLAttributes set into their specific fields.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers DefaultTerm::writeAttributes(XMLOutputStream& stream) const "
/**
   * Write values of XMLAttributes to the output stream.
   */ /* libsbml-internal */ public
";


%typemap(csimports) Input "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{qual}
 *
@htmlinclude pkg-marker-qual.html The Input class for the Qualitative Models package.
 *
 * Each Input refers to a QualitativeSpecies that participates in the corresponding Transition. In Petri nets, these are the input places of the transition. In logical models, they are the regulators of the species whose behaviour is defined by the transition.
 */
"


%typemap(csimports) ListOfInputs "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{qual}
 *
@htmlinclude pkg-marker-qual.html Implementation of the %ListOfInputs construct from the
 * \'qual\' package.
 * 
 * The ListOfInputs is a container for the Inputs of a Transition.
 * 
 * *
 * 
 * The various ListOf___ classes in SBML are merely containers used for
 * organizing the main components of an SBML model.  All are derived from
 * the abstract class SBase, and inherit the various attributes and
 * subelements of SBase, such as \'metaid\' as and \'annotation\'.  The
 * ListOf___ classes do not add any attributes of their own.
 *
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 *
 * @htmlinclude listof-illustration.html
 *
 * Readers may wonder about the motivations for using the ListOf___
 * containers.  A simpler approach in XML might be to place the components
 * all directly at the top level of the model definition.  The choice made
 * in SBML is to group them within XML elements named after
 * ListOf<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from SBase means that software tools can add information @em about
 * the lists themselves into each list container\'s \'annotation\'.
 * 
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 *
 *
 *
 * @see Input
 */
"


%csmethodmodifiers Input::Input(unsigned int level      = QualExtension::getDefaultLevel(), unsigned int version    = QualExtension::getDefaultVersion(), unsigned int pkgVersion = QualExtension::getDefaultPackageVersion()) "
/**
   * Creates a new Input with the given level, version, and package version.
   *
   * @param level a long integer, the SBML Level to assign to this Input
   *
   * @param version a long integer, the SBML Version to assign to this Input
   *
   * @param pkgVersion a long integer, the SBML Qual Version to assign to this Input
   */ public
";


%csmethodmodifiers Input::Input(QualPkgNamespaces* qualns) "
/**
   * Creates a new Input with the given QualPkgNamespaces object.
   *
   * @param qualns the QualPkgNamespaces object
   */ public
";


%csmethodmodifiers Input::Input(const Input& orig) "
/**
   * Copy constructor for Input.
   *
   * @param orig the Input instance to copy.
   */ public
";


%csmethodmodifiers Input::clone() const "
/**
   * Creates and returns a deep copy of this Input object.
   *
   * @return a (deep) copy of this Input object.
   */ public
";


%csmethodmodifiers Input::getId() const "
/**
   * Returns the value of the \'id\' attribute of this Input.
   *
   * @return the value of the \'id\' attribute of this Input as a string.
   */ public
";


%csmethodmodifiers Input::getQualitativeSpecies() const "
/**
   * Returns the value of the \'qualitativeSpecies\' attribute of this Input.
   *
   * @return the value of the \'qualitativeSpecies\' attribute of this Input as a string.
   */ public
";


%csmethodmodifiers Input::getTransitionEffect() const "
/**
   * Returns the value of the \'transitionEffect\' attribute of this Input.
   *
   * @return the value of the \'transitionEffect\' attribute of this Input as a string.
   */ public
";


%csmethodmodifiers Input::getName() const "
/**
   * Returns the value of the \'name\' attribute of this Input.
   *
   * @return the value of the \'name\' attribute of this Input as a string.
   */ public
";


%csmethodmodifiers Input::getSign() const "
/**
   * Returns the value of the \'sign\' attribute of this Input.
   *
   * @return the value of the \'sign\' attribute of this Input as a string.
   */ public
";


%csmethodmodifiers Input::getThresholdLevel() const "
/**
   * Returns the value of the \'thresholdLevel\' attribute of this Input.
   *
   * @return the value of the \'thresholdLevel\' attribute of this Input as a integer.
   */ public
";


%csmethodmodifiers Input::isSetId() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * Input\'s \'id\' attribute has been set.
   *
   * @return @c true if this Input\'s \'id\' attribute has been set,
   * otherwise @c false is returned.
   */ public
";


%csmethodmodifiers Input::isSetQualitativeSpecies() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * Input\'s \'qualitativeSpecies\' attribute has been set.
   *
   * @return @c true if this Input\'s \'qualitativeSpecies\' attribute has been set,
   * otherwise @c false is returned.
   */ public
";


%csmethodmodifiers Input::isSetTransitionEffect() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * Input\'s \'transitionEffect\' attribute has been set.
   *
   * @return @c true if this Input\'s \'transitionEffect\' attribute has been set,
   * otherwise @c false is returned.
   */ public
";


%csmethodmodifiers Input::isSetName() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * Input\'s \'name\' attribute has been set.
   *
   * @return @c true if this Input\'s \'name\' attribute has been set,
   * otherwise @c false is returned.
   */ public
";


%csmethodmodifiers Input::isSetSign() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * Input\'s \'sign\' attribute has been set.
   *
   * @return @c true if this Input\'s \'sign\' attribute has been set,
   * otherwise @c false is returned.
   */ public
";


%csmethodmodifiers Input::isSetThresholdLevel() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * Input\'s \'thresholdLevel\' attribute has been set.
   *
   * @return @c true if this Input\'s \'thresholdLevel\' attribute has been set,
   * otherwise @c false is returned.
   */ public
";


%csmethodmodifiers Input::setId(const std::string& id) "
/**
   * Sets the value of the \'id\' attribute of this Input.
   *
   * @param id string value of the \'id\' attribute to be set
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers Input::setQualitativeSpecies(const std::string& qualitativeSpecies) "
/**
   * Sets the value of the \'qualitativeSpecies\' attribute of this Input.
   *
   * @param qualitativeSpecies string value of the \'qualitativeSpecies\' attribute to be set
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers Input::setTransitionEffect(const InputTransitionEffect_t transitionEffect) "
/**
   * Sets the value of the \'transitionEffect\' attribute of this Input.
   *
   * @param transitionEffect string value of the \'transitionEffect\' attribute to be set
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers Input::setName(const std::string& name) "
/**
   * Sets the value of the \'name\' attribute of this Input.
   *
   * @param name string value of the \'name\' attribute to be set
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers Input::setSign(const InputSign_t sign) "
/**
   * Sets the value of the \'sign\' attribute of this Input.
   *
   * @param sign string value of the \'sign\' attribute to be set
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers Input::setThresholdLevel(int thresholdLevel) "
/**
   * Sets the value of the \'thresholdLevel\' attribute of this Input.
   *
   * @param thresholdLevel int value of the \'thresholdLevel\' attribute to be set
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers Input::unsetId "
/**
   * Unsets the value of the \'id\' attribute of this Input.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers Input::unsetQualitativeSpecies "
/**
   * Unsets the value of the \'qualitativeSpecies\' attribute of this Input.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers Input::unsetTransitionEffect "
/**
   * Unsets the value of the \'transitionEffect\' attribute of this Input.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers Input::unsetName "
/**
   * Unsets the value of the \'name\' attribute of this Input.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers Input::unsetSign "
/**
   * Unsets the value of the \'sign\' attribute of this Input.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers Input::unsetThresholdLevel "
/**
   * Unsets the value of the \'thresholdLevel\' attribute of this Input.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers Input::renameSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames all the @c SIdRef attributes on this element, including any
   * found in MathML content (if such exists).
   *
   * This method works by looking at all attributes and (if appropriate)
   * mathematical formulas, comparing the identifiers to the value of @p
   * oldid.  If any matches are found, the matching identifiers are replaced
   * with @p newid.  The method does @em not descend into child elements.
   *
   * @param oldid the old identifier
   * @param newid the new identifier
   */ public
";


%csmethodmodifiers Input::getElementName() const "
/**
   * Returns the XML element name of this object, which for Input, is
   * always @c \'input\'.
   *
   * @return the name of this element, i.e. @c \'input\'.
   */ public
";


%csmethodmodifiers Input::getTypeCode() const "
/**
   * Returns the libSBML type code of this object instance.
   *
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object:
   * @link libsbmlcs.libsbml.SBML_QUAL_INPUT SBML_QUAL_INPUT@endlink
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers Input::hasRequiredAttributes() const "
/**
   * Predicate returning @c true if all the required attributes
   * for this Input object have been set.
   *
   * @note The required attributes for a Input object are:
   * @li \'qualitativeSpecies\'
   * @li \'transitionEffect\'
   *
   * @return a bool value indicating whether all the required
   * attributes for this object have been defined.
   */ public
";


%csmethodmodifiers Input::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Input::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Input::setSBMLDocument(SBMLDocument* d) "
/**
   * Sets the parent SBMLDocument.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Input::enablePackageInternal(const std::string& pkgURI, const std::string& pkgPrefix, bool flag) "
/**
   * Enables/Disables the given package with this element.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Input::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Get the list of expected attributes for this element.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Input::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Read values from the given XMLAttributes set into their specific fields.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Input::writeAttributes(XMLOutputStream& stream) const "
/**
   * Write values of XMLAttributes to the output stream.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfInputs::ListOfInputs(unsigned int level      = QualExtension::getDefaultLevel(), unsigned int version    = QualExtension::getDefaultVersion(), unsigned int pkgVersion = QualExtension::getDefaultPackageVersion()) "
/**
   * Creates a new ListOfInputs with the given level, version, and package version.
   *
   * @param level a long integer, the SBML Level to assign to this ListOfInputs
   *
   * @param version a long integer, the SBML Version to assign to this ListOfInputs
   *
   * @param pkgVersion a long integer, the SBML Qual Version to assign to this ListOfInputs
   */ public
";


%csmethodmodifiers ListOfInputs::ListOfInputs(QualPkgNamespaces* qualns) "
/**
   * Creates a new ListOfInputs with the given QualPkgNamespaces object.
   *
   * @param qualns the QualPkgNamespaces object
   */ public
";


%csmethodmodifiers ListOfInputs::clone() const "
/**
   * Creates and returns a deep copy of this ListOfInputs object.
   *
   * @return a (deep) copy of this ListOfInputs object.
   */ public
";


%csmethodmodifiers ListOfInputs::get(unsigned int n) "
/**
   * Get a Input from the ListOfInputs.
   *
   * @param n the index number of the Input to get.
   *
   * @return the nth Input in this ListOfInputs.
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfInputs::get "
/**
   * Get a Input from the ListOfInputs.
   *
   * @param n the index number of the Input to get.
   *
   * @return the nth Input in this ListOfInputs.
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfInputs::get(const std::string& sid) "
/**
   * Get a Input from the ListOfInputs
   * based on its identifier.
   *
   * @param sid a string representing the identifier
   * of the Input to get.
   *
   * @return Input in this ListOfInputs
   * with the given id or null if no such
   * Input exists.
   *
   * @see get(long n)   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfInputs::get(const std::string& sid) const "
/**
   * Get a Input from the ListOfInputs
   * based on its identifier.
   *
   * @param sid a string representing the identifier
   * of the Input to get.
   *
   * @return Input in this ListOfInputs
   * with the given id or null if no such
   * Input exists.
   *
   * @see get(long n)   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfInputs::getBySpecies(const std::string& sid) const "
/**
   * Get a Input from the ListOfInputs
   * based on the qualitativeSpecies to which it refers.
   *
   * @param sid a string representing the qualitativeSpecies attribute
   * of the Input to get.
   *
   * @return the first Input in this ListOfInputs
   * with the given qualitativeSpecies or null if no such
   * Input exists.
   *
   * @see get(long n)   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfInputs::getBySpecies(const std::string& sid) "
/**
   * Get a Input from the ListOfInputs
   * based on the qualitativeSpecies to which it refers.
   *
   * @param sid a string representing the qualitativeSpecies attribute
   * of the Input to get.
   *
   * @return the first Input in this ListOfInputs
   * with the given qualitativeSpecies or null if no such
   * Input exists.
   *
   * @see get(long n)   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfInputs::remove(unsigned int n) "
/**
   * Removes the nth Input from this ListOfInputs
   * and returns a pointer to it.
   *
   * The caller owns the returned item and is responsible for deleting it.
   *
   * @param n the index of the Input to remove.
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfInputs::remove(const std::string& sid) "
/**
   * Removes the Input from this ListOfInputs with the given identifier
   * and returns a pointer to it.
   *
   * The caller owns the returned item and is responsible for deleting it.
   * If none of the items in this list have the identifier @p sid, then
   * @c null is returned.
   *
   * @param sid the identifier of the Input to remove.
   *
   * @return the Input removed. As mentioned above, the caller owns the
   * returned item.
   */ public
";


%csmethodmodifiers ListOfInputs::getElementName() const "
/**
   * Returns the XML element name of this object, which for ListOfInputs, is
   * always @c \'listOfInputs\'.
   *
   * @return the name of this element, i.e. @c \'listOfInputs\'.
   */ public
";


%csmethodmodifiers ListOfInputs::getItemTypeCode() const "
/**
   * Returns the libSBML type code for the SBML objects
   * contained in this ListOf object.
   * 
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for objects contained in this list:
   * @link libsbmlcs.libsbml.SBML_QUAL_INPUT SBML_QUAL_INPUT@endlink (default).
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers ListOfInputs::createObject(XMLInputStream& stream) "
/**
   * Creates a new Input in this ListOfInputs
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfInputs::writeXMLNS(XMLOutputStream& stream) const "
/**
   * Write the namespace for the Qual package.
   */ /* libsbml-internal */ public
";


%typemap(csimports) Output "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{qual}
 *
@htmlinclude pkg-marker-qual.html The Output class for the Qualitative Models package.
 * 
 * Each Output refers to a QualitativeSpecies that participates in (is affected by) the corresponding Transition. In Petri net models these are the output places of the transition. 
 *
 * In a logical model, a QualitativeSpecies should be referenced in at most one ListOfOutputs, (that of the Transition defining the evolution of this species). When a Transition has several outputs, it is because the referenced species share the same regulators and the same logical rules.
 */
"


%typemap(csimports) ListOfOutputs "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{qual}
 *
@htmlinclude pkg-marker-qual.html Implementation of the %ListOfOutputs construct from the
 * \'qual\' package.
 * 
 * The ListOfOutputs is a container for the Output elements of a Transition.
 * 
 * *
 * 
 * The various ListOf___ classes in SBML are merely containers used for
 * organizing the main components of an SBML model.  All are derived from
 * the abstract class SBase, and inherit the various attributes and
 * subelements of SBase, such as \'metaid\' as and \'annotation\'.  The
 * ListOf___ classes do not add any attributes of their own.
 *
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 *
 * @htmlinclude listof-illustration.html
 *
 * Readers may wonder about the motivations for using the ListOf___
 * containers.  A simpler approach in XML might be to place the components
 * all directly at the top level of the model definition.  The choice made
 * in SBML is to group them within XML elements named after
 * ListOf<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from SBase means that software tools can add information @em about
 * the lists themselves into each list container\'s \'annotation\'.
 * 
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 *
 *
 *
 * @see Output
 */
"


%csmethodmodifiers Output::Output(unsigned int level      = QualExtension::getDefaultLevel(), unsigned int version    = QualExtension::getDefaultVersion(), unsigned int pkgVersion = QualExtension::getDefaultPackageVersion()) "
/**
   * Creates a new Output with the given level, version, and package version.
   *
   * @param level a long integer, the SBML Level to assign to this Output
   *
   * @param version a long integer, the SBML Version to assign to this Output
   *
   * @param pkgVersion a long integer, the SBML Qual Version to assign to this Output
   */ public
";


%csmethodmodifiers Output::Output(QualPkgNamespaces* qualns) "
/**
   * Creates a new Output with the given QualPkgNamespaces object.
   *
   * @param qualns the QualPkgNamespaces object
   */ public
";


%csmethodmodifiers Output::Output(const Output& orig) "
/**
   * Copy constructor for Output.
   *
   * @param orig the Output instance to copy.
   */ public
";


%csmethodmodifiers Output::clone() const "
/**
   * Creates and returns a deep copy of this Output object.
   *
   * @return a (deep) copy of this Output object.
   */ public
";


%csmethodmodifiers Output::getId() const "
/**
   * Returns the value of the \'id\' attribute of this Output.
   *
   * @return the value of the \'id\' attribute of this Output as a string.
   */ public
";


%csmethodmodifiers Output::getQualitativeSpecies() const "
/**
   * Returns the value of the \'qualitativeSpecies\' attribute of this Output.
   *
   * @return the value of the \'qualitativeSpecies\' attribute of this Output as a string.
   */ public
";


%csmethodmodifiers Output::getTransitionEffect() const "
/**
   * Returns the value of the \'transitionEffect\' attribute of this Output.
   *
   * @return the value of the \'transitionEffect\' attribute of this Output as a string.
   */ public
";


%csmethodmodifiers Output::getName() const "
/**
   * Returns the value of the \'name\' attribute of this Output.
   *
   * @return the value of the \'name\' attribute of this Output as a string.
   */ public
";


%csmethodmodifiers Output::getOutputLevel() const "
/**
   * Returns the value of the \'outputLevel\' attribute of this Output.
   *
   * @return the value of the \'outputLevel\' attribute of this Output as a integer.
   */ public
";


%csmethodmodifiers Output::isSetId() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * Output\'s \'id\' attribute has been set.
   *
   * @return @c true if this Output\'s \'id\' attribute has been set,
   * otherwise @c false is returned.
   */ public
";


%csmethodmodifiers Output::isSetQualitativeSpecies() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * Output\'s \'qualitativeSpecies\' attribute has been set.
   *
   * @return @c true if this Output\'s \'qualitativeSpecies\' attribute has been set,
   * otherwise @c false is returned.
   */ public
";


%csmethodmodifiers Output::isSetTransitionEffect() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * Output\'s \'transitionEffect\' attribute has been set.
   *
   * @return @c true if this Output\'s \'transitionEffect\' attribute has been set,
   * otherwise @c false is returned.
   */ public
";


%csmethodmodifiers Output::isSetName() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * Output\'s \'name\' attribute has been set.
   *
   * @return @c true if this Output\'s \'name\' attribute has been set,
   * otherwise @c false is returned.
   */ public
";


%csmethodmodifiers Output::isSetOutputLevel() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * Output\'s \'outputLevel\' attribute has been set.
   *
   * @return @c true if this Output\'s \'outputLevel\' attribute has been set,
   * otherwise @c false is returned.
   */ public
";


%csmethodmodifiers Output::setId(const std::string& id) "
/**
   * Sets the value of the \'id\' attribute of this Output.
   *
   * @param id string value of the \'id\' attribute to be set
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers Output::setQualitativeSpecies(const std::string& qualitativeSpecies) "
/**
   * Sets the value of the \'qualitativeSpecies\' attribute of this Output.
   *
   * @param qualitativeSpecies string value of the \'qualitativeSpecies\' attribute to be set
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers Output::setTransitionEffect(const OutputTransitionEffect_t transitionEffect) "
/**
   * Sets the value of the \'transitionEffect\' attribute of this Output.
   *
   * @param transitionEffect string value of the \'transitionEffect\' attribute to be set
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers Output::setName(const std::string& name) "
/**
   * Sets the value of the \'name\' attribute of this Output.
   *
   * @param name string value of the \'name\' attribute to be set
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers Output::setOutputLevel(int outputLevel) "
/**
   * Sets the value of the \'outputLevel\' attribute of this Output.
   *
   * @param outputLevel int value of the \'outputLevel\' attribute to be set
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers Output::unsetId "
/**
   * Unsets the value of the \'id\' attribute of this Output.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers Output::unsetQualitativeSpecies "
/**
   * Unsets the value of the \'qualitativeSpecies\' attribute of this Output.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers Output::unsetTransitionEffect "
/**
   * Unsets the value of the \'transitionEffect\' attribute of this Output.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers Output::unsetName "
/**
   * Unsets the value of the \'name\' attribute of this Output.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers Output::unsetOutputLevel "
/**
   * Unsets the value of the \'outputLevel\' attribute of this Output.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers Output::renameSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames all the @c SIdRef attributes on this element, including any
   * found in MathML content (if such exists).
   *
   * This method works by looking at all attributes and (if appropriate)
   * mathematical formulas, comparing the identifiers to the value of @p
   * oldid.  If any matches are found, the matching identifiers are replaced
   * with @p newid.  The method does @em not descend into child elements.
   *
   * @param oldid the old identifier
   * @param newid the new identifier
   */ public
";


%csmethodmodifiers Output::getElementName() const "
/**
   * Returns the XML element name of this object, which for Output, is
   * always @c \'output\'.
   *
   * @return the name of this element, i.e. @c \'output\'.
   */ public
";


%csmethodmodifiers Output::getTypeCode() const "
/**
   * Returns the libSBML type code of this object instance.
   *
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object:
   * @link libsbmlcs.libsbml.SBML_QUAL_OUTPUT SBML_QUAL_OUTPUT@endlink
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers Output::hasRequiredAttributes() const "
/**
   * Predicate returning @c true if all the required attributes
   * for this Output object have been set.
   *
   * @note The required attributes for a Output object are:
   * @li \'qualitativeSpecies\'
   * @li \'transitionEffect\'
   *
   * @return a bool value indicating whether all the required
   * attributes for this object have been defined.
   */ public
";


%csmethodmodifiers Output::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Output::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Output::setSBMLDocument(SBMLDocument* d) "
/**
   * Sets the parent SBMLDocument.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Output::enablePackageInternal(const std::string& pkgURI, const std::string& pkgPrefix, bool flag) "
/**
   * Enables/Disables the given package with this element.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Output::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Get the list of expected attributes for this element.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Output::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Read values from the given XMLAttributes set into their specific fields.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Output::writeAttributes(XMLOutputStream& stream) const "
/**
   * Write values of XMLAttributes to the output stream.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfOutputs::ListOfOutputs(unsigned int level      = QualExtension::getDefaultLevel(), unsigned int version    = QualExtension::getDefaultVersion(), unsigned int pkgVersion = QualExtension::getDefaultPackageVersion()) "
/**
   * Creates a new ListOfOutputs with the given level, version, and package version.
   *
   * @param level a long integer, the SBML Level to assign to this ListOfOutputs
   *
   * @param version a long integer, the SBML Version to assign to this ListOfOutputs
   *
   * @param pkgVersion a long integer, the SBML Qual Version to assign to this ListOfOutputs
   */ public
";


%csmethodmodifiers ListOfOutputs::ListOfOutputs(QualPkgNamespaces* qualns) "
/**
   * Creates a new ListOfOutputs with the given QualPkgNamespaces object.
   *
   * @param qualns the QualPkgNamespaces object
   */ public
";


%csmethodmodifiers ListOfOutputs::clone() const "
/**
   * Creates and returns a deep copy of this ListOfOutputs object.
   *
   * @return a (deep) copy of this ListOfOutputs object.
   */ public
";


%csmethodmodifiers ListOfOutputs::get(unsigned int n) "
/**
   * Get a Output from the ListOfOutputs.
   *
   * @param n the index number of the Output to get.
   *
   * @return the nth Output in this ListOfOutputs.
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfOutputs::get "
/**
   * Get a Output from the ListOfOutputs.
   *
   * @param n the index number of the Output to get.
   *
   * @return the nth Output in this ListOfOutputs.
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfOutputs::get(const std::string& sid) "
/**
   * Get a Output from the ListOfOutputs
   * based on its identifier.
   *
   * @param sid a string representing the identifier
   * of the Output to get.
   *
   * @return Output in this ListOfOutputs
   * with the given id or null if no such
   * Output exists.
   *
   * @see get(long n)   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfOutputs::get(const std::string& sid) const "
/**
   * Get a Output from the ListOfOutputs
   * based on its identifier.
   *
   * @param sid a string representing the identifier
   * of the Output to get.
   *
   * @return Output in this ListOfOutputs
   * with the given id or null if no such
   * Output exists.
   *
   * @see get(long n)   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfOutputs::getBySpecies(const std::string& sid) const "
/**
   * Get a Output from the ListOfInputs
   * based on the qualitativeSpecies to which it refers.
   *
   * @param sid a string representing the qualitativeSpecies attribute
   * of the Output to get.
   *
   * @return the first Output in this ListOfInputs
   * with the given qualitativeSpecies or null if no such
   * Output exists.
   *
   * @see get(long n)   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfOutputs::getBySpecies(const std::string& sid) "
/**
   * Get a Output from the ListOfInputs
   * based on the qualitativeSpecies to which it refers.
   *
   * @param sid a string representing the qualitativeSpecies attribute
   * of the Output to get.
   *
   * @return the first Output in this ListOfInputs
   * with the given qualitativeSpecies or null if no such
   * Output exists.
   *
   * @see get(long n)   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfOutputs::remove(unsigned int n) "
/**
   * Removes the nth Input from this ListOfInputs
   * and returns a pointer to it.
   *
   * The caller owns the returned item and is responsible for deleting it.
   *
   * @param n the index of the Output to remove.
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfOutputs::remove(const std::string& sid) "
/**
   * Removes the Output from this ListOfOutputs with the given identifier
   * and returns a pointer to it.
   *
   * The caller owns the returned item and is responsible for deleting it.
   * If none of the items in this list have the identifier @p sid, then
   * @c null is returned.
   *
   * @param sid the identifier of the Output to remove.
   *
   * @return the Output removed. As mentioned above, the caller owns the
   * returned item.
   */ public
";


%csmethodmodifiers ListOfOutputs::getElementName() const "
/**
   * Returns the XML element name of this object, which for ListOfOutputs, is
   * always @c \'listOfOutputs\'.
   *
   * @return the name of this element, i.e. @c \'listOfOutputs\'.
   */ public
";


%csmethodmodifiers ListOfOutputs::getItemTypeCode() const "
/**
   * Returns the libSBML type code for the SBML objects
   * contained in this ListOf object.
   * 
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for objects contained in this list:
   * @link libsbmlcs.libsbml.SBML_QUAL_OUTPUT SBML_QUAL_OUTPUT@endlink (default).
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers ListOfOutputs::createObject(XMLInputStream& stream) "
/**
   * Creates a new Output in this ListOfOutputs
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfOutputs::writeXMLNS(XMLOutputStream& stream) const "
/**
   * Write the namespace for the Qual package.
   */ /* libsbml-internal */ public
";


%typemap(csimports) QualitativeSpecies "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{qual}
 *
@htmlinclude pkg-marker-qual.html The QualitativeSpecies class for the Qualitative Models
 * package.
 *
 * Similarly to the Species in SBML, the components of qualitative models refer to pools of entities that are considered indistinguishable and are each located in a specific Compartment. However, here components are characterised by their qualitative influences rather than by taking part in reactions. Therefore, we define the QualitativeSpecies element to represent such pools of entities. 
 *
 * In a Petri net, qualitative species refer to the places of the model, while in a logical model, they refer to the variables of this model (i.e. nodes of the influence graph).
 *
 * A QualitativeSpecies describes a pool of indistinguishable entities in a Compartment. It is associated with a level (an integer representing e.g. an activity state, or a functional level of concentration, etc.) 
 */
"


%typemap(csimports) ListOfQualitativeSpecies "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{qual}
 *
@htmlinclude pkg-marker-qual.html Implementation of the %ListOfQualitativeSpecies construct
 * from the \'qual\' package.
 * 
 * The ListOfQualitativeSpecies is a container for the QualitativeSpecies elements of a Model.
 * 
 * *
 * 
 * The various ListOf___ classes in SBML are merely containers used for
 * organizing the main components of an SBML model.  All are derived from
 * the abstract class SBase, and inherit the various attributes and
 * subelements of SBase, such as \'metaid\' as and \'annotation\'.  The
 * ListOf___ classes do not add any attributes of their own.
 *
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 *
 * @htmlinclude listof-illustration.html
 *
 * Readers may wonder about the motivations for using the ListOf___
 * containers.  A simpler approach in XML might be to place the components
 * all directly at the top level of the model definition.  The choice made
 * in SBML is to group them within XML elements named after
 * ListOf<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from SBase means that software tools can add information @em about
 * the lists themselves into each list container\'s \'annotation\'.
 * 
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 *
 *
 *
 * @see QualitativeSpecies
 */
"


%csmethodmodifiers QualitativeSpecies::QualitativeSpecies(unsigned int level      = QualExtension::getDefaultLevel(), unsigned int version    = QualExtension::getDefaultVersion(), unsigned int pkgVersion = QualExtension::getDefaultPackageVersion()) "
/**
   * Creates a new QualitativeSpecies with the given level, version, and package version.
   *
   * @param level a long integer, the SBML Level to assign to this QualitativeSpecies
   *
   * @param version a long integer, the SBML Version to assign to this QualitativeSpecies
   *
   * @param pkgVersion a long integer, the SBML Qual Version to assign to this QualitativeSpecies
   */ public
";


%csmethodmodifiers QualitativeSpecies::QualitativeSpecies(QualPkgNamespaces* qualns) "
/**
   * Creates a new QualitativeSpecies with the given QualPkgNamespaces object.
   *
   * @param qualns the QualPkgNamespaces object
   */ public
";


%csmethodmodifiers QualitativeSpecies::QualitativeSpecies(const QualitativeSpecies& orig) "
/**
   * Copy constructor for QualitativeSpecies.
   *
   * @param orig the QualitativeSpecies instance to copy.
   */ public
";


%csmethodmodifiers QualitativeSpecies::clone() const "
/**
   * Creates and returns a deep copy of this QualitativeSpecies object.
   *
   * @return a (deep) copy of this QualitativeSpecies object.
   */ public
";


%csmethodmodifiers QualitativeSpecies::getId() const "
/**
   * Returns the value of the \'id\' attribute of this QualitativeSpecies.
   *
   * @return the value of the \'id\' attribute of this QualitativeSpecies as a string.
   */ public
";


%csmethodmodifiers QualitativeSpecies::getCompartment() const "
/**
   * Returns the value of the \'compartment\' attribute of this QualitativeSpecies.
   *
   * @return the value of the \'compartment\' attribute of this QualitativeSpecies as a string.
   */ public
";


%csmethodmodifiers QualitativeSpecies::getConstant() const "
/**
   * Returns the value of the \'constant\' attribute of this QualitativeSpecies.
   *
   * @return the value of the \'constant\' attribute of this QualitativeSpecies as a bool.
   */ public
";


%csmethodmodifiers QualitativeSpecies::getName() const "
/**
   * Returns the value of the \'name\' attribute of this QualitativeSpecies.
   *
   * @return the value of the \'name\' attribute of this QualitativeSpecies as a string.
   */ public
";


%csmethodmodifiers QualitativeSpecies::getInitialLevel() const "
/**
   * Returns the value of the \'initialLevel\' attribute of this QualitativeSpecies.
   *
   * @return the value of the \'initialLevel\' attribute of this QualitativeSpecies as a integer.
   */ public
";


%csmethodmodifiers QualitativeSpecies::getMaxLevel() const "
/**
   * Returns the value of the \'maxLevel\' attribute of this QualitativeSpecies.
   *
   * @return the value of the \'maxLevel\' attribute of this QualitativeSpecies as a integer.
   */ public
";


%csmethodmodifiers QualitativeSpecies::isSetId() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * QualitativeSpecies\'s \'id\' attribute has been set.
   *
   * @return @c true if this QualitativeSpecies\'s \'id\' attribute has been set,
   * otherwise @c false is returned.
   */ public
";


%csmethodmodifiers QualitativeSpecies::isSetCompartment() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * QualitativeSpecies\'s \'compartment\' attribute has been set.
   *
   * @return @c true if this QualitativeSpecies\'s \'compartment\' attribute has been set,
   * otherwise @c false is returned.
   */ public
";


%csmethodmodifiers QualitativeSpecies::isSetConstant() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * QualitativeSpecies\'s \'constant\' attribute has been set.
   *
   * @return @c true if this QualitativeSpecies\'s \'constant\' attribute has been set,
   * otherwise @c false is returned.
   */ public
";


%csmethodmodifiers QualitativeSpecies::isSetName() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * QualitativeSpecies\'s \'name\' attribute has been set.
   *
   * @return @c true if this QualitativeSpecies\'s \'name\' attribute has been set,
   * otherwise @c false is returned.
   */ public
";


%csmethodmodifiers QualitativeSpecies::isSetInitialLevel() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * QualitativeSpecies\'s \'initialLevel\' attribute has been set.
   *
   * @return @c true if this QualitativeSpecies\'s \'initialLevel\' attribute has been set,
   * otherwise @c false is returned.
   */ public
";


%csmethodmodifiers QualitativeSpecies::isSetMaxLevel() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * QualitativeSpecies\'s \'maxLevel\' attribute has been set.
   *
   * @return @c true if this QualitativeSpecies\'s \'maxLevel\' attribute has been set,
   * otherwise @c false is returned.
   */ public
";


%csmethodmodifiers QualitativeSpecies::setId(const std::string& id) "
/**
   * Sets the value of the \'id\' attribute of this QualitativeSpecies.
   *
   * @param id string value of the \'id\' attribute to be set
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers QualitativeSpecies::setCompartment(const std::string& compartment) "
/**
   * Sets the value of the \'compartment\' attribute of this QualitativeSpecies.
   *
   * @param compartment string value of the \'compartment\' attribute to be set
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers QualitativeSpecies::setConstant(bool constant) "
/**
   * Sets the value of the \'constant\' attribute of this QualitativeSpecies.
   *
   * @param constant bool value of the \'constant\' attribute to be set
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers QualitativeSpecies::setName(const std::string& name) "
/**
   * Sets the value of the \'name\' attribute of this QualitativeSpecies.
   *
   * @param name string value of the \'name\' attribute to be set
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers QualitativeSpecies::setInitialLevel(int initialLevel) "
/**
   * Sets the value of the \'initialLevel\' attribute of this QualitativeSpecies.
   *
   * @param initialLevel int value of the \'initialLevel\' attribute to be set
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers QualitativeSpecies::setMaxLevel(int maxLevel) "
/**
   * Sets the value of the \'maxLevel\' attribute of this QualitativeSpecies.
   *
   * @param maxLevel int value of the \'maxLevel\' attribute to be set
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers QualitativeSpecies::unsetId "
/**
   * Unsets the value of the \'id\' attribute of this QualitativeSpecies.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers QualitativeSpecies::unsetCompartment "
/**
   * Unsets the value of the \'compartment\' attribute of this QualitativeSpecies.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers QualitativeSpecies::unsetConstant "
/**
   * Unsets the value of the \'constant\' attribute of this QualitativeSpecies.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers QualitativeSpecies::unsetName "
/**
   * Unsets the value of the \'name\' attribute of this QualitativeSpecies.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers QualitativeSpecies::unsetInitialLevel "
/**
   * Unsets the value of the \'initialLevel\' attribute of this QualitativeSpecies.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers QualitativeSpecies::unsetMaxLevel "
/**
   * Unsets the value of the \'maxLevel\' attribute of this QualitativeSpecies.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers QualitativeSpecies::renameSIdRefs(const std::string& oldid, const std::string& newid) "
/**
   * Renames all the @c SIdRef attributes on this element, including any
   * found in MathML content (if such exists).
   *
   * This method works by looking at all attributes and (if appropriate)
   * mathematical formulas, comparing the identifiers to the value of @p
   * oldid.  If any matches are found, the matching identifiers are replaced
   * with @p newid.  The method does @em not descend into child elements.
   *
   * @param oldid the old identifier
   * @param newid the new identifier
   */ public
";


%csmethodmodifiers QualitativeSpecies::getElementName() const "
/**
   * Returns the XML element name of this object, which for QualitativeSpecies, is
   * always @c \'qualitativeSpecies\'.
   *
   * @return the name of this element, i.e. @c \'qualitativeSpecies\'.
   */ public
";


%csmethodmodifiers QualitativeSpecies::getTypeCode() const "
/**
   * Returns the libSBML type code of this object instance.
   *
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object:
   * @link libsbmlcs.libsbml.SBML_QUAL_QUALITATIVE_SPECIES SBML_QUAL_QUALITATIVE_SPECIES@endlink
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers QualitativeSpecies::hasRequiredAttributes() const "
/**
   * Predicate returning @c true if all the required attributes
   * for this QualitativeSpecies object have been set.
   *
   * @note The required attributes for a QualitativeSpecies object are:
   * @li \'id\'
   * @li \'compartment\'
   * @li \'constant\'
   *
   * @return a bool value indicating whether all the required
   * attributes for this object have been defined.
   */ public
";


%csmethodmodifiers QualitativeSpecies::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers QualitativeSpecies::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers QualitativeSpecies::setSBMLDocument(SBMLDocument* d) "
/**
   * Sets the parent SBMLDocument.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers QualitativeSpecies::enablePackageInternal(const std::string& pkgURI, const std::string& pkgPrefix, bool flag) "
/**
   * Enables/Disables the given package with this element.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers QualitativeSpecies::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Get the list of expected attributes for this element.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers QualitativeSpecies::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Read values from the given XMLAttributes set into their specific fields.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers QualitativeSpecies::writeAttributes(XMLOutputStream& stream) const "
/**
   * Write values of XMLAttributes to the output stream.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfQualitativeSpecies::ListOfQualitativeSpecies(unsigned int level      = QualExtension::getDefaultLevel(), unsigned int version    = QualExtension::getDefaultVersion(), unsigned int pkgVersion = QualExtension::getDefaultPackageVersion()) "
/**
   * Creates a new ListOfQualitativeSpecies with the given level, version, and package version.
   *
   * @param level a long integer, the SBML Level to assign to this ListOfQualitativeSpecies
   *
   * @param version a long integer, the SBML Version to assign to this ListOfQualitativeSpecies
   *
   * @param pkgVersion a long integer, the SBML Qual Version to assign to this ListOfQualitativeSpecies
   */ public
";


%csmethodmodifiers ListOfQualitativeSpecies::ListOfQualitativeSpecies(QualPkgNamespaces* qualns) "
/**
   * Creates a new ListOfQualitativeSpecies with the given QualPkgNamespaces object.
   *
   * @param qualns the QualPkgNamespaces object
   */ public
";


%csmethodmodifiers ListOfQualitativeSpecies::clone() const "
/**
   * Creates and returns a deep copy of this ListOfQualitativeSpecies object.
   *
   * @return a (deep) copy of this ListOfQualitativeSpecies object.
   */ public
";


%csmethodmodifiers ListOfQualitativeSpecies::get(unsigned int n) "
/**
   * Get a QualitativeSpecies from the ListOfQualitativeSpecies.
   *
   * @param n the index number of the QualitativeSpecies to get.
   *
   * @return the nth QualitativeSpecies in this ListOfQualitativeSpecies.
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfQualitativeSpecies::get "
/**
   * Get a QualitativeSpecies from the ListOfQualitativeSpecies.
   *
   * @param n the index number of the QualitativeSpecies to get.
   *
   * @return the nth QualitativeSpecies in this ListOfQualitativeSpecies.
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfQualitativeSpecies::get(const std::string& sid) "
/**
   * Get a QualitativeSpecies from the ListOfQualitativeSpecies
   * based on its identifier.
   *
   * @param sid a string representing the identifier
   * of the QualitativeSpecies to get.
   *
   * @return QualitativeSpecies in this ListOfQualitativeSpecies
   * with the given id or null if no such
   * QualitativeSpecies exists.
   *
   * @see get(long n)   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfQualitativeSpecies::get(const std::string& sid) const "
/**
   * Get a QualitativeSpecies from the ListOfQualitativeSpecies
   * based on its identifier.
   *
   * @param sid a string representing the identifier
   * of the QualitativeSpecies to get.
   *
   * @return QualitativeSpecies in this ListOfQualitativeSpecies
   * with the given id or null if no such
   * QualitativeSpecies exists.
   *
   * @see get(long n)   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfQualitativeSpecies::remove(unsigned int n) "
/**
   * Removes the nth QualitativeSpecies from this ListOfQualitativeSpecies
   * and returns a pointer to it.
   *
   * The caller owns the returned item and is responsible for deleting it.
   *
   * @param n the index of the QualitativeSpecies to remove.
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfQualitativeSpecies::remove(const std::string& sid) "
/**
   * Removes the QualitativeSpecies from this ListOfQualitativeSpecies with the given identifier
   * and returns a pointer to it.
   *
   * The caller owns the returned item and is responsible for deleting it.
   * If none of the items in this list have the identifier @p sid, then
   * @c null is returned.
   *
   * @param sid the identifier of the QualitativeSpecies to remove.
   *
   * @return the QualitativeSpecies removed. As mentioned above, the caller owns the
   * returned item.
   */ public
";


%csmethodmodifiers ListOfQualitativeSpecies::getElementName() const "
/**
   * Returns the XML element name of this object, which for ListOfQualitativeSpecies, is
   * always @c \'listOfQualitativeSpecies\'.
   *
   * @return the name of this element, i.e. @c \'listOfQualitativeSpecies\'.
   */ public
";


%csmethodmodifiers ListOfQualitativeSpecies::getItemTypeCode() const "
/**
   * Returns the libSBML type code for the SBML objects
   * contained in this ListOf object.
   * 
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for objects contained in this list:
   * @link libsbmlcs.libsbml.SBML_QUAL_QUALITATIVE_SPECIES SBML_QUAL_QUALITATIVE_SPECIES@endlink (default).
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers ListOfQualitativeSpecies::createObject(XMLInputStream& stream) "
/**
   * Creates a new QualitativeSpecies in this ListOfQualitativeSpecies
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfQualitativeSpecies::writeXMLNS(XMLOutputStream& stream) const "
/**
   * Write the namespace for the Qual package.
   */ /* libsbml-internal */ public
";


%typemap(csimports) Transition "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{qual}
 *
@htmlinclude pkg-marker-qual.html The Transition class for the Qualitative Models package.
 *
 * A Transition element contains at most one ListOfInputs and one
 * ListOfOutputs and exactly one ListOfFunctionTerms.
 *
 * A Transition defines the changes in level associated with the
 * QualitativeSpecies that occur when a Transition is enabled.
 * 
 * In logical models, a Transition is used to specify the logical rule
 * associated with a QualitativeSpecies (that appears as an Output of this
 * Transition). For example, the rule \'if A > 1 : B = 2\' would be
 * encapsulated as a Transition with QualitativeSpecies \'A\' as an Input and
 * \'B\' as an Output; the \'if A > 1\' rule being encode by the math element of
 * a FunctionTerm with the resultLevel attribute having a value \'2\'.
 *
 * In Petri net models, a Transition is interpreted, using the common Petri
 * net semantics, as events that might occur within the system causing tokens
 * to be moved.
 * 
 */
"


%typemap(csimports) ListOfTransitions "
 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{qual}
 *
@htmlinclude pkg-marker-qual.html Implementation of the %ListOfTransitions construct from
 * the \'qual\' package.
 * 
 * The ListOfTransitions is a container for the Transition elements of a Model.
 * 
 * *
 * 
 * The various ListOf___ classes in SBML are merely containers used for
 * organizing the main components of an SBML model.  All are derived from
 * the abstract class SBase, and inherit the various attributes and
 * subelements of SBase, such as \'metaid\' as and \'annotation\'.  The
 * ListOf___ classes do not add any attributes of their own.
 *
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 *
 * @htmlinclude listof-illustration.html
 *
 * Readers may wonder about the motivations for using the ListOf___
 * containers.  A simpler approach in XML might be to place the components
 * all directly at the top level of the model definition.  The choice made
 * in SBML is to group them within XML elements named after
 * ListOf<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from SBase means that software tools can add information @em about
 * the lists themselves into each list container\'s \'annotation\'.
 * 
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 *
 *
 *
 * @see Transition
 */
"


%csmethodmodifiers Transition::Transition(unsigned int level      = QualExtension::getDefaultLevel(), unsigned int version    = QualExtension::getDefaultVersion(), unsigned int pkgVersion = QualExtension::getDefaultPackageVersion()) "
/**
   * Creates a new Transition with the given level, version, and package version.
   *
   * @param level a long integer, the SBML Level to assign to this Transition
   *
   * @param version a long integer, the SBML Version to assign to this Transition
   *
   * @param pkgVersion a long integer, the SBML Qual Version to assign to this Transition
   */ public
";


%csmethodmodifiers Transition::Transition(QualPkgNamespaces* qualns) "
/**
   * Creates a new Transition with the given QualPkgNamespaces object.
   *
   * @param qualns the QualPkgNamespaces object
   */ public
";


%csmethodmodifiers Transition::Transition(const Transition& orig) "
/**
   * Copy constructor for Transition.
   *
   * @param orig the Transition instance to copy.
   */ public
";


%csmethodmodifiers Transition::clone() const "
/**
   * Creates and returns a deep copy of this Transition object.
   *
   * @return a (deep) copy of this Transition object.
   */ public
";


%csmethodmodifiers Transition::getElementBySId(const std::string& id) "
/**
   * Returns the first child element found that has the given @p id 
   * in the model-wide SId namespace, or @c null if no such object is found.
   *
   * @param id string representing the id of objects to find
   *
   * @return a pointer to the SBase element with the given @p id.
   */ public
";


%csmethodmodifiers Transition::getElementByMetaId(const std::string& metaid) "
/**
   * Returns the first child element it can find with the given @p metaid, 
   * or itself if it has the given @p metaid, or @c null if no such object 
   * is found.
   *
   * @param metaid string representing the metaid of objects to find
   *
   * @return a pointer to the SBase element with the given @p metaid.
   */ public
";


%csmethodmodifiers Transition::getId() const "
/**
   * Returns the value of the \'id\' attribute of this Transition.
   *
   * @return the value of the \'id\' attribute of this Transition as a string.
   */ public
";


%csmethodmodifiers Transition::getName() const "
/**
   * Returns the value of the \'name\' attribute of this Transition.
   *
   * @return the value of the \'name\' attribute of this Transition as a string.
   */ public
";


%csmethodmodifiers Transition::isSetId() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * Transition\'s \'id\' attribute has been set.
   *
   * @return @c true if this Transition\'s \'id\' attribute has been set,
   * otherwise @c false is returned.
   */ public
";


%csmethodmodifiers Transition::isSetName() const "
/**
   * Predicate returning @c true or @c false depending on whether this
   * Transition\'s \'name\' attribute has been set.
   *
   * @return @c true if this Transition\'s \'name\' attribute has been set,
   * otherwise @c false is returned.
   */ public
";


%csmethodmodifiers Transition::setId(const std::string& id) "
/**
   * Sets the value of the \'id\' attribute of this Transition.
   *
   * @param id string value of the \'id\' attribute to be set
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers Transition::setName(const std::string& name) "
/**
   * Sets the value of the \'name\' attribute of this Transition.
   *
   * @param name string value of the \'name\' attribute to be set
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers Transition::unsetId "
/**
   * Unsets the value of the \'id\' attribute of this Transition.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers Transition::unsetName "
/**
   * Unsets the value of the \'name\' attribute of this Transition.
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED @endlink
   */ public
";


%csmethodmodifiers Transition::getListOfInputs() const "
/**
   * Returns the  \'ListOfInputs\' in this Transition object.
   *
   * @return the \'ListOfInputs\' attribute of this Transition.
   */ public
";


%csmethodmodifiers Transition::getListOfInputs "
/**
   * Returns the  \'ListOfInputs\' in this Transition object.
   *
   * @return the \'ListOfInputs\' attribute of this Transition.
   */ public
";


%csmethodmodifiers Transition::getInput(unsigned int n) "
/**
   * Get a Input from the ListOfInputs.
   *
   * @param n the index number of the Input to get.
   *
   * @return the nth Input in the ListOfInputs within this Transition.
   *
   * @see getNumInputs()
   */ public
";


%csmethodmodifiers Transition::getInput "
/**
   * Get a Input from the ListOfInputs.
   *
   * @param n the index number of the Input to get.
   *
   * @return the nth Input in the ListOfInputs within this Transition.
   *
   * @see getNumInputs()
   */ public
";


%csmethodmodifiers Transition::getInput(const std::string& sid) "
/**
   * Get a Input from the ListOfInputs
   * based on its identifier.
   *
   * @param sid a string representing the identifier
   * of the Input to get.
   *
   * @return the Input in the ListOfInputs
   * with the given id or null if no such
   * Input exists.
   *
   * @see getInput(long n)
   * @see getNumInputs()
   */ public
";


%csmethodmodifiers Transition::getInput(const std::string& sid) const "
/**
   * Get a Input from the ListOfInputs
   * based on its identifier.
   *
   * @param sid a string representing the identifier
   * of the Input to get.
   *
   * @return the Input in the ListOfInputs
   * with the given id or null if no such
   * Input exists.
   *
   * @see getInput(long n)
   *
   * @see getNumInputs()
   */ public
";


%csmethodmodifiers Transition::getInputBySpecies(const std::string& sid) "
/**
   * Get a Input from the ListOfInputs
   * based on its qualitativeSpecies attribute.
   *
   * @param sid a string representing the qualitativeSpecies
   * of the Input to get.
   *
   * @return the first Input in the ListOfInputs
   * with the given qualitativeSpecies or null if no such
   * Input exists.
   *
   * @see getInput(long n)
   *
   * @see getNumInputs()
   */ public
";


%csmethodmodifiers Transition::getInputBySpecies(const std::string& sid) const "
/**
   * Get a Input from the ListOfInputs
   * based on its qualitativeSpecies attribute.
   *
   * @param sid a string representing the qualitativeSpecies
   * of the Input to get.
   *
   * @return the first Input in the ListOfInputs
   * with the given qualitativeSpecies or null if no such
   * Input exists.
   *
   * @see getInput(long n)
   *
   * @see getNumInputs()
   */ public
";


%csmethodmodifiers Transition::addInput(const Input* i) "
/**
   * Adds a copy the given \'Input\' to this Transition.
   *
   * @param i the Input object to add
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers Transition::getNumInputs() const "
/**
   * Get the number of Input objects in this Transition.
   *
   * @return the number of Input objects in this Transition
   */ public
";


%csmethodmodifiers Transition::createInput "
/**
   * Creates a new Input object, adds it to this Transitions
   * ListOfInputs and returns the Input object created. 
   *
   * @return a new Input object instance
   *
   * @see addInput(Input i)
   */ public
";


%csmethodmodifiers Transition::removeInput(unsigned int n) "
/**
   * Removes the nth Input from the ListOfInputs within this Transition.
   * and returns a pointer to it.
   *
   * The caller owns the returned item and is responsible for deleting it.
   *
   * @param n the index of the Input to remove.
   *
   * @see getNumInputs()
   */ public
";


%csmethodmodifiers Transition::removeInput(const std::string& sid) "
/**
   * Removes the Input with the given identifier from the ListOfInputs within this Transition
   * and returns a pointer to it.
   *
   * The caller owns the returned item and is responsible for deleting it.
   * If none of the items in this list have the identifier @p sid, then
   * @c null is returned.
   *
   * @param sid the identifier of the Input to remove.
   *
   * @return the Input removed. As mentioned above, the caller owns the
   * returned item.
   */ public
";


%csmethodmodifiers Transition::getListOfOutputs() const "
/**
   * Returns the  \'ListOfOutputs\' in this Transition object.
   *
   * @return the \'ListOfOutputs\' attribute of this Transition.
   */ public
";


%csmethodmodifiers Transition::getListOfOutputs "
/**
   * Returns the  \'ListOfOutputs\' in this Transition object.
   *
   * @return the \'ListOfOutputs\' attribute of this Transition.
   */ public
";


%csmethodmodifiers Transition::getOutput(unsigned int n) "
/**
   * Get a Output from the ListOfOutputs.
   *
   * @param n the index number of the Output to get.
   *
   * @return the nth Output in the ListOfOutputs within this Transition.
   *
   * @see getNumOutputs()
   */ public
";


%csmethodmodifiers Transition::getOutput "
/**
   * Get a Output from the ListOfOutputs.
   *
   * @param n the index number of the Output to get.
   *
   * @return the nth Output in the ListOfOutputs within this Transition.
   *
   * @see getNumOutputs()
   */ public
";


%csmethodmodifiers Transition::getOutput(const std::string& sid) "
/**
   * Get a Output from the ListOfOutputs
   * based on its identifier.
   *
   * @param sid a string representing the identifier
   * of the Output to get.
   *
   * @return the Output in the ListOfOutputs
   * with the given id or null if no such
   * Output exists.
   *
   * @see getOutput(long n)
   *
   * @see getNumOutputs()
   */ public
";


%csmethodmodifiers Transition::getOutput(const std::string& sid) const "
/**
   * Get a Output from the ListOfOutputs
   * based on its identifier.
   *
   * @param sid a string representing the identifier
   * of the Output to get.
   *
   * @return the Output in the ListOfOutputs
   * with the given id or null if no such
   * Output exists.
   *
   * @see getOutput(long n)
   *
   * @see getNumOutputs()
   */ public
";


%csmethodmodifiers Transition::getOutputBySpecies(const std::string& sid) "
/**
   * Get a Output from the ListOfOutputs
   * based on its qualitativeSpecies attribute.
   *
   * @param sid a string representing the qualitativeSpecies
   * of the Output to get.
   *
   * @return the first Output in the ListOfOutputs
   * with the given qualitativeSpecies or null if no such
   * Output exists.
   *
   * @see getOutput(long n)
   *
   * @see getNumOutputs()
   */ public
";


%csmethodmodifiers Transition::getOutputBySpecies(const std::string& sid) const "
/**
   * Get a Output from the ListOfOutputs
   * based on its qualitativeSpecies attribute.
   *
   * @param sid a string representing the qualitativeSpecies
   * of the Output to get.
   *
   * @return the first Output in the ListOfOutputs
   * with the given qualitativeSpecies or null if no such
   * Output exists.
   *
   * @see getOutput(long n)
   *
   * @see getNumOutputs()
   */ public
";


%csmethodmodifiers Transition::addOutput(const Output* o) "
/**
   * Adds a copy the given \'Output\' to this Transition.
   *
   * @param o the Output object to add
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers Transition::getNumOutputs() const "
/**
   * Get the number of Output objects in this Transition.
   *
   * @return the number of Output objects in this Transition
   */ public
";


%csmethodmodifiers Transition::createOutput "
/**
   * Creates a new Output object, adds it to this Transitions
   * ListOfOutputs and returns the Output object created. 
   *
   * @return a new Output object instance
   *
   * @see addOutput(Output o)
   */ public
";


%csmethodmodifiers Transition::removeOutput(unsigned int n) "
/**
   * Removes the nth Output from the ListOfOutputs within this Transition.
   * and returns a pointer to it.
   *
   * The caller owns the returned item and is responsible for deleting it.
   *
   * @param n the index of the Output to remove.
   *
   * @see getNumOutputs()
   */ public
";


%csmethodmodifiers Transition::removeOutput(const std::string& sid) "
/**
   * Removes the Output with the given identifier from the ListOfOutputs within this Transition
   * and returns a pointer to it.
   *
   * The caller owns the returned item and is responsible for deleting it.
   * If none of the items in this list have the identifier @p sid, then
   * @c null is returned.
   *
   * @param sid the identifier of the Output to remove.
   *
   * @return the Output removed. As mentioned above, the caller owns the
   * returned item.
   */ public
";


%csmethodmodifiers Transition::getListOfFunctionTerms() const "
/**
   * Returns the  \'ListOfFunctionTerms\' in this Transition object.
   *
   * @return the \'ListOfFunctionTerms\' attribute of this Transition.
   */ public
";


%csmethodmodifiers Transition::getListOfFunctionTerms "
/**
   * Returns the  \'ListOfFunctionTerms\' in this Transition object.
   *
   * @return the \'ListOfFunctionTerms\' attribute of this Transition.
   */ public
";


%csmethodmodifiers Transition::getFunctionTerm(unsigned int n) "
/**
   * Get a FunctionTerm from the ListOfFunctionTerms.
   *
   * @param n the index number of the FunctionTerm to get.
   *
   * @return the nth FunctionTerm in the ListOfFunctionTerms within this Transition.
   *
   * @see getNumFunctionTerms()
   */ public
";


%csmethodmodifiers Transition::getFunctionTerm "
/**
   * Get a FunctionTerm from the ListOfFunctionTerms.
   *
   * @param n the index number of the FunctionTerm to get.
   *
   * @return the nth FunctionTerm in the ListOfFunctionTerms within this Transition.
   *
   * @see getNumFunctionTerms()
   */ public
";


%csmethodmodifiers Transition::getFunctionTerm(const std::string& sid) "
/**
   * Get a FunctionTerm from the ListOfFunctionTerms
   * based on its identifier.
   *
   * @param sid a string representing the identifier
   * of the FunctionTerm to get.
   *
   * @return the FunctionTerm in the ListOfFunctionTerms
   * with the given id or null if no such
   * FunctionTerm exists.
   *
   * @see getFunctionTerm(long n)
   *
   * @see getNumFunctionTerms()
   */ public
";


%csmethodmodifiers Transition::getFunctionTerm(const std::string& sid) const "
/**
   * Get a FunctionTerm from the ListOfFunctionTerms
   * based on its identifier.
   *
   * @param sid a string representing the identifier
   * of the FunctionTerm to get.
   *
   * @return the FunctionTerm in the ListOfFunctionTerms
   * with the given id or null if no such
   * FunctionTerm exists.
   *
   * @see getFunctionTerm(long n)
   *
   * @see getNumFunctionTerms()
   */ public
";


%csmethodmodifiers Transition::addFunctionTerm(const FunctionTerm* ft) "
/**
   * Adds a copy the given \'FunctionTerm\' to this Transition.
   *
   * @param ft the FunctionTerm object to add
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers Transition::getNumFunctionTerms() const "
/**
   * Get the number of FunctionTerm objects in this Transition.
   *
   * @return the number of FunctionTerm objects in this Transition
   */ public
";


%csmethodmodifiers Transition::createFunctionTerm "
/**
   * Creates a new FunctionTerm object, adds it to this Transitions
   * ListOfFunctionTerms and returns the FunctionTerm object created. 
   *
   * @return a new FunctionTerm object instance
   *
   * @see addFunctionTerm(FunctionTerm ft)
   */ public
";


%csmethodmodifiers Transition::removeFunctionTerm(unsigned int n) "
/**
   * Removes the nth FunctionTerm from the ListOfFunctionTerms within this Transition.
   * and returns a pointer to it.
   *
   * The caller owns the returned item and is responsible for deleting it.
   *
   * @param n the index of the FunctionTerm to remove.
   *
   * @see getNumFunctionTerms()
   */ public
";


%csmethodmodifiers Transition::removeFunctionTerm(const std::string& sid) "
/**
   * Removes the FunctionTerm with the given identifier from the ListOfFunctionTerms within this Transition
   * and returns a pointer to it.
   *
   * The caller owns the returned item and is responsible for deleting it.
   * If none of the items in this list have the identifier @p sid, then
   * @c null is returned.
   *
   * @param sid the identifier of the FunctionTerm to remove.
   *
   * @return the FunctionTerm removed. As mentioned above, the caller owns the
   * returned item.
   */ public
";


%csmethodmodifiers Transition::createDefaultTerm "
/**
   * Creates a new DefaultTerm object, adds it to this Transitions
   * ListOfFunctionTerms and returns the DefaultTerm object created. 
   *
   * @return a new DefaultTerm object instance
   *
   * @see setDefaultTerm(DefaultTerm ft)
   */ public
";


%csmethodmodifiers Transition::setDefaultTerm(const DefaultTerm* dt) "
/**
   * Sets the given \'DefaultTerm\' to this Transition.
   *
   * @param dt the DefaultTerm object to add
   *
   * @return integer value indicating success/failure of the
   * operation. The possible return values are:
   * @li @link libsbmlcs.libsbml.LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS @endlink
   * @li @link libsbmlcs.libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE @endlink
   */ public
";


%csmethodmodifiers Transition::isSetDefaultTerm() const "
/**
   * Predicate returning @c true if the defaultTerm
   * for this Transition object has been set.
   *
   * @return a bool value indicating whether the defaultTerm
   * child for this object has been defined.
   */ public
";


%csmethodmodifiers Transition::getDefaultTerm "
/**
   * Get the DefaultTerm from the ListOfFunctionTerms.
   *
   * @return the DefaultTerm in the ListOfFunctionTerms within this Transition, or null if no such value is set.
   */ public
";


%csmethodmodifiers Transition::getDefaultTerm() const "
/**
   * Get the DefaultTerm from the ListOfFunctionTerms.
   *
   * @return the DefaultTerm in the ListOfFunctionTerms within this Transition, or null if no such value is set.
   */ public
";


%csmethodmodifiers Transition::getAllElements(ElementFilter * filter = NULL) "
/**
   * Returns a List of all child SBase objects, including those nested to an
   * arbitary depth.
   *
   * @return a List* of pointers to all child objects.
   */ public
";


%csmethodmodifiers Transition::getElementName() const "
/**
   * Returns the XML element name of this object, which for Transition, is
   * always @c \'transition\'.
   *
   * @return the name of this element, i.e. @c \'transition\'.
   */ public
";


%csmethodmodifiers Transition::getTypeCode() const "
/**
   * Returns the libSBML type code of this object instance.
   *
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for this object:
   * @link libsbmlcs.libsbml.SBML_QUAL_TRANSITION SBML_QUAL_TRANSITION@endlink
   *
   * *
 * @warning <span class=\'warning\'>The specific integer values of the possible
 * type codes may be reused by different Level&nbsp;3 package plug-ins.
 * Thus, to identifiy the correct code, <strong>it is necessary to invoke
 * both getTypeCode() and getPackageName()</strong>.</span>
 *
 *
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers Transition::hasRequiredAttributes() const "
/**
   * Predicate returning @c true if all the required attributes
   * for this Transition object have been set.
   *
   * @note The required attributes for a Transition object are:
   * @li \'output\'
   *
   * @return a bool value indicating whether all the required
   * attributes for this object have been defined.
   */ public
";


%csmethodmodifiers Transition::hasRequiredElements() const "
/**
   * Predicate returning @c true if all the required attributes
   * for this Transition object have been set.
   *
   * @note The required elements for a Transition object are:
   * @li \'output\'
   *
   * @return a bool value indicating whether all the required
   * elements for this object have been defined.
   */ public
";


%csmethodmodifiers Transition::writeElements(XMLOutputStream& stream) const "
/**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Transition::accept(SBMLVisitor& v) const "
/**
   * Accepts the given SBMLVisitor.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Transition::setSBMLDocument(SBMLDocument* d) "
/**
   * Sets the parent SBMLDocument.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Transition::connectToChild "
/**
   * Connects to child elements.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Transition::enablePackageInternal(const std::string& pkgURI, const std::string& pkgPrefix, bool flag) "
/**
   * Enables/Disables the given package with this element.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Transition::createObject(XMLInputStream& stream) "
/**
   * Create and return an SBML object of this class, if present.
   *
   * @return the SBML object corresponding to next XMLToken in the
   * XMLInputStream or @c null if the token was not recognized.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Transition::addExpectedAttributes(ExpectedAttributes& attributes) "
/**
   * Get the list of expected attributes for this element.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Transition::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
/**
   * Read values from the given XMLAttributes set into their specific fields.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers Transition::writeAttributes(XMLOutputStream& stream) const "
/**
   * Write values of XMLAttributes to the output stream.
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfTransitions::ListOfTransitions(unsigned int level      = QualExtension::getDefaultLevel(), unsigned int version    = QualExtension::getDefaultVersion(), unsigned int pkgVersion = QualExtension::getDefaultPackageVersion()) "
/**
   * Creates a new ListOfTransitions with the given level, version, and package version.
   *
   * @param level a long integer, the SBML Level to assign to this ListOfTransitions
   *
   * @param version a long integer, the SBML Version to assign to this ListOfTransitions
   *
   * @param pkgVersion a long integer, the SBML Qual Version to assign to this ListOfTransitions
   */ public
";


%csmethodmodifiers ListOfTransitions::ListOfTransitions(QualPkgNamespaces* qualns) "
/**
   * Creates a new ListOfTransitions with the given QualPkgNamespaces object.
   *
   * @param qualns the QualPkgNamespaces object
   */ public
";


%csmethodmodifiers ListOfTransitions::clone() const "
/**
   * Creates and returns a deep copy of this ListOfTransitions object.
   *
   * @return a (deep) copy of this ListOfTransitions object.
   */ public
";


%csmethodmodifiers ListOfTransitions::get(unsigned int n) "
/**
   * Get a Transition from the ListOfTransitions.
   *
   * @param n the index number of the Transition to get.
   *
   * @return the nth Transition in this ListOfTransitions.
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfTransitions::get "
/**
   * Get a Transition from the ListOfTransitions.
   *
   * @param n the index number of the Transition to get.
   *
   * @return the nth Transition in this ListOfTransitions.
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfTransitions::get(const std::string& sid) "
/**
   * Get a Transition from the ListOfTransitions
   * based on its identifier.
   *
   * @param sid a string representing the identifier
   * of the Transition to get.
   *
   * @return Transition in this ListOfTransitions
   * with the given id or null if no such
   * Transition exists.
   *
   * @see get(long n)   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfTransitions::get(const std::string& sid) const "
/**
   * Get a Transition from the ListOfTransitions
   * based on its identifier.
   *
   * @param sid a string representing the identifier
   * of the Transition to get.
   *
   * @return Transition in this ListOfTransitions
   * with the given id or null if no such
   * Transition exists.
   *
   * @see get(long n)   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfTransitions::remove(unsigned int n) "
/**
   * Removes the nth Transition from this ListOfTransitions
   * and returns a pointer to it.
   *
   * The caller owns the returned item and is responsible for deleting it.
   *
   * @param n the index of the Transition to remove.
   *
   * @see size()
   */ public
";


%csmethodmodifiers ListOfTransitions::remove(const std::string& sid) "
/**
   * Removes the Transition from this ListOfTransitions with the given identifier
   * and returns a pointer to it.
   *
   * The caller owns the returned item and is responsible for deleting it.
   * If none of the items in this list have the identifier @p sid, then
   * @c null is returned.
   *
   * @param sid the identifier of the Transition to remove.
   *
   * @return the Transition removed. As mentioned above, the caller owns the
   * returned item.
   */ public
";


%csmethodmodifiers ListOfTransitions::getElementName() const "
/**
   * Returns the XML element name of this object, which for ListOfTransitions, is
   * always @c \'listOfTransitions\'.
   *
   * @return the name of this element, i.e. @c \'listOfTransitions\'.
   */ public
";


%csmethodmodifiers ListOfTransitions::getItemTypeCode() const "
/**
   * Returns the libSBML type code for the SBML objects
   * contained in this ListOf object.
   * 
   * *
 *  
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters &ldquo;<code>SBML_</code>&rdquo;. 
 * @if clike The set of possible type codes for core elements is defined in
 * the enumeration #SBMLTypeCode_t, and in addition, libSBML plug-ins for
 * SBML Level&nbsp;3 packages define their own extra enumerations of type
 * codes (e.g., #SBMLLayoutTypeCode_t for the Level&nbsp;3 Layout
 * package).@endif@if java In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.  @endif@if python In the Python language
 * interface for libSBML, the type codes are defined as static integer
 * constants in the interface class @link libsbml@endlink.@endif@if csharp In
 * the C# language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class
 * @link libsbmlcs.libsbml@endlink.@endif  Note that different Level&nbsp;3 
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the <code>getPackageName()</code>
 * method on the object.
 * 
 *
   *
   * @return the SBML type code for objects contained in this list:
   * @link libsbmlcs.libsbml.SBML_QUAL_TRANSITION SBML_QUAL_TRANSITION@endlink (default).
   *
   * @see getElementName()
   * @see getPackageName()
   */ public
";


%csmethodmodifiers ListOfTransitions::createObject(XMLInputStream& stream) "
/**
   * Creates a new Transition in this ListOfTransitions
   */ /* libsbml-internal */ public
";


%csmethodmodifiers ListOfTransitions::writeXMLNS(XMLOutputStream& stream) const "
/**
   * Write the namespace for the Qual package.
   */ /* libsbml-internal */ public
";


